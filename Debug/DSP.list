
DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001047c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001798  08010750  08010750  00020750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011ee8  08011ee8  00021ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011eec  08011eec  00021eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000270  24000000  08011ef0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002794  24000270  08012160  00030270  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24002a04  08012160  00032a04  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d325  00000000  00000000  0003029e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000406e  00000000  00000000  0004d5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000015d8  00000000  00000000  00051638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001410  00000000  00000000  00052c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000354fb  00000000  00000000  00054020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e53b  00000000  00000000  0008951b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014027b  00000000  00000000  000a7a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001e7cd1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000060c8  00000000  00000000  001e7d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000270 	.word	0x24000270
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010734 	.word	0x08010734

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000274 	.word	0x24000274
 800030c:	08010734 	.word	0x08010734

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <crash>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void crash(int code){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	if(code % 2 == 1){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	bfb8      	it	lt
 800069a:	425b      	neglt	r3, r3
 800069c:	2b01      	cmp	r3, #1
 800069e:	d104      	bne.n	80006aa <crash+0x22>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2108      	movs	r1, #8
 80006a4:	4808      	ldr	r0, [pc, #32]	; (80006c8 <crash+0x40>)
 80006a6:	f005 f981 	bl	80059ac <HAL_GPIO_WritePin>
	}
	if((code >> 1) % 2 == 1){
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	105b      	asrs	r3, r3, #1
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	bfb8      	it	lt
 80006b6:	425b      	neglt	r3, r3
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d104      	bne.n	80006c6 <crash+0x3e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	2110      	movs	r1, #16
 80006c0:	4801      	ldr	r0, [pc, #4]	; (80006c8 <crash+0x40>)
 80006c2:	f005 f973 	bl	80059ac <HAL_GPIO_WritePin>
	}
	while(1);
 80006c6:	e7fe      	b.n	80006c6 <crash+0x3e>
 80006c8:	58021000 	.word	0x58021000

080006cc <checkForNull>:
}

void checkForNull(void* ptr){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	if(ptr == NULL){
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <checkForNull+0x14>
		crash(3);
 80006da:	2003      	movs	r0, #3
 80006dc:	f7ff ffd4 	bl	8000688 <crash>
	}
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <getReverbAttenuation>:

float getReverbAttenuation(int samples, float time){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	ed87 0a00 	vstr	s0, [r7]
	float t = (float) samples / sampleRate;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	ee07 3a90 	vmov	s15, r3
 80006fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006fe:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000750 <getReverbAttenuation+0x68>
 8000702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000706:	edc7 7a03 	vstr	s15, [r7, #12]
	return 1 / (exp(t / time * log(1000)));
 800070a:	edd7 6a03 	vldr	s13, [r7, #12]
 800070e:	ed97 7a00 	vldr	s14, [r7]
 8000712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000716:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800071a:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000748 <getReverbAttenuation+0x60>
 800071e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000722:	eeb0 0b47 	vmov.f64	d0, d7
 8000726:	f00f fc3f 	bl	800ffa8 <exp>
 800072a:	eeb0 6b40 	vmov.f64	d6, d0
 800072e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000732:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000736:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800073a:	eeb0 0a67 	vmov.f32	s0, s15
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	f3af 8000 	nop.w
 8000748:	998fffa0 	.word	0x998fffa0
 800074c:	401ba18a 	.word	0x401ba18a
 8000750:	473a7f00 	.word	0x473a7f00

08000754 <loadEffects>:

void loadEffects(){
 8000754:	b580      	push	{r7, lr}
 8000756:	b0bc      	sub	sp, #240	; 0xf0
 8000758:	af00      	add	r7, sp, #0
	unsigned int i = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint8_t effectId;
	unsigned int paramsLen;
	int channel = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	memcpy(effectsData, effectsRawData, usbBufferLen);
 8000766:	4adc      	ldr	r2, [pc, #880]	; (8000ad8 <loadEffects+0x384>)
 8000768:	4bdc      	ldr	r3, [pc, #880]	; (8000adc <loadEffects+0x388>)
 800076a:	4610      	mov	r0, r2
 800076c:	4619      	mov	r1, r3
 800076e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000772:	461a      	mov	r2, r3
 8000774:	f00f faee 	bl	800fd54 <memcpy>

	while(1){
		effectId = *(effectsData + i);
 8000778:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800077c:	4ad6      	ldr	r2, [pc, #856]	; (8000ad8 <loadEffects+0x384>)
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		i++;
 8000786:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800078a:	3301      	adds	r3, #1
 800078c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		if(effectId == 0xff){
 8000790:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000794:	2bff      	cmp	r3, #255	; 0xff
 8000796:	d108      	bne.n	80007aa <loadEffects+0x56>
			if(channel == 1){
 8000798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800079c:	2b01      	cmp	r3, #1
 800079e:	f040 831c 	bne.w	8000dda <loadEffects+0x686>
				channel = 2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				continue;
 80007a8:	e316      	b.n	8000dd8 <loadEffects+0x684>
			}else{
				break;
			}
		}

		if(effectId == 0){
 80007aa:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d103      	bne.n	80007ba <loadEffects+0x66>
			paramsLen = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80007b8:	e307      	b.n	8000dca <loadEffects+0x676>

		}else if(effectId == 1){
 80007ba:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d10e      	bne.n	80007e0 <loadEffects+0x8c>
			LOAD_EFFECT(dist)
 80007c2:	2304      	movs	r3, #4
 80007c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80007c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80007cc:	4ac2      	ldr	r2, [pc, #776]	; (8000ad8 <loadEffects+0x384>)
 80007ce:	1899      	adds	r1, r3, r2
 80007d0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80007d4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80007d8:	4618      	mov	r0, r3
 80007da:	f00f fabb 	bl	800fd54 <memcpy>
 80007de:	e2f4      	b.n	8000dca <loadEffects+0x676>

		}else if(effectId == 2){
 80007e0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d10e      	bne.n	8000806 <loadEffects+0xb2>
			LOAD_EFFECT(softdist)
 80007e8:	2304      	movs	r3, #4
 80007ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80007ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80007f2:	4ab9      	ldr	r2, [pc, #740]	; (8000ad8 <loadEffects+0x384>)
 80007f4:	1899      	adds	r1, r3, r2
 80007f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007fa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80007fe:	4618      	mov	r0, r3
 8000800:	f00f faa8 	bl	800fd54 <memcpy>
 8000804:	e2e1      	b.n	8000dca <loadEffects+0x676>

		}else if(effectId == 3){
 8000806:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800080a:	2b03      	cmp	r3, #3
 800080c:	d151      	bne.n	80008b2 <loadEffects+0x15e>
			LOAD_EFFECT(vibrato)
 800080e:	2310      	movs	r3, #16
 8000810:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000814:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000818:	4aaf      	ldr	r2, [pc, #700]	; (8000ad8 <loadEffects+0x384>)
 800081a:	1899      	adds	r1, r3, r2
 800081c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000820:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000824:	4618      	mov	r0, r3
 8000826:	f00f fa95 	bl	800fd54 <memcpy>
			vibratoParams.frequency = TWO_PI * vibratoParams.frequency / sampleRate;
 800082a:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800082e:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8000ae0 <loadEffects+0x38c>
 8000832:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000836:	eddf 6aab 	vldr	s13, [pc, #684]	; 8000ae4 <loadEffects+0x390>
 800083a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800083e:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
			vibratoParams.strength = vibratoParams.strength / vibratoParams.frequency;
 8000842:	edd7 6a34 	vldr	s13, [r7, #208]	; 0xd0
 8000846:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800084a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800084e:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
			vibratoParams.previousInputsLen = ceil(2 * vibratoParams.strength) + 3;
 8000852:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8000856:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800085a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800085e:	eeb0 0b47 	vmov.f64	d0, d7
 8000862:	f00f fcc1 	bl	80101e8 <ceil>
 8000866:	eeb0 7b40 	vmov.f64	d7, d0
 800086a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800086e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000872:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000876:	ee17 3a90 	vmov	r3, s15
 800087a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			vibratoParams.previousInputsPtr = (float*) calloc(vibratoParams.previousInputsLen, sizeof(float));
 800087e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000882:	2104      	movs	r1, #4
 8000884:	4618      	mov	r0, r3
 8000886:	f00f fa2b 	bl	800fce0 <calloc>
 800088a:	4603      	mov	r3, r0
 800088c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			checkForNull(vibratoParams.previousInputsPtr);
 8000890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff19 	bl	80006cc <checkForNull>
			SAVE_EFFECT(vibrato)
 800089a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800089e:	4a8e      	ldr	r2, [pc, #568]	; (8000ad8 <loadEffects+0x384>)
 80008a0:	4413      	add	r3, r2
 80008a2:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80008a6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80008aa:	4618      	mov	r0, r3
 80008ac:	f00f fa52 	bl	800fd54 <memcpy>
 80008b0:	e28b      	b.n	8000dca <loadEffects+0x676>

		}else if(effectId == 4){
 80008b2:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	d151      	bne.n	800095e <loadEffects+0x20a>
			LOAD_EFFECT(chorus)
 80008ba:	2310      	movs	r3, #16
 80008bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80008c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80008c4:	4a84      	ldr	r2, [pc, #528]	; (8000ad8 <loadEffects+0x384>)
 80008c6:	1899      	adds	r1, r3, r2
 80008c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80008cc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80008d0:	4618      	mov	r0, r3
 80008d2:	f00f fa3f 	bl	800fd54 <memcpy>
			chorusParams.frequency = TWO_PI * chorusParams.frequency / sampleRate;
 80008d6:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80008da:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8000ae0 <loadEffects+0x38c>
 80008de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008e2:	eddf 6a80 	vldr	s13, [pc, #512]	; 8000ae4 <loadEffects+0x390>
 80008e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ea:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
			chorusParams.strength = chorusParams.strength / chorusParams.frequency;
 80008ee:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 80008f2:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80008f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008fa:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
			chorusParams.previousInputsLen = ceil(2 * chorusParams.strength) + 3;
 80008fe:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8000902:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000906:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800090a:	eeb0 0b47 	vmov.f64	d0, d7
 800090e:	f00f fc6b 	bl	80101e8 <ceil>
 8000912:	eeb0 7b40 	vmov.f64	d7, d0
 8000916:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800091a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800091e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000922:	ee17 3a90 	vmov	r3, s15
 8000926:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			chorusParams.previousInputsPtr = (float*) calloc(chorusParams.previousInputsLen, sizeof(float));
 800092a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800092e:	2104      	movs	r1, #4
 8000930:	4618      	mov	r0, r3
 8000932:	f00f f9d5 	bl	800fce0 <calloc>
 8000936:	4603      	mov	r3, r0
 8000938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			checkForNull(chorusParams.previousInputsPtr);
 800093c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fec3 	bl	80006cc <checkForNull>
			SAVE_EFFECT(chorus)
 8000946:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800094a:	4a63      	ldr	r2, [pc, #396]	; (8000ad8 <loadEffects+0x384>)
 800094c:	4413      	add	r3, r2
 800094e:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000952:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000956:	4618      	mov	r0, r3
 8000958:	f00f f9fc 	bl	800fd54 <memcpy>
 800095c:	e235      	b.n	8000dca <loadEffects+0x676>

		}else if(effectId == 5){
 800095e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000962:	2b05      	cmp	r3, #5
 8000964:	d13b      	bne.n	80009de <loadEffects+0x28a>
			LOAD_EFFECT(echo)
 8000966:	2310      	movs	r3, #16
 8000968:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800096c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000970:	4a59      	ldr	r2, [pc, #356]	; (8000ad8 <loadEffects+0x384>)
 8000972:	1899      	adds	r1, r3, r2
 8000974:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000978:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800097c:	4618      	mov	r0, r3
 800097e:	f00f f9e9 	bl	800fd54 <memcpy>
			echoParams.previousOutputsLen = ceil(echoParams.delay * sampleRate);
 8000982:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8000986:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000ae4 <loadEffects+0x390>
 800098a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800098e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000992:	eeb0 0b47 	vmov.f64	d0, d7
 8000996:	f00f fc27 	bl	80101e8 <ceil>
 800099a:	eeb0 7b40 	vmov.f64	d7, d0
 800099e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009a2:	ee17 3a90 	vmov	r3, s15
 80009a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			echoParams.previousOutputsPtr = (float*) calloc(echoParams.previousOutputsLen, sizeof(float));
 80009aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80009ae:	2104      	movs	r1, #4
 80009b0:	4618      	mov	r0, r3
 80009b2:	f00f f995 	bl	800fce0 <calloc>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			checkForNull(echoParams.previousOutputsPtr);
 80009bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fe83 	bl	80006cc <checkForNull>
			SAVE_EFFECT(echo)
 80009c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80009ca:	4a43      	ldr	r2, [pc, #268]	; (8000ad8 <loadEffects+0x384>)
 80009cc:	4413      	add	r3, r2
 80009ce:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80009d2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80009d6:	4618      	mov	r0, r3
 80009d8:	f00f f9bc 	bl	800fd54 <memcpy>
 80009dc:	e1f5      	b.n	8000dca <loadEffects+0x676>

		}else if(effectId == 6){
 80009de:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d139      	bne.n	8000a5a <loadEffects+0x306>
			LOAD_EFFECT(lowpass)
 80009e6:	2308      	movs	r3, #8
 80009e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80009ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80009f0:	4a39      	ldr	r2, [pc, #228]	; (8000ad8 <loadEffects+0x384>)
 80009f2:	1899      	adds	r1, r3, r2
 80009f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009f8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80009fc:	4618      	mov	r0, r3
 80009fe:	f00f f9a9 	bl	800fd54 <memcpy>
			lowpassParams.filterConst = dt / (dt + 1 / (TWO_PI * lowpassParams.filterConst));
 8000a02:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000ae8 <loadEffects+0x394>
 8000a06:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8000a0a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000ae0 <loadEffects+0x38c>
 8000a0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a12:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000a16:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8000a1a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000ae8 <loadEffects+0x394>
 8000a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a26:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
			lowpassParams.lastOutputPtr = (float*) calloc(1, sizeof(float));
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f00f f957 	bl	800fce0 <calloc>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			checkForNull(lowpassParams.lastOutputPtr);
 8000a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fe45 	bl	80006cc <checkForNull>
			SAVE_EFFECT(lowpass)
 8000a42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000a46:	4a24      	ldr	r2, [pc, #144]	; (8000ad8 <loadEffects+0x384>)
 8000a48:	4413      	add	r3, r2
 8000a4a:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8000a4e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00f f97e 	bl	800fd54 <memcpy>
 8000a58:	e1b7      	b.n	8000dca <loadEffects+0x676>

		}else if(effectId == 7){
 8000a5a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000a5e:	2b07      	cmp	r3, #7
 8000a60:	d144      	bne.n	8000aec <loadEffects+0x398>
			LOAD_EFFECT(highpass)
 8000a62:	2308      	movs	r3, #8
 8000a64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000a68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <loadEffects+0x384>)
 8000a6e:	1899      	adds	r1, r3, r2
 8000a70:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a74:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f00f f96b 	bl	800fd54 <memcpy>
			highpassParams.filterConst = dt / (dt + 1 / (TWO_PI * highpassParams.filterConst));
 8000a7e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000ae8 <loadEffects+0x394>
 8000a82:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8000a86:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000ae0 <loadEffects+0x38c>
 8000a8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a8e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000a92:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8000a96:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000ae8 <loadEffects+0x394>
 8000a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aa2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
			highpassParams.lastSamplesPtr = (float*) calloc(2, sizeof(float));
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f00f f919 	bl	800fce0 <calloc>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			checkForNull(highpassParams.lastSamplesPtr);
 8000ab4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fe07 	bl	80006cc <checkForNull>
			SAVE_EFFECT(highpass)
 8000abe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <loadEffects+0x384>)
 8000ac4:	4413      	add	r3, r2
 8000ac6:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8000aca:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f00f f940 	bl	800fd54 <memcpy>
 8000ad4:	e179      	b.n	8000dca <loadEffects+0x676>
 8000ad6:	bf00      	nop
 8000ad8:	240007d0 	.word	0x240007d0
 8000adc:	2400000c 	.word	0x2400000c
 8000ae0:	40c90fdb 	.word	0x40c90fdb
 8000ae4:	473a7f00 	.word	0x473a7f00
 8000ae8:	37afb413 	.word	0x37afb413

		}else if(effectId == 8){
 8000aec:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	d125      	bne.n	8000b40 <loadEffects+0x3ec>
			LOAD_EFFECT(tremolo)
 8000af4:	2308      	movs	r3, #8
 8000af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000afa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000afe:	4ab9      	ldr	r2, [pc, #740]	; (8000de4 <loadEffects+0x690>)
 8000b00:	1899      	adds	r1, r3, r2
 8000b02:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b06:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f00f f922 	bl	800fd54 <memcpy>
			tremoloParams.frequency = TWO_PI * tremoloParams.frequency / sampleRate;
 8000b10:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000b14:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8000de8 <loadEffects+0x694>
 8000b18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b1c:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8000dec <loadEffects+0x698>
 8000b20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b24:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
			SAVE_EFFECT(tremolo)
 8000b28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b2c:	4aad      	ldr	r2, [pc, #692]	; (8000de4 <loadEffects+0x690>)
 8000b2e:	4413      	add	r3, r2
 8000b30:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000b34:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00f f90b 	bl	800fd54 <memcpy>
 8000b3e:	e144      	b.n	8000dca <loadEffects+0x676>

		}else if(effectId == 9){
 8000b40:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000b44:	2b09      	cmp	r3, #9
 8000b46:	d14d      	bne.n	8000be4 <loadEffects+0x490>
			LOAD_EFFECT(rotary)
 8000b48:	2314      	movs	r3, #20
 8000b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000b4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b52:	4aa4      	ldr	r2, [pc, #656]	; (8000de4 <loadEffects+0x690>)
 8000b54:	1899      	adds	r1, r3, r2
 8000b56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000b5a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00f f8f8 	bl	800fd54 <memcpy>
			rotaryParams.frequency = TWO_PI * rotaryParams.frequency / sampleRate;
 8000b64:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8000b68:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8000de8 <loadEffects+0x694>
 8000b6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b70:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8000dec <loadEffects+0x698>
 8000b74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b78:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
			rotaryParams.vibratoStrength = rotaryParams.vibratoStrength / rotaryParams.frequency;
 8000b7c:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8000b80:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8000b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b88:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
			rotaryParams.previousInputsLen = ceil(2 * rotaryParams.vibratoStrength) + 3;
 8000b8c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8000b90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000b94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b98:	eeb0 0b47 	vmov.f64	d0, d7
 8000b9c:	f00f fb24 	bl	80101e8 <ceil>
 8000ba0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ba4:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8000ba8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000bb0:	ee17 3a90 	vmov	r3, s15
 8000bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
			rotaryParams.previousInputsPtr = (float*) calloc(rotaryParams.previousInputsLen, sizeof(float));
 8000bb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bb8:	2104      	movs	r1, #4
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f00f f890 	bl	800fce0 <calloc>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	67bb      	str	r3, [r7, #120]	; 0x78
			checkForNull(rotaryParams.previousInputsPtr);
 8000bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fd80 	bl	80006cc <checkForNull>
			SAVE_EFFECT(rotary)
 8000bcc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000bd0:	4a84      	ldr	r2, [pc, #528]	; (8000de4 <loadEffects+0x690>)
 8000bd2:	4413      	add	r3, r2
 8000bd4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000bd8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f00f f8b9 	bl	800fd54 <memcpy>
 8000be2:	e0f2      	b.n	8000dca <loadEffects+0x676>

		}else if(effectId == 10){
 8000be4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000be8:	2b0a      	cmp	r3, #10
 8000bea:	f040 809d 	bne.w	8000d28 <loadEffects+0x5d4>
			LOAD_EFFECT(reverb)
 8000bee:	2368      	movs	r3, #104	; 0x68
 8000bf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000bf4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000bf8:	4a7a      	ldr	r2, [pc, #488]	; (8000de4 <loadEffects+0x690>)
 8000bfa:	1899      	adds	r1, r3, r2
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00f f8a6 	bl	800fd54 <memcpy>
			reverbParams.filtersParams[0].attenuation = getReverbAttenuation(9601, reverbParams.reverbTime);
 8000c08:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c10:	f242 5081 	movw	r0, #9601	; 0x2581
 8000c14:	f7ff fd68 	bl	80006e8 <getReverbAttenuation>
 8000c18:	eef0 7a40 	vmov.f32	s15, s0
 8000c1c:	edc7 7a03 	vstr	s15, [r7, #12]
			reverbParams.filtersParams[0].previousOutputsLen = 9601;
 8000c20:	f242 5381 	movw	r3, #9601	; 0x2581
 8000c24:	607b      	str	r3, [r7, #4]
			reverbParams.filtersParams[1].attenuation = getReverbAttenuation(9999, reverbParams.reverbTime);
 8000c26:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c2e:	f242 700f 	movw	r0, #9999	; 0x270f
 8000c32:	f7ff fd59 	bl	80006e8 <getReverbAttenuation>
 8000c36:	eef0 7a40 	vmov.f32	s15, s0
 8000c3a:	edc7 7a07 	vstr	s15, [r7, #28]
			reverbParams.filtersParams[1].previousOutputsLen = 9999;
 8000c3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8000c42:	617b      	str	r3, [r7, #20]
			reverbParams.filtersParams[2].attenuation = getReverbAttenuation(10799, reverbParams.reverbTime);
 8000c44:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000c48:	eeb0 0a67 	vmov.f32	s0, s15
 8000c4c:	f642 202f 	movw	r0, #10799	; 0x2a2f
 8000c50:	f7ff fd4a 	bl	80006e8 <getReverbAttenuation>
 8000c54:	eef0 7a40 	vmov.f32	s15, s0
 8000c58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			reverbParams.filtersParams[2].previousOutputsLen = 10799;
 8000c5c:	f642 232f 	movw	r3, #10799	; 0x2a2f
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
			reverbParams.filtersParams[3].attenuation = getReverbAttenuation(11599, reverbParams.reverbTime);
 8000c62:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000c66:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6a:	f642 504f 	movw	r0, #11599	; 0x2d4f
 8000c6e:	f7ff fd3b 	bl	80006e8 <getReverbAttenuation>
 8000c72:	eef0 7a40 	vmov.f32	s15, s0
 8000c76:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			reverbParams.filtersParams[3].previousOutputsLen = 11599;
 8000c7a:	f642 534f 	movw	r3, #11599	; 0x2d4f
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
			reverbParams.filtersParams[4].attenuation = getReverbAttenuation(11599, reverbParams.reverbTime);
 8000c80:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000c84:	eeb0 0a67 	vmov.f32	s0, s15
 8000c88:	f642 504f 	movw	r0, #11599	; 0x2d4f
 8000c8c:	f7ff fd2c 	bl	80006e8 <getReverbAttenuation>
 8000c90:	eef0 7a40 	vmov.f32	s15, s0
 8000c94:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			reverbParams.filtersParams[4].previousOutputsLen = 7001;
 8000c98:	f641 3359 	movw	r3, #7001	; 0x1b59
 8000c9c:	647b      	str	r3, [r7, #68]	; 0x44
			reverbParams.filtersParams[5].attenuation = getReverbAttenuation(11599, reverbParams.reverbTime);
 8000c9e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca6:	f642 504f 	movw	r0, #11599	; 0x2d4f
 8000caa:	f7ff fd1d 	bl	80006e8 <getReverbAttenuation>
 8000cae:	eef0 7a40 	vmov.f32	s15, s0
 8000cb2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			reverbParams.filtersParams[5].previousOutputsLen = 2333;
 8000cb6:	f640 131d 	movw	r3, #2333	; 0x91d
 8000cba:	657b      	str	r3, [r7, #84]	; 0x54
			for(int i = 0; i < 6; i++){
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000cc2:	e022      	b.n	8000d0a <loadEffects+0x5b6>
				reverbParams.filtersParams[i].previousOutputsPtr = (float*) calloc(reverbParams.filtersParams[i].previousOutputsLen, sizeof(float));
 8000cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	33f0      	adds	r3, #240	; 0xf0
 8000ccc:	443b      	add	r3, r7
 8000cce:	3bec      	subs	r3, #236	; 0xec
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f00f f803 	bl	800fce0 <calloc>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	33f0      	adds	r3, #240	; 0xf0
 8000ce6:	443b      	add	r3, r7
 8000ce8:	3bf0      	subs	r3, #240	; 0xf0
 8000cea:	601a      	str	r2, [r3, #0]
				checkForNull(reverbParams.filtersParams[i].previousOutputsPtr);
 8000cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	33f0      	adds	r3, #240	; 0xf0
 8000cf4:	443b      	add	r3, r7
 8000cf6:	3bf0      	subs	r3, #240	; 0xf0
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fce6 	bl	80006cc <checkForNull>
			for(int i = 0; i < 6; i++){
 8000d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000d04:	3301      	adds	r3, #1
 8000d06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000d0e:	2b05      	cmp	r3, #5
 8000d10:	ddd8      	ble.n	8000cc4 <loadEffects+0x570>
			}
			SAVE_EFFECT(reverb)
 8000d12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d16:	4a33      	ldr	r2, [pc, #204]	; (8000de4 <loadEffects+0x690>)
 8000d18:	4413      	add	r3, r2
 8000d1a:	4639      	mov	r1, r7
 8000d1c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00f f817 	bl	800fd54 <memcpy>
 8000d26:	e050      	b.n	8000dca <loadEffects+0x676>

		}else if(effectId == 11){
 8000d28:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000d2c:	2b0b      	cmp	r3, #11
 8000d2e:	d10e      	bne.n	8000d4e <loadEffects+0x5fa>
			LOAD_EFFECT(gain)
 8000d30:	2304      	movs	r3, #4
 8000d32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000d36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d3a:	4a2a      	ldr	r2, [pc, #168]	; (8000de4 <loadEffects+0x690>)
 8000d3c:	1899      	adds	r1, r3, r2
 8000d3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d42:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000d46:	4618      	mov	r0, r3
 8000d48:	f00f f804 	bl	800fd54 <memcpy>
 8000d4c:	e03d      	b.n	8000dca <loadEffects+0x676>

		}else if(effectId == 12){
 8000d4e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000d52:	2b0c      	cmp	r3, #12
 8000d54:	d123      	bne.n	8000d9e <loadEffects+0x64a>
			LOAD_EFFECT(noiseSuppr)
 8000d56:	2308      	movs	r3, #8
 8000d58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000d5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d60:	4a20      	ldr	r2, [pc, #128]	; (8000de4 <loadEffects+0x690>)
 8000d62:	1899      	adds	r1, r3, r2
 8000d64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d68:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f00e fff1 	bl	800fd54 <memcpy>
			noiseSupprParams.counter = (int*) calloc(1, sizeof(int));
 8000d72:	2104      	movs	r1, #4
 8000d74:	2001      	movs	r0, #1
 8000d76:	f00e ffb3 	bl	800fce0 <calloc>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
			checkForNull(noiseSupprParams.counter);
 8000d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fca3 	bl	80006cc <checkForNull>
			SAVE_EFFECT(noiseSuppr)
 8000d86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d8a:	4a16      	ldr	r2, [pc, #88]	; (8000de4 <loadEffects+0x690>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000d92:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000d96:	4618      	mov	r0, r3
 8000d98:	f00e ffdc 	bl	800fd54 <memcpy>
 8000d9c:	e015      	b.n	8000dca <loadEffects+0x676>

		}else if(effectId == 13){
 8000d9e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000da2:	2b0d      	cmp	r3, #13
 8000da4:	d10e      	bne.n	8000dc4 <loadEffects+0x670>
			LOAD_EFFECT(fuzz)
 8000da6:	2301      	movs	r3, #1
 8000da8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000dac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000db0:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <loadEffects+0x690>)
 8000db2:	1899      	adds	r1, r3, r2
 8000db4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000db8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f00e ffc9 	bl	800fd54 <memcpy>
 8000dc2:	e002      	b.n	8000dca <loadEffects+0x676>

		}else{
			crash(1);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fc5f 	bl	8000688 <crash>
		}
		i += paramsLen;
 8000dca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000dce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000dd2:	4413      	add	r3, r2
 8000dd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		effectId = *(effectsData + i);
 8000dd8:	e4ce      	b.n	8000778 <loadEffects+0x24>
				break;
 8000dda:	bf00      	nop
	}
}
 8000ddc:	bf00      	nop
 8000dde:	37f0      	adds	r7, #240	; 0xf0
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	240007d0 	.word	0x240007d0
 8000de8:	40c90fdb 	.word	0x40c90fdb
 8000dec:	473a7f00 	.word	0x473a7f00

08000df0 <unloadEffects>:

void unloadEffects(){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0bc      	sub	sp, #240	; 0xf0
 8000df4:	af00      	add	r7, sp, #0
	int i = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	int effectId;
	int paramsLen;
	int channel = 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	while(1){
		effectId = *(effectsData + i);
 8000e02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e06:	4aae      	ldr	r2, [pc, #696]	; (80010c0 <unloadEffects+0x2d0>)
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		i++;
 8000e10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e14:	3301      	adds	r3, #1
 8000e16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		if(effectId == 0xff){
 8000e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e1e:	2bff      	cmp	r3, #255	; 0xff
 8000e20:	d108      	bne.n	8000e34 <unloadEffects+0x44>
			if(channel == 1){
 8000e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	f040 8145 	bne.w	80010b6 <unloadEffects+0x2c6>
				channel = 2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				continue;
 8000e32:	e13f      	b.n	80010b4 <unloadEffects+0x2c4>
			}else{
				break;
			}
		}

		if(effectId == 0){
 8000e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d103      	bne.n	8000e44 <unloadEffects+0x54>
			paramsLen = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e42:	e130      	b.n	80010a6 <unloadEffects+0x2b6>

		}else if(effectId == 1){
 8000e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d10e      	bne.n	8000e6a <unloadEffects+0x7a>
			LOAD_EFFECT(dist)
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e56:	4a9a      	ldr	r2, [pc, #616]	; (80010c0 <unloadEffects+0x2d0>)
 8000e58:	1899      	adds	r1, r3, r2
 8000e5a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000e5e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00e ff76 	bl	800fd54 <memcpy>
 8000e68:	e11d      	b.n	80010a6 <unloadEffects+0x2b6>

		}else if(effectId == 2){
 8000e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d10e      	bne.n	8000e90 <unloadEffects+0xa0>
			LOAD_EFFECT(softdist)
 8000e72:	2304      	movs	r3, #4
 8000e74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e7c:	4a90      	ldr	r2, [pc, #576]	; (80010c0 <unloadEffects+0x2d0>)
 8000e7e:	1899      	adds	r1, r3, r2
 8000e80:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000e84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f00e ff63 	bl	800fd54 <memcpy>
 8000e8e:	e10a      	b.n	80010a6 <unloadEffects+0x2b6>

		}else if(effectId == 3){
 8000e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d113      	bne.n	8000ec0 <unloadEffects+0xd0>
			LOAD_EFFECT(vibrato)
 8000e98:	2310      	movs	r3, #16
 8000e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ea2:	4a87      	ldr	r2, [pc, #540]	; (80010c0 <unloadEffects+0x2d0>)
 8000ea4:	1899      	adds	r1, r3, r2
 8000ea6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000eaa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f00e ff50 	bl	800fd54 <memcpy>
			free(vibratoParams.previousInputsPtr);
 8000eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f00e ff43 	bl	800fd44 <free>
 8000ebe:	e0f2      	b.n	80010a6 <unloadEffects+0x2b6>

		}else if(effectId == 4){
 8000ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d113      	bne.n	8000ef0 <unloadEffects+0x100>
			LOAD_EFFECT(chorus)
 8000ec8:	2310      	movs	r3, #16
 8000eca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000ece:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ed2:	4a7b      	ldr	r2, [pc, #492]	; (80010c0 <unloadEffects+0x2d0>)
 8000ed4:	1899      	adds	r1, r3, r2
 8000ed6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000eda:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f00e ff38 	bl	800fd54 <memcpy>
			free(chorusParams.previousInputsPtr);
 8000ee4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f00e ff2b 	bl	800fd44 <free>
 8000eee:	e0da      	b.n	80010a6 <unloadEffects+0x2b6>

		}else if(effectId == 5){
 8000ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d113      	bne.n	8000f20 <unloadEffects+0x130>
			LOAD_EFFECT(echo)
 8000ef8:	2310      	movs	r3, #16
 8000efa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000efe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f02:	4a6f      	ldr	r2, [pc, #444]	; (80010c0 <unloadEffects+0x2d0>)
 8000f04:	1899      	adds	r1, r3, r2
 8000f06:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000f0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f00e ff20 	bl	800fd54 <memcpy>
			free(echoParams.previousOutputsPtr);
 8000f14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f00e ff13 	bl	800fd44 <free>
 8000f1e:	e0c2      	b.n	80010a6 <unloadEffects+0x2b6>

		}else if(effectId == 6){
 8000f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f24:	2b06      	cmp	r3, #6
 8000f26:	d113      	bne.n	8000f50 <unloadEffects+0x160>
			LOAD_EFFECT(lowpass)
 8000f28:	2308      	movs	r3, #8
 8000f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000f2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f32:	4a63      	ldr	r2, [pc, #396]	; (80010c0 <unloadEffects+0x2d0>)
 8000f34:	1899      	adds	r1, r3, r2
 8000f36:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000f3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f00e ff08 	bl	800fd54 <memcpy>
			free(lowpassParams.lastOutputPtr);
 8000f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f00e fefb 	bl	800fd44 <free>
 8000f4e:	e0aa      	b.n	80010a6 <unloadEffects+0x2b6>

		}else if(effectId == 7){
 8000f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f54:	2b07      	cmp	r3, #7
 8000f56:	d113      	bne.n	8000f80 <unloadEffects+0x190>
			LOAD_EFFECT(highpass)
 8000f58:	2308      	movs	r3, #8
 8000f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000f5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f62:	4a57      	ldr	r2, [pc, #348]	; (80010c0 <unloadEffects+0x2d0>)
 8000f64:	1899      	adds	r1, r3, r2
 8000f66:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000f6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f00e fef0 	bl	800fd54 <memcpy>
			free(highpassParams.lastSamplesPtr);
 8000f74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f00e fee3 	bl	800fd44 <free>
 8000f7e:	e092      	b.n	80010a6 <unloadEffects+0x2b6>

		}else if(effectId == 8){
 8000f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d10e      	bne.n	8000fa6 <unloadEffects+0x1b6>
			LOAD_EFFECT(tremolo)
 8000f88:	2308      	movs	r3, #8
 8000f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000f8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f92:	4a4b      	ldr	r2, [pc, #300]	; (80010c0 <unloadEffects+0x2d0>)
 8000f94:	1899      	adds	r1, r3, r2
 8000f96:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000f9a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00e fed8 	bl	800fd54 <memcpy>
 8000fa4:	e07f      	b.n	80010a6 <unloadEffects+0x2b6>

		}else if(effectId == 9){
 8000fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000faa:	2b09      	cmp	r3, #9
 8000fac:	d112      	bne.n	8000fd4 <unloadEffects+0x1e4>
			LOAD_EFFECT(rotary)
 8000fae:	2314      	movs	r3, #20
 8000fb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000fb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000fb8:	4a41      	ldr	r2, [pc, #260]	; (80010c0 <unloadEffects+0x2d0>)
 8000fba:	1899      	adds	r1, r3, r2
 8000fbc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000fc0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00e fec5 	bl	800fd54 <memcpy>
			free(rotaryParams.previousInputsPtr);
 8000fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00e feb9 	bl	800fd44 <free>
 8000fd2:	e068      	b.n	80010a6 <unloadEffects+0x2b6>

		}else if(effectId == 10){
 8000fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fd8:	2b0a      	cmp	r3, #10
 8000fda:	d124      	bne.n	8001026 <unloadEffects+0x236>
			LOAD_EFFECT(reverb)
 8000fdc:	2368      	movs	r3, #104	; 0x68
 8000fde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000fe2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000fe6:	4a36      	ldr	r2, [pc, #216]	; (80010c0 <unloadEffects+0x2d0>)
 8000fe8:	1899      	adds	r1, r3, r2
 8000fea:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00e feaf 	bl	800fd54 <memcpy>
			for(int i = 0; i < 6; i++){
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000ffc:	e00e      	b.n	800101c <unloadEffects+0x22c>
				free(reverbParams.filtersParams[i].previousOutputsPtr);
 8000ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	33f0      	adds	r3, #240	; 0xf0
 8001006:	443b      	add	r3, r7
 8001008:	3bf0      	subs	r3, #240	; 0xf0
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f00e fe99 	bl	800fd44 <free>
			for(int i = 0; i < 6; i++){
 8001012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001016:	3301      	adds	r3, #1
 8001018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800101c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001020:	2b05      	cmp	r3, #5
 8001022:	ddec      	ble.n	8000ffe <unloadEffects+0x20e>
 8001024:	e03f      	b.n	80010a6 <unloadEffects+0x2b6>
			}

		}else if(effectId == 11){
 8001026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800102a:	2b0b      	cmp	r3, #11
 800102c:	d10e      	bne.n	800104c <unloadEffects+0x25c>
			LOAD_EFFECT(gain)
 800102e:	2304      	movs	r3, #4
 8001030:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001034:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <unloadEffects+0x2d0>)
 800103a:	1899      	adds	r1, r3, r2
 800103c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001040:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001044:	4618      	mov	r0, r3
 8001046:	f00e fe85 	bl	800fd54 <memcpy>
 800104a:	e02c      	b.n	80010a6 <unloadEffects+0x2b6>

		}else if(effectId == 12){
 800104c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001050:	2b0c      	cmp	r3, #12
 8001052:	d112      	bne.n	800107a <unloadEffects+0x28a>
			LOAD_EFFECT(noiseSuppr)
 8001054:	2308      	movs	r3, #8
 8001056:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800105a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800105e:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <unloadEffects+0x2d0>)
 8001060:	1899      	adds	r1, r3, r2
 8001062:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001066:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800106a:	4618      	mov	r0, r3
 800106c:	f00e fe72 	bl	800fd54 <memcpy>
			free(noiseSupprParams.counter);
 8001070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001072:	4618      	mov	r0, r3
 8001074:	f00e fe66 	bl	800fd44 <free>
 8001078:	e015      	b.n	80010a6 <unloadEffects+0x2b6>

		}else if(effectId == 13){
 800107a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800107e:	2b0d      	cmp	r3, #13
 8001080:	d10e      	bne.n	80010a0 <unloadEffects+0x2b0>
			LOAD_EFFECT(fuzz)
 8001082:	2301      	movs	r3, #1
 8001084:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001088:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <unloadEffects+0x2d0>)
 800108e:	1899      	adds	r1, r3, r2
 8001090:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001094:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001098:	4618      	mov	r0, r3
 800109a:	f00e fe5b 	bl	800fd54 <memcpy>
 800109e:	e002      	b.n	80010a6 <unloadEffects+0x2b6>

		}else{
			crash(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff faf1 	bl	8000688 <crash>
		}
		i += paramsLen;
 80010a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80010aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80010ae:	4413      	add	r3, r2
 80010b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		effectId = *(effectsData + i);
 80010b4:	e6a5      	b.n	8000e02 <unloadEffects+0x12>
				break;
 80010b6:	bf00      	nop
	}
}
 80010b8:	bf00      	nop
 80010ba:	37f0      	adds	r7, #240	; 0xf0
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	240007d0 	.word	0x240007d0

080010c4 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef * hi2s1){
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	  for(int i = 0; i < 32; i++){
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	e00a      	b.n	80010e8 <HAL_I2S_RxHalfCpltCallback+0x24>
		  process[i] = inData[i];
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010da:	490a      	ldr	r1, [pc, #40]	; (8001104 <HAL_I2S_RxHalfCpltCallback+0x40>)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i = 0; i < 32; i++){
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b1f      	cmp	r3, #31
 80010ec:	ddf1      	ble.n	80010d2 <HAL_I2S_RxHalfCpltCallback+0xe>
	  }
	inReady = 1;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_I2S_RxHalfCpltCallback+0x44>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	240004cc 	.word	0x240004cc
 8001104:	240006cc 	.word	0x240006cc
 8001108:	240007cc 	.word	0x240007cc

0800110c <HAL_I2S_TxHalfCpltCallback>:
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef * hi2s2){
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	  for(int i = 0; i < 32; i++){
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e00a      	b.n	8001130 <HAL_I2S_TxHalfCpltCallback+0x24>
		  outData[i] = output[i];
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_I2S_TxHalfCpltCallback+0x3c>)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001122:	490a      	ldr	r1, [pc, #40]	; (800114c <HAL_I2S_TxHalfCpltCallback+0x40>)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i = 0; i < 32; i++){
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3301      	adds	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b1f      	cmp	r3, #31
 8001134:	ddf1      	ble.n	800111a <HAL_I2S_TxHalfCpltCallback+0xe>
	  }
	outReady = 1;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_I2S_TxHalfCpltCallback+0x44>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	2400074c 	.word	0x2400074c
 800114c:	240005cc 	.word	0x240005cc
 8001150:	240007cd 	.word	0x240007cd

08001154 <HAL_I2S_RxCpltCallback>:
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef * hi2s1){
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	  for(int i = 32; i < 64; i++){
 800115c:	2320      	movs	r3, #32
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e00b      	b.n	800117a <HAL_I2S_RxCpltCallback+0x26>
		  process[i-32] = inData[i];
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3b20      	subs	r3, #32
 8001166:	490b      	ldr	r1, [pc, #44]	; (8001194 <HAL_I2S_RxCpltCallback+0x40>)
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800116e:	490a      	ldr	r1, [pc, #40]	; (8001198 <HAL_I2S_RxCpltCallback+0x44>)
 8001170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i = 32; i < 64; i++){
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3301      	adds	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b3f      	cmp	r3, #63	; 0x3f
 800117e:	ddf0      	ble.n	8001162 <HAL_I2S_RxCpltCallback+0xe>
	  }
	inReady = 1;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_I2S_RxCpltCallback+0x48>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	240004cc 	.word	0x240004cc
 8001198:	240006cc 	.word	0x240006cc
 800119c:	240007cc 	.word	0x240007cc

080011a0 <HAL_I2S_TxCpltCallback>:
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef * hi2s2){
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	  for(int i = 32; i < 64; i++){
 80011a8:	2320      	movs	r3, #32
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e00b      	b.n	80011c6 <HAL_I2S_TxCpltCallback+0x26>
		  outData[i] = output[i-32];
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3b20      	subs	r3, #32
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <HAL_I2S_TxCpltCallback+0x40>)
 80011b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011b8:	490a      	ldr	r1, [pc, #40]	; (80011e4 <HAL_I2S_TxCpltCallback+0x44>)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i = 32; i < 64; i++){
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3301      	adds	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2b3f      	cmp	r3, #63	; 0x3f
 80011ca:	ddf0      	ble.n	80011ae <HAL_I2S_TxCpltCallback+0xe>
	  }
	outReady = 1;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_I2S_TxCpltCallback+0x48>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
}
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	2400074c 	.word	0x2400074c
 80011e4:	240005cc 	.word	0x240005cc
 80011e8:	240007cd 	.word	0x240007cd

080011ec <usbReceiveHandle>:

void usbReceiveHandle(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af04      	add	r7, sp, #16
	if(usbBytesReady >= 256){
 80011f2:	4b2a      	ldr	r3, [pc, #168]	; (800129c <usbReceiveHandle+0xb0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2bff      	cmp	r3, #255	; 0xff
 80011f8:	d94b      	bls.n	8001292 <usbReceiveHandle+0xa6>
		if(usbBytesReady > 256){
 80011fa:	4b28      	ldr	r3, [pc, #160]	; (800129c <usbReceiveHandle+0xb0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001202:	d902      	bls.n	800120a <usbReceiveHandle+0x1e>
			crash(2);
 8001204:	2002      	movs	r0, #2
 8001206:	f7ff fa3f 	bl	8000688 <crash>
		}
		usbBytesReady = 0;
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <usbReceiveHandle+0xb0>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]

		if(usbDataBuffer[0] == 0xFE){
 8001210:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <usbReceiveHandle+0xb4>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2bfe      	cmp	r3, #254	; 0xfe
 8001216:	d113      	bne.n	8001240 <usbReceiveHandle+0x54>
			for(int i = 0; i < usbBufferLen; i += 64){
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	e00c      	b.n	8001238 <usbReceiveHandle+0x4c>
				CDC_Transmit_HS(effectsRawData + i, 64);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a20      	ldr	r2, [pc, #128]	; (80012a4 <usbReceiveHandle+0xb8>)
 8001222:	4413      	add	r3, r2
 8001224:	2140      	movs	r1, #64	; 0x40
 8001226:	4618      	mov	r0, r3
 8001228:	f00e f906 	bl	800f438 <CDC_Transmit_HS>
				HAL_Delay(5);
 800122c:	2005      	movs	r0, #5
 800122e:	f002 f80b 	bl	8003248 <HAL_Delay>
			for(int i = 0; i < usbBufferLen; i += 64){
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3340      	adds	r3, #64	; 0x40
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2bff      	cmp	r3, #255	; 0xff
 800123c:	ddef      	ble.n	800121e <usbReceiveHandle+0x32>
				HAL_Delay(5);
			}
			loadEffects();
		}
	}
}
 800123e:	e028      	b.n	8001292 <usbReceiveHandle+0xa6>
			unloadEffects();
 8001240:	f7ff fdd6 	bl	8000df0 <unloadEffects>
			memcpy(effectsRawData, usbDataBuffer, usbBufferLen);
 8001244:	4a17      	ldr	r2, [pc, #92]	; (80012a4 <usbReceiveHandle+0xb8>)
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <usbReceiveHandle+0xb4>)
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001250:	461a      	mov	r2, r3
 8001252:	f00e fd7f 	bl	800fd54 <memcpy>
			for(int i = 0; i < usbBufferLen; i += 32){
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	e015      	b.n	8001288 <usbReceiveHandle+0x9c>
				HAL_I2C_Mem_Write(&hi2c1, 0xA0, i, 2, effectsRawData + i, 32, HAL_MAX_DELAY);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b29a      	uxth	r2, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	4910      	ldr	r1, [pc, #64]	; (80012a4 <usbReceiveHandle+0xb8>)
 8001264:	440b      	add	r3, r1
 8001266:	f04f 31ff 	mov.w	r1, #4294967295
 800126a:	9102      	str	r1, [sp, #8]
 800126c:	2120      	movs	r1, #32
 800126e:	9101      	str	r1, [sp, #4]
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2302      	movs	r3, #2
 8001274:	21a0      	movs	r1, #160	; 0xa0
 8001276:	480c      	ldr	r0, [pc, #48]	; (80012a8 <usbReceiveHandle+0xbc>)
 8001278:	f004 fd36 	bl	8005ce8 <HAL_I2C_Mem_Write>
				HAL_Delay(5);
 800127c:	2005      	movs	r0, #5
 800127e:	f001 ffe3 	bl	8003248 <HAL_Delay>
			for(int i = 0; i < usbBufferLen; i += 32){
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3320      	adds	r3, #32
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	dde6      	ble.n	800125c <usbReceiveHandle+0x70>
			loadEffects();
 800128e:	f7ff fa61 	bl	8000754 <loadEffects>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240009d0 	.word	0x240009d0
 80012a0:	240008d0 	.word	0x240008d0
 80012a4:	2400000c 	.word	0x2400000c
 80012a8:	2400028c 	.word	0x2400028c

080012ac <loadSample>:

float loadSample(int i){
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	int32_t temp = process[i] << 8;
 80012b4:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <loadSample+0x48>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	60fb      	str	r3, [r7, #12]
	float d = (float) temp;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ca:	edc7 7a02 	vstr	s15, [r7, #8]
	d = d / 2147483392;
 80012ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d2:	eddf 6a09 	vldr	s13, [pc, #36]	; 80012f8 <loadSample+0x4c>
 80012d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012da:	edc7 7a02 	vstr	s15, [r7, #8]
	return d;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	ee07 3a90 	vmov	s15, r3
}
 80012e4:	eeb0 0a67 	vmov.f32	s0, s15
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	240006cc 	.word	0x240006cc
 80012f8:	4efffffe 	.word	0x4efffffe

080012fc <saveSample>:

void saveSample(float d, int i){
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	ed87 0a01 	vstr	s0, [r7, #4]
 8001306:	6038      	str	r0, [r7, #0]
	d = d * 2147483392;
 8001308:	edd7 7a01 	vldr	s15, [r7, #4]
 800130c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001344 <saveSample+0x48>
 8001310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001314:	edc7 7a01 	vstr	s15, [r7, #4]
	int32_t temp = (int)d;
 8001318:	edd7 7a01 	vldr	s15, [r7, #4]
 800131c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001320:	ee17 3a90 	vmov	r3, s15
 8001324:	60fb      	str	r3, [r7, #12]
	temp = temp >> 8;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	121b      	asrs	r3, r3, #8
 800132a:	60fb      	str	r3, [r7, #12]
	output[i] = temp;
 800132c:	4906      	ldr	r1, [pc, #24]	; (8001348 <saveSample+0x4c>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	4efffffe 	.word	0x4efffffe
 8001348:	2400074c 	.word	0x2400074c

0800134c <dist>:

float dist(float d, struct distConfig params){
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	ed87 0a01 	vstr	s0, [r7, #4]
 8001356:	edc7 0a00 	vstr	s1, [r7]
	d = d * params.gain;
 800135a:	edd7 7a00 	vldr	s15, [r7]
 800135e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001366:	edc7 7a01 	vstr	s15, [r7, #4]
	if(d > 1){
 800136a:	edd7 7a01 	vldr	s15, [r7, #4]
 800136e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137a:	dd03      	ble.n	8001384 <dist+0x38>
		d = 1;
 800137c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	e00a      	b.n	800139a <dist+0x4e>
	}else if(d < -1){
 8001384:	edd7 7a01 	vldr	s15, [r7, #4]
 8001388:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800138c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001394:	d501      	bpl.n	800139a <dist+0x4e>
		d = -1;
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <dist+0x64>)
 8001398:	607b      	str	r3, [r7, #4]
	}
	return d;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	ee07 3a90 	vmov	s15, r3
}
 80013a0:	eeb0 0a67 	vmov.f32	s0, s15
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	bf800000 	.word	0xbf800000

080013b4 <softdist>:

float softdist(float d, struct softdistConfig params){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80013be:	edc7 0a00 	vstr	s1, [r7]
	d = d * params.gain;
 80013c2:	edd7 7a00 	vldr	s15, [r7]
 80013c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80013ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ce:	edc7 7a01 	vstr	s15, [r7, #4]
	return atanf(d);
 80013d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80013d6:	f00e fff3 	bl	80103c0 <atanf>
 80013da:	eef0 7a40 	vmov.f32	s15, s0
}
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <getPreviousSample>:

float getPreviousSample(float prevSamps[], int prevSampsLen, int currInp, int offset){
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
	offset = -offset;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	425b      	negs	r3, r3
 80013fa:	603b      	str	r3, [r7, #0]
	int index;
	if(offset <= currInp){
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	dc04      	bgt.n	800140e <getPreviousSample+0x26>
		index = currInp - offset;
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e005      	b.n	800141a <getPreviousSample+0x32>
	}else{
		index = prevSampsLen + currInp - offset;
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	441a      	add	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
	}

	return prevSamps[index];
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4413      	add	r3, r2
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	ee07 3a90 	vmov	s15, r3
}
 8001428:	eeb0 0a67 	vmov.f32	s0, s15
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <interpolate>:

float interpolate(float prevSamps[], int prevSampsLen, int currInp, float offset){
 8001436:	b580      	push	{r7, lr}
 8001438:	b08e      	sub	sp, #56	; 0x38
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	ed87 0a00 	vstr	s0, [r7]
	int i = floor(offset);
 8001446:	edd7 7a00 	vldr	s15, [r7]
 800144a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800144e:	eeb0 0b47 	vmov.f64	d0, d7
 8001452:	f00e ff41 	bl	80102d8 <floor>
 8001456:	eeb0 7b40 	vmov.f64	d7, d0
 800145a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800145e:	ee17 3a90 	vmov	r3, s15
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
	float r0, r1, r2, r3;
	r0 = offset - 2 - i;
 8001464:	edd7 7a00 	vldr	s15, [r7]
 8001468:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800146c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	r1 = r0 + 1;
 8001482:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800148a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800148e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	r2 = r0 + 2;
 8001492:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001496:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800149a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800149e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	r3 = r0 + 3;
 80014a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80014a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80014aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float i0, i1, i2, i3;

	i0 = getPreviousSample(prevSamps, prevSampsLen, currInp, i);
 80014b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	68b9      	ldr	r1, [r7, #8]
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f7ff ff95 	bl	80013e8 <getPreviousSample>
 80014be:	ed87 0a08 	vstr	s0, [r7, #32]
	i1 = getPreviousSample(prevSamps, prevSampsLen, currInp, i - 1);
 80014c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c4:	3b01      	subs	r3, #1
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f7ff ff8c 	bl	80013e8 <getPreviousSample>
 80014d0:	ed87 0a07 	vstr	s0, [r7, #28]
	i2 = getPreviousSample(prevSamps, prevSampsLen, currInp, i - 2);
 80014d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d6:	3b02      	subs	r3, #2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff ff83 	bl	80013e8 <getPreviousSample>
 80014e2:	ed87 0a06 	vstr	s0, [r7, #24]
	i3 = getPreviousSample(prevSamps, prevSampsLen, currInp, i - 3);
 80014e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e8:	3b03      	subs	r3, #3
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f7ff ff7a 	bl	80013e8 <getPreviousSample>
 80014f4:	ed87 0a05 	vstr	s0, [r7, #20]

	return  r1 * r2 * (r3 * i0 - r0 * i3) / 6 + r0 * r3 * (r1 * i2 - r2 * i1) / 2;
 80014f8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80014fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001500:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001504:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001508:	edd7 7a08 	vldr	s15, [r7, #32]
 800150c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001510:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8001514:	edd7 7a05 	vldr	s15, [r7, #20]
 8001518:	ee66 7a27 	vmul.f32	s15, s12, s15
 800151c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001524:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001528:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800152c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001530:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001534:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001538:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 800153c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001540:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001544:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8001548:	edd7 7a07 	vldr	s15, [r7, #28]
 800154c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001550:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001554:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001558:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800155c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001564:	eeb0 0a67 	vmov.f32	s0, s15
 8001568:	3738      	adds	r7, #56	; 0x38
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <vibrato>:

float vibrato(float d, struct vibratoConfig params){
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	ed2d 8b02 	vpush	{d8}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	ed87 0a05 	vstr	s0, [r7, #20]
 800157e:	1d3c      	adds	r4, r7, #4
 8001580:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int currInp = generalInputN % params.previousInputsLen;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <vibrato+0x8c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	fbb3 f1f2 	udiv	r1, r3, r2
 800158e:	fb01 f202 	mul.w	r2, r1, r2
 8001592:	1a9b      	subs	r3, r3, r2
 8001594:	61fb      	str	r3, [r7, #28]
	params.previousInputsPtr[currInp] = d;
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	601a      	str	r2, [r3, #0]
	return interpolate(params.previousInputsPtr, params.previousInputsLen, currInp, - params.strength * (sinf(params.frequency * generalInputN) + 1));
 80015a2:	687c      	ldr	r4, [r7, #4]
 80015a4:	68bd      	ldr	r5, [r7, #8]
 80015a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80015aa:	eeb1 8a67 	vneg.f32	s16, s15
 80015ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <vibrato+0x8c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c2:	eeb0 0a67 	vmov.f32	s0, s15
 80015c6:	f00f f803 	bl	80105d0 <sinf>
 80015ca:	eef0 7a40 	vmov.f32	s15, s0
 80015ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015d6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80015da:	eeb0 0a67 	vmov.f32	s0, s15
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	4629      	mov	r1, r5
 80015e2:	4620      	mov	r0, r4
 80015e4:	f7ff ff27 	bl	8001436 <interpolate>
 80015e8:	eef0 7a40 	vmov.f32	s15, s0
}
 80015ec:	eeb0 0a67 	vmov.f32	s0, s15
 80015f0:	3720      	adds	r7, #32
 80015f2:	46bd      	mov	sp, r7
 80015f4:	ecbd 8b02 	vpop	{d8}
 80015f8:	bdb0      	pop	{r4, r5, r7, pc}
 80015fa:	bf00      	nop
 80015fc:	240009d4 	.word	0x240009d4

08001600 <chorus>:

float chorus(float d, struct chorusConfig params){
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	ed2d 8b02 	vpush	{d8}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	ed87 0a05 	vstr	s0, [r7, #20]
 800160e:	1d3c      	adds	r4, r7, #4
 8001610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int currInp = generalInputN % params.previousInputsLen;
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <chorus+0xc0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	fbb3 f1f2 	udiv	r1, r3, r2
 800161e:	fb01 f202 	mul.w	r2, r1, r2
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
	params.previousInputsPtr[currInp] = d;
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	601a      	str	r2, [r3, #0]
	float vibr = interpolate(params.previousInputsPtr, params.previousInputsLen, currInp, - params.strength * (sinf(params.frequency * generalInputN) + 1));
 8001632:	687c      	ldr	r4, [r7, #4]
 8001634:	68bd      	ldr	r5, [r7, #8]
 8001636:	edd7 7a04 	vldr	s15, [r7, #16]
 800163a:	eeb1 8a67 	vneg.f32	s16, s15
 800163e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <chorus+0xc0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f00e ffbb 	bl	80105d0 <sinf>
 800165a:	eef0 7a40 	vmov.f32	s15, s0
 800165e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001662:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001666:	ee68 7a27 	vmul.f32	s15, s16, s15
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001670:	4629      	mov	r1, r5
 8001672:	4620      	mov	r0, r4
 8001674:	f7ff fedf 	bl	8001436 <interpolate>
 8001678:	ed87 0a08 	vstr	s0, [r7, #32]
	float clean = getPreviousSample(params.previousInputsPtr, params.previousInputsLen, currInp, - ((params.previousInputsLen - 3) / 3));
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	3b03      	subs	r3, #3
 8001684:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <chorus+0xc4>)
 8001686:	fb82 4203 	smull	r4, r2, r2, r3
 800168a:	17db      	asrs	r3, r3, #31
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001690:	f7ff feaa 	bl	80013e8 <getPreviousSample>
 8001694:	ed87 0a07 	vstr	s0, [r7, #28]
	return (vibr + clean) / 2;
 8001698:	ed97 7a08 	vldr	s14, [r7, #32]
 800169c:	edd7 7a07 	vldr	s15, [r7, #28]
 80016a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80016a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016ac:	eef0 7a66 	vmov.f32	s15, s13
}
 80016b0:	eeb0 0a67 	vmov.f32	s0, s15
 80016b4:	3728      	adds	r7, #40	; 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	ecbd 8b02 	vpop	{d8}
 80016bc:	bdb0      	pop	{r4, r5, r7, pc}
 80016be:	bf00      	nop
 80016c0:	240009d4 	.word	0x240009d4
 80016c4:	55555556 	.word	0x55555556

080016c8 <echo>:

float echo(float d, struct echoConfig params){
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b08b      	sub	sp, #44	; 0x2c
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	ed87 0a05 	vstr	s0, [r7, #20]
 80016d2:	1d3c      	adds	r4, r7, #4
 80016d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int currSampN = generalInputN % params.previousOutputsLen;
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <echo+0x6c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	fbb3 f1f2 	udiv	r1, r3, r2
 80016e2:	fb01 f202 	mul.w	r2, r1, r2
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
	float prevSamp = getPreviousSample(params.previousOutputsPtr, params.previousOutputsLen, currSampN, -params.previousOutputsLen + 1);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f1c3 0301 	rsb	r3, r3, #1
 80016f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f6:	f7ff fe77 	bl	80013e8 <getPreviousSample>
 80016fa:	ed87 0a08 	vstr	s0, [r7, #32]
	float currSamp = d + params.attenuation * prevSamp;
 80016fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001702:	edd7 7a08 	vldr	s15, [r7, #32]
 8001706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170a:	ed97 7a05 	vldr	s14, [r7, #20]
 800170e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001712:	edc7 7a07 	vstr	s15, [r7, #28]
	params.previousOutputsPtr[currSampN] = currSamp;
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	601a      	str	r2, [r3, #0]
	return currSamp;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	ee07 3a90 	vmov	s15, r3
}
 8001728:	eeb0 0a67 	vmov.f32	s0, s15
 800172c:	372c      	adds	r7, #44	; 0x2c
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}
 8001732:	bf00      	nop
 8001734:	240009d4 	.word	0x240009d4

08001738 <lowpass>:

float lowpass(float d, struct lowpassConfig params){
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	e883 0003 	stmia.w	r3, {r0, r1}
	d = *params.lastOutputPtr + params.filterConst * (d - (*params.lastOutputPtr));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	ed93 7a00 	vldr	s14, [r3]
 800174e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	ed97 6a03 	vldr	s12, [r7, #12]
 800175c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001768:	edc7 7a03 	vstr	s15, [r7, #12]
	*params.lastOutputPtr = d;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	601a      	str	r2, [r3, #0]
	return d;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	ee07 3a90 	vmov	s15, r3
}
 8001778:	eeb0 0a67 	vmov.f32	s0, s15
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <highpass>:

float highpass(float d, struct highpassConfig params){
 8001786:	b480      	push	{r7}
 8001788:	b087      	sub	sp, #28
 800178a:	af00      	add	r7, sp, #0
 800178c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	e883 0003 	stmia.w	r3, {r0, r1}
	float temp = params.filterConst * (params.lastSamplesPtr[0] + d - params.lastSamplesPtr[1]);
 8001796:	ed97 7a02 	vldr	s14, [r7, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	edd3 6a00 	vldr	s13, [r3]
 80017a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3304      	adds	r3, #4
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b8:	edc7 7a05 	vstr	s15, [r7, #20]
	params.lastSamplesPtr[1] = d;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3304      	adds	r3, #4
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	601a      	str	r2, [r3, #0]
	params.lastSamplesPtr[0] = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	601a      	str	r2, [r3, #0]
	return temp;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	ee07 3a90 	vmov	s15, r3
}
 80017d0:	eeb0 0a67 	vmov.f32	s0, s15
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <tremolo>:

float tremolo(float d, struct tremoloConfig params){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	ed2d 8b02 	vpush	{d8}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80017ee:	eeb0 7a60 	vmov.f32	s14, s1
 80017f2:	eef0 7a41 	vmov.f32	s15, s2
 80017f6:	ed87 7a01 	vstr	s14, [r7, #4]
 80017fa:	edc7 7a02 	vstr	s15, [r7, #8]
	return d * (1 + params.strength * sinf(params.frequency * generalInputN)) / (1 + params.strength);
 80017fe:	ed97 8a02 	vldr	s16, [r7, #8]
 8001802:	ed97 7a01 	vldr	s14, [r7, #4]
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <tremolo+0x78>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001816:	eeb0 0a67 	vmov.f32	s0, s15
 800181a:	f00e fed9 	bl	80105d0 <sinf>
 800181e:	eef0 7a40 	vmov.f32	s15, s0
 8001822:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800182a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800182e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001832:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001836:	edd7 7a02 	vldr	s15, [r7, #8]
 800183a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800183e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001842:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001846:	eef0 7a66 	vmov.f32	s15, s13
}
 800184a:	eeb0 0a67 	vmov.f32	s0, s15
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	ecbd 8b02 	vpop	{d8}
 8001856:	bd80      	pop	{r7, pc}
 8001858:	240009d4 	.word	0x240009d4

0800185c <rotary>:

float rotary(float d, struct rotaryConfig params){
 800185c:	b084      	sub	sp, #16
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	ed87 0a01 	vstr	s0, [r7, #4]
 8001868:	f107 0c20 	add.w	ip, r7, #32
 800186c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int currInp = generalInputN % params.previousInputsLen;
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <rotary+0xc0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001876:	fbb3 f1f2 	udiv	r1, r3, r2
 800187a:	fb01 f202 	mul.w	r2, r1, r2
 800187e:	1a9b      	subs	r3, r3, r2
 8001880:	617b      	str	r3, [r7, #20]
	params.previousInputsPtr[currInp] = d;
 8001882:	6a3a      	ldr	r2, [r7, #32]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
	float effectSin = sinf(params.frequency * generalInputN);
 800188e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <rotary+0xc0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a2:	eeb0 0a67 	vmov.f32	s0, s15
 80018a6:	f00e fe93 	bl	80105d0 <sinf>
 80018aa:	ed87 0a04 	vstr	s0, [r7, #16]
	float vibr = interpolate(params.previousInputsPtr, params.previousInputsLen, currInp, - params.vibratoStrength * (effectSin + 1));
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018b6:	eeb1 7a67 	vneg.f32	s14, s15
 80018ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80018be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80018c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ca:	eeb0 0a67 	vmov.f32	s0, s15
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fdb0 	bl	8001436 <interpolate>
 80018d6:	ed87 0a03 	vstr	s0, [r7, #12]
	return vibr * (1 + params.tremoloStrength * effectSin) / (1 + params.tremoloStrength);
 80018da:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80018de:	edd7 7a04 	vldr	s15, [r7, #16]
 80018e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001902:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001906:	eef0 7a66 	vmov.f32	s15, s13
}
 800190a:	eeb0 0a67 	vmov.f32	s0, s15
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001916:	b004      	add	sp, #16
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	240009d4 	.word	0x240009d4

08001920 <allPass>:

float allPass(float d, struct echoConfig params){
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b08b      	sub	sp, #44	; 0x2c
 8001924:	af00      	add	r7, sp, #0
 8001926:	ed87 0a05 	vstr	s0, [r7, #20]
 800192a:	1d3c      	adds	r4, r7, #4
 800192c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int currSampN = generalInputN % params.previousOutputsLen;
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <allPass+0x90>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	fbb3 f1f2 	udiv	r1, r3, r2
 800193a:	fb01 f202 	mul.w	r2, r1, r2
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
	float prevSamp = getPreviousSample(params.previousOutputsPtr, params.previousOutputsLen, currSampN, -params.previousOutputsLen + 1);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f1c3 0301 	rsb	r3, r3, #1
 800194c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194e:	f7ff fd4b 	bl	80013e8 <getPreviousSample>
 8001952:	ed87 0a08 	vstr	s0, [r7, #32]
	float currSamp = d + params.attenuation * prevSamp;
 8001956:	ed97 7a04 	vldr	s14, [r7, #16]
 800195a:	edd7 7a08 	vldr	s15, [r7, #32]
 800195e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001962:	ed97 7a05 	vldr	s14, [r7, #20]
 8001966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196a:	edc7 7a07 	vstr	s15, [r7, #28]
	params.previousOutputsPtr[currSampN] = currSamp;
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	601a      	str	r2, [r3, #0]
	return currSamp * (1 - params.attenuation * params.attenuation) - params.attenuation * d;
 800197a:	ed97 7a04 	vldr	s14, [r7, #16]
 800197e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800198a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800198e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001996:	edd7 6a04 	vldr	s13, [r7, #16]
 800199a:	edd7 7a05 	vldr	s15, [r7, #20]
 800199e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80019a6:	eeb0 0a67 	vmov.f32	s0, s15
 80019aa:	372c      	adds	r7, #44	; 0x2c
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	240009d4 	.word	0x240009d4

080019b4 <reverb>:

float reverb(float d, struct reverbConfig params){
 80019b4:	b084      	sub	sp, #16
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b088      	sub	sp, #32
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	ed87 0a01 	vstr	s0, [r7, #4]
 80019c0:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80019c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float comb1 = echo(d, params.filtersParams[0]);
 80019c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80019d2:	f7ff fe79 	bl	80016c8 <echo>
 80019d6:	ed87 0a07 	vstr	s0, [r7, #28]
	float comb2 = echo(d, params.filtersParams[1]);
 80019da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e0:	ed97 0a01 	vldr	s0, [r7, #4]
 80019e4:	f7ff fe70 	bl	80016c8 <echo>
 80019e8:	ed87 0a06 	vstr	s0, [r7, #24]
	float comb3 = echo(d, params.filtersParams[2]);
 80019ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80019f6:	f7ff fe67 	bl	80016c8 <echo>
 80019fa:	ed87 0a05 	vstr	s0, [r7, #20]
	float comb4 = echo(d, params.filtersParams[3]);
 80019fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a04:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a08:	f7ff fe5e 	bl	80016c8 <echo>
 8001a0c:	ed87 0a04 	vstr	s0, [r7, #16]
	float sum = comb1 + comb2 + comb3 + comb4;
 8001a10:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a14:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a24:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2c:	edc7 7a03 	vstr	s15, [r7, #12]

	return allPass(allPass(sum, params.filtersParams[4]), params.filtersParams[5]) * params.dry_wet + d * (1 - params.dry_wet);
 8001a30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a36:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a3a:	f7ff ff71 	bl	8001920 <allPass>
 8001a3e:	eef0 7a40 	vmov.f32	s15, s0
 8001a42:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a48:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4c:	f7ff ff68 	bl	8001920 <allPass>
 8001a50:	eeb0 7a40 	vmov.f32	s14, s0
 8001a54:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001a60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a64:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001a74:	eeb0 0a67 	vmov.f32	s0, s15
 8001a78:	3720      	adds	r7, #32
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a80:	b004      	add	sp, #16
 8001a82:	4770      	bx	lr

08001a84 <gain>:

float gain(float d, struct gainConfig params){
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a8e:	edc7 0a00 	vstr	s1, [r7]
	return d * params.gain;
 8001a92:	ed97 7a00 	vldr	s14, [r7]
 8001a96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <noiseSuppr>:

float noiseSuppr(float d, struct noiseSupprConfig params){
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	e883 0003 	stmia.w	r3, {r0, r1}
	if(fabs(d) > params.threshold){
 8001abc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac0:	eeb0 7ae7 	vabs.f32	s14, s15
 8001ac4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad0:	dd03      	ble.n	8001ada <noiseSuppr+0x2e>
		*params.counter = 4000;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001ad8:	601a      	str	r2, [r3, #0]
	}
	if(*params.counter > 0){
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	dd06      	ble.n	8001af0 <noiseSuppr+0x44>
		*params.counter = *params.counter - 1;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3a01      	subs	r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
		return d;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	e001      	b.n	8001af4 <noiseSuppr+0x48>
	}else{
		return 0;
 8001af0:	f04f 0300 	mov.w	r3, #0
	}
}
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eeb0 0a67 	vmov.f32	s0, s15
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <fuzz>:

float fuzz(float d, struct fuzzConfig params){
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b12:	7038      	strb	r0, [r7, #0]
	if(d == 0){
 8001b14:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	d102      	bne.n	8001b28 <fuzz+0x20>
		return 0;
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e00a      	b.n	8001b3e <fuzz+0x36>
	}
	if(d > 0){
 8001b28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b34:	dd02      	ble.n	8001b3c <fuzz+0x34>
		return 1;
 8001b36:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b3a:	e000      	b.n	8001b3e <fuzz+0x36>
	}else{
		return -1;
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <fuzz+0x48>)
	}
}
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eeb0 0a67 	vmov.f32	s0, s15
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	bf800000 	.word	0xbf800000

08001b54 <applyEffects>:

void applyEffects(float ch1, float ch2, int codecBufferInd){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b0d6      	sub	sp, #344	; 0x158
 8001b58:	af16      	add	r7, sp, #88	; 0x58
 8001b5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b5e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b62:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	int effectId;
	int channel = 1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	float d = ch1;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	int paramsLen;

	while(1){
		effectId = *(effectsData + i);
 8001b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b7a:	4ad8      	ldr	r2, [pc, #864]	; (8001edc <applyEffects+0x388>)
 8001b7c:	4413      	add	r3, r2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		i++;
 8001b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		if(effectId == 0xff){
 8001b8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001b92:	2bff      	cmp	r3, #255	; 0xff
 8001b94:	d11c      	bne.n	8001bd0 <applyEffects+0x7c>
			if(channel == 1){
 8001b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d109      	bne.n	8001bb2 <applyEffects+0x5e>
				ch1 = d;
 8001b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ba2:	60fb      	str	r3, [r7, #12]
				d = ch2;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				channel = 2;
 8001baa:	2302      	movs	r3, #2
 8001bac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
				continue;
 8001bb0:	e1a0      	b.n	8001ef4 <applyEffects+0x3a0>
			}else{
				ch2 = d;
 8001bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb6:	60bb      	str	r3, [r7, #8]
				break;
 8001bb8:	bf00      	nop
			crash(1);
		}
		i += paramsLen;
	}

	if(ch1 > 1){
 8001bba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	f300 8194 	bgt.w	8001ef6 <applyEffects+0x3a2>
 8001bce:	e196      	b.n	8001efe <applyEffects+0x3aa>
		if(effectId == 0){
 8001bd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <applyEffects+0x94>
			paramsLen = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			d = 0;
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001be6:	e17e      	b.n	8001ee6 <applyEffects+0x392>
		}else if(effectId == 1){
 8001be8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d116      	bne.n	8001c1e <applyEffects+0xca>
			EXECUTE_EFFECT(dist)
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bfa:	4ab8      	ldr	r2, [pc, #736]	; (8001edc <applyEffects+0x388>)
 8001bfc:	1899      	adds	r1, r3, r2
 8001bfe:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001c02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c06:	4618      	mov	r0, r3
 8001c08:	f00e f8a4 	bl	800fd54 <memcpy>
 8001c0c:	edd7 0a3a 	vldr	s1, [r7, #232]	; 0xe8
 8001c10:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001c14:	f7ff fb9a 	bl	800134c <dist>
 8001c18:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001c1c:	e163      	b.n	8001ee6 <applyEffects+0x392>
		}else if(effectId == 2){
 8001c1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d116      	bne.n	8001c54 <applyEffects+0x100>
			EXECUTE_EFFECT(softdist)
 8001c26:	2304      	movs	r3, #4
 8001c28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c30:	4aaa      	ldr	r2, [pc, #680]	; (8001edc <applyEffects+0x388>)
 8001c32:	1899      	adds	r1, r3, r2
 8001c34:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001c38:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f00e f889 	bl	800fd54 <memcpy>
 8001c42:	edd7 0a39 	vldr	s1, [r7, #228]	; 0xe4
 8001c46:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001c4a:	f7ff fbb3 	bl	80013b4 <softdist>
 8001c4e:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001c52:	e148      	b.n	8001ee6 <applyEffects+0x392>
		}else if(effectId == 3){
 8001c54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d117      	bne.n	8001c8c <applyEffects+0x138>
			EXECUTE_EFFECT(vibrato)
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c66:	4a9d      	ldr	r2, [pc, #628]	; (8001edc <applyEffects+0x388>)
 8001c68:	1899      	adds	r1, r3, r2
 8001c6a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001c6e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c72:	4618      	mov	r0, r3
 8001c74:	f00e f86e 	bl	800fd54 <memcpy>
 8001c78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c7e:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001c82:	f7ff fc75 	bl	8001570 <vibrato>
 8001c86:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001c8a:	e12c      	b.n	8001ee6 <applyEffects+0x392>
		}else if(effectId == 4){
 8001c8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d117      	bne.n	8001cc4 <applyEffects+0x170>
			EXECUTE_EFFECT(chorus)
 8001c94:	2310      	movs	r3, #16
 8001c96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c9e:	4a8f      	ldr	r2, [pc, #572]	; (8001edc <applyEffects+0x388>)
 8001ca0:	1899      	adds	r1, r3, r2
 8001ca2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001ca6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001caa:	4618      	mov	r0, r3
 8001cac:	f00e f852 	bl	800fd54 <memcpy>
 8001cb0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb6:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001cba:	f7ff fca1 	bl	8001600 <chorus>
 8001cbe:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001cc2:	e110      	b.n	8001ee6 <applyEffects+0x392>
		}else if(effectId == 5){
 8001cc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	d117      	bne.n	8001cfc <applyEffects+0x1a8>
			EXECUTE_EFFECT(echo)
 8001ccc:	2310      	movs	r3, #16
 8001cce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cd6:	4a81      	ldr	r2, [pc, #516]	; (8001edc <applyEffects+0x388>)
 8001cd8:	1899      	adds	r1, r3, r2
 8001cda:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001cde:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f00e f836 	bl	800fd54 <memcpy>
 8001ce8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cee:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001cf2:	f7ff fce9 	bl	80016c8 <echo>
 8001cf6:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001cfa:	e0f4      	b.n	8001ee6 <applyEffects+0x392>
		}else if(effectId == 6){
 8001cfc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d00:	2b06      	cmp	r3, #6
 8001d02:	d118      	bne.n	8001d36 <applyEffects+0x1e2>
			EXECUTE_EFFECT(lowpass)
 8001d04:	2308      	movs	r3, #8
 8001d06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d0e:	4a73      	ldr	r2, [pc, #460]	; (8001edc <applyEffects+0x388>)
 8001d10:	1899      	adds	r1, r3, r2
 8001d12:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001d16:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f00e f81a 	bl	800fd54 <memcpy>
 8001d20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d28:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001d2c:	f7ff fd04 	bl	8001738 <lowpass>
 8001d30:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001d34:	e0d7      	b.n	8001ee6 <applyEffects+0x392>
		}else if(effectId == 7){
 8001d36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d3a:	2b07      	cmp	r3, #7
 8001d3c:	d118      	bne.n	8001d70 <applyEffects+0x21c>
			EXECUTE_EFFECT(highpass)
 8001d3e:	2308      	movs	r3, #8
 8001d40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d48:	4a64      	ldr	r2, [pc, #400]	; (8001edc <applyEffects+0x388>)
 8001d4a:	1899      	adds	r1, r3, r2
 8001d4c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001d50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d54:	4618      	mov	r0, r3
 8001d56:	f00d fffd 	bl	800fd54 <memcpy>
 8001d5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d62:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001d66:	f7ff fd0e 	bl	8001786 <highpass>
 8001d6a:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001d6e:	e0ba      	b.n	8001ee6 <applyEffects+0x392>
		}else if(effectId == 8){
 8001d70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d11c      	bne.n	8001db2 <applyEffects+0x25e>
			EXECUTE_EFFECT(tremolo)
 8001d78:	2308      	movs	r3, #8
 8001d7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d82:	4a56      	ldr	r2, [pc, #344]	; (8001edc <applyEffects+0x388>)
 8001d84:	1899      	adds	r1, r3, r2
 8001d86:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001d8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f00d ffe0 	bl	800fd54 <memcpy>
 8001d94:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8001d98:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001d9c:	eef0 0a47 	vmov.f32	s1, s14
 8001da0:	eeb0 1a67 	vmov.f32	s2, s15
 8001da4:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001da8:	f7ff fd1a 	bl	80017e0 <tremolo>
 8001dac:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001db0:	e099      	b.n	8001ee6 <applyEffects+0x392>
		}else if(effectId == 9){
 8001db2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001db6:	2b09      	cmp	r3, #9
 8001db8:	d11a      	bne.n	8001df0 <applyEffects+0x29c>
			EXECUTE_EFFECT(rotary)
 8001dba:	2314      	movs	r3, #20
 8001dbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dc4:	4a45      	ldr	r2, [pc, #276]	; (8001edc <applyEffects+0x388>)
 8001dc6:	1899      	adds	r1, r3, r2
 8001dc8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001dcc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f00d ffbf 	bl	800fd54 <memcpy>
 8001dd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001de0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de2:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001de6:	f7ff fd39 	bl	800185c <rotary>
 8001dea:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001dee:	e07a      	b.n	8001ee6 <applyEffects+0x392>
		}else if(effectId == 10){
 8001df0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001df4:	2b0a      	cmp	r3, #10
 8001df6:	d11e      	bne.n	8001e36 <applyEffects+0x2e2>
			EXECUTE_EFFECT(reverb)
 8001df8:	2368      	movs	r3, #104	; 0x68
 8001dfa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e02:	4a36      	ldr	r2, [pc, #216]	; (8001edc <applyEffects+0x388>)
 8001e04:	1899      	adds	r1, r3, r2
 8001e06:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001e0a:	f107 0310 	add.w	r3, r7, #16
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f00d ffa0 	bl	800fd54 <memcpy>
 8001e14:	4668      	mov	r0, sp
 8001e16:	f107 0320 	add.w	r3, r7, #32
 8001e1a:	2258      	movs	r2, #88	; 0x58
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f00d ff99 	bl	800fd54 <memcpy>
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e28:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001e2c:	f7ff fdc2 	bl	80019b4 <reverb>
 8001e30:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001e34:	e057      	b.n	8001ee6 <applyEffects+0x392>
		}else if(effectId == 11){
 8001e36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e3a:	2b0b      	cmp	r3, #11
 8001e3c:	d116      	bne.n	8001e6c <applyEffects+0x318>
			EXECUTE_EFFECT(gain)
 8001e3e:	2304      	movs	r3, #4
 8001e40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e48:	4a24      	ldr	r2, [pc, #144]	; (8001edc <applyEffects+0x388>)
 8001e4a:	1899      	adds	r1, r3, r2
 8001e4c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001e50:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e54:	4618      	mov	r0, r3
 8001e56:	f00d ff7d 	bl	800fd54 <memcpy>
 8001e5a:	edd7 0a21 	vldr	s1, [r7, #132]	; 0x84
 8001e5e:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001e62:	f7ff fe0f 	bl	8001a84 <gain>
 8001e66:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001e6a:	e03c      	b.n	8001ee6 <applyEffects+0x392>
		}else if(effectId == 12){
 8001e6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e70:	2b0c      	cmp	r3, #12
 8001e72:	d118      	bne.n	8001ea6 <applyEffects+0x352>
			EXECUTE_EFFECT(noiseSuppr)
 8001e74:	2308      	movs	r3, #8
 8001e76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e7e:	4a17      	ldr	r2, [pc, #92]	; (8001edc <applyEffects+0x388>)
 8001e80:	1899      	adds	r1, r3, r2
 8001e82:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001e86:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f00d ff62 	bl	800fd54 <memcpy>
 8001e90:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e98:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001e9c:	f7ff fe06 	bl	8001aac <noiseSuppr>
 8001ea0:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001ea4:	e01f      	b.n	8001ee6 <applyEffects+0x392>
		}else if(effectId == 13){
 8001ea6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001eaa:	2b0d      	cmp	r3, #13
 8001eac:	d118      	bne.n	8001ee0 <applyEffects+0x38c>
			EXECUTE_EFFECT(fuzz)
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eb8:	4a08      	ldr	r2, [pc, #32]	; (8001edc <applyEffects+0x388>)
 8001eba:	1899      	adds	r1, r3, r2
 8001ebc:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001ec0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f00d ff45 	bl	800fd54 <memcpy>
 8001eca:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
 8001ece:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001ed2:	f7ff fe19 	bl	8001b08 <fuzz>
 8001ed6:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001eda:	e004      	b.n	8001ee6 <applyEffects+0x392>
 8001edc:	240007d0 	.word	0x240007d0
			crash(1);
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7fe fbd1 	bl	8000688 <crash>
		i += paramsLen;
 8001ee6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001eea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001eee:	4413      	add	r3, r2
 8001ef0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		effectId = *(effectsData + i);
 8001ef4:	e63f      	b.n	8001b76 <applyEffects+0x22>
		ch1 = 1;
 8001ef6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	e00a      	b.n	8001f14 <applyEffects+0x3c0>
	}else if(ch1 < -1){
 8001efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f02:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0e:	d501      	bpl.n	8001f14 <applyEffects+0x3c0>
		ch1 = -1;
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <applyEffects+0x414>)
 8001f12:	60fb      	str	r3, [r7, #12]
	}
	if(ch2 > 1){
 8001f14:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f24:	dd03      	ble.n	8001f2e <applyEffects+0x3da>
		ch2 = 1;
 8001f26:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	e00a      	b.n	8001f44 <applyEffects+0x3f0>
	}else if(ch2 < -1){
 8001f2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f32:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	d501      	bpl.n	8001f44 <applyEffects+0x3f0>
		ch2 = -1;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <applyEffects+0x414>)
 8001f42:	60bb      	str	r3, [r7, #8]
	}

	saveSample(ch1, codecBufferInd);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f4a:	f7ff f9d7 	bl	80012fc <saveSample>
	saveSample(ch2, codecBufferInd + 1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3301      	adds	r3, #1
 8001f52:	4618      	mov	r0, r3
 8001f54:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f58:	f7ff f9d0 	bl	80012fc <saveSample>
}
 8001f5c:	bf00      	nop
 8001f5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	bf800000 	.word	0xbf800000

08001f6c <mainLoop>:

void mainLoop(){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
	usbReceiveHandle();
 8001f72:	f7ff f93b 	bl	80011ec <usbReceiveHandle>
	//sound processing
	if(inReady && execute){ //executes when new data is fully loaded into half of the input buffer
 8001f76:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <mainLoop+0x70>)
 8001f78:	f993 3000 	ldrsb.w	r3, [r3]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d028      	beq.n	8001fd2 <mainLoop+0x66>
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <mainLoop+0x74>)
 8001f82:	f993 3000 	ldrsb.w	r3, [r3]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d023      	beq.n	8001fd2 <mainLoop+0x66>
		for(int i = 0; i<32; i += 2){
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	e01a      	b.n	8001fc6 <mainLoop+0x5a>
			float ch1 = loadSample(i);
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff f98b 	bl	80012ac <loadSample>
 8001f96:	ed87 0a02 	vstr	s0, [r7, #8]
			float ch2 = loadSample(i + 1);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f984 	bl	80012ac <loadSample>
 8001fa4:	ed87 0a01 	vstr	s0, [r7, #4]

			applyEffects(ch1, ch2, i);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	edd7 0a01 	vldr	s1, [r7, #4]
 8001fae:	ed97 0a02 	vldr	s0, [r7, #8]
 8001fb2:	f7ff fdcf 	bl	8001b54 <applyEffects>
			generalInputN++;
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <mainLoop+0x78>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <mainLoop+0x78>)
 8001fbe:	6013      	str	r3, [r2, #0]
		for(int i = 0; i<32; i += 2){
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b1f      	cmp	r3, #31
 8001fca:	dde1      	ble.n	8001f90 <mainLoop+0x24>
		}
		inReady = 0;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <mainLoop+0x70>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
	}
}
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	240007cc 	.word	0x240007cc
 8001fe0:	24000008 	.word	0x24000008
 8001fe4:	240009d4 	.word	0x240009d4

08001fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fee:	f001 f899 	bl	8003124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff2:	f000 f863 	bl	80020bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff6:	f000 f9e1 	bl	80023bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001ffa:	f000 f9b7 	bl	800236c <MX_DMA_Init>
  MX_I2S1_Init();
 8001ffe:	f000 f94d 	bl	800229c <MX_I2S1_Init>
  MX_I2S2_Init();
 8002002:	f000 f97f 	bl	8002304 <MX_I2S2_Init>
  MX_I2C2_Init();
 8002006:	f000 f909 	bl	800221c <MX_I2C2_Init>
  MX_I2C1_Init();
 800200a:	f000 f8c7 	bl	800219c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800200e:	f00d f93d 	bl	800f28c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	MX_GPIO_Init();
 8002012:	f000 f9d3 	bl	80023bc <MX_GPIO_Init>
	SSD1306_Init (); // initialize the display
 8002016:	f000 fa65 	bl	80024e4 <SSD1306_Init>

	SSD1306_GotoXY (0,20); // goto 10, 10
 800201a:	2114      	movs	r1, #20
 800201c:	2000      	movs	r0, #0
 800201e:	f000 fbcb 	bl	80027b8 <SSD1306_GotoXY>
	SSD1306_Puts ("PLAYING :)", &Font_11x18, 1); //
 8002022:	2201      	movs	r2, #1
 8002024:	491c      	ldr	r1, [pc, #112]	; (8002098 <main+0xb0>)
 8002026:	481d      	ldr	r0, [pc, #116]	; (800209c <main+0xb4>)
 8002028:	f000 fc5c 	bl	80028e4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 800202c:	f000 fb1e 	bl	800266c <SSD1306_UpdateScreen>
	MX_I2S1_Init();
 8002030:	f000 f934 	bl	800229c <MX_I2S1_Init>
	MX_I2S2_Init();
 8002034:	f000 f966 	bl	8002304 <MX_I2S2_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 1);
 8002038:	2201      	movs	r2, #1
 800203a:	2104      	movs	r1, #4
 800203c:	4818      	ldr	r0, [pc, #96]	; (80020a0 <main+0xb8>)
 800203e:	f003 fcb5 	bl	80059ac <HAL_GPIO_WritePin>

	HAL_I2S_Receive_DMA(&hi2s1, &inData, 64);
 8002042:	2240      	movs	r2, #64	; 0x40
 8002044:	4917      	ldr	r1, [pc, #92]	; (80020a4 <main+0xbc>)
 8002046:	4818      	ldr	r0, [pc, #96]	; (80020a8 <main+0xc0>)
 8002048:	f004 fe98 	bl	8006d7c <HAL_I2S_Receive_DMA>
	HAL_I2S_Transmit_DMA(&hi2s2, &outData, 64);
 800204c:	2240      	movs	r2, #64	; 0x40
 800204e:	4917      	ldr	r1, [pc, #92]	; (80020ac <main+0xc4>)
 8002050:	4817      	ldr	r0, [pc, #92]	; (80020b0 <main+0xc8>)
 8002052:	f004 fdf1 	bl	8006c38 <HAL_I2S_Transmit_DMA>

	for(int i = 0; i < usbBufferLen; i += 32){
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	e015      	b.n	8002088 <main+0xa0>
		HAL_I2C_Mem_Read(&hi2c1, 0xA1, i, 2, effectsRawData + i, 32, HAL_MAX_DELAY);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4914      	ldr	r1, [pc, #80]	; (80020b4 <main+0xcc>)
 8002064:	440b      	add	r3, r1
 8002066:	f04f 31ff 	mov.w	r1, #4294967295
 800206a:	9102      	str	r1, [sp, #8]
 800206c:	2120      	movs	r1, #32
 800206e:	9101      	str	r1, [sp, #4]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2302      	movs	r3, #2
 8002074:	21a1      	movs	r1, #161	; 0xa1
 8002076:	4810      	ldr	r0, [pc, #64]	; (80020b8 <main+0xd0>)
 8002078:	f003 ff4a 	bl	8005f10 <HAL_I2C_Mem_Read>
		HAL_Delay(5);
 800207c:	2005      	movs	r0, #5
 800207e:	f001 f8e3 	bl	8003248 <HAL_Delay>
	for(int i = 0; i < usbBufferLen; i += 32){
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3320      	adds	r3, #32
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2bff      	cmp	r3, #255	; 0xff
 800208c:	dde6      	ble.n	800205c <main+0x74>
	}

	loadEffects();
 800208e:	f7fe fb61 	bl	8000754 <loadEffects>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		mainLoop();
 8002092:	f7ff ff6b 	bl	8001f6c <mainLoop>
 8002096:	e7fc      	b.n	8002092 <main+0xaa>
 8002098:	24000000 	.word	0x24000000
 800209c:	08010750 	.word	0x08010750
 80020a0:	58021000 	.word	0x58021000
 80020a4:	240004cc 	.word	0x240004cc
 80020a8:	24000334 	.word	0x24000334
 80020ac:	240005cc 	.word	0x240005cc
 80020b0:	24000388 	.word	0x24000388
 80020b4:	2400000c 	.word	0x2400000c
 80020b8:	2400028c 	.word	0x2400028c

080020bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b09c      	sub	sp, #112	; 0x70
 80020c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c6:	224c      	movs	r2, #76	; 0x4c
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f00d fe50 	bl	800fd70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	2220      	movs	r2, #32
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f00d fe4a 	bl	800fd70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80020dc:	2002      	movs	r0, #2
 80020de:	f006 fa37 	bl	8008550 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80020e2:	2300      	movs	r3, #0
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <SystemClock_Config+0xdc>)
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	4a2b      	ldr	r2, [pc, #172]	; (8002198 <SystemClock_Config+0xdc>)
 80020ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020f0:	6193      	str	r3, [r2, #24]
 80020f2:	4b29      	ldr	r3, [pc, #164]	; (8002198 <SystemClock_Config+0xdc>)
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80020fe:	bf00      	nop
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <SystemClock_Config+0xdc>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800210c:	d1f8      	bne.n	8002100 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800210e:	2321      	movs	r3, #33	; 0x21
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002118:	2301      	movs	r3, #1
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800211c:	2302      	movs	r3, #2
 800211e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002120:	2302      	movs	r3, #2
 8002122:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002124:	2304      	movs	r3, #4
 8002126:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8002128:	232c      	movs	r3, #44	; 0x2c
 800212a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800212c:	2301      	movs	r3, #1
 800212e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002130:	2303      	movs	r3, #3
 8002132:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002134:	2302      	movs	r3, #2
 8002136:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002138:	230c      	movs	r3, #12
 800213a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800213c:	2300      	movs	r3, #0
 800213e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002148:	4618      	mov	r0, r3
 800214a:	f006 fa4b 	bl	80085e4 <HAL_RCC_OscConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002154:	f000 f9c0 	bl	80024d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002158:	233f      	movs	r3, #63	; 0x3f
 800215a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215c:	2303      	movs	r3, #3
 800215e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002164:	2308      	movs	r3, #8
 8002166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002168:	2340      	movs	r3, #64	; 0x40
 800216a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800216c:	2340      	movs	r3, #64	; 0x40
 800216e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002174:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002176:	2340      	movs	r3, #64	; 0x40
 8002178:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	2103      	movs	r1, #3
 800217e:	4618      	mov	r0, r3
 8002180:	f006 fe0a 	bl	8008d98 <HAL_RCC_ClockConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800218a:	f000 f9a5 	bl	80024d8 <Error_Handler>
  }
}
 800218e:	bf00      	nop
 8002190:	3770      	adds	r7, #112	; 0x70
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	58024800 	.word	0x58024800

0800219c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <MX_I2C1_Init+0x74>)
 80021a2:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <MX_I2C1_Init+0x78>)
 80021a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 80021a6:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <MX_I2C1_Init+0x74>)
 80021a8:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <MX_I2C1_Init+0x7c>)
 80021aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <MX_I2C1_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b2:	4b17      	ldr	r3, [pc, #92]	; (8002210 <MX_I2C1_Init+0x74>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b8:	4b15      	ldr	r3, [pc, #84]	; (8002210 <MX_I2C1_Init+0x74>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <MX_I2C1_Init+0x74>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <MX_I2C1_Init+0x74>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <MX_I2C1_Init+0x74>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <MX_I2C1_Init+0x74>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021d6:	480e      	ldr	r0, [pc, #56]	; (8002210 <MX_I2C1_Init+0x74>)
 80021d8:	f003 fc02 	bl	80059e0 <HAL_I2C_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021e2:	f000 f979 	bl	80024d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021e6:	2100      	movs	r1, #0
 80021e8:	4809      	ldr	r0, [pc, #36]	; (8002210 <MX_I2C1_Init+0x74>)
 80021ea:	f004 fb6b 	bl	80068c4 <HAL_I2CEx_ConfigAnalogFilter>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021f4:	f000 f970 	bl	80024d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021f8:	2100      	movs	r1, #0
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_I2C1_Init+0x74>)
 80021fc:	f004 fbad 	bl	800695a <HAL_I2CEx_ConfigDigitalFilter>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002206:	f000 f967 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2400028c 	.word	0x2400028c
 8002214:	40005400 	.word	0x40005400
 8002218:	60404e72 	.word	0x60404e72

0800221c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <MX_I2C2_Init+0x74>)
 8002222:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <MX_I2C2_Init+0x78>)
 8002224:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00D049FB;
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <MX_I2C2_Init+0x74>)
 8002228:	4a1b      	ldr	r2, [pc, #108]	; (8002298 <MX_I2C2_Init+0x7c>)
 800222a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <MX_I2C2_Init+0x74>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <MX_I2C2_Init+0x74>)
 8002234:	2201      	movs	r2, #1
 8002236:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <MX_I2C2_Init+0x74>)
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <MX_I2C2_Init+0x74>)
 8002240:	2200      	movs	r2, #0
 8002242:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <MX_I2C2_Init+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <MX_I2C2_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <MX_I2C2_Init+0x74>)
 8002252:	2200      	movs	r2, #0
 8002254:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002256:	480e      	ldr	r0, [pc, #56]	; (8002290 <MX_I2C2_Init+0x74>)
 8002258:	f003 fbc2 	bl	80059e0 <HAL_I2C_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002262:	f000 f939 	bl	80024d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002266:	2100      	movs	r1, #0
 8002268:	4809      	ldr	r0, [pc, #36]	; (8002290 <MX_I2C2_Init+0x74>)
 800226a:	f004 fb2b 	bl	80068c4 <HAL_I2CEx_ConfigAnalogFilter>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002274:	f000 f930 	bl	80024d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002278:	2100      	movs	r1, #0
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_I2C2_Init+0x74>)
 800227c:	f004 fb6d 	bl	800695a <HAL_I2CEx_ConfigDigitalFilter>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002286:	f000 f927 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	240002e0 	.word	0x240002e0
 8002294:	40005800 	.word	0x40005800
 8002298:	00d049fb 	.word	0x00d049fb

0800229c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <MX_I2S1_Init+0x60>)
 80022a2:	4a17      	ldr	r2, [pc, #92]	; (8002300 <MX_I2S1_Init+0x64>)
 80022a4:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <MX_I2S1_Init+0x60>)
 80022a8:	2206      	movs	r2, #6
 80022aa:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <MX_I2S1_Init+0x60>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <MX_I2S1_Init+0x60>)
 80022b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b8:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <MX_I2S1_Init+0x60>)
 80022bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022c0:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MX_I2S1_Init+0x60>)
 80022c4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80022c8:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <MX_I2S1_Init+0x60>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <MX_I2S1_Init+0x60>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <MX_I2S1_Init+0x60>)
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <MX_I2S1_Init+0x60>)
 80022de:	2200      	movs	r2, #0
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_I2S1_Init+0x60>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80022e8:	4804      	ldr	r0, [pc, #16]	; (80022fc <MX_I2S1_Init+0x60>)
 80022ea:	f004 fb83 	bl	80069f4 <HAL_I2S_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 80022f4:	f000 f8f0 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	24000334 	.word	0x24000334
 8002300:	40013000 	.word	0x40013000

08002304 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <MX_I2S2_Init+0x60>)
 800230a:	4a17      	ldr	r2, [pc, #92]	; (8002368 <MX_I2S2_Init+0x64>)
 800230c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <MX_I2S2_Init+0x60>)
 8002310:	2204      	movs	r2, #4
 8002312:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <MX_I2S2_Init+0x60>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <MX_I2S2_Init+0x60>)
 800231c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002320:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <MX_I2S2_Init+0x60>)
 8002324:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002328:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <MX_I2S2_Init+0x60>)
 800232c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002330:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <MX_I2S2_Init+0x60>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <MX_I2S2_Init+0x60>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <MX_I2S2_Init+0x60>)
 8002340:	2200      	movs	r2, #0
 8002342:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <MX_I2S2_Init+0x60>)
 8002346:	2200      	movs	r2, #0
 8002348:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <MX_I2S2_Init+0x60>)
 800234c:	2200      	movs	r2, #0
 800234e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002350:	4804      	ldr	r0, [pc, #16]	; (8002364 <MX_I2S2_Init+0x60>)
 8002352:	f004 fb4f 	bl	80069f4 <HAL_I2S_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_I2S2_Init+0x5c>
  {
    Error_Handler();
 800235c:	f000 f8bc 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}
 8002364:	24000388 	.word	0x24000388
 8002368:	40003800 	.word	0x40003800

0800236c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_DMA_Init+0x4c>)
 8002374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002378:	4a0f      	ldr	r2, [pc, #60]	; (80023b8 <MX_DMA_Init+0x4c>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <MX_DMA_Init+0x4c>)
 8002384:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	2100      	movs	r1, #0
 8002394:	200b      	movs	r0, #11
 8002396:	f001 f856 	bl	8003446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800239a:	200b      	movs	r0, #11
 800239c:	f001 f86d 	bl	800347a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2100      	movs	r1, #0
 80023a4:	200c      	movs	r0, #12
 80023a6:	f001 f84e 	bl	8003446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80023aa:	200c      	movs	r0, #12
 80023ac:	f001 f865 	bl	800347a <HAL_NVIC_EnableIRQ>

}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	58024400 	.word	0x58024400

080023bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08c      	sub	sp, #48	; 0x30
 80023c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c2:	f107 031c 	add.w	r3, r7, #28
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
 80023d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023d2:	4b3e      	ldr	r3, [pc, #248]	; (80024cc <MX_GPIO_Init+0x110>)
 80023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d8:	4a3c      	ldr	r2, [pc, #240]	; (80024cc <MX_GPIO_Init+0x110>)
 80023da:	f043 0310 	orr.w	r3, r3, #16
 80023de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e2:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <MX_GPIO_Init+0x110>)
 80023e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023f0:	4b36      	ldr	r3, [pc, #216]	; (80024cc <MX_GPIO_Init+0x110>)
 80023f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f6:	4a35      	ldr	r2, [pc, #212]	; (80024cc <MX_GPIO_Init+0x110>)
 80023f8:	f043 0320 	orr.w	r3, r3, #32
 80023fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002400:	4b32      	ldr	r3, [pc, #200]	; (80024cc <MX_GPIO_Init+0x110>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800240e:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <MX_GPIO_Init+0x110>)
 8002410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002414:	4a2d      	ldr	r2, [pc, #180]	; (80024cc <MX_GPIO_Init+0x110>)
 8002416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800241a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <MX_GPIO_Init+0x110>)
 8002420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <MX_GPIO_Init+0x110>)
 800242e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002432:	4a26      	ldr	r2, [pc, #152]	; (80024cc <MX_GPIO_Init+0x110>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243c:	4b23      	ldr	r3, [pc, #140]	; (80024cc <MX_GPIO_Init+0x110>)
 800243e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <MX_GPIO_Init+0x110>)
 800244c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002450:	4a1e      	ldr	r2, [pc, #120]	; (80024cc <MX_GPIO_Init+0x110>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <MX_GPIO_Init+0x110>)
 800245c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <MX_GPIO_Init+0x110>)
 800246a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246e:	4a17      	ldr	r2, [pc, #92]	; (80024cc <MX_GPIO_Init+0x110>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <MX_GPIO_Init+0x110>)
 800247a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002486:	2200      	movs	r2, #0
 8002488:	211c      	movs	r1, #28
 800248a:	4811      	ldr	r0, [pc, #68]	; (80024d0 <MX_GPIO_Init+0x114>)
 800248c:	f003 fa8e 	bl	80059ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin PE3 PE4 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8002490:	231c      	movs	r3, #28
 8002492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002494:	2301      	movs	r3, #1
 8002496:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249c:	2300      	movs	r3, #0
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	4619      	mov	r1, r3
 80024a6:	480a      	ldr	r0, [pc, #40]	; (80024d0 <MX_GPIO_Init+0x114>)
 80024a8:	f003 f8d8 	bl	800565c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF3 PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80024ac:	231c      	movs	r3, #28
 80024ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b0:	2300      	movs	r3, #0
 80024b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b4:	2301      	movs	r3, #1
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024b8:	f107 031c 	add.w	r3, r7, #28
 80024bc:	4619      	mov	r1, r3
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_GPIO_Init+0x118>)
 80024c0:	f003 f8cc 	bl	800565c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024c4:	bf00      	nop
 80024c6:	3730      	adds	r7, #48	; 0x30
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	58024400 	.word	0x58024400
 80024d0:	58021000 	.word	0x58021000
 80024d4:	58021400 	.word	0x58021400

080024d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024dc:	b672      	cpsid	i
}
 80024de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <Error_Handler+0x8>
	...

080024e4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80024ea:	f000 fa21 	bl	8002930 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80024ee:	f644 6320 	movw	r3, #20000	; 0x4e20
 80024f2:	2201      	movs	r2, #1
 80024f4:	2178      	movs	r1, #120	; 0x78
 80024f6:	485b      	ldr	r0, [pc, #364]	; (8002664 <SSD1306_Init+0x180>)
 80024f8:	f003 fe24 	bl	8006144 <HAL_I2C_IsDeviceReady>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002502:	2300      	movs	r3, #0
 8002504:	e0a9      	b.n	800265a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002506:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800250a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800250c:	e002      	b.n	8002514 <SSD1306_Init+0x30>
		p--;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3b01      	subs	r3, #1
 8002512:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f9      	bne.n	800250e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800251a:	22ae      	movs	r2, #174	; 0xae
 800251c:	2100      	movs	r1, #0
 800251e:	2078      	movs	r0, #120	; 0x78
 8002520:	f000 fa82 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002524:	2220      	movs	r2, #32
 8002526:	2100      	movs	r1, #0
 8002528:	2078      	movs	r0, #120	; 0x78
 800252a:	f000 fa7d 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800252e:	2210      	movs	r2, #16
 8002530:	2100      	movs	r1, #0
 8002532:	2078      	movs	r0, #120	; 0x78
 8002534:	f000 fa78 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002538:	22b0      	movs	r2, #176	; 0xb0
 800253a:	2100      	movs	r1, #0
 800253c:	2078      	movs	r0, #120	; 0x78
 800253e:	f000 fa73 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002542:	22c8      	movs	r2, #200	; 0xc8
 8002544:	2100      	movs	r1, #0
 8002546:	2078      	movs	r0, #120	; 0x78
 8002548:	f000 fa6e 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800254c:	2200      	movs	r2, #0
 800254e:	2100      	movs	r1, #0
 8002550:	2078      	movs	r0, #120	; 0x78
 8002552:	f000 fa69 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002556:	2210      	movs	r2, #16
 8002558:	2100      	movs	r1, #0
 800255a:	2078      	movs	r0, #120	; 0x78
 800255c:	f000 fa64 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002560:	2240      	movs	r2, #64	; 0x40
 8002562:	2100      	movs	r1, #0
 8002564:	2078      	movs	r0, #120	; 0x78
 8002566:	f000 fa5f 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800256a:	2281      	movs	r2, #129	; 0x81
 800256c:	2100      	movs	r1, #0
 800256e:	2078      	movs	r0, #120	; 0x78
 8002570:	f000 fa5a 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002574:	22ff      	movs	r2, #255	; 0xff
 8002576:	2100      	movs	r1, #0
 8002578:	2078      	movs	r0, #120	; 0x78
 800257a:	f000 fa55 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800257e:	22a1      	movs	r2, #161	; 0xa1
 8002580:	2100      	movs	r1, #0
 8002582:	2078      	movs	r0, #120	; 0x78
 8002584:	f000 fa50 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002588:	22a6      	movs	r2, #166	; 0xa6
 800258a:	2100      	movs	r1, #0
 800258c:	2078      	movs	r0, #120	; 0x78
 800258e:	f000 fa4b 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002592:	22a8      	movs	r2, #168	; 0xa8
 8002594:	2100      	movs	r1, #0
 8002596:	2078      	movs	r0, #120	; 0x78
 8002598:	f000 fa46 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800259c:	223f      	movs	r2, #63	; 0x3f
 800259e:	2100      	movs	r1, #0
 80025a0:	2078      	movs	r0, #120	; 0x78
 80025a2:	f000 fa41 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80025a6:	22a4      	movs	r2, #164	; 0xa4
 80025a8:	2100      	movs	r1, #0
 80025aa:	2078      	movs	r0, #120	; 0x78
 80025ac:	f000 fa3c 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80025b0:	22d3      	movs	r2, #211	; 0xd3
 80025b2:	2100      	movs	r1, #0
 80025b4:	2078      	movs	r0, #120	; 0x78
 80025b6:	f000 fa37 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2078      	movs	r0, #120	; 0x78
 80025c0:	f000 fa32 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80025c4:	22d5      	movs	r2, #213	; 0xd5
 80025c6:	2100      	movs	r1, #0
 80025c8:	2078      	movs	r0, #120	; 0x78
 80025ca:	f000 fa2d 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80025ce:	22f0      	movs	r2, #240	; 0xf0
 80025d0:	2100      	movs	r1, #0
 80025d2:	2078      	movs	r0, #120	; 0x78
 80025d4:	f000 fa28 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80025d8:	22d9      	movs	r2, #217	; 0xd9
 80025da:	2100      	movs	r1, #0
 80025dc:	2078      	movs	r0, #120	; 0x78
 80025de:	f000 fa23 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80025e2:	2222      	movs	r2, #34	; 0x22
 80025e4:	2100      	movs	r1, #0
 80025e6:	2078      	movs	r0, #120	; 0x78
 80025e8:	f000 fa1e 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80025ec:	22da      	movs	r2, #218	; 0xda
 80025ee:	2100      	movs	r1, #0
 80025f0:	2078      	movs	r0, #120	; 0x78
 80025f2:	f000 fa19 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80025f6:	2212      	movs	r2, #18
 80025f8:	2100      	movs	r1, #0
 80025fa:	2078      	movs	r0, #120	; 0x78
 80025fc:	f000 fa14 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002600:	22db      	movs	r2, #219	; 0xdb
 8002602:	2100      	movs	r1, #0
 8002604:	2078      	movs	r0, #120	; 0x78
 8002606:	f000 fa0f 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800260a:	2220      	movs	r2, #32
 800260c:	2100      	movs	r1, #0
 800260e:	2078      	movs	r0, #120	; 0x78
 8002610:	f000 fa0a 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002614:	228d      	movs	r2, #141	; 0x8d
 8002616:	2100      	movs	r1, #0
 8002618:	2078      	movs	r0, #120	; 0x78
 800261a:	f000 fa05 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800261e:	2214      	movs	r2, #20
 8002620:	2100      	movs	r1, #0
 8002622:	2078      	movs	r0, #120	; 0x78
 8002624:	f000 fa00 	bl	8002a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002628:	22af      	movs	r2, #175	; 0xaf
 800262a:	2100      	movs	r1, #0
 800262c:	2078      	movs	r0, #120	; 0x78
 800262e:	f000 f9fb 	bl	8002a28 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002632:	222e      	movs	r2, #46	; 0x2e
 8002634:	2100      	movs	r1, #0
 8002636:	2078      	movs	r0, #120	; 0x78
 8002638:	f000 f9f6 	bl	8002a28 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800263c:	2000      	movs	r0, #0
 800263e:	f000 f843 	bl	80026c8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002642:	f000 f813 	bl	800266c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <SSD1306_Init+0x184>)
 8002648:	2200      	movs	r2, #0
 800264a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <SSD1306_Init+0x184>)
 800264e:	2200      	movs	r2, #0
 8002650:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <SSD1306_Init+0x184>)
 8002654:	2201      	movs	r2, #1
 8002656:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002658:	2301      	movs	r3, #1
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	240002e0 	.word	0x240002e0
 8002668:	24000dd8 	.word	0x24000dd8

0800266c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002672:	2300      	movs	r3, #0
 8002674:	71fb      	strb	r3, [r7, #7]
 8002676:	e01d      	b.n	80026b4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	3b50      	subs	r3, #80	; 0x50
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	2100      	movs	r1, #0
 8002682:	2078      	movs	r0, #120	; 0x78
 8002684:	f000 f9d0 	bl	8002a28 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002688:	2200      	movs	r2, #0
 800268a:	2100      	movs	r1, #0
 800268c:	2078      	movs	r0, #120	; 0x78
 800268e:	f000 f9cb 	bl	8002a28 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002692:	2210      	movs	r2, #16
 8002694:	2100      	movs	r1, #0
 8002696:	2078      	movs	r0, #120	; 0x78
 8002698:	f000 f9c6 	bl	8002a28 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	01db      	lsls	r3, r3, #7
 80026a0:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <SSD1306_UpdateScreen+0x58>)
 80026a2:	441a      	add	r2, r3
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	2140      	movs	r1, #64	; 0x40
 80026a8:	2078      	movs	r0, #120	; 0x78
 80026aa:	f000 f957 	bl	800295c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	3301      	adds	r3, #1
 80026b2:	71fb      	strb	r3, [r7, #7]
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	2b07      	cmp	r3, #7
 80026b8:	d9de      	bls.n	8002678 <SSD1306_UpdateScreen+0xc>
	}
}
 80026ba:	bf00      	nop
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	240009d8 	.word	0x240009d8

080026c8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <SSD1306_Fill+0x14>
 80026d8:	2300      	movs	r3, #0
 80026da:	e000      	b.n	80026de <SSD1306_Fill+0x16>
 80026dc:	23ff      	movs	r3, #255	; 0xff
 80026de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e2:	4619      	mov	r1, r3
 80026e4:	4803      	ldr	r0, [pc, #12]	; (80026f4 <SSD1306_Fill+0x2c>)
 80026e6:	f00d fb43 	bl	800fd70 <memset>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	240009d8 	.word	0x240009d8

080026f8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	80fb      	strh	r3, [r7, #6]
 8002702:	460b      	mov	r3, r1
 8002704:	80bb      	strh	r3, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	70fb      	strb	r3, [r7, #3]
	if (
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	2b7f      	cmp	r3, #127	; 0x7f
 800270e:	d848      	bhi.n	80027a2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002710:	88bb      	ldrh	r3, [r7, #4]
 8002712:	2b3f      	cmp	r3, #63	; 0x3f
 8002714:	d845      	bhi.n	80027a2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <SSD1306_DrawPixel+0xb8>)
 8002718:	791b      	ldrb	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d11a      	bne.n	8002768 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002732:	88fa      	ldrh	r2, [r7, #6]
 8002734:	88bb      	ldrh	r3, [r7, #4]
 8002736:	08db      	lsrs	r3, r3, #3
 8002738:	b298      	uxth	r0, r3
 800273a:	4603      	mov	r3, r0
 800273c:	01db      	lsls	r3, r3, #7
 800273e:	4413      	add	r3, r2
 8002740:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <SSD1306_DrawPixel+0xbc>)
 8002742:	5cd3      	ldrb	r3, [r2, r3]
 8002744:	b25a      	sxtb	r2, r3
 8002746:	88bb      	ldrh	r3, [r7, #4]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	2101      	movs	r1, #1
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	b25b      	sxtb	r3, r3
 8002754:	4313      	orrs	r3, r2
 8002756:	b259      	sxtb	r1, r3
 8002758:	88fa      	ldrh	r2, [r7, #6]
 800275a:	4603      	mov	r3, r0
 800275c:	01db      	lsls	r3, r3, #7
 800275e:	4413      	add	r3, r2
 8002760:	b2c9      	uxtb	r1, r1
 8002762:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <SSD1306_DrawPixel+0xbc>)
 8002764:	54d1      	strb	r1, [r2, r3]
 8002766:	e01d      	b.n	80027a4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002768:	88fa      	ldrh	r2, [r7, #6]
 800276a:	88bb      	ldrh	r3, [r7, #4]
 800276c:	08db      	lsrs	r3, r3, #3
 800276e:	b298      	uxth	r0, r3
 8002770:	4603      	mov	r3, r0
 8002772:	01db      	lsls	r3, r3, #7
 8002774:	4413      	add	r3, r2
 8002776:	4a0f      	ldr	r2, [pc, #60]	; (80027b4 <SSD1306_DrawPixel+0xbc>)
 8002778:	5cd3      	ldrb	r3, [r2, r3]
 800277a:	b25a      	sxtb	r2, r3
 800277c:	88bb      	ldrh	r3, [r7, #4]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	2101      	movs	r1, #1
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	b25b      	sxtb	r3, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	b25b      	sxtb	r3, r3
 800278e:	4013      	ands	r3, r2
 8002790:	b259      	sxtb	r1, r3
 8002792:	88fa      	ldrh	r2, [r7, #6]
 8002794:	4603      	mov	r3, r0
 8002796:	01db      	lsls	r3, r3, #7
 8002798:	4413      	add	r3, r2
 800279a:	b2c9      	uxtb	r1, r1
 800279c:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <SSD1306_DrawPixel+0xbc>)
 800279e:	54d1      	strb	r1, [r2, r3]
 80027a0:	e000      	b.n	80027a4 <SSD1306_DrawPixel+0xac>
		return;
 80027a2:	bf00      	nop
	}
}
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	24000dd8 	.word	0x24000dd8
 80027b4:	240009d8 	.word	0x240009d8

080027b8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	460a      	mov	r2, r1
 80027c2:	80fb      	strh	r3, [r7, #6]
 80027c4:	4613      	mov	r3, r2
 80027c6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80027c8:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <SSD1306_GotoXY+0x28>)
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80027ce:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <SSD1306_GotoXY+0x28>)
 80027d0:	88bb      	ldrh	r3, [r7, #4]
 80027d2:	8053      	strh	r3, [r2, #2]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	24000dd8 	.word	0x24000dd8

080027e4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	4613      	mov	r3, r2
 80027f2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80027f4:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <SSD1306_Putc+0xfc>)
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	4413      	add	r3, r2
	if (
 8002800:	2b7f      	cmp	r3, #127	; 0x7f
 8002802:	dc07      	bgt.n	8002814 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002804:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <SSD1306_Putc+0xfc>)
 8002806:	885b      	ldrh	r3, [r3, #2]
 8002808:	461a      	mov	r2, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	785b      	ldrb	r3, [r3, #1]
 800280e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002810:	2b3f      	cmp	r3, #63	; 0x3f
 8002812:	dd01      	ble.n	8002818 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002814:	2300      	movs	r3, #0
 8002816:	e05e      	b.n	80028d6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	e04b      	b.n	80028b6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	3b20      	subs	r3, #32
 8002826:	6839      	ldr	r1, [r7, #0]
 8002828:	7849      	ldrb	r1, [r1, #1]
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4619      	mov	r1, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	440b      	add	r3, r1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e030      	b.n	80028a4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d010      	beq.n	8002874 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <SSD1306_Putc+0xfc>)
 8002854:	881a      	ldrh	r2, [r3, #0]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	b29b      	uxth	r3, r3
 800285a:	4413      	add	r3, r2
 800285c:	b298      	uxth	r0, r3
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <SSD1306_Putc+0xfc>)
 8002860:	885a      	ldrh	r2, [r3, #2]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	b29b      	uxth	r3, r3
 8002866:	4413      	add	r3, r2
 8002868:	b29b      	uxth	r3, r3
 800286a:	79ba      	ldrb	r2, [r7, #6]
 800286c:	4619      	mov	r1, r3
 800286e:	f7ff ff43 	bl	80026f8 <SSD1306_DrawPixel>
 8002872:	e014      	b.n	800289e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002874:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <SSD1306_Putc+0xfc>)
 8002876:	881a      	ldrh	r2, [r3, #0]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	b29b      	uxth	r3, r3
 800287c:	4413      	add	r3, r2
 800287e:	b298      	uxth	r0, r3
 8002880:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <SSD1306_Putc+0xfc>)
 8002882:	885a      	ldrh	r2, [r3, #2]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	b29b      	uxth	r3, r3
 8002888:	4413      	add	r3, r2
 800288a:	b299      	uxth	r1, r3
 800288c:	79bb      	ldrb	r3, [r7, #6]
 800288e:	2b00      	cmp	r3, #0
 8002890:	bf0c      	ite	eq
 8002892:	2301      	moveq	r3, #1
 8002894:	2300      	movne	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	f7ff ff2d 	bl	80026f8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	3301      	adds	r3, #1
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d3c8      	bcc.n	8002842 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3301      	adds	r3, #1
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	461a      	mov	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	4293      	cmp	r3, r2
 80028c0:	d3ad      	bcc.n	800281e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <SSD1306_Putc+0xfc>)
 80028c4:	881a      	ldrh	r2, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <SSD1306_Putc+0xfc>)
 80028d2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80028d4:	79fb      	ldrb	r3, [r7, #7]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	24000dd8 	.word	0x24000dd8

080028e4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	4613      	mov	r3, r2
 80028f0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80028f2:	e012      	b.n	800291a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	79fa      	ldrb	r2, [r7, #7]
 80028fa:	68b9      	ldr	r1, [r7, #8]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff71 	bl	80027e4 <SSD1306_Putc>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d002      	beq.n	8002914 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	e008      	b.n	8002926 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3301      	adds	r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e8      	bne.n	80028f4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	781b      	ldrb	r3, [r3, #0]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <ssd1306_I2C_Init+0x28>)
 8002938:	607b      	str	r3, [r7, #4]
	while(p>0)
 800293a:	e002      	b.n	8002942 <ssd1306_I2C_Init+0x12>
		p--;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f9      	bne.n	800293c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	0003d090 	.word	0x0003d090

0800295c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b0c7      	sub	sp, #284	; 0x11c
 8002960:	af02      	add	r7, sp, #8
 8002962:	4604      	mov	r4, r0
 8002964:	4608      	mov	r0, r1
 8002966:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800296a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800296e:	600a      	str	r2, [r1, #0]
 8002970:	4619      	mov	r1, r3
 8002972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002976:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800297a:	4622      	mov	r2, r4
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002982:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002986:	4602      	mov	r2, r0
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800298e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002992:	460a      	mov	r2, r1
 8002994:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002996:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800299a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800299e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80029a2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80029a6:	7812      	ldrb	r2, [r2, #0]
 80029a8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80029b0:	e015      	b.n	80029de <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80029b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80029b6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80029ba:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	441a      	add	r2, r3
 80029c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80029c6:	3301      	adds	r3, #1
 80029c8:	7811      	ldrb	r1, [r2, #0]
 80029ca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80029ce:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80029d2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80029d4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80029d8:	3301      	adds	r3, #1
 80029da:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80029de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80029e8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80029ec:	8812      	ldrh	r2, [r2, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d8df      	bhi.n	80029b2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 80029f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029f6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	b299      	uxth	r1, r3
 80029fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f107 020c 	add.w	r2, r7, #12
 8002a10:	200a      	movs	r0, #10
 8002a12:	9000      	str	r0, [sp, #0]
 8002a14:	4803      	ldr	r0, [pc, #12]	; (8002a24 <ssd1306_I2C_WriteMulti+0xc8>)
 8002a16:	f003 f873 	bl	8005b00 <HAL_I2C_Master_Transmit>
}
 8002a1a:	bf00      	nop
 8002a1c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd90      	pop	{r4, r7, pc}
 8002a24:	240002e0 	.word	0x240002e0

08002a28 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
 8002a32:	460b      	mov	r3, r1
 8002a34:	71bb      	strb	r3, [r7, #6]
 8002a36:	4613      	mov	r3, r2
 8002a38:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002a3a:	79bb      	ldrb	r3, [r7, #6]
 8002a3c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002a3e:	797b      	ldrb	r3, [r7, #5]
 8002a40:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	b299      	uxth	r1, r3
 8002a46:	f107 020c 	add.w	r2, r7, #12
 8002a4a:	230a      	movs	r3, #10
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2302      	movs	r3, #2
 8002a50:	4803      	ldr	r0, [pc, #12]	; (8002a60 <ssd1306_I2C_Write+0x38>)
 8002a52:	f003 f855 	bl	8005b00 <HAL_I2C_Master_Transmit>
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	240002e0 	.word	0x240002e0

08002a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_MspInit+0x30>)
 8002a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a70:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <HAL_MspInit+0x30>)
 8002a72:	f043 0302 	orr.w	r3, r3, #2
 8002a76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_MspInit+0x30>)
 8002a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	58024400 	.word	0x58024400

08002a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b0ba      	sub	sp, #232	; 0xe8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab0:	f107 0318 	add.w	r3, r7, #24
 8002ab4:	22b8      	movs	r2, #184	; 0xb8
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f00d f959 	bl	800fd70 <memset>
  if(hi2c->Instance==I2C1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a4c      	ldr	r2, [pc, #304]	; (8002bf4 <HAL_I2C_MspInit+0x15c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d146      	bne.n	8002b56 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ac8:	f04f 0208 	mov.w	r2, #8
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ada:	f107 0318 	add.w	r3, r7, #24
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f006 fcd0 	bl	8009484 <HAL_RCCEx_PeriphCLKConfig>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002aea:	f7ff fcf5 	bl	80024d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aee:	4b42      	ldr	r3, [pc, #264]	; (8002bf8 <HAL_I2C_MspInit+0x160>)
 8002af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af4:	4a40      	ldr	r2, [pc, #256]	; (8002bf8 <HAL_I2C_MspInit+0x160>)
 8002af6:	f043 0302 	orr.w	r3, r3, #2
 8002afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002afe:	4b3e      	ldr	r3, [pc, #248]	; (8002bf8 <HAL_I2C_MspInit+0x160>)
 8002b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b0c:	23c0      	movs	r3, #192	; 0xc0
 8002b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b12:	2312      	movs	r3, #18
 8002b14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b24:	2304      	movs	r3, #4
 8002b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4832      	ldr	r0, [pc, #200]	; (8002bfc <HAL_I2C_MspInit+0x164>)
 8002b32:	f002 fd93 	bl	800565c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b36:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <HAL_I2C_MspInit+0x160>)
 8002b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b3c:	4a2e      	ldr	r2, [pc, #184]	; (8002bf8 <HAL_I2C_MspInit+0x160>)
 8002b3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b46:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <HAL_I2C_MspInit+0x160>)
 8002b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b54:	e04a      	b.n	8002bec <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a29      	ldr	r2, [pc, #164]	; (8002c00 <HAL_I2C_MspInit+0x168>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d145      	bne.n	8002bec <HAL_I2C_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002b60:	f04f 0208 	mov.w	r2, #8
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b72:	f107 0318 	add.w	r3, r7, #24
 8002b76:	4618      	mov	r0, r3
 8002b78:	f006 fc84 	bl	8009484 <HAL_RCCEx_PeriphCLKConfig>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8002b82:	f7ff fca9 	bl	80024d8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b86:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <HAL_I2C_MspInit+0x160>)
 8002b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b8c:	4a1a      	ldr	r2, [pc, #104]	; (8002bf8 <HAL_I2C_MspInit+0x160>)
 8002b8e:	f043 0320 	orr.w	r3, r3, #32
 8002b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b96:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <HAL_I2C_MspInit+0x160>)
 8002b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002baa:	2312      	movs	r3, #18
 8002bac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bc2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	480e      	ldr	r0, [pc, #56]	; (8002c04 <HAL_I2C_MspInit+0x16c>)
 8002bca:	f002 fd47 	bl	800565c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <HAL_I2C_MspInit+0x160>)
 8002bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bd4:	4a08      	ldr	r2, [pc, #32]	; (8002bf8 <HAL_I2C_MspInit+0x160>)
 8002bd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_I2C_MspInit+0x160>)
 8002be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
}
 8002bec:	bf00      	nop
 8002bee:	37e8      	adds	r7, #232	; 0xe8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40005400 	.word	0x40005400
 8002bf8:	58024400 	.word	0x58024400
 8002bfc:	58020400 	.word	0x58020400
 8002c00:	40005800 	.word	0x40005800
 8002c04:	58021400 	.word	0x58021400

08002c08 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b0bc      	sub	sp, #240	; 0xf0
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c20:	f107 0320 	add.w	r3, r7, #32
 8002c24:	22b8      	movs	r2, #184	; 0xb8
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f00d f8a1 	bl	800fd70 <memset>
  if(hi2s->Instance==SPI1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4aa2      	ldr	r2, [pc, #648]	; (8002ebc <HAL_I2S_MspInit+0x2b4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	f040 809b 	bne.w	8002d70 <HAL_I2S_MspInit+0x168>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002c3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c4a:	f107 0320 	add.w	r3, r7, #32
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f006 fc18 	bl	8009484 <HAL_RCCEx_PeriphCLKConfig>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8002c5a:	f7ff fc3d 	bl	80024d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c5e:	4b98      	ldr	r3, [pc, #608]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c64:	4a96      	ldr	r2, [pc, #600]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002c66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c6e:	4b94      	ldr	r3, [pc, #592]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7c:	4b90      	ldr	r3, [pc, #576]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c82:	4a8f      	ldr	r2, [pc, #572]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c8c:	4b8c      	ldr	r3, [pc, #560]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9a:	4b89      	ldr	r3, [pc, #548]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca0:	4a87      	ldr	r2, [pc, #540]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002caa:	4b85      	ldr	r3, [pc, #532]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	697b      	ldr	r3, [r7, #20]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002cb8:	2370      	movs	r3, #112	; 0x70
 8002cba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cd0:	2305      	movs	r3, #5
 8002cd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4879      	ldr	r0, [pc, #484]	; (8002ec4 <HAL_I2S_MspInit+0x2bc>)
 8002cde:	f002 fcbd 	bl	800565c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ce2:	2310      	movs	r3, #16
 8002ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d04:	4619      	mov	r1, r3
 8002d06:	4870      	ldr	r0, [pc, #448]	; (8002ec8 <HAL_I2S_MspInit+0x2c0>)
 8002d08:	f002 fca8 	bl	800565c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002d0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ecc <HAL_I2S_MspInit+0x2c4>)
 8002d0e:	4a70      	ldr	r2, [pc, #448]	; (8002ed0 <HAL_I2S_MspInit+0x2c8>)
 8002d10:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002d12:	4b6e      	ldr	r3, [pc, #440]	; (8002ecc <HAL_I2S_MspInit+0x2c4>)
 8002d14:	2225      	movs	r2, #37	; 0x25
 8002d16:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d18:	4b6c      	ldr	r3, [pc, #432]	; (8002ecc <HAL_I2S_MspInit+0x2c4>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d1e:	4b6b      	ldr	r3, [pc, #428]	; (8002ecc <HAL_I2S_MspInit+0x2c4>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d24:	4b69      	ldr	r3, [pc, #420]	; (8002ecc <HAL_I2S_MspInit+0x2c4>)
 8002d26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d2a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d2c:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_I2S_MspInit+0x2c4>)
 8002d2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d32:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d34:	4b65      	ldr	r3, [pc, #404]	; (8002ecc <HAL_I2S_MspInit+0x2c4>)
 8002d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d3a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002d3c:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_I2S_MspInit+0x2c4>)
 8002d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d42:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d44:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <HAL_I2S_MspInit+0x2c4>)
 8002d46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d4a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d4c:	4b5f      	ldr	r3, [pc, #380]	; (8002ecc <HAL_I2S_MspInit+0x2c4>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002d52:	485e      	ldr	r0, [pc, #376]	; (8002ecc <HAL_I2S_MspInit+0x2c4>)
 8002d54:	f000 fbac 	bl	80034b0 <HAL_DMA_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2S_MspInit+0x15a>
    {
      Error_Handler();
 8002d5e:	f7ff fbbb 	bl	80024d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a59      	ldr	r2, [pc, #356]	; (8002ecc <HAL_I2S_MspInit+0x2c4>)
 8002d66:	649a      	str	r2, [r3, #72]	; 0x48
 8002d68:	4a58      	ldr	r2, [pc, #352]	; (8002ecc <HAL_I2S_MspInit+0x2c4>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d6e:	e0a0      	b.n	8002eb2 <HAL_I2S_MspInit+0x2aa>
  else if(hi2s->Instance==SPI2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a57      	ldr	r2, [pc, #348]	; (8002ed4 <HAL_I2S_MspInit+0x2cc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	f040 809b 	bne.w	8002eb2 <HAL_I2S_MspInit+0x2aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002d7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d8c:	f107 0320 	add.w	r3, r7, #32
 8002d90:	4618      	mov	r0, r3
 8002d92:	f006 fb77 	bl	8009484 <HAL_RCCEx_PeriphCLKConfig>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_I2S_MspInit+0x198>
      Error_Handler();
 8002d9c:	f7ff fb9c 	bl	80024d8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002da0:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002da2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002da6:	4a46      	ldr	r2, [pc, #280]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002db0:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002db2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dbe:	4b40      	ldr	r3, [pc, #256]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc4:	4a3e      	ldr	r2, [pc, #248]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dce:	4b3c      	ldr	r3, [pc, #240]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ddc:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de2:	4a37      	ldr	r2, [pc, #220]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002de4:	f043 0302 	orr.w	r3, r3, #2
 8002de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dec:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <HAL_I2S_MspInit+0x2b8>)
 8002dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8002dfa:	2342      	movs	r3, #66	; 0x42
 8002dfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e12:	2305      	movs	r3, #5
 8002e14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	482a      	ldr	r0, [pc, #168]	; (8002ec8 <HAL_I2S_MspInit+0x2c0>)
 8002e20:	f002 fc1c 	bl	800565c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002e24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e3e:	2305      	movs	r3, #5
 8002e40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4823      	ldr	r0, [pc, #140]	; (8002ed8 <HAL_I2S_MspInit+0x2d0>)
 8002e4c:	f002 fc06 	bl	800565c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream1;
 8002e50:	4b22      	ldr	r3, [pc, #136]	; (8002edc <HAL_I2S_MspInit+0x2d4>)
 8002e52:	4a23      	ldr	r2, [pc, #140]	; (8002ee0 <HAL_I2S_MspInit+0x2d8>)
 8002e54:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002e56:	4b21      	ldr	r3, [pc, #132]	; (8002edc <HAL_I2S_MspInit+0x2d4>)
 8002e58:	2228      	movs	r2, #40	; 0x28
 8002e5a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e5c:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <HAL_I2S_MspInit+0x2d4>)
 8002e5e:	2240      	movs	r2, #64	; 0x40
 8002e60:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e62:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <HAL_I2S_MspInit+0x2d4>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e68:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <HAL_I2S_MspInit+0x2d4>)
 8002e6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e6e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_I2S_MspInit+0x2d4>)
 8002e72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e76:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <HAL_I2S_MspInit+0x2d4>)
 8002e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e7e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <HAL_I2S_MspInit+0x2d4>)
 8002e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e86:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <HAL_I2S_MspInit+0x2d4>)
 8002e8a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e8e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_I2S_MspInit+0x2d4>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002e96:	4811      	ldr	r0, [pc, #68]	; (8002edc <HAL_I2S_MspInit+0x2d4>)
 8002e98:	f000 fb0a 	bl	80034b0 <HAL_DMA_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2S_MspInit+0x29e>
      Error_Handler();
 8002ea2:	f7ff fb19 	bl	80024d8 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <HAL_I2S_MspInit+0x2d4>)
 8002eaa:	645a      	str	r2, [r3, #68]	; 0x44
 8002eac:	4a0b      	ldr	r2, [pc, #44]	; (8002edc <HAL_I2S_MspInit+0x2d4>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002eb2:	bf00      	nop
 8002eb4:	37f0      	adds	r7, #240	; 0xf0
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40013000 	.word	0x40013000
 8002ec0:	58024400 	.word	0x58024400
 8002ec4:	58020000 	.word	0x58020000
 8002ec8:	58020800 	.word	0x58020800
 8002ecc:	240003dc 	.word	0x240003dc
 8002ed0:	40020010 	.word	0x40020010
 8002ed4:	40003800 	.word	0x40003800
 8002ed8:	58020400 	.word	0x58020400
 8002edc:	24000454 	.word	0x24000454
 8002ee0:	40020028 	.word	0x40020028

08002ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <NMI_Handler+0x4>

08002eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eee:	e7fe      	b.n	8002eee <HardFault_Handler+0x4>

08002ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <MemManage_Handler+0x4>

08002ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002efa:	e7fe      	b.n	8002efa <BusFault_Handler+0x4>

08002efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f00:	e7fe      	b.n	8002f00 <UsageFault_Handler+0x4>

08002f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f30:	f000 f96a 	bl	8003208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <DMA1_Stream0_IRQHandler+0x10>)
 8002f3e:	f001 f87b 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	240003dc 	.word	0x240003dc

08002f4c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002f50:	4802      	ldr	r0, [pc, #8]	; (8002f5c <DMA1_Stream1_IRQHandler+0x10>)
 8002f52:	f001 f871 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	24000454 	.word	0x24000454

08002f60 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <OTG_HS_IRQHandler+0x10>)
 8002f66:	f004 f992 	bl	800728e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	240022c8 	.word	0x240022c8

08002f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f7c:	4a14      	ldr	r2, [pc, #80]	; (8002fd0 <_sbrk+0x5c>)
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <_sbrk+0x60>)
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f88:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <_sbrk+0x64>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d102      	bne.n	8002f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <_sbrk+0x64>)
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <_sbrk+0x68>)
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <_sbrk+0x64>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d207      	bcs.n	8002fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fa4:	f00c fea4 	bl	800fcf0 <__errno>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	220c      	movs	r2, #12
 8002fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fae:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb2:	e009      	b.n	8002fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <_sbrk+0x64>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fba:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <_sbrk+0x64>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <_sbrk+0x64>)
 8002fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	24050000 	.word	0x24050000
 8002fd4:	00000400 	.word	0x00000400
 8002fd8:	24000de0 	.word	0x24000de0
 8002fdc:	24002a08 	.word	0x24002a08

08002fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002fe4:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <SystemInit+0xd0>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	4a31      	ldr	r2, [pc, #196]	; (80030b0 <SystemInit+0xd0>)
 8002fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ff4:	4b2f      	ldr	r3, [pc, #188]	; (80030b4 <SystemInit+0xd4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	2b06      	cmp	r3, #6
 8002ffe:	d807      	bhi.n	8003010 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003000:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <SystemInit+0xd4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f023 030f 	bic.w	r3, r3, #15
 8003008:	4a2a      	ldr	r2, [pc, #168]	; (80030b4 <SystemInit+0xd4>)
 800300a:	f043 0307 	orr.w	r3, r3, #7
 800300e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003010:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <SystemInit+0xd8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <SystemInit+0xd8>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800301c:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <SystemInit+0xd8>)
 800301e:	2200      	movs	r2, #0
 8003020:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003022:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <SystemInit+0xd8>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4924      	ldr	r1, [pc, #144]	; (80030b8 <SystemInit+0xd8>)
 8003028:	4b24      	ldr	r3, [pc, #144]	; (80030bc <SystemInit+0xdc>)
 800302a:	4013      	ands	r3, r2
 800302c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800302e:	4b21      	ldr	r3, [pc, #132]	; (80030b4 <SystemInit+0xd4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d007      	beq.n	800304a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <SystemInit+0xd4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 030f 	bic.w	r3, r3, #15
 8003042:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <SystemInit+0xd4>)
 8003044:	f043 0307 	orr.w	r3, r3, #7
 8003048:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800304a:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <SystemInit+0xd8>)
 800304c:	2200      	movs	r2, #0
 800304e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <SystemInit+0xd8>)
 8003052:	2200      	movs	r2, #0
 8003054:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003056:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <SystemInit+0xd8>)
 8003058:	2200      	movs	r2, #0
 800305a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800305c:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <SystemInit+0xd8>)
 800305e:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <SystemInit+0xe0>)
 8003060:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <SystemInit+0xd8>)
 8003064:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <SystemInit+0xe4>)
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <SystemInit+0xd8>)
 800306a:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <SystemInit+0xe8>)
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <SystemInit+0xd8>)
 8003070:	2200      	movs	r2, #0
 8003072:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <SystemInit+0xd8>)
 8003076:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <SystemInit+0xe8>)
 8003078:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <SystemInit+0xd8>)
 800307c:	2200      	movs	r2, #0
 800307e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003080:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <SystemInit+0xd8>)
 8003082:	4a11      	ldr	r2, [pc, #68]	; (80030c8 <SystemInit+0xe8>)
 8003084:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <SystemInit+0xd8>)
 8003088:	2200      	movs	r2, #0
 800308a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800308c:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <SystemInit+0xd8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <SystemInit+0xd8>)
 8003092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003096:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003098:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <SystemInit+0xd8>)
 800309a:	2200      	movs	r2, #0
 800309c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <SystemInit+0xec>)
 80030a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80030a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80030a6:	bf00      	nop
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000ed00 	.word	0xe000ed00
 80030b4:	52002000 	.word	0x52002000
 80030b8:	58024400 	.word	0x58024400
 80030bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80030c0:	02020200 	.word	0x02020200
 80030c4:	01ff0000 	.word	0x01ff0000
 80030c8:	01010280 	.word	0x01010280
 80030cc:	52004000 	.word	0x52004000

080030d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80030d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003108 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030d4:	f7ff ff84 	bl	8002fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030d8:	480c      	ldr	r0, [pc, #48]	; (800310c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030da:	490d      	ldr	r1, [pc, #52]	; (8003110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030dc:	4a0d      	ldr	r2, [pc, #52]	; (8003114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e0:	e002      	b.n	80030e8 <LoopCopyDataInit>

080030e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030e6:	3304      	adds	r3, #4

080030e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030ec:	d3f9      	bcc.n	80030e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030f0:	4c0a      	ldr	r4, [pc, #40]	; (800311c <LoopFillZerobss+0x22>)
  movs r3, #0
 80030f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f4:	e001      	b.n	80030fa <LoopFillZerobss>

080030f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f8:	3204      	adds	r2, #4

080030fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030fc:	d3fb      	bcc.n	80030f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030fe:	f00c fdfd 	bl	800fcfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003102:	f7fe ff71 	bl	8001fe8 <main>
  bx  lr
 8003106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003108:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800310c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003110:	24000270 	.word	0x24000270
  ldr r2, =_sidata
 8003114:	08011ef0 	.word	0x08011ef0
  ldr r2, =_sbss
 8003118:	24000270 	.word	0x24000270
  ldr r4, =_ebss
 800311c:	24002a04 	.word	0x24002a04

08003120 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003120:	e7fe      	b.n	8003120 <ADC3_IRQHandler>
	...

08003124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800312a:	2003      	movs	r0, #3
 800312c:	f000 f980 	bl	8003430 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003130:	f005 ffe8 	bl	8009104 <HAL_RCC_GetSysClockFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_Init+0x68>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	4913      	ldr	r1, [pc, #76]	; (8003190 <HAL_Init+0x6c>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_Init+0x68>)
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <HAL_Init+0x6c>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
 8003164:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <HAL_Init+0x70>)
 8003166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003168:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <HAL_Init+0x74>)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800316e:	200f      	movs	r0, #15
 8003170:	f000 f814 	bl	800319c <HAL_InitTick>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e002      	b.n	8003184 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800317e:	f7ff fc71 	bl	8002a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	58024400 	.word	0x58024400
 8003190:	08011500 	.word	0x08011500
 8003194:	24000110 	.word	0x24000110
 8003198:	2400010c 	.word	0x2400010c

0800319c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80031a4:	4b15      	ldr	r3, [pc, #84]	; (80031fc <HAL_InitTick+0x60>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e021      	b.n	80031f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <HAL_InitTick+0x64>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_InitTick+0x60>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	4619      	mov	r1, r3
 80031ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031be:	fbb3 f3f1 	udiv	r3, r3, r1
 80031c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f965 	bl	8003496 <HAL_SYSTICK_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00e      	b.n	80031f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b0f      	cmp	r3, #15
 80031da:	d80a      	bhi.n	80031f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031dc:	2200      	movs	r2, #0
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	f04f 30ff 	mov.w	r0, #4294967295
 80031e4:	f000 f92f 	bl	8003446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031e8:	4a06      	ldr	r2, [pc, #24]	; (8003204 <HAL_InitTick+0x68>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	24000118 	.word	0x24000118
 8003200:	2400010c 	.word	0x2400010c
 8003204:	24000114 	.word	0x24000114

08003208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_IncTick+0x20>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_IncTick+0x24>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4413      	add	r3, r2
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <HAL_IncTick+0x24>)
 800321a:	6013      	str	r3, [r2, #0]
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	24000118 	.word	0x24000118
 800322c:	24000de4 	.word	0x24000de4

08003230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return uwTick;
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <HAL_GetTick+0x14>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	24000de4 	.word	0x24000de4

08003248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003250:	f7ff ffee 	bl	8003230 <HAL_GetTick>
 8003254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d005      	beq.n	800326e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003262:	4b0a      	ldr	r3, [pc, #40]	; (800328c <HAL_Delay+0x44>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800326e:	bf00      	nop
 8003270:	f7ff ffde 	bl	8003230 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	429a      	cmp	r2, r3
 800327e:	d8f7      	bhi.n	8003270 <HAL_Delay+0x28>
  {
  }
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	24000118 	.word	0x24000118

08003290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <__NVIC_SetPriorityGrouping+0x40>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032ac:	4013      	ands	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032be:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <__NVIC_SetPriorityGrouping+0x40>)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	60d3      	str	r3, [r2, #12]
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000ed00 	.word	0xe000ed00
 80032d4:	05fa0000 	.word	0x05fa0000

080032d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <__NVIC_GetPriorityGrouping+0x18>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	f003 0307 	and.w	r3, r3, #7
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003302:	2b00      	cmp	r3, #0
 8003304:	db0b      	blt.n	800331e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	f003 021f 	and.w	r2, r3, #31
 800330c:	4907      	ldr	r1, [pc, #28]	; (800332c <__NVIC_EnableIRQ+0x38>)
 800330e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2001      	movs	r0, #1
 8003316:	fa00 f202 	lsl.w	r2, r0, r2
 800331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	e000e100 	.word	0xe000e100

08003330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	6039      	str	r1, [r7, #0]
 800333a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800333c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003340:	2b00      	cmp	r3, #0
 8003342:	db0a      	blt.n	800335a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	490c      	ldr	r1, [pc, #48]	; (800337c <__NVIC_SetPriority+0x4c>)
 800334a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800334e:	0112      	lsls	r2, r2, #4
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	440b      	add	r3, r1
 8003354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003358:	e00a      	b.n	8003370 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4908      	ldr	r1, [pc, #32]	; (8003380 <__NVIC_SetPriority+0x50>)
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	3b04      	subs	r3, #4
 8003368:	0112      	lsls	r2, r2, #4
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	440b      	add	r3, r1
 800336e:	761a      	strb	r2, [r3, #24]
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000e100 	.word	0xe000e100
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	; 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f1c3 0307 	rsb	r3, r3, #7
 800339e:	2b04      	cmp	r3, #4
 80033a0:	bf28      	it	cs
 80033a2:	2304      	movcs	r3, #4
 80033a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3304      	adds	r3, #4
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d902      	bls.n	80033b4 <NVIC_EncodePriority+0x30>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3b03      	subs	r3, #3
 80033b2:	e000      	b.n	80033b6 <NVIC_EncodePriority+0x32>
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43da      	mvns	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	401a      	ands	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033cc:	f04f 31ff 	mov.w	r1, #4294967295
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa01 f303 	lsl.w	r3, r1, r3
 80033d6:	43d9      	mvns	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	4313      	orrs	r3, r2
         );
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3724      	adds	r7, #36	; 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
	...

080033ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033fc:	d301      	bcc.n	8003402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033fe:	2301      	movs	r3, #1
 8003400:	e00f      	b.n	8003422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003402:	4a0a      	ldr	r2, [pc, #40]	; (800342c <SysTick_Config+0x40>)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3b01      	subs	r3, #1
 8003408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800340a:	210f      	movs	r1, #15
 800340c:	f04f 30ff 	mov.w	r0, #4294967295
 8003410:	f7ff ff8e 	bl	8003330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <SysTick_Config+0x40>)
 8003416:	2200      	movs	r2, #0
 8003418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800341a:	4b04      	ldr	r3, [pc, #16]	; (800342c <SysTick_Config+0x40>)
 800341c:	2207      	movs	r2, #7
 800341e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	e000e010 	.word	0xe000e010

08003430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ff29 	bl	8003290 <__NVIC_SetPriorityGrouping>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003454:	f7ff ff40 	bl	80032d8 <__NVIC_GetPriorityGrouping>
 8003458:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	6978      	ldr	r0, [r7, #20]
 8003460:	f7ff ff90 	bl	8003384 <NVIC_EncodePriority>
 8003464:	4602      	mov	r2, r0
 8003466:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ff5f 	bl	8003330 <__NVIC_SetPriority>
}
 8003472:	bf00      	nop
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff33 	bl	80032f4 <__NVIC_EnableIRQ>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff ffa4 	bl	80033ec <SysTick_Config>
 80034a4:	4603      	mov	r3, r0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80034b8:	f7ff feba 	bl	8003230 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e314      	b.n	8003af2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a66      	ldr	r2, [pc, #408]	; (8003668 <HAL_DMA_Init+0x1b8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d04a      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a65      	ldr	r2, [pc, #404]	; (800366c <HAL_DMA_Init+0x1bc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d045      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a63      	ldr	r2, [pc, #396]	; (8003670 <HAL_DMA_Init+0x1c0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d040      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a62      	ldr	r2, [pc, #392]	; (8003674 <HAL_DMA_Init+0x1c4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d03b      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a60      	ldr	r2, [pc, #384]	; (8003678 <HAL_DMA_Init+0x1c8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d036      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a5f      	ldr	r2, [pc, #380]	; (800367c <HAL_DMA_Init+0x1cc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d031      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a5d      	ldr	r2, [pc, #372]	; (8003680 <HAL_DMA_Init+0x1d0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d02c      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a5c      	ldr	r2, [pc, #368]	; (8003684 <HAL_DMA_Init+0x1d4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d027      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a5a      	ldr	r2, [pc, #360]	; (8003688 <HAL_DMA_Init+0x1d8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d022      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a59      	ldr	r2, [pc, #356]	; (800368c <HAL_DMA_Init+0x1dc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d01d      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a57      	ldr	r2, [pc, #348]	; (8003690 <HAL_DMA_Init+0x1e0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d018      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a56      	ldr	r2, [pc, #344]	; (8003694 <HAL_DMA_Init+0x1e4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d013      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a54      	ldr	r2, [pc, #336]	; (8003698 <HAL_DMA_Init+0x1e8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00e      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a53      	ldr	r2, [pc, #332]	; (800369c <HAL_DMA_Init+0x1ec>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d009      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a51      	ldr	r2, [pc, #324]	; (80036a0 <HAL_DMA_Init+0x1f0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_DMA_Init+0xb8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a50      	ldr	r2, [pc, #320]	; (80036a4 <HAL_DMA_Init+0x1f4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d101      	bne.n	800356c <HAL_DMA_Init+0xbc>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <HAL_DMA_Init+0xbe>
 800356c:	2300      	movs	r3, #0
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 813c 	beq.w	80037ec <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a37      	ldr	r2, [pc, #220]	; (8003668 <HAL_DMA_Init+0x1b8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d04a      	beq.n	8003624 <HAL_DMA_Init+0x174>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a36      	ldr	r2, [pc, #216]	; (800366c <HAL_DMA_Init+0x1bc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d045      	beq.n	8003624 <HAL_DMA_Init+0x174>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a34      	ldr	r2, [pc, #208]	; (8003670 <HAL_DMA_Init+0x1c0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d040      	beq.n	8003624 <HAL_DMA_Init+0x174>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a33      	ldr	r2, [pc, #204]	; (8003674 <HAL_DMA_Init+0x1c4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d03b      	beq.n	8003624 <HAL_DMA_Init+0x174>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a31      	ldr	r2, [pc, #196]	; (8003678 <HAL_DMA_Init+0x1c8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d036      	beq.n	8003624 <HAL_DMA_Init+0x174>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a30      	ldr	r2, [pc, #192]	; (800367c <HAL_DMA_Init+0x1cc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d031      	beq.n	8003624 <HAL_DMA_Init+0x174>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2e      	ldr	r2, [pc, #184]	; (8003680 <HAL_DMA_Init+0x1d0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02c      	beq.n	8003624 <HAL_DMA_Init+0x174>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2d      	ldr	r2, [pc, #180]	; (8003684 <HAL_DMA_Init+0x1d4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d027      	beq.n	8003624 <HAL_DMA_Init+0x174>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a2b      	ldr	r2, [pc, #172]	; (8003688 <HAL_DMA_Init+0x1d8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d022      	beq.n	8003624 <HAL_DMA_Init+0x174>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a2a      	ldr	r2, [pc, #168]	; (800368c <HAL_DMA_Init+0x1dc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d01d      	beq.n	8003624 <HAL_DMA_Init+0x174>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a28      	ldr	r2, [pc, #160]	; (8003690 <HAL_DMA_Init+0x1e0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d018      	beq.n	8003624 <HAL_DMA_Init+0x174>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a27      	ldr	r2, [pc, #156]	; (8003694 <HAL_DMA_Init+0x1e4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_DMA_Init+0x174>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a25      	ldr	r2, [pc, #148]	; (8003698 <HAL_DMA_Init+0x1e8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_DMA_Init+0x174>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a24      	ldr	r2, [pc, #144]	; (800369c <HAL_DMA_Init+0x1ec>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_DMA_Init+0x174>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a22      	ldr	r2, [pc, #136]	; (80036a0 <HAL_DMA_Init+0x1f0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_DMA_Init+0x174>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <HAL_DMA_Init+0x1f4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d108      	bne.n	8003636 <HAL_DMA_Init+0x186>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e007      	b.n	8003646 <HAL_DMA_Init+0x196>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003646:	e02f      	b.n	80036a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003648:	f7ff fdf2 	bl	8003230 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b05      	cmp	r3, #5
 8003654:	d928      	bls.n	80036a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2203      	movs	r2, #3
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e244      	b.n	8003af2 <HAL_DMA_Init+0x642>
 8003668:	40020010 	.word	0x40020010
 800366c:	40020028 	.word	0x40020028
 8003670:	40020040 	.word	0x40020040
 8003674:	40020058 	.word	0x40020058
 8003678:	40020070 	.word	0x40020070
 800367c:	40020088 	.word	0x40020088
 8003680:	400200a0 	.word	0x400200a0
 8003684:	400200b8 	.word	0x400200b8
 8003688:	40020410 	.word	0x40020410
 800368c:	40020428 	.word	0x40020428
 8003690:	40020440 	.word	0x40020440
 8003694:	40020458 	.word	0x40020458
 8003698:	40020470 	.word	0x40020470
 800369c:	40020488 	.word	0x40020488
 80036a0:	400204a0 	.word	0x400204a0
 80036a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1c8      	bne.n	8003648 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4b84      	ldr	r3, [pc, #528]	; (80038d4 <HAL_DMA_Init+0x424>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80036ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d107      	bne.n	800370c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	4313      	orrs	r3, r2
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b28      	cmp	r3, #40	; 0x28
 8003712:	d903      	bls.n	800371c <HAL_DMA_Init+0x26c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b2e      	cmp	r3, #46	; 0x2e
 800371a:	d91f      	bls.n	800375c <HAL_DMA_Init+0x2ac>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b3e      	cmp	r3, #62	; 0x3e
 8003722:	d903      	bls.n	800372c <HAL_DMA_Init+0x27c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b42      	cmp	r3, #66	; 0x42
 800372a:	d917      	bls.n	800375c <HAL_DMA_Init+0x2ac>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b46      	cmp	r3, #70	; 0x46
 8003732:	d903      	bls.n	800373c <HAL_DMA_Init+0x28c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b48      	cmp	r3, #72	; 0x48
 800373a:	d90f      	bls.n	800375c <HAL_DMA_Init+0x2ac>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b4e      	cmp	r3, #78	; 0x4e
 8003742:	d903      	bls.n	800374c <HAL_DMA_Init+0x29c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b52      	cmp	r3, #82	; 0x52
 800374a:	d907      	bls.n	800375c <HAL_DMA_Init+0x2ac>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b73      	cmp	r3, #115	; 0x73
 8003752:	d905      	bls.n	8003760 <HAL_DMA_Init+0x2b0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b77      	cmp	r3, #119	; 0x77
 800375a:	d801      	bhi.n	8003760 <HAL_DMA_Init+0x2b0>
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <HAL_DMA_Init+0x2b2>
 8003760:	2300      	movs	r3, #0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800376c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f023 0307 	bic.w	r3, r3, #7
 8003784:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2b04      	cmp	r3, #4
 8003796:	d117      	bne.n	80037c8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00e      	beq.n	80037c8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f001 fdcc 	bl	8005348 <DMA_CheckFifoParam>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2240      	movs	r2, #64	; 0x40
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e194      	b.n	8003af2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f001 fd07 	bl	80051e4 <DMA_CalcBaseAndBitshift>
 80037d6:	4603      	mov	r3, r0
 80037d8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	223f      	movs	r2, #63	; 0x3f
 80037e4:	409a      	lsls	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	609a      	str	r2, [r3, #8]
 80037ea:	e0ca      	b.n	8003982 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a39      	ldr	r2, [pc, #228]	; (80038d8 <HAL_DMA_Init+0x428>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d022      	beq.n	800383c <HAL_DMA_Init+0x38c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a38      	ldr	r2, [pc, #224]	; (80038dc <HAL_DMA_Init+0x42c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d01d      	beq.n	800383c <HAL_DMA_Init+0x38c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a36      	ldr	r2, [pc, #216]	; (80038e0 <HAL_DMA_Init+0x430>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d018      	beq.n	800383c <HAL_DMA_Init+0x38c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a35      	ldr	r2, [pc, #212]	; (80038e4 <HAL_DMA_Init+0x434>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <HAL_DMA_Init+0x38c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a33      	ldr	r2, [pc, #204]	; (80038e8 <HAL_DMA_Init+0x438>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00e      	beq.n	800383c <HAL_DMA_Init+0x38c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a32      	ldr	r2, [pc, #200]	; (80038ec <HAL_DMA_Init+0x43c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d009      	beq.n	800383c <HAL_DMA_Init+0x38c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a30      	ldr	r2, [pc, #192]	; (80038f0 <HAL_DMA_Init+0x440>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_DMA_Init+0x38c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a2f      	ldr	r2, [pc, #188]	; (80038f4 <HAL_DMA_Init+0x444>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d101      	bne.n	8003840 <HAL_DMA_Init+0x390>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_DMA_Init+0x392>
 8003840:	2300      	movs	r3, #0
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8094 	beq.w	8003970 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <HAL_DMA_Init+0x428>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d021      	beq.n	8003896 <HAL_DMA_Init+0x3e6>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a21      	ldr	r2, [pc, #132]	; (80038dc <HAL_DMA_Init+0x42c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d01c      	beq.n	8003896 <HAL_DMA_Init+0x3e6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1f      	ldr	r2, [pc, #124]	; (80038e0 <HAL_DMA_Init+0x430>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d017      	beq.n	8003896 <HAL_DMA_Init+0x3e6>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <HAL_DMA_Init+0x434>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d012      	beq.n	8003896 <HAL_DMA_Init+0x3e6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1c      	ldr	r2, [pc, #112]	; (80038e8 <HAL_DMA_Init+0x438>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00d      	beq.n	8003896 <HAL_DMA_Init+0x3e6>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1b      	ldr	r2, [pc, #108]	; (80038ec <HAL_DMA_Init+0x43c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d008      	beq.n	8003896 <HAL_DMA_Init+0x3e6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <HAL_DMA_Init+0x440>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d003      	beq.n	8003896 <HAL_DMA_Init+0x3e6>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a18      	ldr	r2, [pc, #96]	; (80038f4 <HAL_DMA_Init+0x444>)
 8003894:	4293      	cmp	r3, r2
 8003896:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_DMA_Init+0x448>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d01d      	beq.n	80038fc <HAL_DMA_Init+0x44c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b80      	cmp	r3, #128	; 0x80
 80038c6:	d102      	bne.n	80038ce <HAL_DMA_Init+0x41e>
 80038c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038cc:	e017      	b.n	80038fe <HAL_DMA_Init+0x44e>
 80038ce:	2300      	movs	r3, #0
 80038d0:	e015      	b.n	80038fe <HAL_DMA_Init+0x44e>
 80038d2:	bf00      	nop
 80038d4:	fe10803f 	.word	0xfe10803f
 80038d8:	58025408 	.word	0x58025408
 80038dc:	5802541c 	.word	0x5802541c
 80038e0:	58025430 	.word	0x58025430
 80038e4:	58025444 	.word	0x58025444
 80038e8:	58025458 	.word	0x58025458
 80038ec:	5802546c 	.word	0x5802546c
 80038f0:	58025480 	.word	0x58025480
 80038f4:	58025494 	.word	0x58025494
 80038f8:	fffe000f 	.word	0xfffe000f
 80038fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68d2      	ldr	r2, [r2, #12]
 8003902:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003904:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800390c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003914:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800391c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003924:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800392c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	4b6e      	ldr	r3, [pc, #440]	; (8003afc <HAL_DMA_Init+0x64c>)
 8003944:	4413      	add	r3, r2
 8003946:	4a6e      	ldr	r2, [pc, #440]	; (8003b00 <HAL_DMA_Init+0x650>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	009a      	lsls	r2, r3, #2
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f001 fc45 	bl	80051e4 <DMA_CalcBaseAndBitshift>
 800395a:	4603      	mov	r3, r0
 800395c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2201      	movs	r2, #1
 8003968:	409a      	lsls	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	e008      	b.n	8003982 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2203      	movs	r2, #3
 800397a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e0b7      	b.n	8003af2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a5f      	ldr	r2, [pc, #380]	; (8003b04 <HAL_DMA_Init+0x654>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d072      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a5d      	ldr	r2, [pc, #372]	; (8003b08 <HAL_DMA_Init+0x658>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d06d      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a5c      	ldr	r2, [pc, #368]	; (8003b0c <HAL_DMA_Init+0x65c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d068      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a5a      	ldr	r2, [pc, #360]	; (8003b10 <HAL_DMA_Init+0x660>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d063      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a59      	ldr	r2, [pc, #356]	; (8003b14 <HAL_DMA_Init+0x664>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d05e      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a57      	ldr	r2, [pc, #348]	; (8003b18 <HAL_DMA_Init+0x668>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d059      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a56      	ldr	r2, [pc, #344]	; (8003b1c <HAL_DMA_Init+0x66c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d054      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a54      	ldr	r2, [pc, #336]	; (8003b20 <HAL_DMA_Init+0x670>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d04f      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a53      	ldr	r2, [pc, #332]	; (8003b24 <HAL_DMA_Init+0x674>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d04a      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a51      	ldr	r2, [pc, #324]	; (8003b28 <HAL_DMA_Init+0x678>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d045      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a50      	ldr	r2, [pc, #320]	; (8003b2c <HAL_DMA_Init+0x67c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d040      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a4e      	ldr	r2, [pc, #312]	; (8003b30 <HAL_DMA_Init+0x680>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d03b      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a4d      	ldr	r2, [pc, #308]	; (8003b34 <HAL_DMA_Init+0x684>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d036      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a4b      	ldr	r2, [pc, #300]	; (8003b38 <HAL_DMA_Init+0x688>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d031      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a4a      	ldr	r2, [pc, #296]	; (8003b3c <HAL_DMA_Init+0x68c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d02c      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a48      	ldr	r2, [pc, #288]	; (8003b40 <HAL_DMA_Init+0x690>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d027      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a47      	ldr	r2, [pc, #284]	; (8003b44 <HAL_DMA_Init+0x694>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d022      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a45      	ldr	r2, [pc, #276]	; (8003b48 <HAL_DMA_Init+0x698>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01d      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a44      	ldr	r2, [pc, #272]	; (8003b4c <HAL_DMA_Init+0x69c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d018      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a42      	ldr	r2, [pc, #264]	; (8003b50 <HAL_DMA_Init+0x6a0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a41      	ldr	r2, [pc, #260]	; (8003b54 <HAL_DMA_Init+0x6a4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00e      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a3f      	ldr	r2, [pc, #252]	; (8003b58 <HAL_DMA_Init+0x6a8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d009      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a3e      	ldr	r2, [pc, #248]	; (8003b5c <HAL_DMA_Init+0x6ac>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_DMA_Init+0x5c2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a3c      	ldr	r2, [pc, #240]	; (8003b60 <HAL_DMA_Init+0x6b0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_DMA_Init+0x5c6>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_DMA_Init+0x5c8>
 8003a76:	2300      	movs	r3, #0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d032      	beq.n	8003ae2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f001 fcdf 	bl	8005440 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b80      	cmp	r3, #128	; 0x80
 8003a88:	d102      	bne.n	8003a90 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003aa4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d010      	beq.n	8003ad0 <HAL_DMA_Init+0x620>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d80c      	bhi.n	8003ad0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f001 fd5c 	bl	8005574 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	e008      	b.n	8003ae2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	a7fdabf8 	.word	0xa7fdabf8
 8003b00:	cccccccd 	.word	0xcccccccd
 8003b04:	40020010 	.word	0x40020010
 8003b08:	40020028 	.word	0x40020028
 8003b0c:	40020040 	.word	0x40020040
 8003b10:	40020058 	.word	0x40020058
 8003b14:	40020070 	.word	0x40020070
 8003b18:	40020088 	.word	0x40020088
 8003b1c:	400200a0 	.word	0x400200a0
 8003b20:	400200b8 	.word	0x400200b8
 8003b24:	40020410 	.word	0x40020410
 8003b28:	40020428 	.word	0x40020428
 8003b2c:	40020440 	.word	0x40020440
 8003b30:	40020458 	.word	0x40020458
 8003b34:	40020470 	.word	0x40020470
 8003b38:	40020488 	.word	0x40020488
 8003b3c:	400204a0 	.word	0x400204a0
 8003b40:	400204b8 	.word	0x400204b8
 8003b44:	58025408 	.word	0x58025408
 8003b48:	5802541c 	.word	0x5802541c
 8003b4c:	58025430 	.word	0x58025430
 8003b50:	58025444 	.word	0x58025444
 8003b54:	58025458 	.word	0x58025458
 8003b58:	5802546c 	.word	0x5802546c
 8003b5c:	58025480 	.word	0x58025480
 8003b60:	58025494 	.word	0x58025494

08003b64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e226      	b.n	8003fce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_DMA_Start_IT+0x2a>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e21f      	b.n	8003fce <HAL_DMA_Start_IT+0x46a>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	f040 820a 	bne.w	8003fb8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a68      	ldr	r2, [pc, #416]	; (8003d58 <HAL_DMA_Start_IT+0x1f4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d04a      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a66      	ldr	r2, [pc, #408]	; (8003d5c <HAL_DMA_Start_IT+0x1f8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d045      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a65      	ldr	r2, [pc, #404]	; (8003d60 <HAL_DMA_Start_IT+0x1fc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d040      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a63      	ldr	r2, [pc, #396]	; (8003d64 <HAL_DMA_Start_IT+0x200>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d03b      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a62      	ldr	r2, [pc, #392]	; (8003d68 <HAL_DMA_Start_IT+0x204>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d036      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a60      	ldr	r2, [pc, #384]	; (8003d6c <HAL_DMA_Start_IT+0x208>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d031      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a5f      	ldr	r2, [pc, #380]	; (8003d70 <HAL_DMA_Start_IT+0x20c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d02c      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a5d      	ldr	r2, [pc, #372]	; (8003d74 <HAL_DMA_Start_IT+0x210>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d027      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a5c      	ldr	r2, [pc, #368]	; (8003d78 <HAL_DMA_Start_IT+0x214>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a5a      	ldr	r2, [pc, #360]	; (8003d7c <HAL_DMA_Start_IT+0x218>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01d      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a59      	ldr	r2, [pc, #356]	; (8003d80 <HAL_DMA_Start_IT+0x21c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d018      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a57      	ldr	r2, [pc, #348]	; (8003d84 <HAL_DMA_Start_IT+0x220>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a56      	ldr	r2, [pc, #344]	; (8003d88 <HAL_DMA_Start_IT+0x224>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00e      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a54      	ldr	r2, [pc, #336]	; (8003d8c <HAL_DMA_Start_IT+0x228>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a53      	ldr	r2, [pc, #332]	; (8003d90 <HAL_DMA_Start_IT+0x22c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <HAL_DMA_Start_IT+0xee>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a51      	ldr	r2, [pc, #324]	; (8003d94 <HAL_DMA_Start_IT+0x230>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <HAL_DMA_Start_IT+0x100>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e007      	b.n	8003c74 <HAL_DMA_Start_IT+0x110>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f001 f906 	bl	8004e8c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a34      	ldr	r2, [pc, #208]	; (8003d58 <HAL_DMA_Start_IT+0x1f4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d04a      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a33      	ldr	r2, [pc, #204]	; (8003d5c <HAL_DMA_Start_IT+0x1f8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d045      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a31      	ldr	r2, [pc, #196]	; (8003d60 <HAL_DMA_Start_IT+0x1fc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d040      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a30      	ldr	r2, [pc, #192]	; (8003d64 <HAL_DMA_Start_IT+0x200>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d03b      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2e      	ldr	r2, [pc, #184]	; (8003d68 <HAL_DMA_Start_IT+0x204>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d036      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2d      	ldr	r2, [pc, #180]	; (8003d6c <HAL_DMA_Start_IT+0x208>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d031      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a2b      	ldr	r2, [pc, #172]	; (8003d70 <HAL_DMA_Start_IT+0x20c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d02c      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a2a      	ldr	r2, [pc, #168]	; (8003d74 <HAL_DMA_Start_IT+0x210>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d027      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a28      	ldr	r2, [pc, #160]	; (8003d78 <HAL_DMA_Start_IT+0x214>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d022      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a27      	ldr	r2, [pc, #156]	; (8003d7c <HAL_DMA_Start_IT+0x218>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d01d      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a25      	ldr	r2, [pc, #148]	; (8003d80 <HAL_DMA_Start_IT+0x21c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d018      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a24      	ldr	r2, [pc, #144]	; (8003d84 <HAL_DMA_Start_IT+0x220>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d013      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <HAL_DMA_Start_IT+0x224>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00e      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a21      	ldr	r2, [pc, #132]	; (8003d8c <HAL_DMA_Start_IT+0x228>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1f      	ldr	r2, [pc, #124]	; (8003d90 <HAL_DMA_Start_IT+0x22c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <HAL_DMA_Start_IT+0x1bc>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1e      	ldr	r2, [pc, #120]	; (8003d94 <HAL_DMA_Start_IT+0x230>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <HAL_DMA_Start_IT+0x1c0>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_DMA_Start_IT+0x1c2>
 8003d24:	2300      	movs	r3, #0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d036      	beq.n	8003d98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 021e 	bic.w	r2, r3, #30
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0216 	orr.w	r2, r2, #22
 8003d3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d03e      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0208 	orr.w	r2, r2, #8
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e035      	b.n	8003dc4 <HAL_DMA_Start_IT+0x260>
 8003d58:	40020010 	.word	0x40020010
 8003d5c:	40020028 	.word	0x40020028
 8003d60:	40020040 	.word	0x40020040
 8003d64:	40020058 	.word	0x40020058
 8003d68:	40020070 	.word	0x40020070
 8003d6c:	40020088 	.word	0x40020088
 8003d70:	400200a0 	.word	0x400200a0
 8003d74:	400200b8 	.word	0x400200b8
 8003d78:	40020410 	.word	0x40020410
 8003d7c:	40020428 	.word	0x40020428
 8003d80:	40020440 	.word	0x40020440
 8003d84:	40020458 	.word	0x40020458
 8003d88:	40020470 	.word	0x40020470
 8003d8c:	40020488 	.word	0x40020488
 8003d90:	400204a0 	.word	0x400204a0
 8003d94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 020e 	bic.w	r2, r3, #14
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 020a 	orr.w	r2, r2, #10
 8003daa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0204 	orr.w	r2, r2, #4
 8003dc2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a83      	ldr	r2, [pc, #524]	; (8003fd8 <HAL_DMA_Start_IT+0x474>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d072      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a82      	ldr	r2, [pc, #520]	; (8003fdc <HAL_DMA_Start_IT+0x478>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d06d      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a80      	ldr	r2, [pc, #512]	; (8003fe0 <HAL_DMA_Start_IT+0x47c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d068      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a7f      	ldr	r2, [pc, #508]	; (8003fe4 <HAL_DMA_Start_IT+0x480>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d063      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a7d      	ldr	r2, [pc, #500]	; (8003fe8 <HAL_DMA_Start_IT+0x484>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d05e      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a7c      	ldr	r2, [pc, #496]	; (8003fec <HAL_DMA_Start_IT+0x488>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d059      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a7a      	ldr	r2, [pc, #488]	; (8003ff0 <HAL_DMA_Start_IT+0x48c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d054      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a79      	ldr	r2, [pc, #484]	; (8003ff4 <HAL_DMA_Start_IT+0x490>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d04f      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a77      	ldr	r2, [pc, #476]	; (8003ff8 <HAL_DMA_Start_IT+0x494>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d04a      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a76      	ldr	r2, [pc, #472]	; (8003ffc <HAL_DMA_Start_IT+0x498>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d045      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a74      	ldr	r2, [pc, #464]	; (8004000 <HAL_DMA_Start_IT+0x49c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d040      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a73      	ldr	r2, [pc, #460]	; (8004004 <HAL_DMA_Start_IT+0x4a0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d03b      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a71      	ldr	r2, [pc, #452]	; (8004008 <HAL_DMA_Start_IT+0x4a4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d036      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a70      	ldr	r2, [pc, #448]	; (800400c <HAL_DMA_Start_IT+0x4a8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d031      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a6e      	ldr	r2, [pc, #440]	; (8004010 <HAL_DMA_Start_IT+0x4ac>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d02c      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a6d      	ldr	r2, [pc, #436]	; (8004014 <HAL_DMA_Start_IT+0x4b0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d027      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a6b      	ldr	r2, [pc, #428]	; (8004018 <HAL_DMA_Start_IT+0x4b4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d022      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a6a      	ldr	r2, [pc, #424]	; (800401c <HAL_DMA_Start_IT+0x4b8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d01d      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a68      	ldr	r2, [pc, #416]	; (8004020 <HAL_DMA_Start_IT+0x4bc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d018      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a67      	ldr	r2, [pc, #412]	; (8004024 <HAL_DMA_Start_IT+0x4c0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a65      	ldr	r2, [pc, #404]	; (8004028 <HAL_DMA_Start_IT+0x4c4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a64      	ldr	r2, [pc, #400]	; (800402c <HAL_DMA_Start_IT+0x4c8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d009      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a62      	ldr	r2, [pc, #392]	; (8004030 <HAL_DMA_Start_IT+0x4cc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x350>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a61      	ldr	r2, [pc, #388]	; (8004034 <HAL_DMA_Start_IT+0x4d0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d101      	bne.n	8003eb8 <HAL_DMA_Start_IT+0x354>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <HAL_DMA_Start_IT+0x356>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01a      	beq.n	8003ef4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eda:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a37      	ldr	r2, [pc, #220]	; (8003fd8 <HAL_DMA_Start_IT+0x474>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d04a      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a36      	ldr	r2, [pc, #216]	; (8003fdc <HAL_DMA_Start_IT+0x478>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d045      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a34      	ldr	r2, [pc, #208]	; (8003fe0 <HAL_DMA_Start_IT+0x47c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d040      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a33      	ldr	r2, [pc, #204]	; (8003fe4 <HAL_DMA_Start_IT+0x480>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d03b      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a31      	ldr	r2, [pc, #196]	; (8003fe8 <HAL_DMA_Start_IT+0x484>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d036      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a30      	ldr	r2, [pc, #192]	; (8003fec <HAL_DMA_Start_IT+0x488>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d031      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a2e      	ldr	r2, [pc, #184]	; (8003ff0 <HAL_DMA_Start_IT+0x48c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d02c      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a2d      	ldr	r2, [pc, #180]	; (8003ff4 <HAL_DMA_Start_IT+0x490>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d027      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2b      	ldr	r2, [pc, #172]	; (8003ff8 <HAL_DMA_Start_IT+0x494>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2a      	ldr	r2, [pc, #168]	; (8003ffc <HAL_DMA_Start_IT+0x498>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d01d      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a28      	ldr	r2, [pc, #160]	; (8004000 <HAL_DMA_Start_IT+0x49c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a27      	ldr	r2, [pc, #156]	; (8004004 <HAL_DMA_Start_IT+0x4a0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a25      	ldr	r2, [pc, #148]	; (8004008 <HAL_DMA_Start_IT+0x4a4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a24      	ldr	r2, [pc, #144]	; (800400c <HAL_DMA_Start_IT+0x4a8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a22      	ldr	r2, [pc, #136]	; (8004010 <HAL_DMA_Start_IT+0x4ac>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_DMA_Start_IT+0x430>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a21      	ldr	r2, [pc, #132]	; (8004014 <HAL_DMA_Start_IT+0x4b0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d108      	bne.n	8003fa6 <HAL_DMA_Start_IT+0x442>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e012      	b.n	8003fcc <HAL_DMA_Start_IT+0x468>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0201 	orr.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e009      	b.n	8003fcc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40020010 	.word	0x40020010
 8003fdc:	40020028 	.word	0x40020028
 8003fe0:	40020040 	.word	0x40020040
 8003fe4:	40020058 	.word	0x40020058
 8003fe8:	40020070 	.word	0x40020070
 8003fec:	40020088 	.word	0x40020088
 8003ff0:	400200a0 	.word	0x400200a0
 8003ff4:	400200b8 	.word	0x400200b8
 8003ff8:	40020410 	.word	0x40020410
 8003ffc:	40020428 	.word	0x40020428
 8004000:	40020440 	.word	0x40020440
 8004004:	40020458 	.word	0x40020458
 8004008:	40020470 	.word	0x40020470
 800400c:	40020488 	.word	0x40020488
 8004010:	400204a0 	.word	0x400204a0
 8004014:	400204b8 	.word	0x400204b8
 8004018:	58025408 	.word	0x58025408
 800401c:	5802541c 	.word	0x5802541c
 8004020:	58025430 	.word	0x58025430
 8004024:	58025444 	.word	0x58025444
 8004028:	58025458 	.word	0x58025458
 800402c:	5802546c 	.word	0x5802546c
 8004030:	58025480 	.word	0x58025480
 8004034:	58025494 	.word	0x58025494

08004038 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	; 0x28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004044:	4b67      	ldr	r3, [pc, #412]	; (80041e4 <HAL_DMA_IRQHandler+0x1ac>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a67      	ldr	r2, [pc, #412]	; (80041e8 <HAL_DMA_IRQHandler+0x1b0>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0a9b      	lsrs	r3, r3, #10
 8004050:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004056:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a5f      	ldr	r2, [pc, #380]	; (80041ec <HAL_DMA_IRQHandler+0x1b4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d04a      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a5d      	ldr	r2, [pc, #372]	; (80041f0 <HAL_DMA_IRQHandler+0x1b8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d045      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a5c      	ldr	r2, [pc, #368]	; (80041f4 <HAL_DMA_IRQHandler+0x1bc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d040      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a5a      	ldr	r2, [pc, #360]	; (80041f8 <HAL_DMA_IRQHandler+0x1c0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d03b      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a59      	ldr	r2, [pc, #356]	; (80041fc <HAL_DMA_IRQHandler+0x1c4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d036      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a57      	ldr	r2, [pc, #348]	; (8004200 <HAL_DMA_IRQHandler+0x1c8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d031      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a56      	ldr	r2, [pc, #344]	; (8004204 <HAL_DMA_IRQHandler+0x1cc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d02c      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a54      	ldr	r2, [pc, #336]	; (8004208 <HAL_DMA_IRQHandler+0x1d0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d027      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a53      	ldr	r2, [pc, #332]	; (800420c <HAL_DMA_IRQHandler+0x1d4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d022      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a51      	ldr	r2, [pc, #324]	; (8004210 <HAL_DMA_IRQHandler+0x1d8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01d      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a50      	ldr	r2, [pc, #320]	; (8004214 <HAL_DMA_IRQHandler+0x1dc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d018      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a4e      	ldr	r2, [pc, #312]	; (8004218 <HAL_DMA_IRQHandler+0x1e0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a4d      	ldr	r2, [pc, #308]	; (800421c <HAL_DMA_IRQHandler+0x1e4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00e      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a4b      	ldr	r2, [pc, #300]	; (8004220 <HAL_DMA_IRQHandler+0x1e8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d009      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a4a      	ldr	r2, [pc, #296]	; (8004224 <HAL_DMA_IRQHandler+0x1ec>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <HAL_DMA_IRQHandler+0xd2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a48      	ldr	r2, [pc, #288]	; (8004228 <HAL_DMA_IRQHandler+0x1f0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d101      	bne.n	800410e <HAL_DMA_IRQHandler+0xd6>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <HAL_DMA_IRQHandler+0xd8>
 800410e:	2300      	movs	r3, #0
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 842b 	beq.w	800496c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	2208      	movs	r2, #8
 8004120:	409a      	lsls	r2, r3
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80a2 	beq.w	8004270 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a2e      	ldr	r2, [pc, #184]	; (80041ec <HAL_DMA_IRQHandler+0x1b4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d04a      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2d      	ldr	r2, [pc, #180]	; (80041f0 <HAL_DMA_IRQHandler+0x1b8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d045      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a2b      	ldr	r2, [pc, #172]	; (80041f4 <HAL_DMA_IRQHandler+0x1bc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d040      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a2a      	ldr	r2, [pc, #168]	; (80041f8 <HAL_DMA_IRQHandler+0x1c0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d03b      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a28      	ldr	r2, [pc, #160]	; (80041fc <HAL_DMA_IRQHandler+0x1c4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d036      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a27      	ldr	r2, [pc, #156]	; (8004200 <HAL_DMA_IRQHandler+0x1c8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d031      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a25      	ldr	r2, [pc, #148]	; (8004204 <HAL_DMA_IRQHandler+0x1cc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d02c      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a24      	ldr	r2, [pc, #144]	; (8004208 <HAL_DMA_IRQHandler+0x1d0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d027      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a22      	ldr	r2, [pc, #136]	; (800420c <HAL_DMA_IRQHandler+0x1d4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d022      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a21      	ldr	r2, [pc, #132]	; (8004210 <HAL_DMA_IRQHandler+0x1d8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d01d      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <HAL_DMA_IRQHandler+0x1dc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d018      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1e      	ldr	r2, [pc, #120]	; (8004218 <HAL_DMA_IRQHandler+0x1e0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d013      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1c      	ldr	r2, [pc, #112]	; (800421c <HAL_DMA_IRQHandler+0x1e4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00e      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <HAL_DMA_IRQHandler+0x1e8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d009      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a19      	ldr	r2, [pc, #100]	; (8004224 <HAL_DMA_IRQHandler+0x1ec>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_DMA_IRQHandler+0x194>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a18      	ldr	r2, [pc, #96]	; (8004228 <HAL_DMA_IRQHandler+0x1f0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d12f      	bne.n	800422c <HAL_DMA_IRQHandler+0x1f4>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bf14      	ite	ne
 80041da:	2301      	movne	r3, #1
 80041dc:	2300      	moveq	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	e02e      	b.n	8004240 <HAL_DMA_IRQHandler+0x208>
 80041e2:	bf00      	nop
 80041e4:	2400010c 	.word	0x2400010c
 80041e8:	1b4e81b5 	.word	0x1b4e81b5
 80041ec:	40020010 	.word	0x40020010
 80041f0:	40020028 	.word	0x40020028
 80041f4:	40020040 	.word	0x40020040
 80041f8:	40020058 	.word	0x40020058
 80041fc:	40020070 	.word	0x40020070
 8004200:	40020088 	.word	0x40020088
 8004204:	400200a0 	.word	0x400200a0
 8004208:	400200b8 	.word	0x400200b8
 800420c:	40020410 	.word	0x40020410
 8004210:	40020428 	.word	0x40020428
 8004214:	40020440 	.word	0x40020440
 8004218:	40020458 	.word	0x40020458
 800421c:	40020470 	.word	0x40020470
 8004220:	40020488 	.word	0x40020488
 8004224:	400204a0 	.word	0x400204a0
 8004228:	400204b8 	.word	0x400204b8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d015      	beq.n	8004270 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0204 	bic.w	r2, r2, #4
 8004252:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	2208      	movs	r2, #8
 800425e:	409a      	lsls	r2, r3
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f043 0201 	orr.w	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	fa22 f303 	lsr.w	r3, r2, r3
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d06e      	beq.n	8004364 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a69      	ldr	r2, [pc, #420]	; (8004430 <HAL_DMA_IRQHandler+0x3f8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d04a      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a67      	ldr	r2, [pc, #412]	; (8004434 <HAL_DMA_IRQHandler+0x3fc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d045      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a66      	ldr	r2, [pc, #408]	; (8004438 <HAL_DMA_IRQHandler+0x400>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d040      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a64      	ldr	r2, [pc, #400]	; (800443c <HAL_DMA_IRQHandler+0x404>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d03b      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a63      	ldr	r2, [pc, #396]	; (8004440 <HAL_DMA_IRQHandler+0x408>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d036      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a61      	ldr	r2, [pc, #388]	; (8004444 <HAL_DMA_IRQHandler+0x40c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d031      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a60      	ldr	r2, [pc, #384]	; (8004448 <HAL_DMA_IRQHandler+0x410>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d02c      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a5e      	ldr	r2, [pc, #376]	; (800444c <HAL_DMA_IRQHandler+0x414>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d027      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a5d      	ldr	r2, [pc, #372]	; (8004450 <HAL_DMA_IRQHandler+0x418>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a5b      	ldr	r2, [pc, #364]	; (8004454 <HAL_DMA_IRQHandler+0x41c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01d      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a5a      	ldr	r2, [pc, #360]	; (8004458 <HAL_DMA_IRQHandler+0x420>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d018      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a58      	ldr	r2, [pc, #352]	; (800445c <HAL_DMA_IRQHandler+0x424>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a57      	ldr	r2, [pc, #348]	; (8004460 <HAL_DMA_IRQHandler+0x428>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a55      	ldr	r2, [pc, #340]	; (8004464 <HAL_DMA_IRQHandler+0x42c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a54      	ldr	r2, [pc, #336]	; (8004468 <HAL_DMA_IRQHandler+0x430>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_DMA_IRQHandler+0x2ee>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a52      	ldr	r2, [pc, #328]	; (800446c <HAL_DMA_IRQHandler+0x434>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10a      	bne.n	800433c <HAL_DMA_IRQHandler+0x304>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e003      	b.n	8004344 <HAL_DMA_IRQHandler+0x30c>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2300      	movs	r3, #0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00d      	beq.n	8004364 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	2201      	movs	r2, #1
 8004352:	409a      	lsls	r2, r3
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435c:	f043 0202 	orr.w	r2, r3, #2
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2204      	movs	r2, #4
 800436e:	409a      	lsls	r2, r3
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 808f 	beq.w	8004498 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2c      	ldr	r2, [pc, #176]	; (8004430 <HAL_DMA_IRQHandler+0x3f8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d04a      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2a      	ldr	r2, [pc, #168]	; (8004434 <HAL_DMA_IRQHandler+0x3fc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d045      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a29      	ldr	r2, [pc, #164]	; (8004438 <HAL_DMA_IRQHandler+0x400>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d040      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a27      	ldr	r2, [pc, #156]	; (800443c <HAL_DMA_IRQHandler+0x404>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d03b      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a26      	ldr	r2, [pc, #152]	; (8004440 <HAL_DMA_IRQHandler+0x408>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d036      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a24      	ldr	r2, [pc, #144]	; (8004444 <HAL_DMA_IRQHandler+0x40c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d031      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a23      	ldr	r2, [pc, #140]	; (8004448 <HAL_DMA_IRQHandler+0x410>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d02c      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a21      	ldr	r2, [pc, #132]	; (800444c <HAL_DMA_IRQHandler+0x414>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d027      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a20      	ldr	r2, [pc, #128]	; (8004450 <HAL_DMA_IRQHandler+0x418>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d022      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <HAL_DMA_IRQHandler+0x41c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01d      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <HAL_DMA_IRQHandler+0x420>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d018      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1b      	ldr	r2, [pc, #108]	; (800445c <HAL_DMA_IRQHandler+0x424>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <HAL_DMA_IRQHandler+0x428>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00e      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a18      	ldr	r2, [pc, #96]	; (8004464 <HAL_DMA_IRQHandler+0x42c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a17      	ldr	r2, [pc, #92]	; (8004468 <HAL_DMA_IRQHandler+0x430>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_DMA_IRQHandler+0x3e2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a15      	ldr	r2, [pc, #84]	; (800446c <HAL_DMA_IRQHandler+0x434>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d12a      	bne.n	8004470 <HAL_DMA_IRQHandler+0x438>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf14      	ite	ne
 8004428:	2301      	movne	r3, #1
 800442a:	2300      	moveq	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e023      	b.n	8004478 <HAL_DMA_IRQHandler+0x440>
 8004430:	40020010 	.word	0x40020010
 8004434:	40020028 	.word	0x40020028
 8004438:	40020040 	.word	0x40020040
 800443c:	40020058 	.word	0x40020058
 8004440:	40020070 	.word	0x40020070
 8004444:	40020088 	.word	0x40020088
 8004448:	400200a0 	.word	0x400200a0
 800444c:	400200b8 	.word	0x400200b8
 8004450:	40020410 	.word	0x40020410
 8004454:	40020428 	.word	0x40020428
 8004458:	40020440 	.word	0x40020440
 800445c:	40020458 	.word	0x40020458
 8004460:	40020470 	.word	0x40020470
 8004464:	40020488 	.word	0x40020488
 8004468:	400204a0 	.word	0x400204a0
 800446c:	400204b8 	.word	0x400204b8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2300      	movs	r3, #0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00d      	beq.n	8004498 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	2204      	movs	r2, #4
 8004486:	409a      	lsls	r2, r3
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	f043 0204 	orr.w	r2, r3, #4
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2210      	movs	r2, #16
 80044a2:	409a      	lsls	r2, r3
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 80a6 	beq.w	80045fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a85      	ldr	r2, [pc, #532]	; (80046c8 <HAL_DMA_IRQHandler+0x690>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d04a      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a83      	ldr	r2, [pc, #524]	; (80046cc <HAL_DMA_IRQHandler+0x694>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d045      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a82      	ldr	r2, [pc, #520]	; (80046d0 <HAL_DMA_IRQHandler+0x698>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d040      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a80      	ldr	r2, [pc, #512]	; (80046d4 <HAL_DMA_IRQHandler+0x69c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d03b      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a7f      	ldr	r2, [pc, #508]	; (80046d8 <HAL_DMA_IRQHandler+0x6a0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d036      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a7d      	ldr	r2, [pc, #500]	; (80046dc <HAL_DMA_IRQHandler+0x6a4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d031      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7c      	ldr	r2, [pc, #496]	; (80046e0 <HAL_DMA_IRQHandler+0x6a8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d02c      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a7a      	ldr	r2, [pc, #488]	; (80046e4 <HAL_DMA_IRQHandler+0x6ac>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d027      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a79      	ldr	r2, [pc, #484]	; (80046e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d022      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a77      	ldr	r2, [pc, #476]	; (80046ec <HAL_DMA_IRQHandler+0x6b4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01d      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a76      	ldr	r2, [pc, #472]	; (80046f0 <HAL_DMA_IRQHandler+0x6b8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d018      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a74      	ldr	r2, [pc, #464]	; (80046f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a73      	ldr	r2, [pc, #460]	; (80046f8 <HAL_DMA_IRQHandler+0x6c0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00e      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a71      	ldr	r2, [pc, #452]	; (80046fc <HAL_DMA_IRQHandler+0x6c4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d009      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a70      	ldr	r2, [pc, #448]	; (8004700 <HAL_DMA_IRQHandler+0x6c8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_DMA_IRQHandler+0x516>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a6e      	ldr	r2, [pc, #440]	; (8004704 <HAL_DMA_IRQHandler+0x6cc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10a      	bne.n	8004564 <HAL_DMA_IRQHandler+0x52c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf14      	ite	ne
 800455c:	2301      	movne	r3, #1
 800455e:	2300      	moveq	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	e009      	b.n	8004578 <HAL_DMA_IRQHandler+0x540>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	bf14      	ite	ne
 8004572:	2301      	movne	r3, #1
 8004574:	2300      	moveq	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d03e      	beq.n	80045fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2210      	movs	r2, #16
 8004586:	409a      	lsls	r2, r3
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d018      	beq.n	80045cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d108      	bne.n	80045ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d024      	beq.n	80045fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	4798      	blx	r3
 80045b8:	e01f      	b.n	80045fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01b      	beq.n	80045fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
 80045ca:	e016      	b.n	80045fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d107      	bne.n	80045ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0208 	bic.w	r2, r2, #8
 80045e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	2220      	movs	r2, #32
 8004604:	409a      	lsls	r2, r3
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8110 	beq.w	8004830 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <HAL_DMA_IRQHandler+0x690>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d04a      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a2b      	ldr	r2, [pc, #172]	; (80046cc <HAL_DMA_IRQHandler+0x694>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d045      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a29      	ldr	r2, [pc, #164]	; (80046d0 <HAL_DMA_IRQHandler+0x698>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d040      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a28      	ldr	r2, [pc, #160]	; (80046d4 <HAL_DMA_IRQHandler+0x69c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d03b      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a26      	ldr	r2, [pc, #152]	; (80046d8 <HAL_DMA_IRQHandler+0x6a0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d036      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a25      	ldr	r2, [pc, #148]	; (80046dc <HAL_DMA_IRQHandler+0x6a4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d031      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a23      	ldr	r2, [pc, #140]	; (80046e0 <HAL_DMA_IRQHandler+0x6a8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d02c      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a22      	ldr	r2, [pc, #136]	; (80046e4 <HAL_DMA_IRQHandler+0x6ac>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d027      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a20      	ldr	r2, [pc, #128]	; (80046e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d022      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1f      	ldr	r2, [pc, #124]	; (80046ec <HAL_DMA_IRQHandler+0x6b4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d01d      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <HAL_DMA_IRQHandler+0x6b8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d018      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d013      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1a      	ldr	r2, [pc, #104]	; (80046f8 <HAL_DMA_IRQHandler+0x6c0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00e      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a19      	ldr	r2, [pc, #100]	; (80046fc <HAL_DMA_IRQHandler+0x6c4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d009      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a17      	ldr	r2, [pc, #92]	; (8004700 <HAL_DMA_IRQHandler+0x6c8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x678>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a16      	ldr	r2, [pc, #88]	; (8004704 <HAL_DMA_IRQHandler+0x6cc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d12b      	bne.n	8004708 <HAL_DMA_IRQHandler+0x6d0>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	e02a      	b.n	800471c <HAL_DMA_IRQHandler+0x6e4>
 80046c6:	bf00      	nop
 80046c8:	40020010 	.word	0x40020010
 80046cc:	40020028 	.word	0x40020028
 80046d0:	40020040 	.word	0x40020040
 80046d4:	40020058 	.word	0x40020058
 80046d8:	40020070 	.word	0x40020070
 80046dc:	40020088 	.word	0x40020088
 80046e0:	400200a0 	.word	0x400200a0
 80046e4:	400200b8 	.word	0x400200b8
 80046e8:	40020410 	.word	0x40020410
 80046ec:	40020428 	.word	0x40020428
 80046f0:	40020440 	.word	0x40020440
 80046f4:	40020458 	.word	0x40020458
 80046f8:	40020470 	.word	0x40020470
 80046fc:	40020488 	.word	0x40020488
 8004700:	400204a0 	.word	0x400204a0
 8004704:	400204b8 	.word	0x400204b8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	bf14      	ite	ne
 8004716:	2301      	movne	r3, #1
 8004718:	2300      	moveq	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8087 	beq.w	8004830 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2220      	movs	r2, #32
 800472c:	409a      	lsls	r2, r3
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b04      	cmp	r3, #4
 800473c:	d139      	bne.n	80047b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0216 	bic.w	r2, r2, #22
 800474c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800475c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <HAL_DMA_IRQHandler+0x736>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0208 	bic.w	r2, r2, #8
 800477c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	223f      	movs	r2, #63	; 0x3f
 8004788:	409a      	lsls	r2, r3
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 834a 	beq.w	8004e3c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	4798      	blx	r3
          }
          return;
 80047b0:	e344      	b.n	8004e3c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d018      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d108      	bne.n	80047e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d02c      	beq.n	8004830 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
 80047de:	e027      	b.n	8004830 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d023      	beq.n	8004830 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
 80047f0:	e01e      	b.n	8004830 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10f      	bne.n	8004820 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0210 	bic.w	r2, r2, #16
 800480e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8306 	beq.w	8004e46 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8088 	beq.w	8004958 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2204      	movs	r2, #4
 800484c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a7a      	ldr	r2, [pc, #488]	; (8004a40 <HAL_DMA_IRQHandler+0xa08>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d04a      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a79      	ldr	r2, [pc, #484]	; (8004a44 <HAL_DMA_IRQHandler+0xa0c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d045      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a77      	ldr	r2, [pc, #476]	; (8004a48 <HAL_DMA_IRQHandler+0xa10>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d040      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a76      	ldr	r2, [pc, #472]	; (8004a4c <HAL_DMA_IRQHandler+0xa14>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d03b      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a74      	ldr	r2, [pc, #464]	; (8004a50 <HAL_DMA_IRQHandler+0xa18>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d036      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a73      	ldr	r2, [pc, #460]	; (8004a54 <HAL_DMA_IRQHandler+0xa1c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d031      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a71      	ldr	r2, [pc, #452]	; (8004a58 <HAL_DMA_IRQHandler+0xa20>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d02c      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a70      	ldr	r2, [pc, #448]	; (8004a5c <HAL_DMA_IRQHandler+0xa24>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d027      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a6e      	ldr	r2, [pc, #440]	; (8004a60 <HAL_DMA_IRQHandler+0xa28>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d022      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a6d      	ldr	r2, [pc, #436]	; (8004a64 <HAL_DMA_IRQHandler+0xa2c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d01d      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a6b      	ldr	r2, [pc, #428]	; (8004a68 <HAL_DMA_IRQHandler+0xa30>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a6a      	ldr	r2, [pc, #424]	; (8004a6c <HAL_DMA_IRQHandler+0xa34>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a68      	ldr	r2, [pc, #416]	; (8004a70 <HAL_DMA_IRQHandler+0xa38>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a67      	ldr	r2, [pc, #412]	; (8004a74 <HAL_DMA_IRQHandler+0xa3c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a65      	ldr	r2, [pc, #404]	; (8004a78 <HAL_DMA_IRQHandler+0xa40>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x8b8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a64      	ldr	r2, [pc, #400]	; (8004a7c <HAL_DMA_IRQHandler+0xa44>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d108      	bne.n	8004902 <HAL_DMA_IRQHandler+0x8ca>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0201 	bic.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e007      	b.n	8004912 <HAL_DMA_IRQHandler+0x8da>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491a:	429a      	cmp	r2, r3
 800491c:	d307      	bcc.n	800492e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f2      	bne.n	8004912 <HAL_DMA_IRQHandler+0x8da>
 800492c:	e000      	b.n	8004930 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800492e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2203      	movs	r2, #3
 8004942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004946:	e003      	b.n	8004950 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 8272 	beq.w	8004e46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
 800496a:	e26c      	b.n	8004e46 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a43      	ldr	r2, [pc, #268]	; (8004a80 <HAL_DMA_IRQHandler+0xa48>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d022      	beq.n	80049bc <HAL_DMA_IRQHandler+0x984>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a42      	ldr	r2, [pc, #264]	; (8004a84 <HAL_DMA_IRQHandler+0xa4c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d01d      	beq.n	80049bc <HAL_DMA_IRQHandler+0x984>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a40      	ldr	r2, [pc, #256]	; (8004a88 <HAL_DMA_IRQHandler+0xa50>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d018      	beq.n	80049bc <HAL_DMA_IRQHandler+0x984>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a3f      	ldr	r2, [pc, #252]	; (8004a8c <HAL_DMA_IRQHandler+0xa54>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_DMA_IRQHandler+0x984>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a3d      	ldr	r2, [pc, #244]	; (8004a90 <HAL_DMA_IRQHandler+0xa58>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_DMA_IRQHandler+0x984>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a3c      	ldr	r2, [pc, #240]	; (8004a94 <HAL_DMA_IRQHandler+0xa5c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_DMA_IRQHandler+0x984>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a3a      	ldr	r2, [pc, #232]	; (8004a98 <HAL_DMA_IRQHandler+0xa60>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_DMA_IRQHandler+0x984>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a39      	ldr	r2, [pc, #228]	; (8004a9c <HAL_DMA_IRQHandler+0xa64>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d101      	bne.n	80049c0 <HAL_DMA_IRQHandler+0x988>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <HAL_DMA_IRQHandler+0x98a>
 80049c0:	2300      	movs	r3, #0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 823f 	beq.w	8004e46 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2204      	movs	r2, #4
 80049da:	409a      	lsls	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80cd 	beq.w	8004b80 <HAL_DMA_IRQHandler+0xb48>
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80c7 	beq.w	8004b80 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	2204      	movs	r2, #4
 80049fc:	409a      	lsls	r2, r3
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d049      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8210 	beq.w	8004e40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a28:	e20a      	b.n	8004e40 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 8206 	beq.w	8004e40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a3c:	e200      	b.n	8004e40 <HAL_DMA_IRQHandler+0xe08>
 8004a3e:	bf00      	nop
 8004a40:	40020010 	.word	0x40020010
 8004a44:	40020028 	.word	0x40020028
 8004a48:	40020040 	.word	0x40020040
 8004a4c:	40020058 	.word	0x40020058
 8004a50:	40020070 	.word	0x40020070
 8004a54:	40020088 	.word	0x40020088
 8004a58:	400200a0 	.word	0x400200a0
 8004a5c:	400200b8 	.word	0x400200b8
 8004a60:	40020410 	.word	0x40020410
 8004a64:	40020428 	.word	0x40020428
 8004a68:	40020440 	.word	0x40020440
 8004a6c:	40020458 	.word	0x40020458
 8004a70:	40020470 	.word	0x40020470
 8004a74:	40020488 	.word	0x40020488
 8004a78:	400204a0 	.word	0x400204a0
 8004a7c:	400204b8 	.word	0x400204b8
 8004a80:	58025408 	.word	0x58025408
 8004a84:	5802541c 	.word	0x5802541c
 8004a88:	58025430 	.word	0x58025430
 8004a8c:	58025444 	.word	0x58025444
 8004a90:	58025458 	.word	0x58025458
 8004a94:	5802546c 	.word	0x5802546c
 8004a98:	58025480 	.word	0x58025480
 8004a9c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d160      	bne.n	8004b6c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a7f      	ldr	r2, [pc, #508]	; (8004cac <HAL_DMA_IRQHandler+0xc74>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d04a      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a7d      	ldr	r2, [pc, #500]	; (8004cb0 <HAL_DMA_IRQHandler+0xc78>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d045      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a7c      	ldr	r2, [pc, #496]	; (8004cb4 <HAL_DMA_IRQHandler+0xc7c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d040      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a7a      	ldr	r2, [pc, #488]	; (8004cb8 <HAL_DMA_IRQHandler+0xc80>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d03b      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a79      	ldr	r2, [pc, #484]	; (8004cbc <HAL_DMA_IRQHandler+0xc84>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d036      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a77      	ldr	r2, [pc, #476]	; (8004cc0 <HAL_DMA_IRQHandler+0xc88>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d031      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a76      	ldr	r2, [pc, #472]	; (8004cc4 <HAL_DMA_IRQHandler+0xc8c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d02c      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a74      	ldr	r2, [pc, #464]	; (8004cc8 <HAL_DMA_IRQHandler+0xc90>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d027      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a73      	ldr	r2, [pc, #460]	; (8004ccc <HAL_DMA_IRQHandler+0xc94>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d022      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a71      	ldr	r2, [pc, #452]	; (8004cd0 <HAL_DMA_IRQHandler+0xc98>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01d      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a70      	ldr	r2, [pc, #448]	; (8004cd4 <HAL_DMA_IRQHandler+0xc9c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d018      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6e      	ldr	r2, [pc, #440]	; (8004cd8 <HAL_DMA_IRQHandler+0xca0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a6d      	ldr	r2, [pc, #436]	; (8004cdc <HAL_DMA_IRQHandler+0xca4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00e      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a6b      	ldr	r2, [pc, #428]	; (8004ce0 <HAL_DMA_IRQHandler+0xca8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d009      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a6a      	ldr	r2, [pc, #424]	; (8004ce4 <HAL_DMA_IRQHandler+0xcac>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d004      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xb12>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a68      	ldr	r2, [pc, #416]	; (8004ce8 <HAL_DMA_IRQHandler+0xcb0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d108      	bne.n	8004b5c <HAL_DMA_IRQHandler+0xb24>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0208 	bic.w	r2, r2, #8
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e007      	b.n	8004b6c <HAL_DMA_IRQHandler+0xb34>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0204 	bic.w	r2, r2, #4
 8004b6a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8165 	beq.w	8004e40 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b7e:	e15f      	b.n	8004e40 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b84:	f003 031f 	and.w	r3, r3, #31
 8004b88:	2202      	movs	r2, #2
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80c5 	beq.w	8004d20 <HAL_DMA_IRQHandler+0xce8>
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80bf 	beq.w	8004d20 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba6:	f003 031f 	and.w	r3, r3, #31
 8004baa:	2202      	movs	r2, #2
 8004bac:	409a      	lsls	r2, r3
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d018      	beq.n	8004bee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 813a 	beq.w	8004e44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bd8:	e134      	b.n	8004e44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8130 	beq.w	8004e44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bec:	e12a      	b.n	8004e44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f003 0320 	and.w	r3, r3, #32
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f040 8089 	bne.w	8004d0c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a2b      	ldr	r2, [pc, #172]	; (8004cac <HAL_DMA_IRQHandler+0xc74>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d04a      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a29      	ldr	r2, [pc, #164]	; (8004cb0 <HAL_DMA_IRQHandler+0xc78>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d045      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a28      	ldr	r2, [pc, #160]	; (8004cb4 <HAL_DMA_IRQHandler+0xc7c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d040      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a26      	ldr	r2, [pc, #152]	; (8004cb8 <HAL_DMA_IRQHandler+0xc80>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d03b      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a25      	ldr	r2, [pc, #148]	; (8004cbc <HAL_DMA_IRQHandler+0xc84>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d036      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a23      	ldr	r2, [pc, #140]	; (8004cc0 <HAL_DMA_IRQHandler+0xc88>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d031      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a22      	ldr	r2, [pc, #136]	; (8004cc4 <HAL_DMA_IRQHandler+0xc8c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d02c      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a20      	ldr	r2, [pc, #128]	; (8004cc8 <HAL_DMA_IRQHandler+0xc90>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d027      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1f      	ldr	r2, [pc, #124]	; (8004ccc <HAL_DMA_IRQHandler+0xc94>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d022      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1d      	ldr	r2, [pc, #116]	; (8004cd0 <HAL_DMA_IRQHandler+0xc98>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d01d      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1c      	ldr	r2, [pc, #112]	; (8004cd4 <HAL_DMA_IRQHandler+0xc9c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d018      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a1a      	ldr	r2, [pc, #104]	; (8004cd8 <HAL_DMA_IRQHandler+0xca0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_DMA_IRQHandler+0xca4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00e      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a17      	ldr	r2, [pc, #92]	; (8004ce0 <HAL_DMA_IRQHandler+0xca8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d009      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a16      	ldr	r2, [pc, #88]	; (8004ce4 <HAL_DMA_IRQHandler+0xcac>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d004      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xc62>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a14      	ldr	r2, [pc, #80]	; (8004ce8 <HAL_DMA_IRQHandler+0xcb0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d128      	bne.n	8004cec <HAL_DMA_IRQHandler+0xcb4>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0214 	bic.w	r2, r2, #20
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e027      	b.n	8004cfc <HAL_DMA_IRQHandler+0xcc4>
 8004cac:	40020010 	.word	0x40020010
 8004cb0:	40020028 	.word	0x40020028
 8004cb4:	40020040 	.word	0x40020040
 8004cb8:	40020058 	.word	0x40020058
 8004cbc:	40020070 	.word	0x40020070
 8004cc0:	40020088 	.word	0x40020088
 8004cc4:	400200a0 	.word	0x400200a0
 8004cc8:	400200b8 	.word	0x400200b8
 8004ccc:	40020410 	.word	0x40020410
 8004cd0:	40020428 	.word	0x40020428
 8004cd4:	40020440 	.word	0x40020440
 8004cd8:	40020458 	.word	0x40020458
 8004cdc:	40020470 	.word	0x40020470
 8004ce0:	40020488 	.word	0x40020488
 8004ce4:	400204a0 	.word	0x400204a0
 8004ce8:	400204b8 	.word	0x400204b8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 020a 	bic.w	r2, r2, #10
 8004cfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8097 	beq.w	8004e44 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d1e:	e091      	b.n	8004e44 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	2208      	movs	r2, #8
 8004d2a:	409a      	lsls	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8088 	beq.w	8004e46 <HAL_DMA_IRQHandler+0xe0e>
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8082 	beq.w	8004e46 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a41      	ldr	r2, [pc, #260]	; (8004e4c <HAL_DMA_IRQHandler+0xe14>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d04a      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a3f      	ldr	r2, [pc, #252]	; (8004e50 <HAL_DMA_IRQHandler+0xe18>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d045      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a3e      	ldr	r2, [pc, #248]	; (8004e54 <HAL_DMA_IRQHandler+0xe1c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d040      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a3c      	ldr	r2, [pc, #240]	; (8004e58 <HAL_DMA_IRQHandler+0xe20>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d03b      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a3b      	ldr	r2, [pc, #236]	; (8004e5c <HAL_DMA_IRQHandler+0xe24>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d036      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a39      	ldr	r2, [pc, #228]	; (8004e60 <HAL_DMA_IRQHandler+0xe28>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d031      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a38      	ldr	r2, [pc, #224]	; (8004e64 <HAL_DMA_IRQHandler+0xe2c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d02c      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a36      	ldr	r2, [pc, #216]	; (8004e68 <HAL_DMA_IRQHandler+0xe30>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d027      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a35      	ldr	r2, [pc, #212]	; (8004e6c <HAL_DMA_IRQHandler+0xe34>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d022      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a33      	ldr	r2, [pc, #204]	; (8004e70 <HAL_DMA_IRQHandler+0xe38>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01d      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a32      	ldr	r2, [pc, #200]	; (8004e74 <HAL_DMA_IRQHandler+0xe3c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d018      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a30      	ldr	r2, [pc, #192]	; (8004e78 <HAL_DMA_IRQHandler+0xe40>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2f      	ldr	r2, [pc, #188]	; (8004e7c <HAL_DMA_IRQHandler+0xe44>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00e      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a2d      	ldr	r2, [pc, #180]	; (8004e80 <HAL_DMA_IRQHandler+0xe48>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d009      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a2c      	ldr	r2, [pc, #176]	; (8004e84 <HAL_DMA_IRQHandler+0xe4c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d004      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xdaa>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2a      	ldr	r2, [pc, #168]	; (8004e88 <HAL_DMA_IRQHandler+0xe50>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d108      	bne.n	8004df4 <HAL_DMA_IRQHandler+0xdbc>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 021c 	bic.w	r2, r2, #28
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	e007      	b.n	8004e04 <HAL_DMA_IRQHandler+0xdcc>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 020e 	bic.w	r2, r2, #14
 8004e02:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	409a      	lsls	r2, r3
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	4798      	blx	r3
 8004e3a:	e004      	b.n	8004e46 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004e3c:	bf00      	nop
 8004e3e:	e002      	b.n	8004e46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e40:	bf00      	nop
 8004e42:	e000      	b.n	8004e46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e44:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e46:	3728      	adds	r7, #40	; 0x28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40020010 	.word	0x40020010
 8004e50:	40020028 	.word	0x40020028
 8004e54:	40020040 	.word	0x40020040
 8004e58:	40020058 	.word	0x40020058
 8004e5c:	40020070 	.word	0x40020070
 8004e60:	40020088 	.word	0x40020088
 8004e64:	400200a0 	.word	0x400200a0
 8004e68:	400200b8 	.word	0x400200b8
 8004e6c:	40020410 	.word	0x40020410
 8004e70:	40020428 	.word	0x40020428
 8004e74:	40020440 	.word	0x40020440
 8004e78:	40020458 	.word	0x40020458
 8004e7c:	40020470 	.word	0x40020470
 8004e80:	40020488 	.word	0x40020488
 8004e84:	400204a0 	.word	0x400204a0
 8004e88:	400204b8 	.word	0x400204b8

08004e8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a7f      	ldr	r2, [pc, #508]	; (80050a8 <DMA_SetConfig+0x21c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d072      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a7d      	ldr	r2, [pc, #500]	; (80050ac <DMA_SetConfig+0x220>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d06d      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a7c      	ldr	r2, [pc, #496]	; (80050b0 <DMA_SetConfig+0x224>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d068      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a7a      	ldr	r2, [pc, #488]	; (80050b4 <DMA_SetConfig+0x228>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d063      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a79      	ldr	r2, [pc, #484]	; (80050b8 <DMA_SetConfig+0x22c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d05e      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a77      	ldr	r2, [pc, #476]	; (80050bc <DMA_SetConfig+0x230>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d059      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a76      	ldr	r2, [pc, #472]	; (80050c0 <DMA_SetConfig+0x234>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d054      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a74      	ldr	r2, [pc, #464]	; (80050c4 <DMA_SetConfig+0x238>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d04f      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a73      	ldr	r2, [pc, #460]	; (80050c8 <DMA_SetConfig+0x23c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d04a      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a71      	ldr	r2, [pc, #452]	; (80050cc <DMA_SetConfig+0x240>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d045      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a70      	ldr	r2, [pc, #448]	; (80050d0 <DMA_SetConfig+0x244>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d040      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a6e      	ldr	r2, [pc, #440]	; (80050d4 <DMA_SetConfig+0x248>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d03b      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a6d      	ldr	r2, [pc, #436]	; (80050d8 <DMA_SetConfig+0x24c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d036      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a6b      	ldr	r2, [pc, #428]	; (80050dc <DMA_SetConfig+0x250>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d031      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a6a      	ldr	r2, [pc, #424]	; (80050e0 <DMA_SetConfig+0x254>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d02c      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a68      	ldr	r2, [pc, #416]	; (80050e4 <DMA_SetConfig+0x258>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d027      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a67      	ldr	r2, [pc, #412]	; (80050e8 <DMA_SetConfig+0x25c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d022      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a65      	ldr	r2, [pc, #404]	; (80050ec <DMA_SetConfig+0x260>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01d      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a64      	ldr	r2, [pc, #400]	; (80050f0 <DMA_SetConfig+0x264>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d018      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a62      	ldr	r2, [pc, #392]	; (80050f4 <DMA_SetConfig+0x268>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a61      	ldr	r2, [pc, #388]	; (80050f8 <DMA_SetConfig+0x26c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00e      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a5f      	ldr	r2, [pc, #380]	; (80050fc <DMA_SetConfig+0x270>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d009      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a5e      	ldr	r2, [pc, #376]	; (8005100 <DMA_SetConfig+0x274>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <DMA_SetConfig+0x10a>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a5c      	ldr	r2, [pc, #368]	; (8005104 <DMA_SetConfig+0x278>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d101      	bne.n	8004f9a <DMA_SetConfig+0x10e>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <DMA_SetConfig+0x110>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00d      	beq.n	8004fbc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004fa8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a39      	ldr	r2, [pc, #228]	; (80050a8 <DMA_SetConfig+0x21c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d04a      	beq.n	800505c <DMA_SetConfig+0x1d0>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a38      	ldr	r2, [pc, #224]	; (80050ac <DMA_SetConfig+0x220>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d045      	beq.n	800505c <DMA_SetConfig+0x1d0>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a36      	ldr	r2, [pc, #216]	; (80050b0 <DMA_SetConfig+0x224>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d040      	beq.n	800505c <DMA_SetConfig+0x1d0>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a35      	ldr	r2, [pc, #212]	; (80050b4 <DMA_SetConfig+0x228>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d03b      	beq.n	800505c <DMA_SetConfig+0x1d0>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a33      	ldr	r2, [pc, #204]	; (80050b8 <DMA_SetConfig+0x22c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d036      	beq.n	800505c <DMA_SetConfig+0x1d0>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a32      	ldr	r2, [pc, #200]	; (80050bc <DMA_SetConfig+0x230>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d031      	beq.n	800505c <DMA_SetConfig+0x1d0>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a30      	ldr	r2, [pc, #192]	; (80050c0 <DMA_SetConfig+0x234>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d02c      	beq.n	800505c <DMA_SetConfig+0x1d0>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a2f      	ldr	r2, [pc, #188]	; (80050c4 <DMA_SetConfig+0x238>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d027      	beq.n	800505c <DMA_SetConfig+0x1d0>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a2d      	ldr	r2, [pc, #180]	; (80050c8 <DMA_SetConfig+0x23c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d022      	beq.n	800505c <DMA_SetConfig+0x1d0>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a2c      	ldr	r2, [pc, #176]	; (80050cc <DMA_SetConfig+0x240>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d01d      	beq.n	800505c <DMA_SetConfig+0x1d0>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <DMA_SetConfig+0x244>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d018      	beq.n	800505c <DMA_SetConfig+0x1d0>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a29      	ldr	r2, [pc, #164]	; (80050d4 <DMA_SetConfig+0x248>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d013      	beq.n	800505c <DMA_SetConfig+0x1d0>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a27      	ldr	r2, [pc, #156]	; (80050d8 <DMA_SetConfig+0x24c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00e      	beq.n	800505c <DMA_SetConfig+0x1d0>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a26      	ldr	r2, [pc, #152]	; (80050dc <DMA_SetConfig+0x250>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d009      	beq.n	800505c <DMA_SetConfig+0x1d0>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a24      	ldr	r2, [pc, #144]	; (80050e0 <DMA_SetConfig+0x254>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d004      	beq.n	800505c <DMA_SetConfig+0x1d0>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a23      	ldr	r2, [pc, #140]	; (80050e4 <DMA_SetConfig+0x258>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d101      	bne.n	8005060 <DMA_SetConfig+0x1d4>
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <DMA_SetConfig+0x1d6>
 8005060:	2300      	movs	r3, #0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d059      	beq.n	800511a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506a:	f003 031f 	and.w	r3, r3, #31
 800506e:	223f      	movs	r2, #63	; 0x3f
 8005070:	409a      	lsls	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005084:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b40      	cmp	r3, #64	; 0x40
 8005094:	d138      	bne.n	8005108 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80050a6:	e086      	b.n	80051b6 <DMA_SetConfig+0x32a>
 80050a8:	40020010 	.word	0x40020010
 80050ac:	40020028 	.word	0x40020028
 80050b0:	40020040 	.word	0x40020040
 80050b4:	40020058 	.word	0x40020058
 80050b8:	40020070 	.word	0x40020070
 80050bc:	40020088 	.word	0x40020088
 80050c0:	400200a0 	.word	0x400200a0
 80050c4:	400200b8 	.word	0x400200b8
 80050c8:	40020410 	.word	0x40020410
 80050cc:	40020428 	.word	0x40020428
 80050d0:	40020440 	.word	0x40020440
 80050d4:	40020458 	.word	0x40020458
 80050d8:	40020470 	.word	0x40020470
 80050dc:	40020488 	.word	0x40020488
 80050e0:	400204a0 	.word	0x400204a0
 80050e4:	400204b8 	.word	0x400204b8
 80050e8:	58025408 	.word	0x58025408
 80050ec:	5802541c 	.word	0x5802541c
 80050f0:	58025430 	.word	0x58025430
 80050f4:	58025444 	.word	0x58025444
 80050f8:	58025458 	.word	0x58025458
 80050fc:	5802546c 	.word	0x5802546c
 8005100:	58025480 	.word	0x58025480
 8005104:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]
}
 8005118:	e04d      	b.n	80051b6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a29      	ldr	r2, [pc, #164]	; (80051c4 <DMA_SetConfig+0x338>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d022      	beq.n	800516a <DMA_SetConfig+0x2de>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <DMA_SetConfig+0x33c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d01d      	beq.n	800516a <DMA_SetConfig+0x2de>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a26      	ldr	r2, [pc, #152]	; (80051cc <DMA_SetConfig+0x340>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d018      	beq.n	800516a <DMA_SetConfig+0x2de>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a24      	ldr	r2, [pc, #144]	; (80051d0 <DMA_SetConfig+0x344>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <DMA_SetConfig+0x2de>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a23      	ldr	r2, [pc, #140]	; (80051d4 <DMA_SetConfig+0x348>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00e      	beq.n	800516a <DMA_SetConfig+0x2de>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a21      	ldr	r2, [pc, #132]	; (80051d8 <DMA_SetConfig+0x34c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d009      	beq.n	800516a <DMA_SetConfig+0x2de>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a20      	ldr	r2, [pc, #128]	; (80051dc <DMA_SetConfig+0x350>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d004      	beq.n	800516a <DMA_SetConfig+0x2de>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <DMA_SetConfig+0x354>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d101      	bne.n	800516e <DMA_SetConfig+0x2e2>
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <DMA_SetConfig+0x2e4>
 800516e:	2300      	movs	r3, #0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d020      	beq.n	80051b6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	2201      	movs	r2, #1
 800517e:	409a      	lsls	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	2b40      	cmp	r3, #64	; 0x40
 8005192:	d108      	bne.n	80051a6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	60da      	str	r2, [r3, #12]
}
 80051a4:	e007      	b.n	80051b6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	60da      	str	r2, [r3, #12]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	58025408 	.word	0x58025408
 80051c8:	5802541c 	.word	0x5802541c
 80051cc:	58025430 	.word	0x58025430
 80051d0:	58025444 	.word	0x58025444
 80051d4:	58025458 	.word	0x58025458
 80051d8:	5802546c 	.word	0x5802546c
 80051dc:	58025480 	.word	0x58025480
 80051e0:	58025494 	.word	0x58025494

080051e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a42      	ldr	r2, [pc, #264]	; (80052fc <DMA_CalcBaseAndBitshift+0x118>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d04a      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a41      	ldr	r2, [pc, #260]	; (8005300 <DMA_CalcBaseAndBitshift+0x11c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d045      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a3f      	ldr	r2, [pc, #252]	; (8005304 <DMA_CalcBaseAndBitshift+0x120>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d040      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a3e      	ldr	r2, [pc, #248]	; (8005308 <DMA_CalcBaseAndBitshift+0x124>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d03b      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a3c      	ldr	r2, [pc, #240]	; (800530c <DMA_CalcBaseAndBitshift+0x128>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d036      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a3b      	ldr	r2, [pc, #236]	; (8005310 <DMA_CalcBaseAndBitshift+0x12c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d031      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a39      	ldr	r2, [pc, #228]	; (8005314 <DMA_CalcBaseAndBitshift+0x130>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d02c      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a38      	ldr	r2, [pc, #224]	; (8005318 <DMA_CalcBaseAndBitshift+0x134>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d027      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a36      	ldr	r2, [pc, #216]	; (800531c <DMA_CalcBaseAndBitshift+0x138>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d022      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a35      	ldr	r2, [pc, #212]	; (8005320 <DMA_CalcBaseAndBitshift+0x13c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d01d      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a33      	ldr	r2, [pc, #204]	; (8005324 <DMA_CalcBaseAndBitshift+0x140>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d018      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a32      	ldr	r2, [pc, #200]	; (8005328 <DMA_CalcBaseAndBitshift+0x144>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d013      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a30      	ldr	r2, [pc, #192]	; (800532c <DMA_CalcBaseAndBitshift+0x148>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00e      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a2f      	ldr	r2, [pc, #188]	; (8005330 <DMA_CalcBaseAndBitshift+0x14c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d009      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a2d      	ldr	r2, [pc, #180]	; (8005334 <DMA_CalcBaseAndBitshift+0x150>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d004      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xa8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a2c      	ldr	r2, [pc, #176]	; (8005338 <DMA_CalcBaseAndBitshift+0x154>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d101      	bne.n	8005290 <DMA_CalcBaseAndBitshift+0xac>
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <DMA_CalcBaseAndBitshift+0xae>
 8005290:	2300      	movs	r3, #0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d024      	beq.n	80052e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	3b10      	subs	r3, #16
 800529e:	4a27      	ldr	r2, [pc, #156]	; (800533c <DMA_CalcBaseAndBitshift+0x158>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	4a24      	ldr	r2, [pc, #144]	; (8005340 <DMA_CalcBaseAndBitshift+0x15c>)
 80052b0:	5cd3      	ldrb	r3, [r2, r3]
 80052b2:	461a      	mov	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d908      	bls.n	80052d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	4b1f      	ldr	r3, [pc, #124]	; (8005344 <DMA_CalcBaseAndBitshift+0x160>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	1d1a      	adds	r2, r3, #4
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	659a      	str	r2, [r3, #88]	; 0x58
 80052ce:	e00d      	b.n	80052ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	4b1b      	ldr	r3, [pc, #108]	; (8005344 <DMA_CalcBaseAndBitshift+0x160>)
 80052d8:	4013      	ands	r3, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6593      	str	r3, [r2, #88]	; 0x58
 80052de:	e005      	b.n	80052ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	40020010 	.word	0x40020010
 8005300:	40020028 	.word	0x40020028
 8005304:	40020040 	.word	0x40020040
 8005308:	40020058 	.word	0x40020058
 800530c:	40020070 	.word	0x40020070
 8005310:	40020088 	.word	0x40020088
 8005314:	400200a0 	.word	0x400200a0
 8005318:	400200b8 	.word	0x400200b8
 800531c:	40020410 	.word	0x40020410
 8005320:	40020428 	.word	0x40020428
 8005324:	40020440 	.word	0x40020440
 8005328:	40020458 	.word	0x40020458
 800532c:	40020470 	.word	0x40020470
 8005330:	40020488 	.word	0x40020488
 8005334:	400204a0 	.word	0x400204a0
 8005338:	400204b8 	.word	0x400204b8
 800533c:	aaaaaaab 	.word	0xaaaaaaab
 8005340:	08011510 	.word	0x08011510
 8005344:	fffffc00 	.word	0xfffffc00

08005348 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d120      	bne.n	800539e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	2b03      	cmp	r3, #3
 8005362:	d858      	bhi.n	8005416 <DMA_CheckFifoParam+0xce>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <DMA_CheckFifoParam+0x24>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	0800537d 	.word	0x0800537d
 8005370:	0800538f 	.word	0x0800538f
 8005374:	0800537d 	.word	0x0800537d
 8005378:	08005417 	.word	0x08005417
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d048      	beq.n	800541a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800538c:	e045      	b.n	800541a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005396:	d142      	bne.n	800541e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800539c:	e03f      	b.n	800541e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a6:	d123      	bne.n	80053f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d838      	bhi.n	8005422 <DMA_CheckFifoParam+0xda>
 80053b0:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <DMA_CheckFifoParam+0x70>)
 80053b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b6:	bf00      	nop
 80053b8:	080053c9 	.word	0x080053c9
 80053bc:	080053cf 	.word	0x080053cf
 80053c0:	080053c9 	.word	0x080053c9
 80053c4:	080053e1 	.word	0x080053e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
        break;
 80053cc:	e030      	b.n	8005430 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d025      	beq.n	8005426 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053de:	e022      	b.n	8005426 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053e8:	d11f      	bne.n	800542a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053ee:	e01c      	b.n	800542a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d902      	bls.n	80053fe <DMA_CheckFifoParam+0xb6>
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d003      	beq.n	8005404 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80053fc:	e018      	b.n	8005430 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	73fb      	strb	r3, [r7, #15]
        break;
 8005402:	e015      	b.n	8005430 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00e      	beq.n	800542e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
    break;
 8005414:	e00b      	b.n	800542e <DMA_CheckFifoParam+0xe6>
        break;
 8005416:	bf00      	nop
 8005418:	e00a      	b.n	8005430 <DMA_CheckFifoParam+0xe8>
        break;
 800541a:	bf00      	nop
 800541c:	e008      	b.n	8005430 <DMA_CheckFifoParam+0xe8>
        break;
 800541e:	bf00      	nop
 8005420:	e006      	b.n	8005430 <DMA_CheckFifoParam+0xe8>
        break;
 8005422:	bf00      	nop
 8005424:	e004      	b.n	8005430 <DMA_CheckFifoParam+0xe8>
        break;
 8005426:	bf00      	nop
 8005428:	e002      	b.n	8005430 <DMA_CheckFifoParam+0xe8>
        break;
 800542a:	bf00      	nop
 800542c:	e000      	b.n	8005430 <DMA_CheckFifoParam+0xe8>
    break;
 800542e:	bf00      	nop
    }
  }

  return status;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop

08005440 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a38      	ldr	r2, [pc, #224]	; (8005534 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d022      	beq.n	800549e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a36      	ldr	r2, [pc, #216]	; (8005538 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d01d      	beq.n	800549e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a35      	ldr	r2, [pc, #212]	; (800553c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d018      	beq.n	800549e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a33      	ldr	r2, [pc, #204]	; (8005540 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d013      	beq.n	800549e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a32      	ldr	r2, [pc, #200]	; (8005544 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00e      	beq.n	800549e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a30      	ldr	r2, [pc, #192]	; (8005548 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d009      	beq.n	800549e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2f      	ldr	r2, [pc, #188]	; (800554c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d004      	beq.n	800549e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a2d      	ldr	r2, [pc, #180]	; (8005550 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d101      	bne.n	80054a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80054a2:	2300      	movs	r3, #0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01a      	beq.n	80054de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	3b08      	subs	r3, #8
 80054b0:	4a28      	ldr	r2, [pc, #160]	; (8005554 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	091b      	lsrs	r3, r3, #4
 80054b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4b26      	ldr	r3, [pc, #152]	; (8005558 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	461a      	mov	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a24      	ldr	r2, [pc, #144]	; (800555c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80054cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	2201      	movs	r2, #1
 80054d6:	409a      	lsls	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80054dc:	e024      	b.n	8005528 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	3b10      	subs	r3, #16
 80054e6:	4a1e      	ldr	r2, [pc, #120]	; (8005560 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80054e8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d806      	bhi.n	8005506 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4a1b      	ldr	r2, [pc, #108]	; (8005568 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d902      	bls.n	8005506 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3308      	adds	r3, #8
 8005504:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4b18      	ldr	r3, [pc, #96]	; (800556c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	461a      	mov	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a16      	ldr	r2, [pc, #88]	; (8005570 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005518:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	2201      	movs	r2, #1
 8005522:	409a      	lsls	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	58025408 	.word	0x58025408
 8005538:	5802541c 	.word	0x5802541c
 800553c:	58025430 	.word	0x58025430
 8005540:	58025444 	.word	0x58025444
 8005544:	58025458 	.word	0x58025458
 8005548:	5802546c 	.word	0x5802546c
 800554c:	58025480 	.word	0x58025480
 8005550:	58025494 	.word	0x58025494
 8005554:	cccccccd 	.word	0xcccccccd
 8005558:	16009600 	.word	0x16009600
 800555c:	58025880 	.word	0x58025880
 8005560:	aaaaaaab 	.word	0xaaaaaaab
 8005564:	400204b8 	.word	0x400204b8
 8005568:	4002040f 	.word	0x4002040f
 800556c:	10008200 	.word	0x10008200
 8005570:	40020880 	.word	0x40020880

08005574 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d04a      	beq.n	8005620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d847      	bhi.n	8005620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a25      	ldr	r2, [pc, #148]	; (800562c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d022      	beq.n	80055e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a24      	ldr	r2, [pc, #144]	; (8005630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d01d      	beq.n	80055e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a22      	ldr	r2, [pc, #136]	; (8005634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d018      	beq.n	80055e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a21      	ldr	r2, [pc, #132]	; (8005638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d013      	beq.n	80055e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a1f      	ldr	r2, [pc, #124]	; (800563c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00e      	beq.n	80055e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1e      	ldr	r2, [pc, #120]	; (8005640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d009      	beq.n	80055e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a1c      	ldr	r2, [pc, #112]	; (8005644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d004      	beq.n	80055e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a1b      	ldr	r2, [pc, #108]	; (8005648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d101      	bne.n	80055e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80055e4:	2300      	movs	r3, #0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4b17      	ldr	r3, [pc, #92]	; (800564c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80055ee:	4413      	add	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	461a      	mov	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a15      	ldr	r2, [pc, #84]	; (8005650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80055fc:	671a      	str	r2, [r3, #112]	; 0x70
 80055fe:	e009      	b.n	8005614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4b14      	ldr	r3, [pc, #80]	; (8005654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	461a      	mov	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a11      	ldr	r2, [pc, #68]	; (8005658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005612:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3b01      	subs	r3, #1
 8005618:	2201      	movs	r2, #1
 800561a:	409a      	lsls	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	58025408 	.word	0x58025408
 8005630:	5802541c 	.word	0x5802541c
 8005634:	58025430 	.word	0x58025430
 8005638:	58025444 	.word	0x58025444
 800563c:	58025458 	.word	0x58025458
 8005640:	5802546c 	.word	0x5802546c
 8005644:	58025480 	.word	0x58025480
 8005648:	58025494 	.word	0x58025494
 800564c:	1600963f 	.word	0x1600963f
 8005650:	58025940 	.word	0x58025940
 8005654:	1000823f 	.word	0x1000823f
 8005658:	40020940 	.word	0x40020940

0800565c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800565c:	b480      	push	{r7}
 800565e:	b089      	sub	sp, #36	; 0x24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800566a:	4b86      	ldr	r3, [pc, #536]	; (8005884 <HAL_GPIO_Init+0x228>)
 800566c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800566e:	e18c      	b.n	800598a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	2101      	movs	r1, #1
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	fa01 f303 	lsl.w	r3, r1, r3
 800567c:	4013      	ands	r3, r2
 800567e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 817e 	beq.w	8005984 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 0303 	and.w	r3, r3, #3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d005      	beq.n	80056a0 <HAL_GPIO_Init+0x44>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f003 0303 	and.w	r3, r3, #3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d130      	bne.n	8005702 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	2203      	movs	r2, #3
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	43db      	mvns	r3, r3
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4013      	ands	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056d6:	2201      	movs	r2, #1
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43db      	mvns	r3, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4013      	ands	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	091b      	lsrs	r3, r3, #4
 80056ec:	f003 0201 	and.w	r2, r3, #1
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b03      	cmp	r3, #3
 800570c:	d017      	beq.n	800573e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	2203      	movs	r2, #3
 800571a:	fa02 f303 	lsl.w	r3, r2, r3
 800571e:	43db      	mvns	r3, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4013      	ands	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	4313      	orrs	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d123      	bne.n	8005792 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	08da      	lsrs	r2, r3, #3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3208      	adds	r2, #8
 8005752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	220f      	movs	r2, #15
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	43db      	mvns	r3, r3
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4013      	ands	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	4313      	orrs	r3, r2
 8005782:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	08da      	lsrs	r2, r3, #3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3208      	adds	r2, #8
 800578c:	69b9      	ldr	r1, [r7, #24]
 800578e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	2203      	movs	r2, #3
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	43db      	mvns	r3, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4013      	ands	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f003 0203 	and.w	r2, r3, #3
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80d8 	beq.w	8005984 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057d4:	4b2c      	ldr	r3, [pc, #176]	; (8005888 <HAL_GPIO_Init+0x22c>)
 80057d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057da:	4a2b      	ldr	r2, [pc, #172]	; (8005888 <HAL_GPIO_Init+0x22c>)
 80057dc:	f043 0302 	orr.w	r3, r3, #2
 80057e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80057e4:	4b28      	ldr	r3, [pc, #160]	; (8005888 <HAL_GPIO_Init+0x22c>)
 80057e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057f2:	4a26      	ldr	r2, [pc, #152]	; (800588c <HAL_GPIO_Init+0x230>)
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	089b      	lsrs	r3, r3, #2
 80057f8:	3302      	adds	r3, #2
 80057fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	220f      	movs	r2, #15
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	43db      	mvns	r3, r3
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	4013      	ands	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <HAL_GPIO_Init+0x234>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d04a      	beq.n	80058b4 <HAL_GPIO_Init+0x258>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <HAL_GPIO_Init+0x238>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d02b      	beq.n	800587e <HAL_GPIO_Init+0x222>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <HAL_GPIO_Init+0x23c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d025      	beq.n	800587a <HAL_GPIO_Init+0x21e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a1a      	ldr	r2, [pc, #104]	; (800589c <HAL_GPIO_Init+0x240>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01f      	beq.n	8005876 <HAL_GPIO_Init+0x21a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a19      	ldr	r2, [pc, #100]	; (80058a0 <HAL_GPIO_Init+0x244>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d019      	beq.n	8005872 <HAL_GPIO_Init+0x216>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <HAL_GPIO_Init+0x248>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <HAL_GPIO_Init+0x212>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <HAL_GPIO_Init+0x24c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00d      	beq.n	800586a <HAL_GPIO_Init+0x20e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a16      	ldr	r2, [pc, #88]	; (80058ac <HAL_GPIO_Init+0x250>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d007      	beq.n	8005866 <HAL_GPIO_Init+0x20a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <HAL_GPIO_Init+0x254>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d101      	bne.n	8005862 <HAL_GPIO_Init+0x206>
 800585e:	2309      	movs	r3, #9
 8005860:	e029      	b.n	80058b6 <HAL_GPIO_Init+0x25a>
 8005862:	230a      	movs	r3, #10
 8005864:	e027      	b.n	80058b6 <HAL_GPIO_Init+0x25a>
 8005866:	2307      	movs	r3, #7
 8005868:	e025      	b.n	80058b6 <HAL_GPIO_Init+0x25a>
 800586a:	2306      	movs	r3, #6
 800586c:	e023      	b.n	80058b6 <HAL_GPIO_Init+0x25a>
 800586e:	2305      	movs	r3, #5
 8005870:	e021      	b.n	80058b6 <HAL_GPIO_Init+0x25a>
 8005872:	2304      	movs	r3, #4
 8005874:	e01f      	b.n	80058b6 <HAL_GPIO_Init+0x25a>
 8005876:	2303      	movs	r3, #3
 8005878:	e01d      	b.n	80058b6 <HAL_GPIO_Init+0x25a>
 800587a:	2302      	movs	r3, #2
 800587c:	e01b      	b.n	80058b6 <HAL_GPIO_Init+0x25a>
 800587e:	2301      	movs	r3, #1
 8005880:	e019      	b.n	80058b6 <HAL_GPIO_Init+0x25a>
 8005882:	bf00      	nop
 8005884:	58000080 	.word	0x58000080
 8005888:	58024400 	.word	0x58024400
 800588c:	58000400 	.word	0x58000400
 8005890:	58020000 	.word	0x58020000
 8005894:	58020400 	.word	0x58020400
 8005898:	58020800 	.word	0x58020800
 800589c:	58020c00 	.word	0x58020c00
 80058a0:	58021000 	.word	0x58021000
 80058a4:	58021400 	.word	0x58021400
 80058a8:	58021800 	.word	0x58021800
 80058ac:	58021c00 	.word	0x58021c00
 80058b0:	58022400 	.word	0x58022400
 80058b4:	2300      	movs	r3, #0
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	f002 0203 	and.w	r2, r2, #3
 80058bc:	0092      	lsls	r2, r2, #2
 80058be:	4093      	lsls	r3, r2
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058c6:	4938      	ldr	r1, [pc, #224]	; (80059a8 <HAL_GPIO_Init+0x34c>)
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	089b      	lsrs	r3, r3, #2
 80058cc:	3302      	adds	r3, #2
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	43db      	mvns	r3, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4013      	ands	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	43db      	mvns	r3, r3
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	4013      	ands	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005928:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	43db      	mvns	r3, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4013      	ands	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	43db      	mvns	r3, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4013      	ands	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	3301      	adds	r3, #1
 8005988:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	f47f ae6b 	bne.w	8005670 <HAL_GPIO_Init+0x14>
  }
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	3724      	adds	r7, #36	; 0x24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	58000400 	.word	0x58000400

080059ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	807b      	strh	r3, [r7, #2]
 80059b8:	4613      	mov	r3, r2
 80059ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059bc:	787b      	ldrb	r3, [r7, #1]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059c2:	887a      	ldrh	r2, [r7, #2]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80059c8:	e003      	b.n	80059d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059ca:	887b      	ldrh	r3, [r7, #2]
 80059cc:	041a      	lsls	r2, r3, #16
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	619a      	str	r2, [r3, #24]
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
	...

080059e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e07f      	b.n	8005af2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fd f846 	bl	8002a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	; 0x24
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0201 	bic.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d107      	bne.n	8005a5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	e006      	b.n	8005a68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005a66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d104      	bne.n	8005a7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6859      	ldr	r1, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <HAL_I2C_Init+0x11c>)
 8005a86:	430b      	orrs	r3, r1
 8005a88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69d9      	ldr	r1, [r3, #28]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	02008000 	.word	0x02008000

08005b00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	817b      	strh	r3, [r7, #10]
 8005b10:	4613      	mov	r3, r2
 8005b12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	f040 80da 	bne.w	8005cd6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_I2C_Master_Transmit+0x30>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e0d3      	b.n	8005cd8 <HAL_I2C_Master_Transmit+0x1d8>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b38:	f7fd fb7a 	bl	8003230 <HAL_GetTick>
 8005b3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	2319      	movs	r3, #25
 8005b44:	2201      	movs	r2, #1
 8005b46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 fcce 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e0be      	b.n	8005cd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2221      	movs	r2, #33	; 0x21
 8005b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2210      	movs	r2, #16
 8005b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	893a      	ldrh	r2, [r7, #8]
 8005b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2bff      	cmp	r3, #255	; 0xff
 8005b8a:	d90e      	bls.n	8005baa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	22ff      	movs	r2, #255	; 0xff
 8005b90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	8979      	ldrh	r1, [r7, #10]
 8005b9a:	4b51      	ldr	r3, [pc, #324]	; (8005ce0 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 fe5c 	bl	8006860 <I2C_TransferConfig>
 8005ba8:	e06c      	b.n	8005c84 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	8979      	ldrh	r1, [r7, #10]
 8005bbc:	4b48      	ldr	r3, [pc, #288]	; (8005ce0 <HAL_I2C_Master_Transmit+0x1e0>)
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fe4b 	bl	8006860 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005bca:	e05b      	b.n	8005c84 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	6a39      	ldr	r1, [r7, #32]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fcda 	bl	800658a <I2C_WaitOnTXISFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e07b      	b.n	8005cd8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	781a      	ldrb	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d034      	beq.n	8005c84 <HAL_I2C_Master_Transmit+0x184>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d130      	bne.n	8005c84 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2180      	movs	r1, #128	; 0x80
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fc5d 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e04d      	b.n	8005cd8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2bff      	cmp	r3, #255	; 0xff
 8005c44:	d90e      	bls.n	8005c64 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	22ff      	movs	r2, #255	; 0xff
 8005c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	8979      	ldrh	r1, [r7, #10]
 8005c54:	2300      	movs	r3, #0
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 fdff 	bl	8006860 <I2C_TransferConfig>
 8005c62:	e00f      	b.n	8005c84 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	8979      	ldrh	r1, [r7, #10]
 8005c76:	2300      	movs	r3, #0
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fdee 	bl	8006860 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d19e      	bne.n	8005bcc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	6a39      	ldr	r1, [r7, #32]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fcc0 	bl	8006618 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e01a      	b.n	8005cd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6859      	ldr	r1, [r3, #4]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_I2C_Master_Transmit+0x1e4>)
 8005cb6:	400b      	ands	r3, r1
 8005cb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e000      	b.n	8005cd8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005cd6:	2302      	movs	r3, #2
  }
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	80002000 	.word	0x80002000
 8005ce4:	fe00e800 	.word	0xfe00e800

08005ce8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	817b      	strh	r3, [r7, #10]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	813b      	strh	r3, [r7, #8]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	f040 80f9 	bne.w	8005f02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_I2C_Mem_Write+0x34>
 8005d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d105      	bne.n	8005d28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0ed      	b.n	8005f04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d101      	bne.n	8005d36 <HAL_I2C_Mem_Write+0x4e>
 8005d32:	2302      	movs	r3, #2
 8005d34:	e0e6      	b.n	8005f04 <HAL_I2C_Mem_Write+0x21c>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d3e:	f7fd fa77 	bl	8003230 <HAL_GetTick>
 8005d42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	2319      	movs	r3, #25
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fbcb 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0d1      	b.n	8005f04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2221      	movs	r2, #33	; 0x21
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2240      	movs	r2, #64	; 0x40
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a3a      	ldr	r2, [r7, #32]
 8005d7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d88:	88f8      	ldrh	r0, [r7, #6]
 8005d8a:	893a      	ldrh	r2, [r7, #8]
 8005d8c:	8979      	ldrh	r1, [r7, #10]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	4603      	mov	r3, r0
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 fadb 	bl	8006354 <I2C_RequestMemoryWrite>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e0a9      	b.n	8005f04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2bff      	cmp	r3, #255	; 0xff
 8005db8:	d90e      	bls.n	8005dd8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	22ff      	movs	r2, #255	; 0xff
 8005dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	8979      	ldrh	r1, [r7, #10]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 fd45 	bl	8006860 <I2C_TransferConfig>
 8005dd6:	e00f      	b.n	8005df8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	8979      	ldrh	r1, [r7, #10]
 8005dea:	2300      	movs	r3, #0
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fd34 	bl	8006860 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fbc4 	bl	800658a <I2C_WaitOnTXISFlagUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e07b      	b.n	8005f04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	781a      	ldrb	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d034      	beq.n	8005eb0 <HAL_I2C_Mem_Write+0x1c8>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d130      	bne.n	8005eb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	2200      	movs	r2, #0
 8005e56:	2180      	movs	r1, #128	; 0x80
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fb47 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e04d      	b.n	8005f04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2bff      	cmp	r3, #255	; 0xff
 8005e70:	d90e      	bls.n	8005e90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	22ff      	movs	r2, #255	; 0xff
 8005e76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	8979      	ldrh	r1, [r7, #10]
 8005e80:	2300      	movs	r3, #0
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fce9 	bl	8006860 <I2C_TransferConfig>
 8005e8e:	e00f      	b.n	8005eb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	8979      	ldrh	r1, [r7, #10]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 fcd8 	bl	8006860 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d19e      	bne.n	8005df8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 fbaa 	bl	8006618 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e01a      	b.n	8005f04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6859      	ldr	r1, [r3, #4]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <HAL_I2C_Mem_Write+0x224>)
 8005ee2:	400b      	ands	r3, r1
 8005ee4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e000      	b.n	8005f04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005f02:	2302      	movs	r3, #2
  }
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	fe00e800 	.word	0xfe00e800

08005f10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	4608      	mov	r0, r1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4603      	mov	r3, r0
 8005f20:	817b      	strh	r3, [r7, #10]
 8005f22:	460b      	mov	r3, r1
 8005f24:	813b      	strh	r3, [r7, #8]
 8005f26:	4613      	mov	r3, r2
 8005f28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	f040 80fd 	bne.w	8006132 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <HAL_I2C_Mem_Read+0x34>
 8005f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d105      	bne.n	8005f50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e0f1      	b.n	8006134 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d101      	bne.n	8005f5e <HAL_I2C_Mem_Read+0x4e>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e0ea      	b.n	8006134 <HAL_I2C_Mem_Read+0x224>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f66:	f7fd f963 	bl	8003230 <HAL_GetTick>
 8005f6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2319      	movs	r3, #25
 8005f72:	2201      	movs	r2, #1
 8005f74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fab7 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e0d5      	b.n	8006134 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2222      	movs	r2, #34	; 0x22
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2240      	movs	r2, #64	; 0x40
 8005f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a3a      	ldr	r2, [r7, #32]
 8005fa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fb0:	88f8      	ldrh	r0, [r7, #6]
 8005fb2:	893a      	ldrh	r2, [r7, #8]
 8005fb4:	8979      	ldrh	r1, [r7, #10]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 fa1b 	bl	80063fc <I2C_RequestMemoryRead>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e0ad      	b.n	8006134 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2bff      	cmp	r3, #255	; 0xff
 8005fe0:	d90e      	bls.n	8006000 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	22ff      	movs	r2, #255	; 0xff
 8005fe6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	8979      	ldrh	r1, [r7, #10]
 8005ff0:	4b52      	ldr	r3, [pc, #328]	; (800613c <HAL_I2C_Mem_Read+0x22c>)
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fc31 	bl	8006860 <I2C_TransferConfig>
 8005ffe:	e00f      	b.n	8006020 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600e:	b2da      	uxtb	r2, r3
 8006010:	8979      	ldrh	r1, [r7, #10]
 8006012:	4b4a      	ldr	r3, [pc, #296]	; (800613c <HAL_I2C_Mem_Read+0x22c>)
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 fc20 	bl	8006860 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	2200      	movs	r2, #0
 8006028:	2104      	movs	r1, #4
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fa5e 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e07c      	b.n	8006134 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	b2d2      	uxtb	r2, r2
 8006046:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d034      	beq.n	80060e0 <HAL_I2C_Mem_Read+0x1d0>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607a:	2b00      	cmp	r3, #0
 800607c:	d130      	bne.n	80060e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	2200      	movs	r2, #0
 8006086:	2180      	movs	r1, #128	; 0x80
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 fa2f 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e04d      	b.n	8006134 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	2bff      	cmp	r3, #255	; 0xff
 80060a0:	d90e      	bls.n	80060c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	22ff      	movs	r2, #255	; 0xff
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	8979      	ldrh	r1, [r7, #10]
 80060b0:	2300      	movs	r3, #0
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 fbd1 	bl	8006860 <I2C_TransferConfig>
 80060be:	e00f      	b.n	80060e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	8979      	ldrh	r1, [r7, #10]
 80060d2:	2300      	movs	r3, #0
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 fbc0 	bl	8006860 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d19a      	bne.n	8006020 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fa92 	bl	8006618 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e01a      	b.n	8006134 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2220      	movs	r2, #32
 8006104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6859      	ldr	r1, [r3, #4]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <HAL_I2C_Mem_Read+0x230>)
 8006112:	400b      	ands	r3, r1
 8006114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	e000      	b.n	8006134 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006132:	2302      	movs	r3, #2
  }
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	80002400 	.word	0x80002400
 8006140:	fe00e800 	.word	0xfe00e800

08006144 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	460b      	mov	r3, r1
 8006152:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b20      	cmp	r3, #32
 8006162:	f040 80ef 	bne.w	8006344 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006174:	d101      	bne.n	800617a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006176:	2302      	movs	r3, #2
 8006178:	e0e5      	b.n	8006346 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <HAL_I2C_IsDeviceReady+0x44>
 8006184:	2302      	movs	r3, #2
 8006186:	e0de      	b.n	8006346 <HAL_I2C_IsDeviceReady+0x202>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2224      	movs	r2, #36	; 0x24
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d105      	bne.n	80061b2 <HAL_I2C_IsDeviceReady+0x6e>
 80061a6:	897b      	ldrh	r3, [r7, #10]
 80061a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80061ac:	4b68      	ldr	r3, [pc, #416]	; (8006350 <HAL_I2C_IsDeviceReady+0x20c>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	e004      	b.n	80061bc <HAL_I2C_IsDeviceReady+0x78>
 80061b2:	897b      	ldrh	r3, [r7, #10]
 80061b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061b8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80061c2:	f7fd f835 	bl	8003230 <HAL_GetTick>
 80061c6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	bf0c      	ite	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	2300      	movne	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	2b10      	cmp	r3, #16
 80061ea:	bf0c      	ite	eq
 80061ec:	2301      	moveq	r3, #1
 80061ee:	2300      	movne	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80061f4:	e034      	b.n	8006260 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d01a      	beq.n	8006234 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061fe:	f7fd f817 	bl	8003230 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d302      	bcc.n	8006214 <HAL_I2C_IsDeviceReady+0xd0>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10f      	bne.n	8006234 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006220:	f043 0220 	orr.w	r2, r3, #32
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e088      	b.n	8006346 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	2b20      	cmp	r3, #32
 8006240:	bf0c      	ite	eq
 8006242:	2301      	moveq	r3, #1
 8006244:	2300      	movne	r3, #0
 8006246:	b2db      	uxtb	r3, r3
 8006248:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b10      	cmp	r3, #16
 8006256:	bf0c      	ite	eq
 8006258:	2301      	moveq	r3, #1
 800625a:	2300      	movne	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006260:	7ffb      	ldrb	r3, [r7, #31]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d102      	bne.n	800626c <HAL_I2C_IsDeviceReady+0x128>
 8006266:	7fbb      	ldrb	r3, [r7, #30]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0c4      	beq.n	80061f6 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f003 0310 	and.w	r3, r3, #16
 8006276:	2b10      	cmp	r3, #16
 8006278:	d01a      	beq.n	80062b0 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2200      	movs	r2, #0
 8006282:	2120      	movs	r1, #32
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 f931 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e058      	b.n	8006346 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2220      	movs	r2, #32
 800629a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	e04a      	b.n	8006346 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2200      	movs	r2, #0
 80062b8:	2120      	movs	r1, #32
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 f916 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e03d      	b.n	8006346 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2210      	movs	r2, #16
 80062d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2220      	movs	r2, #32
 80062d8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d118      	bne.n	8006314 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062f0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2200      	movs	r2, #0
 80062fa:	2120      	movs	r1, #32
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 f8f5 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e01c      	b.n	8006346 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2220      	movs	r2, #32
 8006312:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	3301      	adds	r3, #1
 8006318:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	429a      	cmp	r2, r3
 8006320:	f63f af3d 	bhi.w	800619e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006330:	f043 0220 	orr.w	r2, r3, #32
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8006344:	2302      	movs	r3, #2
  }
}
 8006346:	4618      	mov	r0, r3
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	02002000 	.word	0x02002000

08006354 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af02      	add	r7, sp, #8
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	4608      	mov	r0, r1
 800635e:	4611      	mov	r1, r2
 8006360:	461a      	mov	r2, r3
 8006362:	4603      	mov	r3, r0
 8006364:	817b      	strh	r3, [r7, #10]
 8006366:	460b      	mov	r3, r1
 8006368:	813b      	strh	r3, [r7, #8]
 800636a:	4613      	mov	r3, r2
 800636c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	b2da      	uxtb	r2, r3
 8006372:	8979      	ldrh	r1, [r7, #10]
 8006374:	4b20      	ldr	r3, [pc, #128]	; (80063f8 <I2C_RequestMemoryWrite+0xa4>)
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fa6f 	bl	8006860 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	69b9      	ldr	r1, [r7, #24]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f8ff 	bl	800658a <I2C_WaitOnTXISFlagUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e02c      	b.n	80063f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006396:	88fb      	ldrh	r3, [r7, #6]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d105      	bne.n	80063a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800639c:	893b      	ldrh	r3, [r7, #8]
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	629a      	str	r2, [r3, #40]	; 0x28
 80063a6:	e015      	b.n	80063d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063a8:	893b      	ldrh	r3, [r7, #8]
 80063aa:	0a1b      	lsrs	r3, r3, #8
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	69b9      	ldr	r1, [r7, #24]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f8e5 	bl	800658a <I2C_WaitOnTXISFlagUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e012      	b.n	80063f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063ca:	893b      	ldrh	r3, [r7, #8]
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	2200      	movs	r2, #0
 80063dc:	2180      	movs	r1, #128	; 0x80
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 f884 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	80002000 	.word	0x80002000

080063fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	4608      	mov	r0, r1
 8006406:	4611      	mov	r1, r2
 8006408:	461a      	mov	r2, r3
 800640a:	4603      	mov	r3, r0
 800640c:	817b      	strh	r3, [r7, #10]
 800640e:	460b      	mov	r3, r1
 8006410:	813b      	strh	r3, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	b2da      	uxtb	r2, r3
 800641a:	8979      	ldrh	r1, [r7, #10]
 800641c:	4b20      	ldr	r3, [pc, #128]	; (80064a0 <I2C_RequestMemoryRead+0xa4>)
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2300      	movs	r3, #0
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 fa1c 	bl	8006860 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	69b9      	ldr	r1, [r7, #24]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f8ac 	bl	800658a <I2C_WaitOnTXISFlagUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e02c      	b.n	8006496 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800643c:	88fb      	ldrh	r3, [r7, #6]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d105      	bne.n	800644e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006442:	893b      	ldrh	r3, [r7, #8]
 8006444:	b2da      	uxtb	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	629a      	str	r2, [r3, #40]	; 0x28
 800644c:	e015      	b.n	800647a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800644e:	893b      	ldrh	r3, [r7, #8]
 8006450:	0a1b      	lsrs	r3, r3, #8
 8006452:	b29b      	uxth	r3, r3
 8006454:	b2da      	uxtb	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	69b9      	ldr	r1, [r7, #24]
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 f892 	bl	800658a <I2C_WaitOnTXISFlagUntilTimeout>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e012      	b.n	8006496 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006470:	893b      	ldrh	r3, [r7, #8]
 8006472:	b2da      	uxtb	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2200      	movs	r2, #0
 8006482:	2140      	movs	r1, #64	; 0x40
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f831 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	80002000 	.word	0x80002000

080064a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d103      	bne.n	80064c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2200      	movs	r2, #0
 80064c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d007      	beq.n	80064e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	619a      	str	r2, [r3, #24]
  }
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064fc:	e031      	b.n	8006562 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	d02d      	beq.n	8006562 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006506:	f7fc fe93 	bl	8003230 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d302      	bcc.n	800651c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d122      	bne.n	8006562 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4013      	ands	r3, r2
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	429a      	cmp	r2, r3
 800652a:	bf0c      	ite	eq
 800652c:	2301      	moveq	r3, #1
 800652e:	2300      	movne	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	429a      	cmp	r2, r3
 8006538:	d113      	bne.n	8006562 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653e:	f043 0220 	orr.w	r2, r3, #32
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e00f      	b.n	8006582 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699a      	ldr	r2, [r3, #24]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4013      	ands	r3, r2
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	429a      	cmp	r2, r3
 8006570:	bf0c      	ite	eq
 8006572:	2301      	moveq	r3, #1
 8006574:	2300      	movne	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	429a      	cmp	r2, r3
 800657e:	d0be      	beq.n	80064fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006596:	e033      	b.n	8006600 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f87f 	bl	80066a0 <I2C_IsErrorOccurred>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e031      	b.n	8006610 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d025      	beq.n	8006600 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b4:	f7fc fe3c 	bl	8003230 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d11a      	bne.n	8006600 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d013      	beq.n	8006600 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065dc:	f043 0220 	orr.w	r2, r3, #32
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e007      	b.n	8006610 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b02      	cmp	r3, #2
 800660c:	d1c4      	bne.n	8006598 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006624:	e02f      	b.n	8006686 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 f838 	bl	80066a0 <I2C_IsErrorOccurred>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e02d      	b.n	8006696 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663a:	f7fc fdf9 	bl	8003230 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	429a      	cmp	r2, r3
 8006648:	d302      	bcc.n	8006650 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d11a      	bne.n	8006686 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b20      	cmp	r3, #32
 800665c:	d013      	beq.n	8006686 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006662:	f043 0220 	orr.w	r2, r3, #32
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e007      	b.n	8006696 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b20      	cmp	r3, #32
 8006692:	d1c8      	bne.n	8006626 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08a      	sub	sp, #40	; 0x28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d068      	beq.n	800679e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2210      	movs	r2, #16
 80066d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066d4:	e049      	b.n	800676a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066dc:	d045      	beq.n	800676a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066de:	f7fc fda7 	bl	8003230 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d302      	bcc.n	80066f4 <I2C_IsErrorOccurred+0x54>
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d13a      	bne.n	800676a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006706:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006716:	d121      	bne.n	800675c <I2C_IsErrorOccurred+0xbc>
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800671e:	d01d      	beq.n	800675c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006720:	7cfb      	ldrb	r3, [r7, #19]
 8006722:	2b20      	cmp	r3, #32
 8006724:	d01a      	beq.n	800675c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006734:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006736:	f7fc fd7b 	bl	8003230 <HAL_GetTick>
 800673a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800673c:	e00e      	b.n	800675c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800673e:	f7fc fd77 	bl	8003230 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b19      	cmp	r3, #25
 800674a:	d907      	bls.n	800675c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	f043 0320 	orr.w	r3, r3, #32
 8006752:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800675a:	e006      	b.n	800676a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b20      	cmp	r3, #32
 8006768:	d1e9      	bne.n	800673e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	f003 0320 	and.w	r3, r3, #32
 8006774:	2b20      	cmp	r3, #32
 8006776:	d003      	beq.n	8006780 <I2C_IsErrorOccurred+0xe0>
 8006778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0aa      	beq.n	80066d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006784:	2b00      	cmp	r3, #0
 8006786:	d103      	bne.n	8006790 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2220      	movs	r2, #32
 800678e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	f043 0304 	orr.w	r3, r3, #4
 8006796:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00b      	beq.n	80067c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	f043 0301 	orr.w	r3, r3, #1
 80067b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00b      	beq.n	80067ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	f043 0308 	orr.w	r3, r3, #8
 80067d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	f043 0302 	orr.w	r3, r3, #2
 80067fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006804:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800680c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01c      	beq.n	800684e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f7ff fe45 	bl	80064a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6859      	ldr	r1, [r3, #4]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	4b0d      	ldr	r3, [pc, #52]	; (800685c <I2C_IsErrorOccurred+0x1bc>)
 8006826:	400b      	ands	r3, r1
 8006828:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	431a      	orrs	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800684e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006852:	4618      	mov	r0, r3
 8006854:	3728      	adds	r7, #40	; 0x28
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	fe00e800 	.word	0xfe00e800

08006860 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	607b      	str	r3, [r7, #4]
 800686a:	460b      	mov	r3, r1
 800686c:	817b      	strh	r3, [r7, #10]
 800686e:	4613      	mov	r3, r2
 8006870:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006872:	897b      	ldrh	r3, [r7, #10]
 8006874:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006878:	7a7b      	ldrb	r3, [r7, #9]
 800687a:	041b      	lsls	r3, r3, #16
 800687c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006880:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	4313      	orrs	r3, r2
 800688a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800688e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	0d5b      	lsrs	r3, r3, #21
 800689a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800689e:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <I2C_TransferConfig+0x60>)
 80068a0:	430b      	orrs	r3, r1
 80068a2:	43db      	mvns	r3, r3
 80068a4:	ea02 0103 	and.w	r1, r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	03ff63ff 	.word	0x03ff63ff

080068c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d138      	bne.n	800694c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e032      	b.n	800694e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2224      	movs	r2, #36	; 0x24
 80068f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0201 	bic.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006916:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6819      	ldr	r1, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	e000      	b.n	800694e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800694c:	2302      	movs	r3, #2
  }
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800695a:	b480      	push	{r7}
 800695c:	b085      	sub	sp, #20
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b20      	cmp	r3, #32
 800696e:	d139      	bne.n	80069e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800697a:	2302      	movs	r3, #2
 800697c:	e033      	b.n	80069e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2224      	movs	r2, #36	; 0x24
 800698a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80069ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	021b      	lsls	r3, r3, #8
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0201 	orr.w	r2, r2, #1
 80069ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	e000      	b.n	80069e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80069e4:	2302      	movs	r3, #2
  }
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e10d      	b.n	8006c22 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fc f8f4 	bl	8002c08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d107      	bne.n	8006a46 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0201 	bic.w	r2, r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d008      	beq.n	8006a68 <HAL_I2S_Init+0x74>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	2b06      	cmp	r3, #6
 8006a5c:	d004      	beq.n	8006a68 <HAL_I2S_Init+0x74>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b0a      	cmp	r3, #10
 8006a64:	f040 8087 	bne.w	8006b76 <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d05a      	beq.n	8006b26 <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8006a78:	2302      	movs	r3, #2
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	e001      	b.n	8006a82 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b30      	cmp	r3, #48	; 0x30
 8006a88:	d003      	beq.n	8006a92 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8006a8e:	2bb0      	cmp	r3, #176	; 0xb0
 8006a90:	d102      	bne.n	8006a98 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8006a92:	2301      	movs	r3, #1
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	e001      	b.n	8006a9c <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8006a9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006aa0:	f04f 0100 	mov.w	r1, #0
 8006aa4:	f003 fe8e 	bl	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006aa8:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ab2:	d113      	bne.n	8006adc <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8006ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	fa22 f303 	lsr.w	r3, r2, r3
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	461a      	mov	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad6:	3305      	adds	r3, #5
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	e014      	b.n	8006b06 <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8006adc:	2220      	movs	r2, #32
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	fb02 f303 	mul.w	r3, r2, r3
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	461a      	mov	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b02:	3305      	adds	r3, #5
 8006b04:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	4a48      	ldr	r2, [pc, #288]	; (8006c2c <HAL_I2S_Init+0x238>)
 8006b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0e:	08db      	lsrs	r3, r3, #3
 8006b10:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	085b      	lsrs	r3, r3, #1
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	e003      	b.n	8006b2e <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8006b26:	2302      	movs	r3, #2
 8006b28:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d102      	bne.n	8006b3a <HAL_I2S_Init+0x146>
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d002      	beq.n	8006b40 <HAL_I2S_Init+0x14c>
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	2bff      	cmp	r3, #255	; 0xff
 8006b3e:	d907      	bls.n	8006b50 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b44:	f043 0210 	orr.w	r2, r3, #16
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e068      	b.n	8006c22 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8006b56:	2301      	movs	r3, #1
 8006b58:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b60:	4b33      	ldr	r3, [pc, #204]	; (8006c30 <HAL_I2S_Init+0x23c>)
 8006b62:	4013      	ands	r3, r2
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	0411      	lsls	r1, r2, #16
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	0612      	lsls	r2, r2, #24
 8006b6c:	4311      	orrs	r1, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	430b      	orrs	r3, r1
 8006b74:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b7c:	4b2d      	ldr	r3, [pc, #180]	; (8006c34 <HAL_I2S_Init+0x240>)
 8006b7e:	4013      	ands	r3, r2
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6851      	ldr	r1, [r2, #4]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6892      	ldr	r2, [r2, #8]
 8006b88:	4311      	orrs	r1, r2
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	68d2      	ldr	r2, [r2, #12]
 8006b8e:	4311      	orrs	r1, r2
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6992      	ldr	r2, [r2, #24]
 8006b94:	4311      	orrs	r1, r2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6a12      	ldr	r2, [r2, #32]
 8006b9a:	4311      	orrs	r1, r2
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ba0:	4311      	orrs	r1, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6912      	ldr	r2, [r2, #16]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f640 72f8 	movw	r2, #4088	; 0xff8
 8006bbc:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006bcc:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	69da      	ldr	r2, [r3, #28]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2b04      	cmp	r3, #4
 8006bea:	d007      	beq.n	8006bfc <HAL_I2S_Init+0x208>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b06      	cmp	r3, #6
 8006bf2:	d003      	beq.n	8006bfc <HAL_I2S_Init+0x208>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b0a      	cmp	r3, #10
 8006bfa:	d10a      	bne.n	8006c12 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3720      	adds	r7, #32
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	cccccccd 	.word	0xcccccccd
 8006c30:	fe00ffff 	.word	0xfe00ffff
 8006c34:	fdff9040 	.word	0xfdff9040

08006c38 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pData, uint16_t Size)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	4613      	mov	r3, r2
 8006c44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d002      	beq.n	8006c56 <HAL_I2S_Transmit_DMA+0x1e>
 8006c50:	88fb      	ldrh	r3, [r7, #6]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_I2S_Transmit_DMA+0x22>
  {
    return  HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e086      	b.n	8006d68 <HAL_I2S_Transmit_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d001      	beq.n	8006c6a <HAL_I2S_Transmit_DMA+0x32>
  {
    return HAL_BUSY;
 8006c66:	2302      	movs	r3, #2
 8006c68:	e07e      	b.n	8006d68 <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_I2S_Transmit_DMA+0x42>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e076      	b.n	8006d68 <HAL_I2S_Transmit_DMA+0x130>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2203      	movs	r2, #3
 8006c86:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	88fa      	ldrh	r2, [r7, #6]
 8006c9a:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	88fa      	ldrh	r2, [r7, #6]
 8006ca0:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Init field not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t)0UL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t)0UL;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb8:	4a2d      	ldr	r2, [pc, #180]	; (8006d70 <HAL_I2S_Transmit_DMA+0x138>)
 8006cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc0:	4a2c      	ldr	r2, [pc, #176]	; (8006d74 <HAL_I2S_Transmit_DMA+0x13c>)
 8006cc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc8:	4a2b      	ldr	r2, [pc, #172]	; (8006d78 <HAL_I2S_Transmit_DMA+0x140>)
 8006cca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3320      	adds	r3, #32
 8006cdc:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ce2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8006ce4:	f7fc ff3e 	bl	8003b64 <HAL_DMA_Start_IT>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d011      	beq.n	8006d12 <HAL_I2S_Transmit_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf2:	f043 0208 	orr.w	r2, r3, #8
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
 8006d10:	e02a      	b.n	8006d68 <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d107      	bne.n	8006d30 <HAL_I2S_Transmit_DMA+0xf8>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d2e:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d107      	bne.n	8006d4e <HAL_I2S_Transmit_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0201 	orr.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d5c:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3718      	adds	r7, #24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	08006f17 	.word	0x08006f17
 8006d74:	08006ed5 	.word	0x08006ed5
 8006d78:	08006f91 	.word	0x08006f91

08006d7c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	4613      	mov	r3, r2
 8006d88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <HAL_I2S_Receive_DMA+0x1e>
 8006d94:	88fb      	ldrh	r3, [r7, #6]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e086      	b.n	8006eac <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d001      	beq.n	8006dae <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 8006daa:	2302      	movs	r3, #2
 8006dac:	e07e      	b.n	8006eac <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <HAL_I2S_Receive_DMA+0x42>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e076      	b.n	8006eac <HAL_I2S_Receive_DMA+0x130>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2204      	movs	r2, #4
 8006dca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pRxBuffPtr  = pData;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = Size;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	88fa      	ldrh	r2, [r7, #6]
 8006dde:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	88fa      	ldrh	r2, [r7, #6]
 8006de4:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	865a      	strh	r2, [r3, #50]	; 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dfc:	4a2d      	ldr	r2, [pc, #180]	; (8006eb4 <HAL_I2S_Receive_DMA+0x138>)
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e04:	4a2c      	ldr	r2, [pc, #176]	; (8006eb8 <HAL_I2S_Receive_DMA+0x13c>)
 8006e06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0c:	4a2b      	ldr	r2, [pc, #172]	; (8006ebc <HAL_I2S_Receive_DMA+0x140>)
 8006e0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3330      	adds	r3, #48	; 0x30
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e20:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006e26:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8006e28:	f7fc fe9c 	bl	8003b64 <HAL_DMA_Start_IT>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d011      	beq.n	8006e56 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e36:	f043 0208 	orr.w	r2, r3, #8
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return errorcode;
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	e02a      	b.n	8006eac <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d107      	bne.n	8006e74 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e72:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d107      	bne.n	8006e92 <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0201 	orr.w	r2, r2, #1
 8006e90:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ea0:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	08006f75 	.word	0x08006f75
 8006eb8:	08006f33 	.word	0x08006f33
 8006ebc:	08006f91 	.word	0x08006f91

08006ec0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10e      	bne.n	8006f08 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ef8:	609a      	str	r2, [r3, #8]

    hi2s->TxXferCount = (uint16_t) 0UL;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7fa f949 	bl	80011a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006f0e:	bf00      	nop
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7fa f8f1 	bl	800110c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006f2a:	bf00      	nop
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10e      	bne.n	8006f66 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f56:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	875a      	strh	r2, [r3, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f7fa f8f4 	bl	8001154 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006f6c:	bf00      	nop
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f80:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f7fa f89e 	bl	80010c4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006fac:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc6:	f043 0208 	orr.w	r2, r3, #8
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f7ff ff76 	bl	8006ec0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fde:	b08f      	sub	sp, #60	; 0x3c
 8006fe0:	af0a      	add	r7, sp, #40	; 0x28
 8006fe2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e116      	b.n	800721c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d106      	bne.n	800700e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f008 fb5d 	bl	800f6c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2203      	movs	r2, #3
 8007012:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701e:	2b00      	cmp	r3, #0
 8007020:	d102      	bne.n	8007028 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f004 ff30 	bl	800be92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	687e      	ldr	r6, [r7, #4]
 800703a:	466d      	mov	r5, sp
 800703c:	f106 0410 	add.w	r4, r6, #16
 8007040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007048:	e894 0003 	ldmia.w	r4, {r0, r1}
 800704c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007050:	1d33      	adds	r3, r6, #4
 8007052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007054:	6838      	ldr	r0, [r7, #0]
 8007056:	f004 fdfb 	bl	800bc50 <USB_CoreInit>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e0d7      	b.n	800721c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2100      	movs	r1, #0
 8007072:	4618      	mov	r0, r3
 8007074:	f004 ff1e 	bl	800beb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007078:	2300      	movs	r3, #0
 800707a:	73fb      	strb	r3, [r7, #15]
 800707c:	e04a      	b.n	8007114 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800707e:	7bfa      	ldrb	r2, [r7, #15]
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	333d      	adds	r3, #61	; 0x3d
 800708e:	2201      	movs	r2, #1
 8007090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007092:	7bfa      	ldrb	r2, [r7, #15]
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	4613      	mov	r3, r2
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	333c      	adds	r3, #60	; 0x3c
 80070a2:	7bfa      	ldrb	r2, [r7, #15]
 80070a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80070a6:	7bfa      	ldrb	r2, [r7, #15]
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	b298      	uxth	r0, r3
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	3356      	adds	r3, #86	; 0x56
 80070ba:	4602      	mov	r2, r0
 80070bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80070be:	7bfa      	ldrb	r2, [r7, #15]
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	4613      	mov	r3, r2
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	4413      	add	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	440b      	add	r3, r1
 80070cc:	3340      	adds	r3, #64	; 0x40
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80070d2:	7bfa      	ldrb	r2, [r7, #15]
 80070d4:	6879      	ldr	r1, [r7, #4]
 80070d6:	4613      	mov	r3, r2
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	440b      	add	r3, r1
 80070e0:	3344      	adds	r3, #68	; 0x44
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80070e6:	7bfa      	ldrb	r2, [r7, #15]
 80070e8:	6879      	ldr	r1, [r7, #4]
 80070ea:	4613      	mov	r3, r2
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	3348      	adds	r3, #72	; 0x48
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80070fa:	7bfa      	ldrb	r2, [r7, #15]
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	4613      	mov	r3, r2
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	334c      	adds	r3, #76	; 0x4c
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	3301      	adds	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
 8007114:	7bfa      	ldrb	r2, [r7, #15]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	429a      	cmp	r2, r3
 800711c:	d3af      	bcc.n	800707e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
 8007122:	e044      	b.n	80071ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007124:	7bfa      	ldrb	r2, [r7, #15]
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	4613      	mov	r3, r2
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	4413      	add	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	440b      	add	r3, r1
 8007132:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800713a:	7bfa      	ldrb	r2, [r7, #15]
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800714c:	7bfa      	ldrb	r2, [r7, #15]
 800714e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007150:	7bfa      	ldrb	r2, [r7, #15]
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	4613      	mov	r3, r2
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	440b      	add	r3, r1
 800715e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007162:	2200      	movs	r2, #0
 8007164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007166:	7bfa      	ldrb	r2, [r7, #15]
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800717c:	7bfa      	ldrb	r2, [r7, #15]
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	4613      	mov	r3, r2
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	440b      	add	r3, r1
 800718a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007192:	7bfa      	ldrb	r2, [r7, #15]
 8007194:	6879      	ldr	r1, [r7, #4]
 8007196:	4613      	mov	r3, r2
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	440b      	add	r3, r1
 80071a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	3301      	adds	r3, #1
 80071ac:	73fb      	strb	r3, [r7, #15]
 80071ae:	7bfa      	ldrb	r2, [r7, #15]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d3b5      	bcc.n	8007124 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	603b      	str	r3, [r7, #0]
 80071be:	687e      	ldr	r6, [r7, #4]
 80071c0:	466d      	mov	r5, sp
 80071c2:	f106 0410 	add.w	r4, r6, #16
 80071c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80071d6:	1d33      	adds	r3, r6, #4
 80071d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071da:	6838      	ldr	r0, [r7, #0]
 80071dc:	f004 feb6 	bl	800bf4c <USB_DevInit>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2202      	movs	r2, #2
 80071ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e014      	b.n	800721c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	2b01      	cmp	r3, #1
 8007208:	d102      	bne.n	8007210 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 f970 	bl	80084f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4618      	mov	r0, r3
 8007216:	f005 fef8 	bl	800d00a <USB_DevDisconnect>

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007224 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_PCD_Start+0x1c>
 800723c:	2302      	movs	r3, #2
 800723e:	e022      	b.n	8007286 <HAL_PCD_Start+0x62>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007250:	2b00      	cmp	r3, #0
 8007252:	d109      	bne.n	8007268 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007258:	2b01      	cmp	r3, #1
 800725a:	d105      	bne.n	8007268 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4618      	mov	r0, r3
 800726e:	f004 fdff 	bl	800be70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f005 fea6 	bl	800cfc8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800728e:	b590      	push	{r4, r7, lr}
 8007290:	b08d      	sub	sp, #52	; 0x34
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f005 ff64 	bl	800d172 <USB_GetMode>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f040 84b7 	bne.w	8007c20 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f005 fec8 	bl	800d04c <USB_ReadInterrupts>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 84ad 	beq.w	8007c1e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	0a1b      	lsrs	r3, r3, #8
 80072ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4618      	mov	r0, r3
 80072de:	f005 feb5 	bl	800d04c <USB_ReadInterrupts>
 80072e2:	4603      	mov	r3, r0
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d107      	bne.n	80072fc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695a      	ldr	r2, [r3, #20]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f002 0202 	and.w	r2, r2, #2
 80072fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4618      	mov	r0, r3
 8007302:	f005 fea3 	bl	800d04c <USB_ReadInterrupts>
 8007306:	4603      	mov	r3, r0
 8007308:	f003 0310 	and.w	r3, r3, #16
 800730c:	2b10      	cmp	r3, #16
 800730e:	d161      	bne.n	80073d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0210 	bic.w	r2, r2, #16
 800731e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	f003 020f 	and.w	r2, r3, #15
 800732c:	4613      	mov	r3, r2
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	4413      	add	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	4413      	add	r3, r2
 800733c:	3304      	adds	r3, #4
 800733e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	0c5b      	lsrs	r3, r3, #17
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	2b02      	cmp	r3, #2
 800734a:	d124      	bne.n	8007396 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007352:	4013      	ands	r3, r2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d035      	beq.n	80073c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	091b      	lsrs	r3, r3, #4
 8007360:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007366:	b29b      	uxth	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	6a38      	ldr	r0, [r7, #32]
 800736c:	f005 fcda 	bl	800cd24 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	091b      	lsrs	r3, r3, #4
 8007378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800737c:	441a      	add	r2, r3
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	695a      	ldr	r2, [r3, #20]
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	091b      	lsrs	r3, r3, #4
 800738a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800738e:	441a      	add	r2, r3
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	615a      	str	r2, [r3, #20]
 8007394:	e016      	b.n	80073c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	0c5b      	lsrs	r3, r3, #17
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	2b06      	cmp	r3, #6
 80073a0:	d110      	bne.n	80073c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80073a8:	2208      	movs	r2, #8
 80073aa:	4619      	mov	r1, r3
 80073ac:	6a38      	ldr	r0, [r7, #32]
 80073ae:	f005 fcb9 	bl	800cd24 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	695a      	ldr	r2, [r3, #20]
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	091b      	lsrs	r3, r3, #4
 80073ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073be:	441a      	add	r2, r3
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0210 	orr.w	r2, r2, #16
 80073d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4618      	mov	r0, r3
 80073da:	f005 fe37 	bl	800d04c <USB_ReadInterrupts>
 80073de:	4603      	mov	r3, r0
 80073e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073e8:	f040 80a7 	bne.w	800753a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f005 fe3c 	bl	800d072 <USB_ReadDevAllOutEpInterrupt>
 80073fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80073fc:	e099      	b.n	8007532 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 808e 	beq.w	8007526 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007410:	b2d2      	uxtb	r2, r2
 8007412:	4611      	mov	r1, r2
 8007414:	4618      	mov	r0, r3
 8007416:	f005 fe60 	bl	800d0da <USB_ReadDevOutEPInterrupt>
 800741a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00c      	beq.n	8007440 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007432:	461a      	mov	r2, r3
 8007434:	2301      	movs	r3, #1
 8007436:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fed2 	bl	80081e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f003 0308 	and.w	r3, r3, #8
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00c      	beq.n	8007464 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007456:	461a      	mov	r2, r3
 8007458:	2308      	movs	r3, #8
 800745a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800745c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 ffa8 	bl	80083b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	2b00      	cmp	r3, #0
 800746c:	d008      	beq.n	8007480 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747a:	461a      	mov	r2, r3
 800747c:	2310      	movs	r3, #16
 800747e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d030      	beq.n	80074ec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d109      	bne.n	80074aa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074a8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80074aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ac:	4613      	mov	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	4413      	add	r3, r2
 80074bc:	3304      	adds	r3, #4
 80074be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	78db      	ldrb	r3, [r3, #3]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d108      	bne.n	80074da <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2200      	movs	r2, #0
 80074cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f008 f9ef 	bl	800f8b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e6:	461a      	mov	r2, r3
 80074e8:	2302      	movs	r3, #2
 80074ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d008      	beq.n	8007508 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007502:	461a      	mov	r2, r3
 8007504:	2320      	movs	r3, #32
 8007506:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d009      	beq.n	8007526 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751e:	461a      	mov	r2, r3
 8007520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007524:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	3301      	adds	r3, #1
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	2b00      	cmp	r3, #0
 8007536:	f47f af62 	bne.w	80073fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4618      	mov	r0, r3
 8007540:	f005 fd84 	bl	800d04c <USB_ReadInterrupts>
 8007544:	4603      	mov	r3, r0
 8007546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800754a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800754e:	f040 80db 	bne.w	8007708 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4618      	mov	r0, r3
 8007558:	f005 fda5 	bl	800d0a6 <USB_ReadDevAllInEpInterrupt>
 800755c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007562:	e0cd      	b.n	8007700 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 80c2 	beq.w	80076f4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	4611      	mov	r1, r2
 800757a:	4618      	mov	r0, r3
 800757c:	f005 fdcb 	bl	800d116 <USB_ReadDevInEPInterrupt>
 8007580:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d057      	beq.n	800763c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	f003 030f 	and.w	r3, r3, #15
 8007592:	2201      	movs	r2, #1
 8007594:	fa02 f303 	lsl.w	r3, r2, r3
 8007598:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	43db      	mvns	r3, r3
 80075a6:	69f9      	ldr	r1, [r7, #28]
 80075a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075ac:	4013      	ands	r3, r2
 80075ae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075bc:	461a      	mov	r2, r3
 80075be:	2301      	movs	r3, #1
 80075c0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d132      	bne.n	8007630 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ce:	4613      	mov	r3, r2
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	4413      	add	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	440b      	add	r3, r1
 80075d8:	3348      	adds	r3, #72	; 0x48
 80075da:	6819      	ldr	r1, [r3, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e0:	4613      	mov	r3, r2
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4403      	add	r3, r0
 80075ea:	3344      	adds	r3, #68	; 0x44
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4419      	add	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f4:	4613      	mov	r3, r2
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4403      	add	r3, r0
 80075fe:	3348      	adds	r3, #72	; 0x48
 8007600:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d113      	bne.n	8007630 <HAL_PCD_IRQHandler+0x3a2>
 8007608:	6879      	ldr	r1, [r7, #4]
 800760a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800760c:	4613      	mov	r3, r2
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	334c      	adds	r3, #76	; 0x4c
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d108      	bne.n	8007630 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007628:	461a      	mov	r2, r3
 800762a:	2101      	movs	r1, #1
 800762c:	f005 fdd4 	bl	800d1d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	b2db      	uxtb	r3, r3
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f008 f8b9 	bl	800f7ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f003 0308 	and.w	r3, r3, #8
 8007642:	2b00      	cmp	r3, #0
 8007644:	d008      	beq.n	8007658 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007652:	461a      	mov	r2, r3
 8007654:	2308      	movs	r3, #8
 8007656:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f003 0310 	and.w	r3, r3, #16
 800765e:	2b00      	cmp	r3, #0
 8007660:	d008      	beq.n	8007674 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766e:	461a      	mov	r2, r3
 8007670:	2310      	movs	r3, #16
 8007672:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767a:	2b00      	cmp	r3, #0
 800767c:	d008      	beq.n	8007690 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768a:	461a      	mov	r2, r3
 800768c:	2340      	movs	r3, #64	; 0x40
 800768e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d023      	beq.n	80076e2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800769a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800769c:	6a38      	ldr	r0, [r7, #32]
 800769e:	f004 fdb3 	bl	800c208 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80076a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a4:	4613      	mov	r3, r2
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	4413      	add	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	3338      	adds	r3, #56	; 0x38
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	4413      	add	r3, r2
 80076b2:	3304      	adds	r3, #4
 80076b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	78db      	ldrb	r3, [r3, #3]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d108      	bne.n	80076d0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2200      	movs	r2, #0
 80076c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f008 f906 	bl	800f8dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076dc:	461a      	mov	r2, r3
 80076de:	2302      	movs	r3, #2
 80076e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80076ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fcea 	bl	80080c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	3301      	adds	r3, #1
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80076fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fc:	085b      	lsrs	r3, r3, #1
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	f47f af2e 	bne.w	8007564 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4618      	mov	r0, r3
 800770e:	f005 fc9d 	bl	800d04c <USB_ReadInterrupts>
 8007712:	4603      	mov	r3, r0
 8007714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800771c:	d122      	bne.n	8007764 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800772c:	f023 0301 	bic.w	r3, r3, #1
 8007730:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007738:	2b01      	cmp	r3, #1
 800773a:	d108      	bne.n	800774e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007744:	2100      	movs	r1, #0
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fef6 	bl	8008538 <HAL_PCDEx_LPM_Callback>
 800774c:	e002      	b.n	8007754 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f008 f8a4 	bl	800f89c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695a      	ldr	r2, [r3, #20]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4618      	mov	r0, r3
 800776a:	f005 fc6f 	bl	800d04c <USB_ReadInterrupts>
 800776e:	4603      	mov	r3, r0
 8007770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007778:	d112      	bne.n	80077a0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b01      	cmp	r3, #1
 8007788:	d102      	bne.n	8007790 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f008 f860 	bl	800f850 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695a      	ldr	r2, [r3, #20]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800779e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f005 fc51 	bl	800d04c <USB_ReadInterrupts>
 80077aa:	4603      	mov	r3, r0
 80077ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b4:	d121      	bne.n	80077fa <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	695a      	ldr	r2, [r3, #20]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80077c4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d111      	bne.n	80077f4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077de:	089b      	lsrs	r3, r3, #2
 80077e0:	f003 020f 	and.w	r2, r3, #15
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80077ea:	2101      	movs	r1, #1
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fea3 	bl	8008538 <HAL_PCDEx_LPM_Callback>
 80077f2:	e002      	b.n	80077fa <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f008 f82b 	bl	800f850 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4618      	mov	r0, r3
 8007800:	f005 fc24 	bl	800d04c <USB_ReadInterrupts>
 8007804:	4603      	mov	r3, r0
 8007806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800780a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780e:	f040 80b7 	bne.w	8007980 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	69fa      	ldr	r2, [r7, #28]
 800781c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007820:	f023 0301 	bic.w	r3, r3, #1
 8007824:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2110      	movs	r1, #16
 800782c:	4618      	mov	r0, r3
 800782e:	f004 fceb 	bl	800c208 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007832:	2300      	movs	r3, #0
 8007834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007836:	e046      	b.n	80078c6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007844:	461a      	mov	r2, r3
 8007846:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800784a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	4413      	add	r3, r2
 8007854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800785c:	0151      	lsls	r1, r2, #5
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	440a      	add	r2, r1
 8007862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007866:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800786a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007878:	461a      	mov	r2, r3
 800787a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800787e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007890:	0151      	lsls	r1, r2, #5
 8007892:	69fa      	ldr	r2, [r7, #28]
 8007894:	440a      	add	r2, r1
 8007896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800789a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800789e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b0:	0151      	lsls	r1, r2, #5
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	440a      	add	r2, r1
 80078b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078be:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c2:	3301      	adds	r3, #1
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d3b3      	bcc.n	8007838 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	69fa      	ldr	r2, [r7, #28]
 80078da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078de:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80078e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d016      	beq.n	800791a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078fc:	f043 030b 	orr.w	r3, r3, #11
 8007900:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790c:	69fa      	ldr	r2, [r7, #28]
 800790e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007912:	f043 030b 	orr.w	r3, r3, #11
 8007916:	6453      	str	r3, [r2, #68]	; 0x44
 8007918:	e015      	b.n	8007946 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007920:	695a      	ldr	r2, [r3, #20]
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007928:	4619      	mov	r1, r3
 800792a:	f242 032b 	movw	r3, #8235	; 0x202b
 800792e:	4313      	orrs	r3, r2
 8007930:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	69fa      	ldr	r2, [r7, #28]
 800793c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007940:	f043 030b 	orr.w	r3, r3, #11
 8007944:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69fa      	ldr	r2, [r7, #28]
 8007950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007954:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007958:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6818      	ldr	r0, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800796a:	461a      	mov	r2, r3
 800796c:	f005 fc34 	bl	800d1d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	695a      	ldr	r2, [r3, #20]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800797e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4618      	mov	r0, r3
 8007986:	f005 fb61 	bl	800d04c <USB_ReadInterrupts>
 800798a:	4603      	mov	r3, r0
 800798c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007994:	d124      	bne.n	80079e0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4618      	mov	r0, r3
 800799c:	f005 fbf8 	bl	800d190 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f004 fcac 	bl	800c302 <USB_GetDevSpeed>
 80079aa:	4603      	mov	r3, r0
 80079ac:	461a      	mov	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681c      	ldr	r4, [r3, #0]
 80079b6:	f001 fd1f 	bl	80093f8 <HAL_RCC_GetHCLKFreq>
 80079ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	461a      	mov	r2, r3
 80079c4:	4620      	mov	r0, r4
 80079c6:	f004 f9b1 	bl	800bd2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f007 ff17 	bl	800f7fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695a      	ldr	r2, [r3, #20]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80079de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f005 fb31 	bl	800d04c <USB_ReadInterrupts>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f003 0308 	and.w	r3, r3, #8
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d10a      	bne.n	8007a0a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f007 fef4 	bl	800f7e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	695a      	ldr	r2, [r3, #20]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f002 0208 	and.w	r2, r2, #8
 8007a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f005 fb1c 	bl	800d04c <USB_ReadInterrupts>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a1a:	2b80      	cmp	r3, #128	; 0x80
 8007a1c:	d122      	bne.n	8007a64 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a2e:	e014      	b.n	8007a5a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a34:	4613      	mov	r3, r2
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	440b      	add	r3, r1
 8007a3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d105      	bne.n	8007a54 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fb09 	bl	8008066 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	3301      	adds	r3, #1
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d3e5      	bcc.n	8007a30 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f005 faef 	bl	800d04c <USB_ReadInterrupts>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a78:	d13b      	bne.n	8007af2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a7e:	e02b      	b.n	8007ad8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a94:	4613      	mov	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	4413      	add	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	3340      	adds	r3, #64	; 0x40
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d115      	bne.n	8007ad2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007aa6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	da12      	bge.n	8007ad2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	4413      	add	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	440b      	add	r3, r1
 8007aba:	333f      	adds	r3, #63	; 0x3f
 8007abc:	2201      	movs	r2, #1
 8007abe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 faca 	bl	8008066 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d3ce      	bcc.n	8007a80 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	695a      	ldr	r2, [r3, #20]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f005 faa8 	bl	800d04c <USB_ReadInterrupts>
 8007afc:	4603      	mov	r3, r0
 8007afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b06:	d155      	bne.n	8007bb4 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b08:	2301      	movs	r3, #1
 8007b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b0c:	e045      	b.n	8007b9a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b22:	4613      	mov	r3, r2
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d12e      	bne.n	8007b94 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007b36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	da2b      	bge.n	8007b94 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007b48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d121      	bne.n	8007b94 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007b50:	6879      	ldr	r1, [r7, #4]
 8007b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b54:	4613      	mov	r3, r2
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	440b      	add	r3, r1
 8007b5e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007b62:	2201      	movs	r2, #1
 8007b64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b90:	6053      	str	r3, [r2, #4]
            break;
 8007b92:	e007      	b.n	8007ba4 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	3301      	adds	r3, #1
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d3b4      	bcc.n	8007b0e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695a      	ldr	r2, [r3, #20]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f005 fa47 	bl	800d04c <USB_ReadInterrupts>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc8:	d10a      	bne.n	8007be0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f007 fe98 	bl	800f900 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695a      	ldr	r2, [r3, #20]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f005 fa31 	bl	800d04c <USB_ReadInterrupts>
 8007bea:	4603      	mov	r3, r0
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d115      	bne.n	8007c20 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	f003 0304 	and.w	r3, r3, #4
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f007 fe88 	bl	800f91c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6859      	ldr	r1, [r3, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	605a      	str	r2, [r3, #4]
 8007c1c:	e000      	b.n	8007c20 <HAL_PCD_IRQHandler+0x992>
      return;
 8007c1e:	bf00      	nop
    }
  }
}
 8007c20:	3734      	adds	r7, #52	; 0x34
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd90      	pop	{r4, r7, pc}

08007c26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b082      	sub	sp, #8
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d101      	bne.n	8007c40 <HAL_PCD_SetAddress+0x1a>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	e013      	b.n	8007c68 <HAL_PCD_SetAddress+0x42>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	78fa      	ldrb	r2, [r7, #3]
 8007c4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	78fa      	ldrb	r2, [r7, #3]
 8007c56:	4611      	mov	r1, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f005 f98f 	bl	800cf7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	4608      	mov	r0, r1
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	70fb      	strb	r3, [r7, #3]
 8007c82:	460b      	mov	r3, r1
 8007c84:	803b      	strh	r3, [r7, #0]
 8007c86:	4613      	mov	r3, r2
 8007c88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	da0f      	bge.n	8007cb6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	f003 020f 	and.w	r2, r3, #15
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	4413      	add	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	3338      	adds	r3, #56	; 0x38
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	4413      	add	r3, r2
 8007caa:	3304      	adds	r3, #4
 8007cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	705a      	strb	r2, [r3, #1]
 8007cb4:	e00f      	b.n	8007cd6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	f003 020f 	and.w	r2, r3, #15
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	4413      	add	r3, r2
 8007ccc:	3304      	adds	r3, #4
 8007cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	f003 030f 	and.w	r3, r3, #15
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007ce2:	883a      	ldrh	r2, [r7, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	78ba      	ldrb	r2, [r7, #2]
 8007cec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	785b      	ldrb	r3, [r3, #1]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d004      	beq.n	8007d00 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007d00:	78bb      	ldrb	r3, [r7, #2]
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d102      	bne.n	8007d0c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d101      	bne.n	8007d1a <HAL_PCD_EP_Open+0xaa>
 8007d16:	2302      	movs	r3, #2
 8007d18:	e00e      	b.n	8007d38 <HAL_PCD_EP_Open+0xc8>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68f9      	ldr	r1, [r7, #12]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f004 fb0f 	bl	800c34c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007d36:	7afb      	ldrb	r3, [r7, #11]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	da0f      	bge.n	8007d74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	f003 020f 	and.w	r2, r3, #15
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	4413      	add	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	3338      	adds	r3, #56	; 0x38
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	4413      	add	r3, r2
 8007d68:	3304      	adds	r3, #4
 8007d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	705a      	strb	r2, [r3, #1]
 8007d72:	e00f      	b.n	8007d94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	f003 020f 	and.w	r2, r3, #15
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	4413      	add	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	4413      	add	r3, r2
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d94:	78fb      	ldrb	r3, [r7, #3]
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d101      	bne.n	8007dae <HAL_PCD_EP_Close+0x6e>
 8007daa:	2302      	movs	r3, #2
 8007dac:	e00e      	b.n	8007dcc <HAL_PCD_EP_Close+0x8c>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68f9      	ldr	r1, [r7, #12]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f004 fb4d 	bl	800c45c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	607a      	str	r2, [r7, #4]
 8007dde:	603b      	str	r3, [r7, #0]
 8007de0:	460b      	mov	r3, r1
 8007de2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007de4:	7afb      	ldrb	r3, [r7, #11]
 8007de6:	f003 020f 	and.w	r2, r3, #15
 8007dea:	4613      	mov	r3, r2
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	4413      	add	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4413      	add	r3, r2
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2200      	movs	r2, #0
 8007e14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	f003 030f 	and.w	r3, r3, #15
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d102      	bne.n	8007e30 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6979      	ldr	r1, [r7, #20]
 8007e3e:	f004 fbe9 	bl	800c614 <USB_EPStartXfer>

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007e58:	78fb      	ldrb	r3, [r7, #3]
 8007e5a:	f003 020f 	and.w	r2, r3, #15
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	4613      	mov	r3, r2
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	440b      	add	r3, r1
 8007e6a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8007e6e:	681b      	ldr	r3, [r3, #0]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	607a      	str	r2, [r7, #4]
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e8c:	7afb      	ldrb	r3, [r7, #11]
 8007e8e:	f003 020f 	and.w	r2, r3, #15
 8007e92:	4613      	mov	r3, r2
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	3338      	adds	r3, #56	; 0x38
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ebc:	7afb      	ldrb	r3, [r7, #11]
 8007ebe:	f003 030f 	and.w	r3, r3, #15
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d102      	bne.n	8007ed6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6818      	ldr	r0, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	6979      	ldr	r1, [r7, #20]
 8007ee4:	f004 fb96 	bl	800c614 <USB_EPStartXfer>

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	f003 020f 	and.w	r2, r3, #15
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d901      	bls.n	8007f10 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e050      	b.n	8007fb2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	da0f      	bge.n	8007f38 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	f003 020f 	and.w	r2, r3, #15
 8007f1e:	4613      	mov	r3, r2
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	4413      	add	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	3338      	adds	r3, #56	; 0x38
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2201      	movs	r2, #1
 8007f34:	705a      	strb	r2, [r3, #1]
 8007f36:	e00d      	b.n	8007f54 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007f38:	78fa      	ldrb	r2, [r7, #3]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	00db      	lsls	r3, r3, #3
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	4413      	add	r3, r2
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2201      	movs	r2, #1
 8007f58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	f003 030f 	and.w	r3, r3, #15
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <HAL_PCD_EP_SetStall+0x82>
 8007f70:	2302      	movs	r3, #2
 8007f72:	e01e      	b.n	8007fb2 <HAL_PCD_EP_SetStall+0xc0>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68f9      	ldr	r1, [r7, #12]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f004 ff26 	bl	800cdd4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	f003 030f 	and.w	r3, r3, #15
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	b2d9      	uxtb	r1, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f005 f918 	bl	800d1d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	f003 020f 	and.w	r2, r3, #15
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d901      	bls.n	8007fd8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e042      	b.n	800805e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	da0f      	bge.n	8008000 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	f003 020f 	and.w	r2, r3, #15
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	3338      	adds	r3, #56	; 0x38
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	705a      	strb	r2, [r3, #1]
 8007ffe:	e00f      	b.n	8008020 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	f003 020f 	and.w	r2, r3, #15
 8008006:	4613      	mov	r3, r2
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	4413      	add	r3, r2
 8008016:	3304      	adds	r3, #4
 8008018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	f003 030f 	and.w	r3, r3, #15
 800802c:	b2da      	uxtb	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008038:	2b01      	cmp	r3, #1
 800803a:	d101      	bne.n	8008040 <HAL_PCD_EP_ClrStall+0x86>
 800803c:	2302      	movs	r3, #2
 800803e:	e00e      	b.n	800805e <HAL_PCD_EP_ClrStall+0xa4>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68f9      	ldr	r1, [r7, #12]
 800804e:	4618      	mov	r0, r3
 8008050:	f004 ff2e 	bl	800ceb0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	460b      	mov	r3, r1
 8008070:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008076:	2b00      	cmp	r3, #0
 8008078:	da0c      	bge.n	8008094 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800807a:	78fb      	ldrb	r3, [r7, #3]
 800807c:	f003 020f 	and.w	r2, r3, #15
 8008080:	4613      	mov	r3, r2
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	3338      	adds	r3, #56	; 0x38
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	4413      	add	r3, r2
 800808e:	3304      	adds	r3, #4
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	e00c      	b.n	80080ae <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	f003 020f 	and.w	r2, r3, #15
 800809a:	4613      	mov	r3, r2
 800809c:	00db      	lsls	r3, r3, #3
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	4413      	add	r3, r2
 80080aa:	3304      	adds	r3, #4
 80080ac:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f004 fd4d 	bl	800cb54 <USB_EPStopXfer>
 80080ba:	4603      	mov	r3, r0
 80080bc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80080be:	7afb      	ldrb	r3, [r7, #11]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08a      	sub	sp, #40	; 0x28
 80080cc:	af02      	add	r7, sp, #8
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	4613      	mov	r3, r2
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	4413      	add	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	3338      	adds	r3, #56	; 0x38
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	4413      	add	r3, r2
 80080ec:	3304      	adds	r3, #4
 80080ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	695a      	ldr	r2, [r3, #20]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d901      	bls.n	8008100 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e06c      	b.n	80081da <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	69fa      	ldr	r2, [r7, #28]
 8008112:	429a      	cmp	r2, r3
 8008114:	d902      	bls.n	800811c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	3303      	adds	r3, #3
 8008120:	089b      	lsrs	r3, r3, #2
 8008122:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008124:	e02b      	b.n	800817e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	691a      	ldr	r2, [r3, #16]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	429a      	cmp	r2, r3
 800813a:	d902      	bls.n	8008142 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	3303      	adds	r3, #3
 8008146:	089b      	lsrs	r3, r3, #2
 8008148:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	68d9      	ldr	r1, [r3, #12]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	b2da      	uxtb	r2, r3
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800815a:	b2db      	uxtb	r3, r3
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	4603      	mov	r3, r0
 8008160:	6978      	ldr	r0, [r7, #20]
 8008162:	f004 fda1 	bl	800cca8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	441a      	add	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	695a      	ldr	r2, [r3, #20]
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	441a      	add	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	b29b      	uxth	r3, r3
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	429a      	cmp	r2, r3
 8008192:	d809      	bhi.n	80081a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	695a      	ldr	r2, [r3, #20]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800819c:	429a      	cmp	r2, r3
 800819e:	d203      	bcs.n	80081a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1be      	bne.n	8008126 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	691a      	ldr	r2, [r3, #16]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d811      	bhi.n	80081d8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	f003 030f 	and.w	r3, r3, #15
 80081ba:	2201      	movs	r2, #1
 80081bc:	fa02 f303 	lsl.w	r3, r2, r3
 80081c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	43db      	mvns	r3, r3
 80081ce:	6939      	ldr	r1, [r7, #16]
 80081d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081d4:	4013      	ands	r3, r2
 80081d6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3720      	adds	r7, #32
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	333c      	adds	r3, #60	; 0x3c
 80081fc:	3304      	adds	r3, #4
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d17b      	bne.n	8008312 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f003 0308 	and.w	r3, r3, #8
 8008220:	2b00      	cmp	r3, #0
 8008222:	d015      	beq.n	8008250 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	4a61      	ldr	r2, [pc, #388]	; (80083ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008228:	4293      	cmp	r3, r2
 800822a:	f240 80b9 	bls.w	80083a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 80b3 	beq.w	80083a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008246:	461a      	mov	r2, r3
 8008248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800824c:	6093      	str	r3, [r2, #8]
 800824e:	e0a7      	b.n	80083a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	f003 0320 	and.w	r3, r3, #32
 8008256:	2b00      	cmp	r3, #0
 8008258:	d009      	beq.n	800826e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	015a      	lsls	r2, r3, #5
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	4413      	add	r3, r2
 8008262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008266:	461a      	mov	r2, r3
 8008268:	2320      	movs	r3, #32
 800826a:	6093      	str	r3, [r2, #8]
 800826c:	e098      	b.n	80083a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008274:	2b00      	cmp	r3, #0
 8008276:	f040 8093 	bne.w	80083a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	4a4b      	ldr	r2, [pc, #300]	; (80083ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d90f      	bls.n	80082a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00a      	beq.n	80082a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008298:	461a      	mov	r2, r3
 800829a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800829e:	6093      	str	r3, [r2, #8]
 80082a0:	e07e      	b.n	80083a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	4613      	mov	r3, r2
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	4413      	add	r3, r2
 80082b4:	3304      	adds	r3, #4
 80082b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a1a      	ldr	r2, [r3, #32]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	0159      	lsls	r1, r3, #5
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	440b      	add	r3, r1
 80082c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d114      	bne.n	8008304 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d109      	bne.n	80082f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6818      	ldr	r0, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80082ec:	461a      	mov	r2, r3
 80082ee:	2101      	movs	r1, #1
 80082f0:	f004 ff72 	bl	800d1d8 <USB_EP0_OutStart>
 80082f4:	e006      	b.n	8008304 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68da      	ldr	r2, [r3, #12]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	441a      	add	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	b2db      	uxtb	r3, r3
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f007 fa34 	bl	800f778 <HAL_PCD_DataOutStageCallback>
 8008310:	e046      	b.n	80083a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	4a26      	ldr	r2, [pc, #152]	; (80083b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d124      	bne.n	8008364 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00a      	beq.n	800833a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008330:	461a      	mov	r2, r3
 8008332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008336:	6093      	str	r3, [r2, #8]
 8008338:	e032      	b.n	80083a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f003 0320 	and.w	r3, r3, #32
 8008340:	2b00      	cmp	r3, #0
 8008342:	d008      	beq.n	8008356 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	015a      	lsls	r2, r3, #5
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	4413      	add	r3, r2
 800834c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008350:	461a      	mov	r2, r3
 8008352:	2320      	movs	r3, #32
 8008354:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	b2db      	uxtb	r3, r3
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f007 fa0b 	bl	800f778 <HAL_PCD_DataOutStageCallback>
 8008362:	e01d      	b.n	80083a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d114      	bne.n	8008394 <PCD_EP_OutXfrComplete_int+0x1b0>
 800836a:	6879      	ldr	r1, [r7, #4]
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	4613      	mov	r3, r2
 8008370:	00db      	lsls	r3, r3, #3
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	440b      	add	r3, r1
 8008378:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d108      	bne.n	8008394 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800838c:	461a      	mov	r2, r3
 800838e:	2100      	movs	r1, #0
 8008390:	f004 ff22 	bl	800d1d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f007 f9ec 	bl	800f778 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3720      	adds	r7, #32
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	4f54300a 	.word	0x4f54300a
 80083b0:	4f54310a 	.word	0x4f54310a

080083b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	333c      	adds	r3, #60	; 0x3c
 80083cc:	3304      	adds	r3, #4
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	4a15      	ldr	r2, [pc, #84]	; (800843c <PCD_EP_OutSetupPacket_int+0x88>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d90e      	bls.n	8008408 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d009      	beq.n	8008408 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008400:	461a      	mov	r2, r3
 8008402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008406:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f007 f9a3 	bl	800f754 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	4a0a      	ldr	r2, [pc, #40]	; (800843c <PCD_EP_OutSetupPacket_int+0x88>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d90c      	bls.n	8008430 <PCD_EP_OutSetupPacket_int+0x7c>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d108      	bne.n	8008430 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008428:	461a      	mov	r2, r3
 800842a:	2101      	movs	r1, #1
 800842c:	f004 fed4 	bl	800d1d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	4f54300a 	.word	0x4f54300a

08008440 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
 800844c:	4613      	mov	r3, r2
 800844e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008458:	78fb      	ldrb	r3, [r7, #3]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d107      	bne.n	800846e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800845e:	883b      	ldrh	r3, [r7, #0]
 8008460:	0419      	lsls	r1, r3, #16
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	430a      	orrs	r2, r1
 800846a:	629a      	str	r2, [r3, #40]	; 0x28
 800846c:	e028      	b.n	80084c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008474:	0c1b      	lsrs	r3, r3, #16
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	4413      	add	r3, r2
 800847a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800847c:	2300      	movs	r3, #0
 800847e:	73fb      	strb	r3, [r7, #15]
 8008480:	e00d      	b.n	800849e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	3340      	adds	r3, #64	; 0x40
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	0c1b      	lsrs	r3, r3, #16
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	4413      	add	r3, r2
 8008496:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008498:	7bfb      	ldrb	r3, [r7, #15]
 800849a:	3301      	adds	r3, #1
 800849c:	73fb      	strb	r3, [r7, #15]
 800849e:	7bfa      	ldrb	r2, [r7, #15]
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d3ec      	bcc.n	8008482 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80084a8:	883b      	ldrh	r3, [r7, #0]
 80084aa:	0418      	lsls	r0, r3, #16
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6819      	ldr	r1, [r3, #0]
 80084b0:	78fb      	ldrb	r3, [r7, #3]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	4302      	orrs	r2, r0
 80084b8:	3340      	adds	r3, #64	; 0x40
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	440b      	add	r3, r1
 80084be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	460b      	mov	r3, r1
 80084d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	887a      	ldrh	r2, [r7, #2]
 80084e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800851e:	4b05      	ldr	r3, [pc, #20]	; (8008534 <HAL_PCDEx_ActivateLPM+0x44>)
 8008520:	4313      	orrs	r3, r2
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	10000003 	.word	0x10000003

08008538 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008558:	4b19      	ldr	r3, [pc, #100]	; (80085c0 <HAL_PWREx_ConfigSupply+0x70>)
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f003 0304 	and.w	r3, r3, #4
 8008560:	2b04      	cmp	r3, #4
 8008562:	d00a      	beq.n	800857a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008564:	4b16      	ldr	r3, [pc, #88]	; (80085c0 <HAL_PWREx_ConfigSupply+0x70>)
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f003 0307 	and.w	r3, r3, #7
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	429a      	cmp	r2, r3
 8008570:	d001      	beq.n	8008576 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e01f      	b.n	80085b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	e01d      	b.n	80085b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800857a:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <HAL_PWREx_ConfigSupply+0x70>)
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f023 0207 	bic.w	r2, r3, #7
 8008582:	490f      	ldr	r1, [pc, #60]	; (80085c0 <HAL_PWREx_ConfigSupply+0x70>)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4313      	orrs	r3, r2
 8008588:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800858a:	f7fa fe51 	bl	8003230 <HAL_GetTick>
 800858e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008590:	e009      	b.n	80085a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008592:	f7fa fe4d 	bl	8003230 <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085a0:	d901      	bls.n	80085a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e007      	b.n	80085b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085a6:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <HAL_PWREx_ConfigSupply+0x70>)
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085b2:	d1ee      	bne.n	8008592 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	58024800 	.word	0x58024800

080085c4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80085c4:	b480      	push	{r7}
 80085c6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80085c8:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	4a04      	ldr	r2, [pc, #16]	; (80085e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80085ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085d2:	60d3      	str	r3, [r2, #12]
}
 80085d4:	bf00      	nop
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	58024800 	.word	0x58024800

080085e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08c      	sub	sp, #48	; 0x30
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e3c8      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 8087 	beq.w	8008712 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008604:	4b88      	ldr	r3, [pc, #544]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800860c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800860e:	4b86      	ldr	r3, [pc, #536]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008616:	2b10      	cmp	r3, #16
 8008618:	d007      	beq.n	800862a <HAL_RCC_OscConfig+0x46>
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	2b18      	cmp	r3, #24
 800861e:	d110      	bne.n	8008642 <HAL_RCC_OscConfig+0x5e>
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	2b02      	cmp	r3, #2
 8008628:	d10b      	bne.n	8008642 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800862a:	4b7f      	ldr	r3, [pc, #508]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d06c      	beq.n	8008710 <HAL_RCC_OscConfig+0x12c>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d168      	bne.n	8008710 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e3a2      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800864a:	d106      	bne.n	800865a <HAL_RCC_OscConfig+0x76>
 800864c:	4b76      	ldr	r3, [pc, #472]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a75      	ldr	r2, [pc, #468]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	e02e      	b.n	80086b8 <HAL_RCC_OscConfig+0xd4>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10c      	bne.n	800867c <HAL_RCC_OscConfig+0x98>
 8008662:	4b71      	ldr	r3, [pc, #452]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a70      	ldr	r2, [pc, #448]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	4b6e      	ldr	r3, [pc, #440]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a6d      	ldr	r2, [pc, #436]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008678:	6013      	str	r3, [r2, #0]
 800867a:	e01d      	b.n	80086b8 <HAL_RCC_OscConfig+0xd4>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008684:	d10c      	bne.n	80086a0 <HAL_RCC_OscConfig+0xbc>
 8008686:	4b68      	ldr	r3, [pc, #416]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a67      	ldr	r2, [pc, #412]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 800868c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	4b65      	ldr	r3, [pc, #404]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a64      	ldr	r2, [pc, #400]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	e00b      	b.n	80086b8 <HAL_RCC_OscConfig+0xd4>
 80086a0:	4b61      	ldr	r3, [pc, #388]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a60      	ldr	r2, [pc, #384]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 80086a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	4b5e      	ldr	r3, [pc, #376]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a5d      	ldr	r2, [pc, #372]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 80086b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d013      	beq.n	80086e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c0:	f7fa fdb6 	bl	8003230 <HAL_GetTick>
 80086c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086c6:	e008      	b.n	80086da <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086c8:	f7fa fdb2 	bl	8003230 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b64      	cmp	r3, #100	; 0x64
 80086d4:	d901      	bls.n	80086da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e356      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086da:	4b53      	ldr	r3, [pc, #332]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f0      	beq.n	80086c8 <HAL_RCC_OscConfig+0xe4>
 80086e6:	e014      	b.n	8008712 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e8:	f7fa fda2 	bl	8003230 <HAL_GetTick>
 80086ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086ee:	e008      	b.n	8008702 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086f0:	f7fa fd9e 	bl	8003230 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b64      	cmp	r3, #100	; 0x64
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e342      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008702:	4b49      	ldr	r3, [pc, #292]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1f0      	bne.n	80086f0 <HAL_RCC_OscConfig+0x10c>
 800870e:	e000      	b.n	8008712 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 808c 	beq.w	8008838 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008720:	4b41      	ldr	r3, [pc, #260]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008728:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800872a:	4b3f      	ldr	r3, [pc, #252]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 800872c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d007      	beq.n	8008746 <HAL_RCC_OscConfig+0x162>
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	2b18      	cmp	r3, #24
 800873a:	d137      	bne.n	80087ac <HAL_RCC_OscConfig+0x1c8>
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f003 0303 	and.w	r3, r3, #3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d132      	bne.n	80087ac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008746:	4b38      	ldr	r3, [pc, #224]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0304 	and.w	r3, r3, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <HAL_RCC_OscConfig+0x17a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e314      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800875e:	4b32      	ldr	r3, [pc, #200]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f023 0219 	bic.w	r2, r3, #25
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	492f      	ldr	r1, [pc, #188]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 800876c:	4313      	orrs	r3, r2
 800876e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008770:	f7fa fd5e 	bl	8003230 <HAL_GetTick>
 8008774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008776:	e008      	b.n	800878a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008778:	f7fa fd5a 	bl	8003230 <HAL_GetTick>
 800877c:	4602      	mov	r2, r0
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	2b02      	cmp	r3, #2
 8008784:	d901      	bls.n	800878a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e2fe      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800878a:	4b27      	ldr	r3, [pc, #156]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0304 	and.w	r3, r3, #4
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0f0      	beq.n	8008778 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008796:	4b24      	ldr	r3, [pc, #144]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	061b      	lsls	r3, r3, #24
 80087a4:	4920      	ldr	r1, [pc, #128]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087aa:	e045      	b.n	8008838 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d026      	beq.n	8008802 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80087b4:	4b1c      	ldr	r3, [pc, #112]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f023 0219 	bic.w	r2, r3, #25
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	4919      	ldr	r1, [pc, #100]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c6:	f7fa fd33 	bl	8003230 <HAL_GetTick>
 80087ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087cc:	e008      	b.n	80087e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087ce:	f7fa fd2f 	bl	8003230 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d901      	bls.n	80087e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e2d3      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087e0:	4b11      	ldr	r3, [pc, #68]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0f0      	beq.n	80087ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ec:	4b0e      	ldr	r3, [pc, #56]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	061b      	lsls	r3, r3, #24
 80087fa:	490b      	ldr	r1, [pc, #44]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	604b      	str	r3, [r1, #4]
 8008800:	e01a      	b.n	8008838 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008802:	4b09      	ldr	r3, [pc, #36]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a08      	ldr	r2, [pc, #32]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008808:	f023 0301 	bic.w	r3, r3, #1
 800880c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880e:	f7fa fd0f 	bl	8003230 <HAL_GetTick>
 8008812:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008814:	e00a      	b.n	800882c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008816:	f7fa fd0b 	bl	8003230 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d903      	bls.n	800882c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e2af      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
 8008828:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800882c:	4b96      	ldr	r3, [pc, #600]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1ee      	bne.n	8008816 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0310 	and.w	r3, r3, #16
 8008840:	2b00      	cmp	r3, #0
 8008842:	d06a      	beq.n	800891a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008844:	4b90      	ldr	r3, [pc, #576]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800884c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800884e:	4b8e      	ldr	r3, [pc, #568]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008852:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	2b08      	cmp	r3, #8
 8008858:	d007      	beq.n	800886a <HAL_RCC_OscConfig+0x286>
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	2b18      	cmp	r3, #24
 800885e:	d11b      	bne.n	8008898 <HAL_RCC_OscConfig+0x2b4>
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	2b01      	cmp	r3, #1
 8008868:	d116      	bne.n	8008898 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800886a:	4b87      	ldr	r3, [pc, #540]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <HAL_RCC_OscConfig+0x29e>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	2b80      	cmp	r3, #128	; 0x80
 800887c:	d001      	beq.n	8008882 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e282      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008882:	4b81      	ldr	r3, [pc, #516]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	061b      	lsls	r3, r3, #24
 8008890:	497d      	ldr	r1, [pc, #500]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008892:	4313      	orrs	r3, r2
 8008894:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008896:	e040      	b.n	800891a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d023      	beq.n	80088e8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80088a0:	4b79      	ldr	r3, [pc, #484]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a78      	ldr	r2, [pc, #480]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 80088a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ac:	f7fa fcc0 	bl	8003230 <HAL_GetTick>
 80088b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80088b2:	e008      	b.n	80088c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80088b4:	f7fa fcbc 	bl	8003230 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e260      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80088c6:	4b70      	ldr	r3, [pc, #448]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0f0      	beq.n	80088b4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088d2:	4b6d      	ldr	r3, [pc, #436]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	061b      	lsls	r3, r3, #24
 80088e0:	4969      	ldr	r1, [pc, #420]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	60cb      	str	r3, [r1, #12]
 80088e6:	e018      	b.n	800891a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80088e8:	4b67      	ldr	r3, [pc, #412]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a66      	ldr	r2, [pc, #408]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 80088ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f4:	f7fa fc9c 	bl	8003230 <HAL_GetTick>
 80088f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80088fa:	e008      	b.n	800890e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80088fc:	f7fa fc98 	bl	8003230 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b02      	cmp	r3, #2
 8008908:	d901      	bls.n	800890e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e23c      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800890e:	4b5e      	ldr	r3, [pc, #376]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1f0      	bne.n	80088fc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0308 	and.w	r3, r3, #8
 8008922:	2b00      	cmp	r3, #0
 8008924:	d036      	beq.n	8008994 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d019      	beq.n	8008962 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800892e:	4b56      	ldr	r3, [pc, #344]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008932:	4a55      	ldr	r2, [pc, #340]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008934:	f043 0301 	orr.w	r3, r3, #1
 8008938:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800893a:	f7fa fc79 	bl	8003230 <HAL_GetTick>
 800893e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008940:	e008      	b.n	8008954 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008942:	f7fa fc75 	bl	8003230 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	2b02      	cmp	r3, #2
 800894e:	d901      	bls.n	8008954 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e219      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008954:	4b4c      	ldr	r3, [pc, #304]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0f0      	beq.n	8008942 <HAL_RCC_OscConfig+0x35e>
 8008960:	e018      	b.n	8008994 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008962:	4b49      	ldr	r3, [pc, #292]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008966:	4a48      	ldr	r2, [pc, #288]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008968:	f023 0301 	bic.w	r3, r3, #1
 800896c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800896e:	f7fa fc5f 	bl	8003230 <HAL_GetTick>
 8008972:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008974:	e008      	b.n	8008988 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008976:	f7fa fc5b 	bl	8003230 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b02      	cmp	r3, #2
 8008982:	d901      	bls.n	8008988 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e1ff      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008988:	4b3f      	ldr	r3, [pc, #252]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 800898a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1f0      	bne.n	8008976 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0320 	and.w	r3, r3, #32
 800899c:	2b00      	cmp	r3, #0
 800899e:	d036      	beq.n	8008a0e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d019      	beq.n	80089dc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80089a8:	4b37      	ldr	r3, [pc, #220]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a36      	ldr	r2, [pc, #216]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 80089ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80089b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80089b4:	f7fa fc3c 	bl	8003230 <HAL_GetTick>
 80089b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80089ba:	e008      	b.n	80089ce <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089bc:	f7fa fc38 	bl	8003230 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e1dc      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80089ce:	4b2e      	ldr	r3, [pc, #184]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0f0      	beq.n	80089bc <HAL_RCC_OscConfig+0x3d8>
 80089da:	e018      	b.n	8008a0e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80089dc:	4b2a      	ldr	r3, [pc, #168]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a29      	ldr	r2, [pc, #164]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 80089e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80089e8:	f7fa fc22 	bl	8003230 <HAL_GetTick>
 80089ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80089ee:	e008      	b.n	8008a02 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089f0:	f7fa fc1e 	bl	8003230 <HAL_GetTick>
 80089f4:	4602      	mov	r2, r0
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d901      	bls.n	8008a02 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e1c2      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008a02:	4b21      	ldr	r3, [pc, #132]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1f0      	bne.n	80089f0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0304 	and.w	r3, r3, #4
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 8086 	beq.w	8008b28 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008a1c:	4b1b      	ldr	r3, [pc, #108]	; (8008a8c <HAL_RCC_OscConfig+0x4a8>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a1a      	ldr	r2, [pc, #104]	; (8008a8c <HAL_RCC_OscConfig+0x4a8>)
 8008a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a28:	f7fa fc02 	bl	8003230 <HAL_GetTick>
 8008a2c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a2e:	e008      	b.n	8008a42 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a30:	f7fa fbfe 	bl	8003230 <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	2b64      	cmp	r3, #100	; 0x64
 8008a3c:	d901      	bls.n	8008a42 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e1a2      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a42:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <HAL_RCC_OscConfig+0x4a8>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d0f0      	beq.n	8008a30 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d106      	bne.n	8008a64 <HAL_RCC_OscConfig+0x480>
 8008a56:	4b0c      	ldr	r3, [pc, #48]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a5a:	4a0b      	ldr	r2, [pc, #44]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008a5c:	f043 0301 	orr.w	r3, r3, #1
 8008a60:	6713      	str	r3, [r2, #112]	; 0x70
 8008a62:	e032      	b.n	8008aca <HAL_RCC_OscConfig+0x4e6>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d111      	bne.n	8008a90 <HAL_RCC_OscConfig+0x4ac>
 8008a6c:	4b06      	ldr	r3, [pc, #24]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a70:	4a05      	ldr	r2, [pc, #20]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008a72:	f023 0301 	bic.w	r3, r3, #1
 8008a76:	6713      	str	r3, [r2, #112]	; 0x70
 8008a78:	4b03      	ldr	r3, [pc, #12]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a7c:	4a02      	ldr	r2, [pc, #8]	; (8008a88 <HAL_RCC_OscConfig+0x4a4>)
 8008a7e:	f023 0304 	bic.w	r3, r3, #4
 8008a82:	6713      	str	r3, [r2, #112]	; 0x70
 8008a84:	e021      	b.n	8008aca <HAL_RCC_OscConfig+0x4e6>
 8008a86:	bf00      	nop
 8008a88:	58024400 	.word	0x58024400
 8008a8c:	58024800 	.word	0x58024800
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	2b05      	cmp	r3, #5
 8008a96:	d10c      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x4ce>
 8008a98:	4b83      	ldr	r3, [pc, #524]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9c:	4a82      	ldr	r2, [pc, #520]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008a9e:	f043 0304 	orr.w	r3, r3, #4
 8008aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8008aa4:	4b80      	ldr	r3, [pc, #512]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa8:	4a7f      	ldr	r2, [pc, #508]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008aaa:	f043 0301 	orr.w	r3, r3, #1
 8008aae:	6713      	str	r3, [r2, #112]	; 0x70
 8008ab0:	e00b      	b.n	8008aca <HAL_RCC_OscConfig+0x4e6>
 8008ab2:	4b7d      	ldr	r3, [pc, #500]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab6:	4a7c      	ldr	r2, [pc, #496]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008ab8:	f023 0301 	bic.w	r3, r3, #1
 8008abc:	6713      	str	r3, [r2, #112]	; 0x70
 8008abe:	4b7a      	ldr	r3, [pc, #488]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac2:	4a79      	ldr	r2, [pc, #484]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008ac4:	f023 0304 	bic.w	r3, r3, #4
 8008ac8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d015      	beq.n	8008afe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad2:	f7fa fbad 	bl	8003230 <HAL_GetTick>
 8008ad6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ad8:	e00a      	b.n	8008af0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ada:	f7fa fba9 	bl	8003230 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d901      	bls.n	8008af0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e14b      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008af0:	4b6d      	ldr	r3, [pc, #436]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d0ee      	beq.n	8008ada <HAL_RCC_OscConfig+0x4f6>
 8008afc:	e014      	b.n	8008b28 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008afe:	f7fa fb97 	bl	8003230 <HAL_GetTick>
 8008b02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008b04:	e00a      	b.n	8008b1c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b06:	f7fa fb93 	bl	8003230 <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d901      	bls.n	8008b1c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e135      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008b1c:	4b62      	ldr	r3, [pc, #392]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1ee      	bne.n	8008b06 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 812a 	beq.w	8008d86 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008b32:	4b5d      	ldr	r3, [pc, #372]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b3a:	2b18      	cmp	r3, #24
 8008b3c:	f000 80ba 	beq.w	8008cb4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	f040 8095 	bne.w	8008c74 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b4a:	4b57      	ldr	r3, [pc, #348]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a56      	ldr	r2, [pc, #344]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008b50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b56:	f7fa fb6b 	bl	8003230 <HAL_GetTick>
 8008b5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b5c:	e008      	b.n	8008b70 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b5e:	f7fa fb67 	bl	8003230 <HAL_GetTick>
 8008b62:	4602      	mov	r2, r0
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d901      	bls.n	8008b70 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e10b      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b70:	4b4d      	ldr	r3, [pc, #308]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1f0      	bne.n	8008b5e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b7c:	4b4a      	ldr	r3, [pc, #296]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008b7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b80:	4b4a      	ldr	r3, [pc, #296]	; (8008cac <HAL_RCC_OscConfig+0x6c8>)
 8008b82:	4013      	ands	r3, r2
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008b8c:	0112      	lsls	r2, r2, #4
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	4945      	ldr	r1, [pc, #276]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	628b      	str	r3, [r1, #40]	; 0x28
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	025b      	lsls	r3, r3, #9
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	431a      	orrs	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	041b      	lsls	r3, r3, #16
 8008bb4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	061b      	lsls	r3, r3, #24
 8008bc2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008bc6:	4938      	ldr	r1, [pc, #224]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008bcc:	4b36      	ldr	r3, [pc, #216]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd0:	4a35      	ldr	r2, [pc, #212]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008bd2:	f023 0301 	bic.w	r3, r3, #1
 8008bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008bd8:	4b33      	ldr	r3, [pc, #204]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bdc:	4b34      	ldr	r3, [pc, #208]	; (8008cb0 <HAL_RCC_OscConfig+0x6cc>)
 8008bde:	4013      	ands	r3, r2
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008be4:	00d2      	lsls	r2, r2, #3
 8008be6:	4930      	ldr	r1, [pc, #192]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008bec:	4b2e      	ldr	r3, [pc, #184]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf0:	f023 020c 	bic.w	r2, r3, #12
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	492b      	ldr	r1, [pc, #172]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008bfe:	4b2a      	ldr	r3, [pc, #168]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c02:	f023 0202 	bic.w	r2, r3, #2
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c0a:	4927      	ldr	r1, [pc, #156]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008c10:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c14:	4a24      	ldr	r2, [pc, #144]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c1c:	4b22      	ldr	r3, [pc, #136]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c20:	4a21      	ldr	r2, [pc, #132]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008c28:	4b1f      	ldr	r3, [pc, #124]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	4a1e      	ldr	r2, [pc, #120]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008c34:	4b1c      	ldr	r3, [pc, #112]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	4a1b      	ldr	r2, [pc, #108]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c3a:	f043 0301 	orr.w	r3, r3, #1
 8008c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c40:	4b19      	ldr	r3, [pc, #100]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a18      	ldr	r2, [pc, #96]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c4c:	f7fa faf0 	bl	8003230 <HAL_GetTick>
 8008c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c52:	e008      	b.n	8008c66 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c54:	f7fa faec 	bl	8003230 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d901      	bls.n	8008c66 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e090      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c66:	4b10      	ldr	r3, [pc, #64]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0f0      	beq.n	8008c54 <HAL_RCC_OscConfig+0x670>
 8008c72:	e088      	b.n	8008d86 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c74:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a0b      	ldr	r2, [pc, #44]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c80:	f7fa fad6 	bl	8003230 <HAL_GetTick>
 8008c84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c86:	e008      	b.n	8008c9a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c88:	f7fa fad2 	bl	8003230 <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d901      	bls.n	8008c9a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e076      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c9a:	4b03      	ldr	r3, [pc, #12]	; (8008ca8 <HAL_RCC_OscConfig+0x6c4>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1f0      	bne.n	8008c88 <HAL_RCC_OscConfig+0x6a4>
 8008ca6:	e06e      	b.n	8008d86 <HAL_RCC_OscConfig+0x7a2>
 8008ca8:	58024400 	.word	0x58024400
 8008cac:	fffffc0c 	.word	0xfffffc0c
 8008cb0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008cb4:	4b36      	ldr	r3, [pc, #216]	; (8008d90 <HAL_RCC_OscConfig+0x7ac>)
 8008cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008cba:	4b35      	ldr	r3, [pc, #212]	; (8008d90 <HAL_RCC_OscConfig+0x7ac>)
 8008cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d031      	beq.n	8008d2c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	f003 0203 	and.w	r2, r3, #3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d12a      	bne.n	8008d2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	091b      	lsrs	r3, r3, #4
 8008cda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d122      	bne.n	8008d2c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d11a      	bne.n	8008d2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	0a5b      	lsrs	r3, r3, #9
 8008cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d111      	bne.n	8008d2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	0c1b      	lsrs	r3, r3, #16
 8008d0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d108      	bne.n	8008d2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	0e1b      	lsrs	r3, r3, #24
 8008d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d001      	beq.n	8008d30 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e02b      	b.n	8008d88 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008d30:	4b17      	ldr	r3, [pc, #92]	; (8008d90 <HAL_RCC_OscConfig+0x7ac>)
 8008d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d34:	08db      	lsrs	r3, r3, #3
 8008d36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d01f      	beq.n	8008d86 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008d46:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <HAL_RCC_OscConfig+0x7ac>)
 8008d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4a:	4a11      	ldr	r2, [pc, #68]	; (8008d90 <HAL_RCC_OscConfig+0x7ac>)
 8008d4c:	f023 0301 	bic.w	r3, r3, #1
 8008d50:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008d52:	f7fa fa6d 	bl	8003230 <HAL_GetTick>
 8008d56:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008d58:	bf00      	nop
 8008d5a:	f7fa fa69 	bl	8003230 <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d0f9      	beq.n	8008d5a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d66:	4b0a      	ldr	r3, [pc, #40]	; (8008d90 <HAL_RCC_OscConfig+0x7ac>)
 8008d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d6a:	4b0a      	ldr	r3, [pc, #40]	; (8008d94 <HAL_RCC_OscConfig+0x7b0>)
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d72:	00d2      	lsls	r2, r2, #3
 8008d74:	4906      	ldr	r1, [pc, #24]	; (8008d90 <HAL_RCC_OscConfig+0x7ac>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008d7a:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <HAL_RCC_OscConfig+0x7ac>)
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	4a04      	ldr	r2, [pc, #16]	; (8008d90 <HAL_RCC_OscConfig+0x7ac>)
 8008d80:	f043 0301 	orr.w	r3, r3, #1
 8008d84:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3730      	adds	r7, #48	; 0x30
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	58024400 	.word	0x58024400
 8008d94:	ffff0007 	.word	0xffff0007

08008d98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e19c      	b.n	80090e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008dac:	4b8a      	ldr	r3, [pc, #552]	; (8008fd8 <HAL_RCC_ClockConfig+0x240>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d910      	bls.n	8008ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dba:	4b87      	ldr	r3, [pc, #540]	; (8008fd8 <HAL_RCC_ClockConfig+0x240>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f023 020f 	bic.w	r2, r3, #15
 8008dc2:	4985      	ldr	r1, [pc, #532]	; (8008fd8 <HAL_RCC_ClockConfig+0x240>)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dca:	4b83      	ldr	r3, [pc, #524]	; (8008fd8 <HAL_RCC_ClockConfig+0x240>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 030f 	and.w	r3, r3, #15
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d001      	beq.n	8008ddc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e184      	b.n	80090e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d010      	beq.n	8008e0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	691a      	ldr	r2, [r3, #16]
 8008dec:	4b7b      	ldr	r3, [pc, #492]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d908      	bls.n	8008e0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008df8:	4b78      	ldr	r3, [pc, #480]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	4975      	ldr	r1, [pc, #468]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0308 	and.w	r3, r3, #8
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d010      	beq.n	8008e38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	695a      	ldr	r2, [r3, #20]
 8008e1a:	4b70      	ldr	r3, [pc, #448]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d908      	bls.n	8008e38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e26:	4b6d      	ldr	r3, [pc, #436]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	496a      	ldr	r1, [pc, #424]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0310 	and.w	r3, r3, #16
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d010      	beq.n	8008e66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	699a      	ldr	r2, [r3, #24]
 8008e48:	4b64      	ldr	r3, [pc, #400]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008e4a:	69db      	ldr	r3, [r3, #28]
 8008e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d908      	bls.n	8008e66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e54:	4b61      	ldr	r3, [pc, #388]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	495e      	ldr	r1, [pc, #376]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0320 	and.w	r3, r3, #32
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d010      	beq.n	8008e94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	69da      	ldr	r2, [r3, #28]
 8008e76:	4b59      	ldr	r3, [pc, #356]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d908      	bls.n	8008e94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008e82:	4b56      	ldr	r3, [pc, #344]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	4953      	ldr	r1, [pc, #332]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0302 	and.w	r3, r3, #2
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d010      	beq.n	8008ec2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	4b4d      	ldr	r3, [pc, #308]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	f003 030f 	and.w	r3, r3, #15
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d908      	bls.n	8008ec2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008eb0:	4b4a      	ldr	r3, [pc, #296]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	f023 020f 	bic.w	r2, r3, #15
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	4947      	ldr	r1, [pc, #284]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d055      	beq.n	8008f7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008ece:	4b43      	ldr	r3, [pc, #268]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	4940      	ldr	r1, [pc, #256]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d107      	bne.n	8008ef8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ee8:	4b3c      	ldr	r3, [pc, #240]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d121      	bne.n	8008f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e0f6      	b.n	80090e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d107      	bne.n	8008f10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f00:	4b36      	ldr	r3, [pc, #216]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d115      	bne.n	8008f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e0ea      	b.n	80090e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d107      	bne.n	8008f28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f18:	4b30      	ldr	r3, [pc, #192]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d109      	bne.n	8008f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0de      	b.n	80090e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f28:	4b2c      	ldr	r3, [pc, #176]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0304 	and.w	r3, r3, #4
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e0d6      	b.n	80090e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f38:	4b28      	ldr	r3, [pc, #160]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	f023 0207 	bic.w	r2, r3, #7
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	4925      	ldr	r1, [pc, #148]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f4a:	f7fa f971 	bl	8003230 <HAL_GetTick>
 8008f4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f50:	e00a      	b.n	8008f68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f52:	f7fa f96d 	bl	8003230 <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d901      	bls.n	8008f68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e0be      	b.n	80090e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f68:	4b1c      	ldr	r3, [pc, #112]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	00db      	lsls	r3, r3, #3
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d1eb      	bne.n	8008f52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d010      	beq.n	8008fa8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68da      	ldr	r2, [r3, #12]
 8008f8a:	4b14      	ldr	r3, [pc, #80]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	f003 030f 	and.w	r3, r3, #15
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d208      	bcs.n	8008fa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f96:	4b11      	ldr	r3, [pc, #68]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	f023 020f 	bic.w	r2, r3, #15
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	490e      	ldr	r1, [pc, #56]	; (8008fdc <HAL_RCC_ClockConfig+0x244>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008fa8:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <HAL_RCC_ClockConfig+0x240>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d214      	bcs.n	8008fe0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fb6:	4b08      	ldr	r3, [pc, #32]	; (8008fd8 <HAL_RCC_ClockConfig+0x240>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f023 020f 	bic.w	r2, r3, #15
 8008fbe:	4906      	ldr	r1, [pc, #24]	; (8008fd8 <HAL_RCC_ClockConfig+0x240>)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fc6:	4b04      	ldr	r3, [pc, #16]	; (8008fd8 <HAL_RCC_ClockConfig+0x240>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 030f 	and.w	r3, r3, #15
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d005      	beq.n	8008fe0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e086      	b.n	80090e6 <HAL_RCC_ClockConfig+0x34e>
 8008fd8:	52002000 	.word	0x52002000
 8008fdc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d010      	beq.n	800900e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691a      	ldr	r2, [r3, #16]
 8008ff0:	4b3f      	ldr	r3, [pc, #252]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d208      	bcs.n	800900e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ffc:	4b3c      	ldr	r3, [pc, #240]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	4939      	ldr	r1, [pc, #228]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 800900a:	4313      	orrs	r3, r2
 800900c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0308 	and.w	r3, r3, #8
 8009016:	2b00      	cmp	r3, #0
 8009018:	d010      	beq.n	800903c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	695a      	ldr	r2, [r3, #20]
 800901e:	4b34      	ldr	r3, [pc, #208]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009026:	429a      	cmp	r2, r3
 8009028:	d208      	bcs.n	800903c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800902a:	4b31      	ldr	r3, [pc, #196]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	492e      	ldr	r1, [pc, #184]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 8009038:	4313      	orrs	r3, r2
 800903a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0310 	and.w	r3, r3, #16
 8009044:	2b00      	cmp	r3, #0
 8009046:	d010      	beq.n	800906a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	699a      	ldr	r2, [r3, #24]
 800904c:	4b28      	ldr	r3, [pc, #160]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009054:	429a      	cmp	r2, r3
 8009056:	d208      	bcs.n	800906a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009058:	4b25      	ldr	r3, [pc, #148]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 800905a:	69db      	ldr	r3, [r3, #28]
 800905c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	4922      	ldr	r1, [pc, #136]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 8009066:	4313      	orrs	r3, r2
 8009068:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0320 	and.w	r3, r3, #32
 8009072:	2b00      	cmp	r3, #0
 8009074:	d010      	beq.n	8009098 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	69da      	ldr	r2, [r3, #28]
 800907a:	4b1d      	ldr	r3, [pc, #116]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009082:	429a      	cmp	r2, r3
 8009084:	d208      	bcs.n	8009098 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009086:	4b1a      	ldr	r3, [pc, #104]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	4917      	ldr	r1, [pc, #92]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 8009094:	4313      	orrs	r3, r2
 8009096:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009098:	f000 f834 	bl	8009104 <HAL_RCC_GetSysClockFreq>
 800909c:	4602      	mov	r2, r0
 800909e:	4b14      	ldr	r3, [pc, #80]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	0a1b      	lsrs	r3, r3, #8
 80090a4:	f003 030f 	and.w	r3, r3, #15
 80090a8:	4912      	ldr	r1, [pc, #72]	; (80090f4 <HAL_RCC_ClockConfig+0x35c>)
 80090aa:	5ccb      	ldrb	r3, [r1, r3]
 80090ac:	f003 031f 	and.w	r3, r3, #31
 80090b0:	fa22 f303 	lsr.w	r3, r2, r3
 80090b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80090b6:	4b0e      	ldr	r3, [pc, #56]	; (80090f0 <HAL_RCC_ClockConfig+0x358>)
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	4a0d      	ldr	r2, [pc, #52]	; (80090f4 <HAL_RCC_ClockConfig+0x35c>)
 80090c0:	5cd3      	ldrb	r3, [r2, r3]
 80090c2:	f003 031f 	and.w	r3, r3, #31
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	fa22 f303 	lsr.w	r3, r2, r3
 80090cc:	4a0a      	ldr	r2, [pc, #40]	; (80090f8 <HAL_RCC_ClockConfig+0x360>)
 80090ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090d0:	4a0a      	ldr	r2, [pc, #40]	; (80090fc <HAL_RCC_ClockConfig+0x364>)
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80090d6:	4b0a      	ldr	r3, [pc, #40]	; (8009100 <HAL_RCC_ClockConfig+0x368>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fa f85e 	bl	800319c <HAL_InitTick>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	58024400 	.word	0x58024400
 80090f4:	08011500 	.word	0x08011500
 80090f8:	24000110 	.word	0x24000110
 80090fc:	2400010c 	.word	0x2400010c
 8009100:	24000114 	.word	0x24000114

08009104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009104:	b480      	push	{r7}
 8009106:	b089      	sub	sp, #36	; 0x24
 8009108:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800910a:	4bb3      	ldr	r3, [pc, #716]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009112:	2b18      	cmp	r3, #24
 8009114:	f200 8155 	bhi.w	80093c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009118:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <HAL_RCC_GetSysClockFreq+0x1c>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	08009185 	.word	0x08009185
 8009124:	080093c3 	.word	0x080093c3
 8009128:	080093c3 	.word	0x080093c3
 800912c:	080093c3 	.word	0x080093c3
 8009130:	080093c3 	.word	0x080093c3
 8009134:	080093c3 	.word	0x080093c3
 8009138:	080093c3 	.word	0x080093c3
 800913c:	080093c3 	.word	0x080093c3
 8009140:	080091ab 	.word	0x080091ab
 8009144:	080093c3 	.word	0x080093c3
 8009148:	080093c3 	.word	0x080093c3
 800914c:	080093c3 	.word	0x080093c3
 8009150:	080093c3 	.word	0x080093c3
 8009154:	080093c3 	.word	0x080093c3
 8009158:	080093c3 	.word	0x080093c3
 800915c:	080093c3 	.word	0x080093c3
 8009160:	080091b1 	.word	0x080091b1
 8009164:	080093c3 	.word	0x080093c3
 8009168:	080093c3 	.word	0x080093c3
 800916c:	080093c3 	.word	0x080093c3
 8009170:	080093c3 	.word	0x080093c3
 8009174:	080093c3 	.word	0x080093c3
 8009178:	080093c3 	.word	0x080093c3
 800917c:	080093c3 	.word	0x080093c3
 8009180:	080091b7 	.word	0x080091b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009184:	4b94      	ldr	r3, [pc, #592]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 0320 	and.w	r3, r3, #32
 800918c:	2b00      	cmp	r3, #0
 800918e:	d009      	beq.n	80091a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009190:	4b91      	ldr	r3, [pc, #580]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	08db      	lsrs	r3, r3, #3
 8009196:	f003 0303 	and.w	r3, r3, #3
 800919a:	4a90      	ldr	r2, [pc, #576]	; (80093dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800919c:	fa22 f303 	lsr.w	r3, r2, r3
 80091a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80091a2:	e111      	b.n	80093c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80091a4:	4b8d      	ldr	r3, [pc, #564]	; (80093dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80091a6:	61bb      	str	r3, [r7, #24]
      break;
 80091a8:	e10e      	b.n	80093c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80091aa:	4b8d      	ldr	r3, [pc, #564]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091ac:	61bb      	str	r3, [r7, #24]
      break;
 80091ae:	e10b      	b.n	80093c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80091b0:	4b8c      	ldr	r3, [pc, #560]	; (80093e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80091b2:	61bb      	str	r3, [r7, #24]
      break;
 80091b4:	e108      	b.n	80093c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091b6:	4b88      	ldr	r3, [pc, #544]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80091c0:	4b85      	ldr	r3, [pc, #532]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c4:	091b      	lsrs	r3, r3, #4
 80091c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80091cc:	4b82      	ldr	r3, [pc, #520]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80091d6:	4b80      	ldr	r3, [pc, #512]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091da:	08db      	lsrs	r3, r3, #3
 80091dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	fb02 f303 	mul.w	r3, r2, r3
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 80e1 	beq.w	80093bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	f000 8083 	beq.w	8009308 <HAL_RCC_GetSysClockFreq+0x204>
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b02      	cmp	r3, #2
 8009206:	f200 80a1 	bhi.w	800934c <HAL_RCC_GetSysClockFreq+0x248>
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <HAL_RCC_GetSysClockFreq+0x114>
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d056      	beq.n	80092c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009216:	e099      	b.n	800934c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009218:	4b6f      	ldr	r3, [pc, #444]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 0320 	and.w	r3, r3, #32
 8009220:	2b00      	cmp	r3, #0
 8009222:	d02d      	beq.n	8009280 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009224:	4b6c      	ldr	r3, [pc, #432]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	08db      	lsrs	r3, r3, #3
 800922a:	f003 0303 	and.w	r3, r3, #3
 800922e:	4a6b      	ldr	r2, [pc, #428]	; (80093dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009230:	fa22 f303 	lsr.w	r3, r2, r3
 8009234:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	ee07 3a90 	vmov	s15, r3
 800923c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	ee07 3a90 	vmov	s15, r3
 8009246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800924a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924e:	4b62      	ldr	r3, [pc, #392]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009262:	eddf 5a61 	vldr	s11, [pc, #388]	; 80093e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800926a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800926e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800927a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800927e:	e087      	b.n	8009390 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80093ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800928e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009292:	4b51      	ldr	r3, [pc, #324]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80092a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80093e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092c2:	e065      	b.n	8009390 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	ee07 3a90 	vmov	s15, r3
 80092ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80093f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80092d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d6:	4b40      	ldr	r3, [pc, #256]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80092ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80093e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009306:	e043      	b.n	8009390 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009312:	eddf 6a38 	vldr	s13, [pc, #224]	; 80093f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800931a:	4b2f      	ldr	r3, [pc, #188]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800931c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009322:	ee07 3a90 	vmov	s15, r3
 8009326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800932a:	ed97 6a02 	vldr	s12, [r7, #8]
 800932e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80093e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800933a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800933e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800934a:	e021      	b.n	8009390 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	ee07 3a90 	vmov	s15, r3
 8009352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009356:	eddf 6a26 	vldr	s13, [pc, #152]	; 80093f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800935a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800935e:	4b1e      	ldr	r3, [pc, #120]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009366:	ee07 3a90 	vmov	s15, r3
 800936a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800936e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009372:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80093e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800937a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800937e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800938a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800938e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009390:	4b11      	ldr	r3, [pc, #68]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009394:	0a5b      	lsrs	r3, r3, #9
 8009396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800939a:	3301      	adds	r3, #1
 800939c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80093a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80093ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093b4:	ee17 3a90 	vmov	r3, s15
 80093b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80093ba:	e005      	b.n	80093c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	61bb      	str	r3, [r7, #24]
      break;
 80093c0:	e002      	b.n	80093c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80093c2:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093c4:	61bb      	str	r3, [r7, #24]
      break;
 80093c6:	bf00      	nop
  }

  return sysclockfreq;
 80093c8:	69bb      	ldr	r3, [r7, #24]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3724      	adds	r7, #36	; 0x24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	58024400 	.word	0x58024400
 80093dc:	03d09000 	.word	0x03d09000
 80093e0:	003d0900 	.word	0x003d0900
 80093e4:	02faf080 	.word	0x02faf080
 80093e8:	46000000 	.word	0x46000000
 80093ec:	4c742400 	.word	0x4c742400
 80093f0:	4a742400 	.word	0x4a742400
 80093f4:	4c3ebc20 	.word	0x4c3ebc20

080093f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80093fe:	f7ff fe81 	bl	8009104 <HAL_RCC_GetSysClockFreq>
 8009402:	4602      	mov	r2, r0
 8009404:	4b10      	ldr	r3, [pc, #64]	; (8009448 <HAL_RCC_GetHCLKFreq+0x50>)
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	0a1b      	lsrs	r3, r3, #8
 800940a:	f003 030f 	and.w	r3, r3, #15
 800940e:	490f      	ldr	r1, [pc, #60]	; (800944c <HAL_RCC_GetHCLKFreq+0x54>)
 8009410:	5ccb      	ldrb	r3, [r1, r3]
 8009412:	f003 031f 	and.w	r3, r3, #31
 8009416:	fa22 f303 	lsr.w	r3, r2, r3
 800941a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800941c:	4b0a      	ldr	r3, [pc, #40]	; (8009448 <HAL_RCC_GetHCLKFreq+0x50>)
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	f003 030f 	and.w	r3, r3, #15
 8009424:	4a09      	ldr	r2, [pc, #36]	; (800944c <HAL_RCC_GetHCLKFreq+0x54>)
 8009426:	5cd3      	ldrb	r3, [r2, r3]
 8009428:	f003 031f 	and.w	r3, r3, #31
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	fa22 f303 	lsr.w	r3, r2, r3
 8009432:	4a07      	ldr	r2, [pc, #28]	; (8009450 <HAL_RCC_GetHCLKFreq+0x58>)
 8009434:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009436:	4a07      	ldr	r2, [pc, #28]	; (8009454 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800943c:	4b04      	ldr	r3, [pc, #16]	; (8009450 <HAL_RCC_GetHCLKFreq+0x58>)
 800943e:	681b      	ldr	r3, [r3, #0]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	58024400 	.word	0x58024400
 800944c:	08011500 	.word	0x08011500
 8009450:	24000110 	.word	0x24000110
 8009454:	2400010c 	.word	0x2400010c

08009458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800945c:	f7ff ffcc 	bl	80093f8 <HAL_RCC_GetHCLKFreq>
 8009460:	4602      	mov	r2, r0
 8009462:	4b06      	ldr	r3, [pc, #24]	; (800947c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	091b      	lsrs	r3, r3, #4
 8009468:	f003 0307 	and.w	r3, r3, #7
 800946c:	4904      	ldr	r1, [pc, #16]	; (8009480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800946e:	5ccb      	ldrb	r3, [r1, r3]
 8009470:	f003 031f 	and.w	r3, r3, #31
 8009474:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009478:	4618      	mov	r0, r3
 800947a:	bd80      	pop	{r7, pc}
 800947c:	58024400 	.word	0x58024400
 8009480:	08011500 	.word	0x08011500

08009484 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009488:	b0c6      	sub	sp, #280	; 0x118
 800948a:	af00      	add	r7, sp, #0
 800948c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009490:	2300      	movs	r3, #0
 8009492:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009496:	2300      	movs	r3, #0
 8009498:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800949c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80094a8:	2500      	movs	r5, #0
 80094aa:	ea54 0305 	orrs.w	r3, r4, r5
 80094ae:	d049      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80094b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094ba:	d02f      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80094bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094c0:	d828      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80094c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094c6:	d01a      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80094c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094cc:	d822      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d003      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80094d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094d6:	d007      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80094d8:	e01c      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094da:	4bab      	ldr	r3, [pc, #684]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094de:	4aaa      	ldr	r2, [pc, #680]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80094e6:	e01a      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ec:	3308      	adds	r3, #8
 80094ee:	2102      	movs	r1, #2
 80094f0:	4618      	mov	r0, r3
 80094f2:	f002 fa49 	bl	800b988 <RCCEx_PLL2_Config>
 80094f6:	4603      	mov	r3, r0
 80094f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80094fc:	e00f      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009502:	3328      	adds	r3, #40	; 0x28
 8009504:	2102      	movs	r1, #2
 8009506:	4618      	mov	r0, r3
 8009508:	f002 faf0 	bl	800baec <RCCEx_PLL3_Config>
 800950c:	4603      	mov	r3, r0
 800950e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009512:	e004      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800951a:	e000      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800951c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800951e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10a      	bne.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009526:	4b98      	ldr	r3, [pc, #608]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800952a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800952e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009534:	4a94      	ldr	r2, [pc, #592]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009536:	430b      	orrs	r3, r1
 8009538:	6513      	str	r3, [r2, #80]	; 0x50
 800953a:	e003      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800953c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009540:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009550:	f04f 0900 	mov.w	r9, #0
 8009554:	ea58 0309 	orrs.w	r3, r8, r9
 8009558:	d047      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800955a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800955e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009560:	2b04      	cmp	r3, #4
 8009562:	d82a      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009564:	a201      	add	r2, pc, #4	; (adr r2, 800956c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956a:	bf00      	nop
 800956c:	08009581 	.word	0x08009581
 8009570:	0800958f 	.word	0x0800958f
 8009574:	080095a5 	.word	0x080095a5
 8009578:	080095c3 	.word	0x080095c3
 800957c:	080095c3 	.word	0x080095c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009580:	4b81      	ldr	r3, [pc, #516]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	4a80      	ldr	r2, [pc, #512]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800958a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800958c:	e01a      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800958e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009592:	3308      	adds	r3, #8
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f002 f9f6 	bl	800b988 <RCCEx_PLL2_Config>
 800959c:	4603      	mov	r3, r0
 800959e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095a2:	e00f      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a8:	3328      	adds	r3, #40	; 0x28
 80095aa:	2100      	movs	r1, #0
 80095ac:	4618      	mov	r0, r3
 80095ae:	f002 fa9d 	bl	800baec <RCCEx_PLL3_Config>
 80095b2:	4603      	mov	r3, r0
 80095b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095b8:	e004      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80095c0:	e000      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80095c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10a      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80095cc:	4b6e      	ldr	r3, [pc, #440]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d0:	f023 0107 	bic.w	r1, r3, #7
 80095d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095da:	4a6b      	ldr	r2, [pc, #428]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095dc:	430b      	orrs	r3, r1
 80095de:	6513      	str	r3, [r2, #80]	; 0x50
 80095e0:	e003      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80095e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80095ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80095f6:	f04f 0b00 	mov.w	fp, #0
 80095fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80095fe:	d05b      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009604:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009608:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800960c:	d03b      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800960e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009612:	d834      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009614:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009618:	d037      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800961a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800961e:	d82e      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009620:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009624:	d033      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009626:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800962a:	d828      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800962c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009630:	d01a      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009636:	d822      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009638:	2b00      	cmp	r3, #0
 800963a:	d003      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800963c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009640:	d007      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009642:	e01c      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009644:	4b50      	ldr	r3, [pc, #320]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009648:	4a4f      	ldr	r2, [pc, #316]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800964a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800964e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009650:	e01e      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009656:	3308      	adds	r3, #8
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f002 f994 	bl	800b988 <RCCEx_PLL2_Config>
 8009660:	4603      	mov	r3, r0
 8009662:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009666:	e013      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800966c:	3328      	adds	r3, #40	; 0x28
 800966e:	2100      	movs	r1, #0
 8009670:	4618      	mov	r0, r3
 8009672:	f002 fa3b 	bl	800baec <RCCEx_PLL3_Config>
 8009676:	4603      	mov	r3, r0
 8009678:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800967c:	e008      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009684:	e004      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009686:	bf00      	nop
 8009688:	e002      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800968a:	bf00      	nop
 800968c:	e000      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800968e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009690:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10b      	bne.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009698:	4b3b      	ldr	r3, [pc, #236]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800969a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800969c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80096a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80096a8:	4a37      	ldr	r2, [pc, #220]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096aa:	430b      	orrs	r3, r1
 80096ac:	6593      	str	r3, [r2, #88]	; 0x58
 80096ae:	e003      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80096b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80096c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80096c8:	2300      	movs	r3, #0
 80096ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80096d2:	460b      	mov	r3, r1
 80096d4:	4313      	orrs	r3, r2
 80096d6:	d05d      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80096d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80096e0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80096e4:	d03b      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80096e6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80096ea:	d834      	bhi.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80096ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096f0:	d037      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80096f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096f6:	d82e      	bhi.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80096f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80096fc:	d033      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80096fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009702:	d828      	bhi.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009704:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009708:	d01a      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800970a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800970e:	d822      	bhi.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009710:	2b00      	cmp	r3, #0
 8009712:	d003      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009718:	d007      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800971a:	e01c      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800971c:	4b1a      	ldr	r3, [pc, #104]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800971e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009720:	4a19      	ldr	r2, [pc, #100]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009728:	e01e      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800972a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800972e:	3308      	adds	r3, #8
 8009730:	2100      	movs	r1, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f002 f928 	bl	800b988 <RCCEx_PLL2_Config>
 8009738:	4603      	mov	r3, r0
 800973a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800973e:	e013      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009744:	3328      	adds	r3, #40	; 0x28
 8009746:	2100      	movs	r1, #0
 8009748:	4618      	mov	r0, r3
 800974a:	f002 f9cf 	bl	800baec <RCCEx_PLL3_Config>
 800974e:	4603      	mov	r3, r0
 8009750:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009754:	e008      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800975c:	e004      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800975e:	bf00      	nop
 8009760:	e002      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009762:	bf00      	nop
 8009764:	e000      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009768:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10d      	bne.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009770:	4b05      	ldr	r3, [pc, #20]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009774:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800977c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009780:	4a01      	ldr	r2, [pc, #4]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009782:	430b      	orrs	r3, r1
 8009784:	6593      	str	r3, [r2, #88]	; 0x58
 8009786:	e005      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800978c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009790:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80097a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80097a4:	2300      	movs	r3, #0
 80097a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80097aa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4313      	orrs	r3, r2
 80097b2:	d03a      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80097b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ba:	2b30      	cmp	r3, #48	; 0x30
 80097bc:	d01f      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80097be:	2b30      	cmp	r3, #48	; 0x30
 80097c0:	d819      	bhi.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80097c2:	2b20      	cmp	r3, #32
 80097c4:	d00c      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80097c6:	2b20      	cmp	r3, #32
 80097c8:	d815      	bhi.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d019      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80097ce:	2b10      	cmp	r3, #16
 80097d0:	d111      	bne.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097d2:	4baa      	ldr	r3, [pc, #680]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d6:	4aa9      	ldr	r2, [pc, #676]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80097de:	e011      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097e4:	3308      	adds	r3, #8
 80097e6:	2102      	movs	r1, #2
 80097e8:	4618      	mov	r0, r3
 80097ea:	f002 f8cd 	bl	800b988 <RCCEx_PLL2_Config>
 80097ee:	4603      	mov	r3, r0
 80097f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80097f4:	e006      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80097fc:	e002      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80097fe:	bf00      	nop
 8009800:	e000      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009804:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10a      	bne.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800980c:	4b9b      	ldr	r3, [pc, #620]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800980e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009810:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800981a:	4a98      	ldr	r2, [pc, #608]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800981c:	430b      	orrs	r3, r1
 800981e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009820:	e003      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009822:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009826:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800982a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800982e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009832:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800983a:	2300      	movs	r3, #0
 800983c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009840:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009844:	460b      	mov	r3, r1
 8009846:	4313      	orrs	r3, r2
 8009848:	d051      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800984a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800984e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009854:	d035      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009856:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800985a:	d82e      	bhi.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x436>
 800985c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009860:	d031      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009862:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009866:	d828      	bhi.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800986c:	d01a      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800986e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009872:	d822      	bhi.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800987c:	d007      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800987e:	e01c      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009880:	4b7e      	ldr	r3, [pc, #504]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009884:	4a7d      	ldr	r2, [pc, #500]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800988a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800988c:	e01c      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800988e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009892:	3308      	adds	r3, #8
 8009894:	2100      	movs	r1, #0
 8009896:	4618      	mov	r0, r3
 8009898:	f002 f876 	bl	800b988 <RCCEx_PLL2_Config>
 800989c:	4603      	mov	r3, r0
 800989e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80098a2:	e011      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a8:	3328      	adds	r3, #40	; 0x28
 80098aa:	2100      	movs	r1, #0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f002 f91d 	bl	800baec <RCCEx_PLL3_Config>
 80098b2:	4603      	mov	r3, r0
 80098b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80098b8:	e006      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80098c0:	e002      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80098c2:	bf00      	nop
 80098c4:	e000      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80098c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10a      	bne.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80098d0:	4b6a      	ldr	r3, [pc, #424]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80098d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098de:	4a67      	ldr	r2, [pc, #412]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098e0:	430b      	orrs	r3, r1
 80098e2:	6513      	str	r3, [r2, #80]	; 0x50
 80098e4:	e003      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80098ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80098ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80098fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098fe:	2300      	movs	r3, #0
 8009900:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009904:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009908:	460b      	mov	r3, r1
 800990a:	4313      	orrs	r3, r2
 800990c:	d053      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800990e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009918:	d033      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800991a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800991e:	d82c      	bhi.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009920:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009924:	d02f      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009926:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800992a:	d826      	bhi.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800992c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009930:	d02b      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009932:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009936:	d820      	bhi.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800993c:	d012      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800993e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009942:	d81a      	bhi.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009944:	2b00      	cmp	r3, #0
 8009946:	d022      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800994c:	d115      	bne.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800994e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009952:	3308      	adds	r3, #8
 8009954:	2101      	movs	r1, #1
 8009956:	4618      	mov	r0, r3
 8009958:	f002 f816 	bl	800b988 <RCCEx_PLL2_Config>
 800995c:	4603      	mov	r3, r0
 800995e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009962:	e015      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009968:	3328      	adds	r3, #40	; 0x28
 800996a:	2101      	movs	r1, #1
 800996c:	4618      	mov	r0, r3
 800996e:	f002 f8bd 	bl	800baec <RCCEx_PLL3_Config>
 8009972:	4603      	mov	r3, r0
 8009974:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009978:	e00a      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009980:	e006      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009982:	bf00      	nop
 8009984:	e004      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009986:	bf00      	nop
 8009988:	e002      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800998a:	bf00      	nop
 800998c:	e000      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800998e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009990:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10a      	bne.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009998:	4b38      	ldr	r3, [pc, #224]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800999a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800999c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80099a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099a6:	4a35      	ldr	r2, [pc, #212]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099a8:	430b      	orrs	r3, r1
 80099aa:	6513      	str	r3, [r2, #80]	; 0x50
 80099ac:	e003      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80099b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80099c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099c6:	2300      	movs	r3, #0
 80099c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80099cc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80099d0:	460b      	mov	r3, r1
 80099d2:	4313      	orrs	r3, r2
 80099d4:	d058      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80099d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099e2:	d033      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80099e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099e8:	d82c      	bhi.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80099ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ee:	d02f      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80099f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099f4:	d826      	bhi.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80099f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099fa:	d02b      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80099fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a00:	d820      	bhi.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a06:	d012      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a0c:	d81a      	bhi.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d022      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a16:	d115      	bne.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	2101      	movs	r1, #1
 8009a20:	4618      	mov	r0, r3
 8009a22:	f001 ffb1 	bl	800b988 <RCCEx_PLL2_Config>
 8009a26:	4603      	mov	r3, r0
 8009a28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009a2c:	e015      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a32:	3328      	adds	r3, #40	; 0x28
 8009a34:	2101      	movs	r1, #1
 8009a36:	4618      	mov	r0, r3
 8009a38:	f002 f858 	bl	800baec <RCCEx_PLL3_Config>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009a42:	e00a      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009a4a:	e006      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a4c:	bf00      	nop
 8009a4e:	e004      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a50:	bf00      	nop
 8009a52:	e002      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a54:	bf00      	nop
 8009a56:	e000      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10e      	bne.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009a62:	4b06      	ldr	r3, [pc, #24]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a66:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a72:	4a02      	ldr	r2, [pc, #8]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a74:	430b      	orrs	r3, r1
 8009a76:	6593      	str	r3, [r2, #88]	; 0x58
 8009a78:	e006      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009a7a:	bf00      	nop
 8009a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009a9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	d037      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ab2:	d00e      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ab8:	d816      	bhi.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d018      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ac2:	d111      	bne.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ac4:	4bc4      	ldr	r3, [pc, #784]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	4ac3      	ldr	r2, [pc, #780]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009ad0:	e00f      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad6:	3308      	adds	r3, #8
 8009ad8:	2101      	movs	r1, #1
 8009ada:	4618      	mov	r0, r3
 8009adc:	f001 ff54 	bl	800b988 <RCCEx_PLL2_Config>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009ae6:	e004      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009aee:	e000      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009af2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10a      	bne.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009afa:	4bb7      	ldr	r3, [pc, #732]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009afe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b08:	4ab3      	ldr	r2, [pc, #716]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b0a:	430b      	orrs	r3, r1
 8009b0c:	6513      	str	r3, [r2, #80]	; 0x50
 8009b0e:	e003      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009b24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009b2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009b32:	460b      	mov	r3, r1
 8009b34:	4313      	orrs	r3, r2
 8009b36:	d039      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b3e:	2b03      	cmp	r3, #3
 8009b40:	d81c      	bhi.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009b42:	a201      	add	r2, pc, #4	; (adr r2, 8009b48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b48:	08009b85 	.word	0x08009b85
 8009b4c:	08009b59 	.word	0x08009b59
 8009b50:	08009b67 	.word	0x08009b67
 8009b54:	08009b85 	.word	0x08009b85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b58:	4b9f      	ldr	r3, [pc, #636]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5c:	4a9e      	ldr	r2, [pc, #632]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009b64:	e00f      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b6a:	3308      	adds	r3, #8
 8009b6c:	2102      	movs	r1, #2
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f001 ff0a 	bl	800b988 <RCCEx_PLL2_Config>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009b7a:	e004      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009b82:	e000      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10a      	bne.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009b8e:	4b92      	ldr	r3, [pc, #584]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b92:	f023 0103 	bic.w	r1, r3, #3
 8009b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b9c:	4a8e      	ldr	r2, [pc, #568]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b9e:	430b      	orrs	r3, r1
 8009ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ba2:	e003      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ba8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009bc2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	f000 8099 	beq.w	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bce:	4b83      	ldr	r3, [pc, #524]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a82      	ldr	r2, [pc, #520]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bda:	f7f9 fb29 	bl	8003230 <HAL_GetTick>
 8009bde:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009be2:	e00b      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009be4:	f7f9 fb24 	bl	8003230 <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	2b64      	cmp	r3, #100	; 0x64
 8009bf2:	d903      	bls.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009bfa:	e005      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bfc:	4b77      	ldr	r3, [pc, #476]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d0ed      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009c08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d173      	bne.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009c10:	4b71      	ldr	r3, [pc, #452]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c1c:	4053      	eors	r3, r2
 8009c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d015      	beq.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c26:	4b6c      	ldr	r3, [pc, #432]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c32:	4b69      	ldr	r3, [pc, #420]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c36:	4a68      	ldr	r2, [pc, #416]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c3c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c3e:	4b66      	ldr	r3, [pc, #408]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c42:	4a65      	ldr	r2, [pc, #404]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c48:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009c4a:	4a63      	ldr	r2, [pc, #396]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c5e:	d118      	bne.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c60:	f7f9 fae6 	bl	8003230 <HAL_GetTick>
 8009c64:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c68:	e00d      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c6a:	f7f9 fae1 	bl	8003230 <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009c74:	1ad2      	subs	r2, r2, r3
 8009c76:	f241 3388 	movw	r3, #5000	; 0x1388
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d903      	bls.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8009c84:	e005      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c86:	4b54      	ldr	r3, [pc, #336]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c8a:	f003 0302 	and.w	r3, r3, #2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0eb      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009c92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d129      	bne.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009caa:	d10e      	bne.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009cac:	4b4a      	ldr	r3, [pc, #296]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cbc:	091a      	lsrs	r2, r3, #4
 8009cbe:	4b48      	ldr	r3, [pc, #288]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	4a45      	ldr	r2, [pc, #276]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	6113      	str	r3, [r2, #16]
 8009cc8:	e005      	b.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009cca:	4b43      	ldr	r3, [pc, #268]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	4a42      	ldr	r2, [pc, #264]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009cd4:	6113      	str	r3, [r2, #16]
 8009cd6:	4b40      	ldr	r3, [pc, #256]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cd8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ce6:	4a3c      	ldr	r2, [pc, #240]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ce8:	430b      	orrs	r3, r1
 8009cea:	6713      	str	r3, [r2, #112]	; 0x70
 8009cec:	e008      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009cee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009cf2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8009cf6:	e003      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009cfc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	f002 0301 	and.w	r3, r2, #1
 8009d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d10:	2300      	movs	r3, #0
 8009d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d16:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	f000 808f 	beq.w	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d28:	2b28      	cmp	r3, #40	; 0x28
 8009d2a:	d871      	bhi.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009d2c:	a201      	add	r2, pc, #4	; (adr r2, 8009d34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d32:	bf00      	nop
 8009d34:	08009e19 	.word	0x08009e19
 8009d38:	08009e11 	.word	0x08009e11
 8009d3c:	08009e11 	.word	0x08009e11
 8009d40:	08009e11 	.word	0x08009e11
 8009d44:	08009e11 	.word	0x08009e11
 8009d48:	08009e11 	.word	0x08009e11
 8009d4c:	08009e11 	.word	0x08009e11
 8009d50:	08009e11 	.word	0x08009e11
 8009d54:	08009de5 	.word	0x08009de5
 8009d58:	08009e11 	.word	0x08009e11
 8009d5c:	08009e11 	.word	0x08009e11
 8009d60:	08009e11 	.word	0x08009e11
 8009d64:	08009e11 	.word	0x08009e11
 8009d68:	08009e11 	.word	0x08009e11
 8009d6c:	08009e11 	.word	0x08009e11
 8009d70:	08009e11 	.word	0x08009e11
 8009d74:	08009dfb 	.word	0x08009dfb
 8009d78:	08009e11 	.word	0x08009e11
 8009d7c:	08009e11 	.word	0x08009e11
 8009d80:	08009e11 	.word	0x08009e11
 8009d84:	08009e11 	.word	0x08009e11
 8009d88:	08009e11 	.word	0x08009e11
 8009d8c:	08009e11 	.word	0x08009e11
 8009d90:	08009e11 	.word	0x08009e11
 8009d94:	08009e19 	.word	0x08009e19
 8009d98:	08009e11 	.word	0x08009e11
 8009d9c:	08009e11 	.word	0x08009e11
 8009da0:	08009e11 	.word	0x08009e11
 8009da4:	08009e11 	.word	0x08009e11
 8009da8:	08009e11 	.word	0x08009e11
 8009dac:	08009e11 	.word	0x08009e11
 8009db0:	08009e11 	.word	0x08009e11
 8009db4:	08009e19 	.word	0x08009e19
 8009db8:	08009e11 	.word	0x08009e11
 8009dbc:	08009e11 	.word	0x08009e11
 8009dc0:	08009e11 	.word	0x08009e11
 8009dc4:	08009e11 	.word	0x08009e11
 8009dc8:	08009e11 	.word	0x08009e11
 8009dcc:	08009e11 	.word	0x08009e11
 8009dd0:	08009e11 	.word	0x08009e11
 8009dd4:	08009e19 	.word	0x08009e19
 8009dd8:	58024400 	.word	0x58024400
 8009ddc:	58024800 	.word	0x58024800
 8009de0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de8:	3308      	adds	r3, #8
 8009dea:	2101      	movs	r1, #1
 8009dec:	4618      	mov	r0, r3
 8009dee:	f001 fdcb 	bl	800b988 <RCCEx_PLL2_Config>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009df8:	e00f      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dfe:	3328      	adds	r3, #40	; 0x28
 8009e00:	2101      	movs	r1, #1
 8009e02:	4618      	mov	r0, r3
 8009e04:	f001 fe72 	bl	800baec <RCCEx_PLL3_Config>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009e0e:	e004      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009e16:	e000      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10a      	bne.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e22:	4bbf      	ldr	r3, [pc, #764]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e26:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e30:	4abb      	ldr	r2, [pc, #748]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e32:	430b      	orrs	r3, r1
 8009e34:	6553      	str	r3, [r2, #84]	; 0x54
 8009e36:	e003      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	f002 0302 	and.w	r3, r2, #2
 8009e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e50:	2300      	movs	r3, #0
 8009e52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	d041      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	d824      	bhi.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009e6a:	a201      	add	r2, pc, #4	; (adr r2, 8009e70 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009ebd 	.word	0x08009ebd
 8009e74:	08009e89 	.word	0x08009e89
 8009e78:	08009e9f 	.word	0x08009e9f
 8009e7c:	08009ebd 	.word	0x08009ebd
 8009e80:	08009ebd 	.word	0x08009ebd
 8009e84:	08009ebd 	.word	0x08009ebd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e8c:	3308      	adds	r3, #8
 8009e8e:	2101      	movs	r1, #1
 8009e90:	4618      	mov	r0, r3
 8009e92:	f001 fd79 	bl	800b988 <RCCEx_PLL2_Config>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009e9c:	e00f      	b.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ea2:	3328      	adds	r3, #40	; 0x28
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f001 fe20 	bl	800baec <RCCEx_PLL3_Config>
 8009eac:	4603      	mov	r3, r0
 8009eae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009eb2:	e004      	b.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009eba:	e000      	b.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ebe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10a      	bne.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009ec6:	4b96      	ldr	r3, [pc, #600]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eca:	f023 0107 	bic.w	r1, r3, #7
 8009ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ed4:	4a92      	ldr	r2, [pc, #584]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009ed6:	430b      	orrs	r3, r1
 8009ed8:	6553      	str	r3, [r2, #84]	; 0x54
 8009eda:	e003      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009edc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ee0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	f002 0304 	and.w	r3, r2, #4
 8009ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009efa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009efe:	460b      	mov	r3, r1
 8009f00:	4313      	orrs	r3, r2
 8009f02:	d044      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f0c:	2b05      	cmp	r3, #5
 8009f0e:	d825      	bhi.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009f10:	a201      	add	r2, pc, #4	; (adr r2, 8009f18 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f16:	bf00      	nop
 8009f18:	08009f65 	.word	0x08009f65
 8009f1c:	08009f31 	.word	0x08009f31
 8009f20:	08009f47 	.word	0x08009f47
 8009f24:	08009f65 	.word	0x08009f65
 8009f28:	08009f65 	.word	0x08009f65
 8009f2c:	08009f65 	.word	0x08009f65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f34:	3308      	adds	r3, #8
 8009f36:	2101      	movs	r1, #1
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f001 fd25 	bl	800b988 <RCCEx_PLL2_Config>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009f44:	e00f      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f4a:	3328      	adds	r3, #40	; 0x28
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f001 fdcc 	bl	800baec <RCCEx_PLL3_Config>
 8009f54:	4603      	mov	r3, r0
 8009f56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009f5a:	e004      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009f62:	e000      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10b      	bne.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f6e:	4b6c      	ldr	r3, [pc, #432]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f72:	f023 0107 	bic.w	r1, r3, #7
 8009f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f7e:	4a68      	ldr	r2, [pc, #416]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f80:	430b      	orrs	r3, r1
 8009f82:	6593      	str	r3, [r2, #88]	; 0x58
 8009f84:	e003      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f96:	f002 0320 	and.w	r3, r2, #32
 8009f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009fa4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4313      	orrs	r3, r2
 8009fac:	d055      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fba:	d033      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fc0:	d82c      	bhi.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc6:	d02f      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fcc:	d826      	bhi.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009fce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fd2:	d02b      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009fd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fd8:	d820      	bhi.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fde:	d012      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fe4:	d81a      	bhi.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d022      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fee:	d115      	bne.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f001 fcc5 	bl	800b988 <RCCEx_PLL2_Config>
 8009ffe:	4603      	mov	r3, r0
 800a000:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a004:	e015      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a00a:	3328      	adds	r3, #40	; 0x28
 800a00c:	2102      	movs	r1, #2
 800a00e:	4618      	mov	r0, r3
 800a010:	f001 fd6c 	bl	800baec <RCCEx_PLL3_Config>
 800a014:	4603      	mov	r3, r0
 800a016:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a01a:	e00a      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a022:	e006      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a024:	bf00      	nop
 800a026:	e004      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a028:	bf00      	nop
 800a02a:	e002      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a02c:	bf00      	nop
 800a02e:	e000      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a030:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a032:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10b      	bne.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a03a:	4b39      	ldr	r3, [pc, #228]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a03e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a04a:	4a35      	ldr	r2, [pc, #212]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a04c:	430b      	orrs	r3, r1
 800a04e:	6553      	str	r3, [r2, #84]	; 0x54
 800a050:	e003      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a052:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a056:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a05a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a066:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a06a:	2300      	movs	r3, #0
 800a06c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a070:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a074:	460b      	mov	r3, r1
 800a076:	4313      	orrs	r3, r2
 800a078:	d058      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a07e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a082:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a086:	d033      	beq.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a088:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a08c:	d82c      	bhi.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a08e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a092:	d02f      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a098:	d826      	bhi.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a09a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a09e:	d02b      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a0a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0a4:	d820      	bhi.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a0a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0aa:	d012      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a0ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0b0:	d81a      	bhi.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d022      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a0b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0ba:	d115      	bne.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f001 fc5f 	bl	800b988 <RCCEx_PLL2_Config>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a0d0:	e015      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0d6:	3328      	adds	r3, #40	; 0x28
 800a0d8:	2102      	movs	r1, #2
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f001 fd06 	bl	800baec <RCCEx_PLL3_Config>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a0e6:	e00a      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a0ee:	e006      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a0f0:	bf00      	nop
 800a0f2:	e004      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a0f4:	bf00      	nop
 800a0f6:	e002      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a0f8:	bf00      	nop
 800a0fa:	e000      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a0fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10e      	bne.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a106:	4b06      	ldr	r3, [pc, #24]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a10a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a116:	4a02      	ldr	r2, [pc, #8]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a118:	430b      	orrs	r3, r1
 800a11a:	6593      	str	r3, [r2, #88]	; 0x58
 800a11c:	e006      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a11e:	bf00      	nop
 800a120:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a124:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a128:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a134:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a138:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a13c:	2300      	movs	r3, #0
 800a13e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a142:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a146:	460b      	mov	r3, r1
 800a148:	4313      	orrs	r3, r2
 800a14a:	d055      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a14c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a150:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a154:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a158:	d033      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a15a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a15e:	d82c      	bhi.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a164:	d02f      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a16a:	d826      	bhi.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a16c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a170:	d02b      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a172:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a176:	d820      	bhi.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a17c:	d012      	beq.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a17e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a182:	d81a      	bhi.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a184:	2b00      	cmp	r3, #0
 800a186:	d022      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a18c:	d115      	bne.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a192:	3308      	adds	r3, #8
 800a194:	2100      	movs	r1, #0
 800a196:	4618      	mov	r0, r3
 800a198:	f001 fbf6 	bl	800b988 <RCCEx_PLL2_Config>
 800a19c:	4603      	mov	r3, r0
 800a19e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a1a2:	e015      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a8:	3328      	adds	r3, #40	; 0x28
 800a1aa:	2102      	movs	r1, #2
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f001 fc9d 	bl	800baec <RCCEx_PLL3_Config>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a1b8:	e00a      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a1c0:	e006      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a1c2:	bf00      	nop
 800a1c4:	e004      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a1c6:	bf00      	nop
 800a1c8:	e002      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a1ca:	bf00      	nop
 800a1cc:	e000      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a1ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10b      	bne.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a1d8:	4ba0      	ldr	r3, [pc, #640]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1dc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1e8:	4a9c      	ldr	r2, [pc, #624]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1ea:	430b      	orrs	r3, r1
 800a1ec:	6593      	str	r3, [r2, #88]	; 0x58
 800a1ee:	e003      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a200:	f002 0308 	and.w	r3, r2, #8
 800a204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a208:	2300      	movs	r3, #0
 800a20a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a20e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a212:	460b      	mov	r3, r1
 800a214:	4313      	orrs	r3, r2
 800a216:	d01e      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a21c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a224:	d10c      	bne.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a22a:	3328      	adds	r3, #40	; 0x28
 800a22c:	2102      	movs	r1, #2
 800a22e:	4618      	mov	r0, r3
 800a230:	f001 fc5c 	bl	800baec <RCCEx_PLL3_Config>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a240:	4b86      	ldr	r3, [pc, #536]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a244:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a24c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a250:	4a82      	ldr	r2, [pc, #520]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a252:	430b      	orrs	r3, r1
 800a254:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	f002 0310 	and.w	r3, r2, #16
 800a262:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a266:	2300      	movs	r3, #0
 800a268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a26c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a270:	460b      	mov	r3, r1
 800a272:	4313      	orrs	r3, r2
 800a274:	d01e      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a27a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a27e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a282:	d10c      	bne.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a288:	3328      	adds	r3, #40	; 0x28
 800a28a:	2102      	movs	r1, #2
 800a28c:	4618      	mov	r0, r3
 800a28e:	f001 fc2d 	bl	800baec <RCCEx_PLL3_Config>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a29e:	4b6f      	ldr	r3, [pc, #444]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2ae:	4a6b      	ldr	r2, [pc, #428]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2b0:	430b      	orrs	r3, r1
 800a2b2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a2c0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a2c6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	d03e      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a2d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2dc:	d022      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a2de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2e2:	d81b      	bhi.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d003      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a2e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ec:	d00b      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a2ee:	e015      	b.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2f4:	3308      	adds	r3, #8
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f001 fb45 	bl	800b988 <RCCEx_PLL2_Config>
 800a2fe:	4603      	mov	r3, r0
 800a300:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a304:	e00f      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a30a:	3328      	adds	r3, #40	; 0x28
 800a30c:	2102      	movs	r1, #2
 800a30e:	4618      	mov	r0, r3
 800a310:	f001 fbec 	bl	800baec <RCCEx_PLL3_Config>
 800a314:	4603      	mov	r3, r0
 800a316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a31a:	e004      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a322:	e000      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a324:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a326:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10b      	bne.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a32e:	4b4b      	ldr	r3, [pc, #300]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a332:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a33a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a33e:	4a47      	ldr	r2, [pc, #284]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a340:	430b      	orrs	r3, r1
 800a342:	6593      	str	r3, [r2, #88]	; 0x58
 800a344:	e003      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a346:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a34a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a356:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a35a:	673b      	str	r3, [r7, #112]	; 0x70
 800a35c:	2300      	movs	r3, #0
 800a35e:	677b      	str	r3, [r7, #116]	; 0x74
 800a360:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a364:	460b      	mov	r3, r1
 800a366:	4313      	orrs	r3, r2
 800a368:	d03b      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a36e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a372:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a376:	d01f      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a378:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a37c:	d818      	bhi.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a37e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a382:	d003      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a388:	d007      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a38a:	e011      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a38c:	4b33      	ldr	r3, [pc, #204]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a390:	4a32      	ldr	r2, [pc, #200]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a396:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a398:	e00f      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a39e:	3328      	adds	r3, #40	; 0x28
 800a3a0:	2101      	movs	r1, #1
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f001 fba2 	bl	800baec <RCCEx_PLL3_Config>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a3ae:	e004      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a3b6:	e000      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a3b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10b      	bne.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a3c2:	4b26      	ldr	r3, [pc, #152]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3d2:	4a22      	ldr	r2, [pc, #136]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	6553      	str	r3, [r2, #84]	; 0x54
 800a3d8:	e003      	b.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a3ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3f4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	d034      	beq.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a404:	2b00      	cmp	r3, #0
 800a406:	d003      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a40c:	d007      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a40e:	e011      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a410:	4b12      	ldr	r3, [pc, #72]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a414:	4a11      	ldr	r2, [pc, #68]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a41a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a41c:	e00e      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a422:	3308      	adds	r3, #8
 800a424:	2102      	movs	r1, #2
 800a426:	4618      	mov	r0, r3
 800a428:	f001 faae 	bl	800b988 <RCCEx_PLL2_Config>
 800a42c:	4603      	mov	r3, r0
 800a42e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a432:	e003      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a43a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a43c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10d      	bne.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a444:	4b05      	ldr	r3, [pc, #20]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a452:	4a02      	ldr	r2, [pc, #8]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a454:	430b      	orrs	r3, r1
 800a456:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a458:	e006      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a45a:	bf00      	nop
 800a45c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a460:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a464:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a470:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a474:	663b      	str	r3, [r7, #96]	; 0x60
 800a476:	2300      	movs	r3, #0
 800a478:	667b      	str	r3, [r7, #100]	; 0x64
 800a47a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a47e:	460b      	mov	r3, r1
 800a480:	4313      	orrs	r3, r2
 800a482:	d00c      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a488:	3328      	adds	r3, #40	; 0x28
 800a48a:	2102      	movs	r1, #2
 800a48c:	4618      	mov	r0, r3
 800a48e:	f001 fb2d 	bl	800baec <RCCEx_PLL3_Config>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d002      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a4aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4b0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	d036      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4c4:	d018      	beq.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a4c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4ca:	d811      	bhi.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a4cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4d0:	d014      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a4d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4d6:	d80b      	bhi.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d011      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a4dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4e0:	d106      	bne.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4e2:	4bb7      	ldr	r3, [pc, #732]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e6:	4ab6      	ldr	r2, [pc, #728]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a4ee:	e008      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a4f6:	e004      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a4f8:	bf00      	nop
 800a4fa:	e002      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a4fc:	bf00      	nop
 800a4fe:	e000      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a500:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a502:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10a      	bne.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a50a:	4bad      	ldr	r3, [pc, #692]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a50e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a518:	4aa9      	ldr	r2, [pc, #676]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a51a:	430b      	orrs	r3, r1
 800a51c:	6553      	str	r3, [r2, #84]	; 0x54
 800a51e:	e003      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a520:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a524:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a534:	653b      	str	r3, [r7, #80]	; 0x50
 800a536:	2300      	movs	r3, #0
 800a538:	657b      	str	r3, [r7, #84]	; 0x54
 800a53a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a53e:	460b      	mov	r3, r1
 800a540:	4313      	orrs	r3, r2
 800a542:	d009      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a544:	4b9e      	ldr	r3, [pc, #632]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a548:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a552:	4a9b      	ldr	r2, [pc, #620]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a554:	430b      	orrs	r3, r1
 800a556:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a560:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a564:	64bb      	str	r3, [r7, #72]	; 0x48
 800a566:	2300      	movs	r3, #0
 800a568:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a56a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a56e:	460b      	mov	r3, r1
 800a570:	4313      	orrs	r3, r2
 800a572:	d009      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a574:	4b92      	ldr	r3, [pc, #584]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a578:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a582:	4a8f      	ldr	r2, [pc, #572]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a584:	430b      	orrs	r3, r1
 800a586:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a590:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a594:	643b      	str	r3, [r7, #64]	; 0x40
 800a596:	2300      	movs	r3, #0
 800a598:	647b      	str	r3, [r7, #68]	; 0x44
 800a59a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	d00e      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a5a4:	4b86      	ldr	r3, [pc, #536]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	4a85      	ldr	r2, [pc, #532]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a5ae:	6113      	str	r3, [r2, #16]
 800a5b0:	4b83      	ldr	r3, [pc, #524]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5b2:	6919      	ldr	r1, [r3, #16]
 800a5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a5bc:	4a80      	ldr	r2, [pc, #512]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5be:	430b      	orrs	r3, r1
 800a5c0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a5c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a5ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	d009      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a5de:	4b78      	ldr	r3, [pc, #480]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ec:	4a74      	ldr	r2, [pc, #464]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5ee:	430b      	orrs	r3, r1
 800a5f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a5fe:	633b      	str	r3, [r7, #48]	; 0x30
 800a600:	2300      	movs	r3, #0
 800a602:	637b      	str	r3, [r7, #52]	; 0x34
 800a604:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a608:	460b      	mov	r3, r1
 800a60a:	4313      	orrs	r3, r2
 800a60c:	d00a      	beq.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a60e:	4b6c      	ldr	r3, [pc, #432]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a612:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a61e:	4a68      	ldr	r2, [pc, #416]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a620:	430b      	orrs	r3, r1
 800a622:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62c:	2100      	movs	r1, #0
 800a62e:	62b9      	str	r1, [r7, #40]	; 0x28
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a636:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a63a:	460b      	mov	r3, r1
 800a63c:	4313      	orrs	r3, r2
 800a63e:	d011      	beq.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a644:	3308      	adds	r3, #8
 800a646:	2100      	movs	r1, #0
 800a648:	4618      	mov	r0, r3
 800a64a:	f001 f99d 	bl	800b988 <RCCEx_PLL2_Config>
 800a64e:	4603      	mov	r3, r0
 800a650:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a654:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d003      	beq.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a65c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a660:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	2100      	movs	r1, #0
 800a66e:	6239      	str	r1, [r7, #32]
 800a670:	f003 0302 	and.w	r3, r3, #2
 800a674:	627b      	str	r3, [r7, #36]	; 0x24
 800a676:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a67a:	460b      	mov	r3, r1
 800a67c:	4313      	orrs	r3, r2
 800a67e:	d011      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a684:	3308      	adds	r3, #8
 800a686:	2101      	movs	r1, #1
 800a688:	4618      	mov	r0, r3
 800a68a:	f001 f97d 	bl	800b988 <RCCEx_PLL2_Config>
 800a68e:	4603      	mov	r3, r0
 800a690:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a694:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d003      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a69c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	61b9      	str	r1, [r7, #24]
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	61fb      	str	r3, [r7, #28]
 800a6b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	d011      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c4:	3308      	adds	r3, #8
 800a6c6:	2102      	movs	r1, #2
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f001 f95d 	bl	800b988 <RCCEx_PLL2_Config>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a6d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d003      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	6139      	str	r1, [r7, #16]
 800a6f0:	f003 0308 	and.w	r3, r3, #8
 800a6f4:	617b      	str	r3, [r7, #20]
 800a6f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	d011      	beq.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a704:	3328      	adds	r3, #40	; 0x28
 800a706:	2100      	movs	r1, #0
 800a708:	4618      	mov	r0, r3
 800a70a:	f001 f9ef 	bl	800baec <RCCEx_PLL3_Config>
 800a70e:	4603      	mov	r3, r0
 800a710:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800a714:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d003      	beq.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a71c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a720:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72c:	2100      	movs	r1, #0
 800a72e:	60b9      	str	r1, [r7, #8]
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	60fb      	str	r3, [r7, #12]
 800a736:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a73a:	460b      	mov	r3, r1
 800a73c:	4313      	orrs	r3, r2
 800a73e:	d011      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a744:	3328      	adds	r3, #40	; 0x28
 800a746:	2101      	movs	r1, #1
 800a748:	4618      	mov	r0, r3
 800a74a:	f001 f9cf 	bl	800baec <RCCEx_PLL3_Config>
 800a74e:	4603      	mov	r3, r0
 800a750:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a754:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d003      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a75c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a760:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76c:	2100      	movs	r1, #0
 800a76e:	6039      	str	r1, [r7, #0]
 800a770:	f003 0320 	and.w	r3, r3, #32
 800a774:	607b      	str	r3, [r7, #4]
 800a776:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a77a:	460b      	mov	r3, r1
 800a77c:	4313      	orrs	r3, r2
 800a77e:	d011      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a784:	3328      	adds	r3, #40	; 0x28
 800a786:	2102      	movs	r1, #2
 800a788:	4618      	mov	r0, r3
 800a78a:	f001 f9af 	bl	800baec <RCCEx_PLL3_Config>
 800a78e:	4603      	mov	r3, r0
 800a790:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a794:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a79c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800a7a4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d101      	bne.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	e000      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7be:	bf00      	nop
 800a7c0:	58024400 	.word	0x58024400

0800a7c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b090      	sub	sp, #64	; 0x40
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a7ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7d2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a7d6:	430b      	orrs	r3, r1
 800a7d8:	f040 8094 	bne.w	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a7dc:	4b9b      	ldr	r3, [pc, #620]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7e0:	f003 0307 	and.w	r3, r3, #7
 800a7e4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	2b04      	cmp	r3, #4
 800a7ea:	f200 8087 	bhi.w	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a7ee:	a201      	add	r2, pc, #4	; (adr r2, 800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f4:	0800a809 	.word	0x0800a809
 800a7f8:	0800a831 	.word	0x0800a831
 800a7fc:	0800a859 	.word	0x0800a859
 800a800:	0800a8f5 	.word	0x0800a8f5
 800a804:	0800a881 	.word	0x0800a881
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a808:	4b90      	ldr	r3, [pc, #576]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a814:	d108      	bne.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 ff62 	bl	800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a824:	f000 bc93 	b.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a82c:	f000 bc8f 	b.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a830:	4b86      	ldr	r3, [pc, #536]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a83c:	d108      	bne.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a83e:	f107 0318 	add.w	r3, r7, #24
 800a842:	4618      	mov	r0, r3
 800a844:	f000 fca6 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a84c:	f000 bc7f 	b.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a854:	f000 bc7b 	b.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a858:	4b7c      	ldr	r3, [pc, #496]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a864:	d108      	bne.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a866:	f107 030c 	add.w	r3, r7, #12
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 fde6 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a874:	f000 bc6b 	b.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a878:	2300      	movs	r3, #0
 800a87a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a87c:	f000 bc67 	b.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a880:	4b72      	ldr	r3, [pc, #456]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a884:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a888:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a88a:	4b70      	ldr	r3, [pc, #448]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 0304 	and.w	r3, r3, #4
 800a892:	2b04      	cmp	r3, #4
 800a894:	d10c      	bne.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d109      	bne.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a89c:	4b6b      	ldr	r3, [pc, #428]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	08db      	lsrs	r3, r3, #3
 800a8a2:	f003 0303 	and.w	r3, r3, #3
 800a8a6:	4a6a      	ldr	r2, [pc, #424]	; (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a8a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8ae:	e01f      	b.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8b0:	4b66      	ldr	r3, [pc, #408]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8bc:	d106      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8c4:	d102      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a8c6:	4b63      	ldr	r3, [pc, #396]	; (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8ca:	e011      	b.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8cc:	4b5f      	ldr	r3, [pc, #380]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8d8:	d106      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8e0:	d102      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8e2:	4b5d      	ldr	r3, [pc, #372]	; (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8e6:	e003      	b.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a8ec:	f000 bc2f 	b.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a8f0:	f000 bc2d 	b.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8f4:	4b59      	ldr	r3, [pc, #356]	; (800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8f8:	f000 bc29 	b.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a900:	f000 bc25 	b.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a904:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a908:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a90c:	430b      	orrs	r3, r1
 800a90e:	f040 80a7 	bne.w	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a912:	4b4e      	ldr	r3, [pc, #312]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a916:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a91a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a922:	d054      	beq.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a92a:	f200 808b 	bhi.w	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a934:	f000 8083 	beq.w	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a93e:	f200 8081 	bhi.w	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a948:	d02f      	beq.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a950:	d878      	bhi.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	2b00      	cmp	r3, #0
 800a956:	d004      	beq.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a95e:	d012      	beq.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a960:	e070      	b.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a962:	4b3a      	ldr	r3, [pc, #232]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a96a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a96e:	d107      	bne.n	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a974:	4618      	mov	r0, r3
 800a976:	f000 feb5 	bl	800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a97e:	e3e6      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a980:	2300      	movs	r3, #0
 800a982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a984:	e3e3      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a986:	4b31      	ldr	r3, [pc, #196]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a98e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a992:	d107      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a994:	f107 0318 	add.w	r3, r7, #24
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 fbfb 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9a2:	e3d4      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9a8:	e3d1      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9aa:	4b28      	ldr	r3, [pc, #160]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9b6:	d107      	bne.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9b8:	f107 030c 	add.w	r3, r7, #12
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 fd3d 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9c6:	e3c2      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9cc:	e3bf      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9ce:	4b1f      	ldr	r3, [pc, #124]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9d6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9d8:	4b1c      	ldr	r3, [pc, #112]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 0304 	and.w	r3, r3, #4
 800a9e0:	2b04      	cmp	r3, #4
 800a9e2:	d10c      	bne.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d109      	bne.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9ea:	4b18      	ldr	r3, [pc, #96]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	08db      	lsrs	r3, r3, #3
 800a9f0:	f003 0303 	and.w	r3, r3, #3
 800a9f4:	4a16      	ldr	r2, [pc, #88]	; (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a9f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9fc:	e01e      	b.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9fe:	4b13      	ldr	r3, [pc, #76]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa0a:	d106      	bne.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800aa0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa12:	d102      	bne.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa14:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800aa16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa18:	e010      	b.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa1a:	4b0c      	ldr	r3, [pc, #48]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa26:	d106      	bne.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800aa28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa2e:	d102      	bne.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa30:	4b09      	ldr	r3, [pc, #36]	; (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa34:	e002      	b.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa36:	2300      	movs	r3, #0
 800aa38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aa3a:	e388      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa3c:	e387      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa3e:	4b07      	ldr	r3, [pc, #28]	; (800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa42:	e384      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa48:	e381      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa4a:	bf00      	nop
 800aa4c:	58024400 	.word	0x58024400
 800aa50:	03d09000 	.word	0x03d09000
 800aa54:	003d0900 	.word	0x003d0900
 800aa58:	02faf080 	.word	0x02faf080
 800aa5c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aa60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa64:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800aa68:	430b      	orrs	r3, r1
 800aa6a:	f040 809c 	bne.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800aa6e:	4b9e      	ldr	r3, [pc, #632]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800aa76:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aa78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa7e:	d054      	beq.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa86:	f200 808b 	bhi.w	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa90:	f000 8083 	beq.w	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa9a:	f200 8081 	bhi.w	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaa4:	d02f      	beq.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaac:	d878      	bhi.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d004      	beq.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aaba:	d012      	beq.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800aabc:	e070      	b.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aabe:	4b8a      	ldr	r3, [pc, #552]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaca:	d107      	bne.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aacc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 fe07 	bl	800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aada:	e338      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aadc:	2300      	movs	r3, #0
 800aade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aae0:	e335      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aae2:	4b81      	ldr	r3, [pc, #516]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aaea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aaee:	d107      	bne.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaf0:	f107 0318 	add.w	r3, r7, #24
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f000 fb4d 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aafe:	e326      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab04:	e323      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab06:	4b78      	ldr	r3, [pc, #480]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab12:	d107      	bne.n	800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab14:	f107 030c 	add.w	r3, r7, #12
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f000 fc8f 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab22:	e314      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab28:	e311      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab2a:	4b6f      	ldr	r3, [pc, #444]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab32:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab34:	4b6c      	ldr	r3, [pc, #432]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0304 	and.w	r3, r3, #4
 800ab3c:	2b04      	cmp	r3, #4
 800ab3e:	d10c      	bne.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ab40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d109      	bne.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab46:	4b68      	ldr	r3, [pc, #416]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	08db      	lsrs	r3, r3, #3
 800ab4c:	f003 0303 	and.w	r3, r3, #3
 800ab50:	4a66      	ldr	r2, [pc, #408]	; (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ab52:	fa22 f303 	lsr.w	r3, r2, r3
 800ab56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab58:	e01e      	b.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab5a:	4b63      	ldr	r3, [pc, #396]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab66:	d106      	bne.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ab68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab6e:	d102      	bne.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab70:	4b5f      	ldr	r3, [pc, #380]	; (800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ab72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab74:	e010      	b.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab76:	4b5c      	ldr	r3, [pc, #368]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab82:	d106      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ab84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab8a:	d102      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab8c:	4b59      	ldr	r3, [pc, #356]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab90:	e002      	b.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ab96:	e2da      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ab98:	e2d9      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab9a:	4b57      	ldr	r3, [pc, #348]	; (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ab9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab9e:	e2d6      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba4:	e2d3      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abaa:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800abae:	430b      	orrs	r3, r1
 800abb0:	f040 80a7 	bne.w	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800abb4:	4b4c      	ldr	r3, [pc, #304]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abb8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800abbc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800abbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abc4:	d055      	beq.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800abc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abcc:	f200 8096 	bhi.w	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800abd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abd6:	f000 8084 	beq.w	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800abda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abe0:	f200 808c 	bhi.w	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800abe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abea:	d030      	beq.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800abec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abf2:	f200 8083 	bhi.w	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800abf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d004      	beq.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800abfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac02:	d012      	beq.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ac04:	e07a      	b.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac06:	4b38      	ldr	r3, [pc, #224]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac12:	d107      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 fd63 	bl	800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac22:	e294      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac28:	e291      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac2a:	4b2f      	ldr	r3, [pc, #188]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac36:	d107      	bne.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac38:	f107 0318 	add.w	r3, r7, #24
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 faa9 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac46:	e282      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac4c:	e27f      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac4e:	4b26      	ldr	r3, [pc, #152]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac5a:	d107      	bne.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac5c:	f107 030c 	add.w	r3, r7, #12
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 fbeb 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac6a:	e270      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac70:	e26d      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac72:	4b1d      	ldr	r3, [pc, #116]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac7c:	4b1a      	ldr	r3, [pc, #104]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0304 	and.w	r3, r3, #4
 800ac84:	2b04      	cmp	r3, #4
 800ac86:	d10c      	bne.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ac88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d109      	bne.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac8e:	4b16      	ldr	r3, [pc, #88]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	08db      	lsrs	r3, r3, #3
 800ac94:	f003 0303 	and.w	r3, r3, #3
 800ac98:	4a14      	ldr	r2, [pc, #80]	; (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ac9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aca0:	e01e      	b.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aca2:	4b11      	ldr	r3, [pc, #68]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acae:	d106      	bne.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800acb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acb6:	d102      	bne.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acb8:	4b0d      	ldr	r3, [pc, #52]	; (800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800acba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acbc:	e010      	b.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acbe:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acca:	d106      	bne.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800accc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acd2:	d102      	bne.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800acd4:	4b07      	ldr	r3, [pc, #28]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acd8:	e002      	b.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800acda:	2300      	movs	r3, #0
 800acdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800acde:	e236      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ace0:	e235      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ace2:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ace4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ace6:	e232      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ace8:	58024400 	.word	0x58024400
 800acec:	03d09000 	.word	0x03d09000
 800acf0:	003d0900 	.word	0x003d0900
 800acf4:	02faf080 	.word	0x02faf080
 800acf8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad00:	e225      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ad02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad06:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ad0a:	430b      	orrs	r3, r1
 800ad0c:	f040 8085 	bne.w	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ad10:	4b9c      	ldr	r3, [pc, #624]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad14:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ad18:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad20:	d06b      	beq.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ad22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad28:	d874      	bhi.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad30:	d056      	beq.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ad32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad38:	d86c      	bhi.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad40:	d03b      	beq.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad48:	d864      	bhi.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ad4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad50:	d021      	beq.n	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ad52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad58:	d85c      	bhi.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ad5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d004      	beq.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad66:	d004      	beq.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800ad68:	e054      	b.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ad6a:	f7fe fb75 	bl	8009458 <HAL_RCC_GetPCLK1Freq>
 800ad6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad70:	e1ed      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad72:	4b84      	ldr	r3, [pc, #528]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad7e:	d107      	bne.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad80:	f107 0318 	add.w	r3, r7, #24
 800ad84:	4618      	mov	r0, r3
 800ad86:	f000 fa05 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad8e:	e1de      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad94:	e1db      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad96:	4b7b      	ldr	r3, [pc, #492]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ada2:	d107      	bne.n	800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ada4:	f107 030c 	add.w	r3, r7, #12
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 fb47 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adb2:	e1cc      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adb4:	2300      	movs	r3, #0
 800adb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adb8:	e1c9      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800adba:	4b72      	ldr	r3, [pc, #456]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 0304 	and.w	r3, r3, #4
 800adc2:	2b04      	cmp	r3, #4
 800adc4:	d109      	bne.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adc6:	4b6f      	ldr	r3, [pc, #444]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	08db      	lsrs	r3, r3, #3
 800adcc:	f003 0303 	and.w	r3, r3, #3
 800add0:	4a6d      	ldr	r2, [pc, #436]	; (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800add2:	fa22 f303 	lsr.w	r3, r2, r3
 800add6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800add8:	e1b9      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adda:	2300      	movs	r3, #0
 800addc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adde:	e1b6      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ade0:	4b68      	ldr	r3, [pc, #416]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adec:	d102      	bne.n	800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800adee:	4b67      	ldr	r3, [pc, #412]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800adf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf2:	e1ac      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adf8:	e1a9      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800adfa:	4b62      	ldr	r3, [pc, #392]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae06:	d102      	bne.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ae08:	4b61      	ldr	r3, [pc, #388]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ae0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae0c:	e19f      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae12:	e19c      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ae14:	2300      	movs	r3, #0
 800ae16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae18:	e199      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ae1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae1e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ae22:	430b      	orrs	r3, r1
 800ae24:	d173      	bne.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ae26:	4b57      	ldr	r3, [pc, #348]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ae2e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae36:	d02f      	beq.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae3e:	d863      	bhi.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d004      	beq.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800ae46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae4c:	d012      	beq.n	800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800ae4e:	e05b      	b.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae50:	4b4c      	ldr	r3, [pc, #304]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae5c:	d107      	bne.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae5e:	f107 0318 	add.w	r3, r7, #24
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 f996 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae6c:	e16f      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae72:	e16c      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae74:	4b43      	ldr	r3, [pc, #268]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae80:	d107      	bne.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae82:	f107 030c 	add.w	r3, r7, #12
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 fad8 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae90:	e15d      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae96:	e15a      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae98:	4b3a      	ldr	r3, [pc, #232]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aea0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aea2:	4b38      	ldr	r3, [pc, #224]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 0304 	and.w	r3, r3, #4
 800aeaa:	2b04      	cmp	r3, #4
 800aeac:	d10c      	bne.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800aeae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d109      	bne.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aeb4:	4b33      	ldr	r3, [pc, #204]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	08db      	lsrs	r3, r3, #3
 800aeba:	f003 0303 	and.w	r3, r3, #3
 800aebe:	4a32      	ldr	r2, [pc, #200]	; (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800aec0:	fa22 f303 	lsr.w	r3, r2, r3
 800aec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aec6:	e01e      	b.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aec8:	4b2e      	ldr	r3, [pc, #184]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aed4:	d106      	bne.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800aed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aedc:	d102      	bne.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aede:	4b2b      	ldr	r3, [pc, #172]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800aee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aee2:	e010      	b.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aee4:	4b27      	ldr	r3, [pc, #156]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aef0:	d106      	bne.n	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800aef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aef8:	d102      	bne.n	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aefa:	4b25      	ldr	r3, [pc, #148]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800aefc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aefe:	e002      	b.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af00:	2300      	movs	r3, #0
 800af02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800af04:	e123      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af06:	e122      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af0c:	e11f      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800af0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af12:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800af16:	430b      	orrs	r3, r1
 800af18:	d13c      	bne.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800af1a:	4b1a      	ldr	r3, [pc, #104]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af22:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	2b00      	cmp	r3, #0
 800af28:	d004      	beq.n	800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800af2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af30:	d012      	beq.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800af32:	e023      	b.n	800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af34:	4b13      	ldr	r3, [pc, #76]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af40:	d107      	bne.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af46:	4618      	mov	r0, r3
 800af48:	f000 fbcc 	bl	800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af50:	e0fd      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af56:	e0fa      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af58:	4b0a      	ldr	r3, [pc, #40]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af64:	d107      	bne.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af66:	f107 0318 	add.w	r3, r7, #24
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 f912 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800af70:	6a3b      	ldr	r3, [r7, #32]
 800af72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af74:	e0eb      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af76:	2300      	movs	r3, #0
 800af78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af7a:	e0e8      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af80:	e0e5      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af82:	bf00      	nop
 800af84:	58024400 	.word	0x58024400
 800af88:	03d09000 	.word	0x03d09000
 800af8c:	003d0900 	.word	0x003d0900
 800af90:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800af94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af98:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800af9c:	430b      	orrs	r3, r1
 800af9e:	f040 8085 	bne.w	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800afa2:	4b6d      	ldr	r3, [pc, #436]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800afa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afa6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800afaa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800afac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afb2:	d06b      	beq.n	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afba:	d874      	bhi.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800afbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afc2:	d056      	beq.n	800b072 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800afc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afca:	d86c      	bhi.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afd2:	d03b      	beq.n	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afda:	d864      	bhi.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800afdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afe2:	d021      	beq.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800afe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afea:	d85c      	bhi.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d004      	beq.n	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aff8:	d004      	beq.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800affa:	e054      	b.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800affc:	f000 f8b4 	bl	800b168 <HAL_RCCEx_GetD3PCLK1Freq>
 800b000:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b002:	e0a4      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b004:	4b54      	ldr	r3, [pc, #336]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b00c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b010:	d107      	bne.n	800b022 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b012:	f107 0318 	add.w	r3, r7, #24
 800b016:	4618      	mov	r0, r3
 800b018:	f000 f8bc 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b020:	e095      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b022:	2300      	movs	r3, #0
 800b024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b026:	e092      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b028:	4b4b      	ldr	r3, [pc, #300]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b034:	d107      	bne.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b036:	f107 030c 	add.w	r3, r7, #12
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 f9fe 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b044:	e083      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b04a:	e080      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b04c:	4b42      	ldr	r3, [pc, #264]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 0304 	and.w	r3, r3, #4
 800b054:	2b04      	cmp	r3, #4
 800b056:	d109      	bne.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b058:	4b3f      	ldr	r3, [pc, #252]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	08db      	lsrs	r3, r3, #3
 800b05e:	f003 0303 	and.w	r3, r3, #3
 800b062:	4a3e      	ldr	r2, [pc, #248]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b064:	fa22 f303 	lsr.w	r3, r2, r3
 800b068:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b06a:	e070      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b070:	e06d      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b072:	4b39      	ldr	r3, [pc, #228]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b07a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b07e:	d102      	bne.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b080:	4b37      	ldr	r3, [pc, #220]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b082:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b084:	e063      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b086:	2300      	movs	r3, #0
 800b088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b08a:	e060      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b08c:	4b32      	ldr	r3, [pc, #200]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b098:	d102      	bne.n	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b09a:	4b32      	ldr	r3, [pc, #200]	; (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b09c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b09e:	e056      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0a4:	e053      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0aa:	e050      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b0ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0b0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b0b4:	430b      	orrs	r3, r1
 800b0b6:	d148      	bne.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b0b8:	4b27      	ldr	r3, [pc, #156]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b0c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0c8:	d02a      	beq.n	800b120 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0d0:	d838      	bhi.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d004      	beq.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0de:	d00d      	beq.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b0e0:	e030      	b.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b0e2:	4b1d      	ldr	r3, [pc, #116]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0ee:	d102      	bne.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b0f0:	4b1c      	ldr	r3, [pc, #112]	; (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0f4:	e02b      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0fa:	e028      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0fc:	4b16      	ldr	r3, [pc, #88]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b108:	d107      	bne.n	800b11a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b10a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 fae8 	bl	800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b118:	e019      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b11e:	e016      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b120:	4b0d      	ldr	r3, [pc, #52]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b12c:	d107      	bne.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b12e:	f107 0318 	add.w	r3, r7, #24
 800b132:	4618      	mov	r0, r3
 800b134:	f000 f82e 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b13c:	e007      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b13e:	2300      	movs	r3, #0
 800b140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b142:	e004      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b144:	2300      	movs	r3, #0
 800b146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b148:	e001      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b14a:	2300      	movs	r3, #0
 800b14c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b150:	4618      	mov	r0, r3
 800b152:	3740      	adds	r7, #64	; 0x40
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	58024400 	.word	0x58024400
 800b15c:	03d09000 	.word	0x03d09000
 800b160:	003d0900 	.word	0x003d0900
 800b164:	02faf080 	.word	0x02faf080

0800b168 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b16c:	f7fe f944 	bl	80093f8 <HAL_RCC_GetHCLKFreq>
 800b170:	4602      	mov	r2, r0
 800b172:	4b06      	ldr	r3, [pc, #24]	; (800b18c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	091b      	lsrs	r3, r3, #4
 800b178:	f003 0307 	and.w	r3, r3, #7
 800b17c:	4904      	ldr	r1, [pc, #16]	; (800b190 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b17e:	5ccb      	ldrb	r3, [r1, r3]
 800b180:	f003 031f 	and.w	r3, r3, #31
 800b184:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b188:	4618      	mov	r0, r3
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	58024400 	.word	0x58024400
 800b190:	08011500 	.word	0x08011500

0800b194 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b194:	b480      	push	{r7}
 800b196:	b089      	sub	sp, #36	; 0x24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b19c:	4ba1      	ldr	r3, [pc, #644]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a0:	f003 0303 	and.w	r3, r3, #3
 800b1a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b1a6:	4b9f      	ldr	r3, [pc, #636]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1aa:	0b1b      	lsrs	r3, r3, #12
 800b1ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b1b2:	4b9c      	ldr	r3, [pc, #624]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b6:	091b      	lsrs	r3, r3, #4
 800b1b8:	f003 0301 	and.w	r3, r3, #1
 800b1bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b1be:	4b99      	ldr	r3, [pc, #612]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c2:	08db      	lsrs	r3, r3, #3
 800b1c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	fb02 f303 	mul.w	r3, r2, r3
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f000 8111 	beq.w	800b404 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	f000 8083 	beq.w	800b2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	f200 80a1 	bhi.w	800b334 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d003      	beq.n	800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d056      	beq.n	800b2ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b1fe:	e099      	b.n	800b334 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b200:	4b88      	ldr	r3, [pc, #544]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0320 	and.w	r3, r3, #32
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d02d      	beq.n	800b268 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b20c:	4b85      	ldr	r3, [pc, #532]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	08db      	lsrs	r3, r3, #3
 800b212:	f003 0303 	and.w	r3, r3, #3
 800b216:	4a84      	ldr	r2, [pc, #528]	; (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b218:	fa22 f303 	lsr.w	r3, r2, r3
 800b21c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	ee07 3a90 	vmov	s15, r3
 800b224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b236:	4b7b      	ldr	r3, [pc, #492]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b246:	ed97 6a03 	vldr	s12, [r7, #12]
 800b24a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b24e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b25a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b262:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b266:	e087      	b.n	800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b430 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b27a:	4b6a      	ldr	r3, [pc, #424]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b28a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b28e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b29a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b29e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2aa:	e065      	b.n	800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	ee07 3a90 	vmov	s15, r3
 800b2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b434 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2be:	4b59      	ldr	r3, [pc, #356]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2ee:	e043      	b.n	800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b438 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b302:	4b48      	ldr	r3, [pc, #288]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b312:	ed97 6a03 	vldr	s12, [r7, #12]
 800b316:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b332:	e021      	b.n	800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b434 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b346:	4b37      	ldr	r3, [pc, #220]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b356:	ed97 6a03 	vldr	s12, [r7, #12]
 800b35a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b376:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b378:	4b2a      	ldr	r3, [pc, #168]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37c:	0a5b      	lsrs	r3, r3, #9
 800b37e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b382:	ee07 3a90 	vmov	s15, r3
 800b386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b38a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b38e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b392:	edd7 6a07 	vldr	s13, [r7, #28]
 800b396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b39a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b39e:	ee17 2a90 	vmov	r2, s15
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b3a6:	4b1f      	ldr	r3, [pc, #124]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3aa:	0c1b      	lsrs	r3, r3, #16
 800b3ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3b0:	ee07 3a90 	vmov	s15, r3
 800b3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3cc:	ee17 2a90 	vmov	r2, s15
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b3d4:	4b13      	ldr	r3, [pc, #76]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d8:	0e1b      	lsrs	r3, r3, #24
 800b3da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3de:	ee07 3a90 	vmov	s15, r3
 800b3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3fa:	ee17 2a90 	vmov	r2, s15
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b402:	e008      	b.n	800b416 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	609a      	str	r2, [r3, #8]
}
 800b416:	bf00      	nop
 800b418:	3724      	adds	r7, #36	; 0x24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	58024400 	.word	0x58024400
 800b428:	03d09000 	.word	0x03d09000
 800b42c:	46000000 	.word	0x46000000
 800b430:	4c742400 	.word	0x4c742400
 800b434:	4a742400 	.word	0x4a742400
 800b438:	4c3ebc20 	.word	0x4c3ebc20

0800b43c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b089      	sub	sp, #36	; 0x24
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b444:	4ba1      	ldr	r3, [pc, #644]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b448:	f003 0303 	and.w	r3, r3, #3
 800b44c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b44e:	4b9f      	ldr	r3, [pc, #636]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b452:	0d1b      	lsrs	r3, r3, #20
 800b454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b458:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b45a:	4b9c      	ldr	r3, [pc, #624]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45e:	0a1b      	lsrs	r3, r3, #8
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b466:	4b99      	ldr	r3, [pc, #612]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b46a:	08db      	lsrs	r3, r3, #3
 800b46c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	fb02 f303 	mul.w	r3, r2, r3
 800b476:	ee07 3a90 	vmov	s15, r3
 800b47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b47e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	2b00      	cmp	r3, #0
 800b486:	f000 8111 	beq.w	800b6ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	2b02      	cmp	r3, #2
 800b48e:	f000 8083 	beq.w	800b598 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	2b02      	cmp	r3, #2
 800b496:	f200 80a1 	bhi.w	800b5dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d003      	beq.n	800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d056      	beq.n	800b554 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b4a6:	e099      	b.n	800b5dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4a8:	4b88      	ldr	r3, [pc, #544]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 0320 	and.w	r3, r3, #32
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d02d      	beq.n	800b510 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4b4:	4b85      	ldr	r3, [pc, #532]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	08db      	lsrs	r3, r3, #3
 800b4ba:	f003 0303 	and.w	r3, r3, #3
 800b4be:	4a84      	ldr	r2, [pc, #528]	; (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	ee07 3a90 	vmov	s15, r3
 800b4cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	ee07 3a90 	vmov	s15, r3
 800b4d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4de:	4b7b      	ldr	r3, [pc, #492]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e6:	ee07 3a90 	vmov	s15, r3
 800b4ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b50a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b50e:	e087      	b.n	800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	ee07 3a90 	vmov	s15, r3
 800b516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b51e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b522:	4b6a      	ldr	r3, [pc, #424]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b532:	ed97 6a03 	vldr	s12, [r7, #12]
 800b536:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b53a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b53e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b552:	e065      	b.n	800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	ee07 3a90 	vmov	s15, r3
 800b55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b566:	4b59      	ldr	r3, [pc, #356]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b576:	ed97 6a03 	vldr	s12, [r7, #12]
 800b57a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b57e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b596:	e043      	b.n	800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	ee07 3a90 	vmov	s15, r3
 800b59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5aa:	4b48      	ldr	r3, [pc, #288]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b2:	ee07 3a90 	vmov	s15, r3
 800b5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5da:	e021      	b.n	800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ee:	4b37      	ldr	r3, [pc, #220]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b602:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b61a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b61e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b620:	4b2a      	ldr	r3, [pc, #168]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b624:	0a5b      	lsrs	r3, r3, #9
 800b626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b62a:	ee07 3a90 	vmov	s15, r3
 800b62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b632:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b636:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b63a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b63e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b646:	ee17 2a90 	vmov	r2, s15
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b64e:	4b1f      	ldr	r3, [pc, #124]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b652:	0c1b      	lsrs	r3, r3, #16
 800b654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b658:	ee07 3a90 	vmov	s15, r3
 800b65c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b664:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b668:	edd7 6a07 	vldr	s13, [r7, #28]
 800b66c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b674:	ee17 2a90 	vmov	r2, s15
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b67c:	4b13      	ldr	r3, [pc, #76]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b680:	0e1b      	lsrs	r3, r3, #24
 800b682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b686:	ee07 3a90 	vmov	s15, r3
 800b68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b68e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b692:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b696:	edd7 6a07 	vldr	s13, [r7, #28]
 800b69a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b69e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6a2:	ee17 2a90 	vmov	r2, s15
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b6aa:	e008      	b.n	800b6be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	609a      	str	r2, [r3, #8]
}
 800b6be:	bf00      	nop
 800b6c0:	3724      	adds	r7, #36	; 0x24
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	58024400 	.word	0x58024400
 800b6d0:	03d09000 	.word	0x03d09000
 800b6d4:	46000000 	.word	0x46000000
 800b6d8:	4c742400 	.word	0x4c742400
 800b6dc:	4a742400 	.word	0x4a742400
 800b6e0:	4c3ebc20 	.word	0x4c3ebc20

0800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b089      	sub	sp, #36	; 0x24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b6ec:	4ba0      	ldr	r3, [pc, #640]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f0:	f003 0303 	and.w	r3, r3, #3
 800b6f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b6f6:	4b9e      	ldr	r3, [pc, #632]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fa:	091b      	lsrs	r3, r3, #4
 800b6fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b700:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b702:	4b9b      	ldr	r3, [pc, #620]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b70c:	4b98      	ldr	r3, [pc, #608]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b70e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b710:	08db      	lsrs	r3, r3, #3
 800b712:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	fb02 f303 	mul.w	r3, r2, r3
 800b71c:	ee07 3a90 	vmov	s15, r3
 800b720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b724:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 8111 	beq.w	800b952 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	2b02      	cmp	r3, #2
 800b734:	f000 8083 	beq.w	800b83e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	f200 80a1 	bhi.w	800b882 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d003      	beq.n	800b74e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d056      	beq.n	800b7fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b74c:	e099      	b.n	800b882 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b74e:	4b88      	ldr	r3, [pc, #544]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f003 0320 	and.w	r3, r3, #32
 800b756:	2b00      	cmp	r3, #0
 800b758:	d02d      	beq.n	800b7b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b75a:	4b85      	ldr	r3, [pc, #532]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	08db      	lsrs	r3, r3, #3
 800b760:	f003 0303 	and.w	r3, r3, #3
 800b764:	4a83      	ldr	r2, [pc, #524]	; (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b766:	fa22 f303 	lsr.w	r3, r2, r3
 800b76a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	ee07 3a90 	vmov	s15, r3
 800b772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	ee07 3a90 	vmov	s15, r3
 800b77c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b784:	4b7a      	ldr	r3, [pc, #488]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b78c:	ee07 3a90 	vmov	s15, r3
 800b790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b794:	ed97 6a03 	vldr	s12, [r7, #12]
 800b798:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b978 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b79c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b7b4:	e087      	b.n	800b8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	ee07 3a90 	vmov	s15, r3
 800b7bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b7c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7c8:	4b69      	ldr	r3, [pc, #420]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d0:	ee07 3a90 	vmov	s15, r3
 800b7d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7dc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b978 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7f8:	e065      	b.n	800b8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	ee07 3a90 	vmov	s15, r3
 800b800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b804:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b980 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b80c:	4b58      	ldr	r3, [pc, #352]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b814:	ee07 3a90 	vmov	s15, r3
 800b818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b81c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b820:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b978 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b824:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b82c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b834:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b838:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b83c:	e043      	b.n	800b8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	ee07 3a90 	vmov	s15, r3
 800b844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b848:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b984 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b84c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b850:	4b47      	ldr	r3, [pc, #284]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b858:	ee07 3a90 	vmov	s15, r3
 800b85c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b860:	ed97 6a03 	vldr	s12, [r7, #12]
 800b864:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b978 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b868:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b86c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b870:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b874:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b87c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b880:	e021      	b.n	800b8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b88c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b894:	4b36      	ldr	r3, [pc, #216]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b89c:	ee07 3a90 	vmov	s15, r3
 800b8a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b978 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8c4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b8c6:	4b2a      	ldr	r3, [pc, #168]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ca:	0a5b      	lsrs	r3, r3, #9
 800b8cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8d0:	ee07 3a90 	vmov	s15, r3
 800b8d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8ec:	ee17 2a90 	vmov	r2, s15
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b8f4:	4b1e      	ldr	r3, [pc, #120]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f8:	0c1b      	lsrs	r3, r3, #16
 800b8fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8fe:	ee07 3a90 	vmov	s15, r3
 800b902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b90a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b90e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b91a:	ee17 2a90 	vmov	r2, s15
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b922:	4b13      	ldr	r3, [pc, #76]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b926:	0e1b      	lsrs	r3, r3, #24
 800b928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b92c:	ee07 3a90 	vmov	s15, r3
 800b930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b934:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b938:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b93c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b948:	ee17 2a90 	vmov	r2, s15
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b950:	e008      	b.n	800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	609a      	str	r2, [r3, #8]
}
 800b964:	bf00      	nop
 800b966:	3724      	adds	r7, #36	; 0x24
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	58024400 	.word	0x58024400
 800b974:	03d09000 	.word	0x03d09000
 800b978:	46000000 	.word	0x46000000
 800b97c:	4c742400 	.word	0x4c742400
 800b980:	4a742400 	.word	0x4a742400
 800b984:	4c3ebc20 	.word	0x4c3ebc20

0800b988 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b992:	2300      	movs	r3, #0
 800b994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b996:	4b53      	ldr	r3, [pc, #332]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800b998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99a:	f003 0303 	and.w	r3, r3, #3
 800b99e:	2b03      	cmp	r3, #3
 800b9a0:	d101      	bne.n	800b9a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e099      	b.n	800bada <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b9a6:	4b4f      	ldr	r3, [pc, #316]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a4e      	ldr	r2, [pc, #312]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800b9ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b9b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9b2:	f7f7 fc3d 	bl	8003230 <HAL_GetTick>
 800b9b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9b8:	e008      	b.n	800b9cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b9ba:	f7f7 fc39 	bl	8003230 <HAL_GetTick>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d901      	bls.n	800b9cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	e086      	b.n	800bada <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9cc:	4b45      	ldr	r3, [pc, #276]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1f0      	bne.n	800b9ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b9d8:	4b42      	ldr	r3, [pc, #264]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800b9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	031b      	lsls	r3, r3, #12
 800b9e6:	493f      	ldr	r1, [pc, #252]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	628b      	str	r3, [r1, #40]	; 0x28
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	025b      	lsls	r3, r3, #9
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	431a      	orrs	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	041b      	lsls	r3, r3, #16
 800ba0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ba0e:	431a      	orrs	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	3b01      	subs	r3, #1
 800ba16:	061b      	lsls	r3, r3, #24
 800ba18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ba1c:	4931      	ldr	r1, [pc, #196]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ba22:	4b30      	ldr	r3, [pc, #192]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	695b      	ldr	r3, [r3, #20]
 800ba2e:	492d      	ldr	r1, [pc, #180]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba30:	4313      	orrs	r3, r2
 800ba32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ba34:	4b2b      	ldr	r3, [pc, #172]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba38:	f023 0220 	bic.w	r2, r3, #32
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	699b      	ldr	r3, [r3, #24]
 800ba40:	4928      	ldr	r1, [pc, #160]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba42:	4313      	orrs	r3, r2
 800ba44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ba46:	4b27      	ldr	r3, [pc, #156]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba4a:	4a26      	ldr	r2, [pc, #152]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba4c:	f023 0310 	bic.w	r3, r3, #16
 800ba50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ba52:	4b24      	ldr	r3, [pc, #144]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba56:	4b24      	ldr	r3, [pc, #144]	; (800bae8 <RCCEx_PLL2_Config+0x160>)
 800ba58:	4013      	ands	r3, r2
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	69d2      	ldr	r2, [r2, #28]
 800ba5e:	00d2      	lsls	r2, r2, #3
 800ba60:	4920      	ldr	r1, [pc, #128]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba62:	4313      	orrs	r3, r2
 800ba64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ba66:	4b1f      	ldr	r3, [pc, #124]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6a:	4a1e      	ldr	r2, [pc, #120]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba6c:	f043 0310 	orr.w	r3, r3, #16
 800ba70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d106      	bne.n	800ba86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ba78:	4b1a      	ldr	r3, [pc, #104]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	4a19      	ldr	r2, [pc, #100]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba84:	e00f      	b.n	800baa6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d106      	bne.n	800ba9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ba8c:	4b15      	ldr	r3, [pc, #84]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba90:	4a14      	ldr	r2, [pc, #80]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba98:	e005      	b.n	800baa6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ba9a:	4b12      	ldr	r3, [pc, #72]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9e:	4a11      	ldr	r2, [pc, #68]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800baa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800baa4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800baa6:	4b0f      	ldr	r3, [pc, #60]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a0e      	ldr	r2, [pc, #56]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800baac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bab2:	f7f7 fbbd 	bl	8003230 <HAL_GetTick>
 800bab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bab8:	e008      	b.n	800bacc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800baba:	f7f7 fbb9 	bl	8003230 <HAL_GetTick>
 800babe:	4602      	mov	r2, r0
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	2b02      	cmp	r3, #2
 800bac6:	d901      	bls.n	800bacc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bac8:	2303      	movs	r3, #3
 800baca:	e006      	b.n	800bada <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bacc:	4b05      	ldr	r3, [pc, #20]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0f0      	beq.n	800baba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	58024400 	.word	0x58024400
 800bae8:	ffff0007 	.word	0xffff0007

0800baec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800baf6:	2300      	movs	r3, #0
 800baf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bafa:	4b53      	ldr	r3, [pc, #332]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafe:	f003 0303 	and.w	r3, r3, #3
 800bb02:	2b03      	cmp	r3, #3
 800bb04:	d101      	bne.n	800bb0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bb06:	2301      	movs	r3, #1
 800bb08:	e099      	b.n	800bc3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bb0a:	4b4f      	ldr	r3, [pc, #316]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a4e      	ldr	r2, [pc, #312]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb16:	f7f7 fb8b 	bl	8003230 <HAL_GetTick>
 800bb1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb1c:	e008      	b.n	800bb30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb1e:	f7f7 fb87 	bl	8003230 <HAL_GetTick>
 800bb22:	4602      	mov	r2, r0
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d901      	bls.n	800bb30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	e086      	b.n	800bc3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb30:	4b45      	ldr	r3, [pc, #276]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1f0      	bne.n	800bb1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bb3c:	4b42      	ldr	r3, [pc, #264]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	051b      	lsls	r3, r3, #20
 800bb4a:	493f      	ldr	r1, [pc, #252]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	628b      	str	r3, [r1, #40]	; 0x28
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	3b01      	subs	r3, #1
 800bb56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	025b      	lsls	r3, r3, #9
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	431a      	orrs	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	041b      	lsls	r3, r3, #16
 800bb6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bb72:	431a      	orrs	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	061b      	lsls	r3, r3, #24
 800bb7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bb80:	4931      	ldr	r1, [pc, #196]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb82:	4313      	orrs	r3, r2
 800bb84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bb86:	4b30      	ldr	r3, [pc, #192]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	492d      	ldr	r1, [pc, #180]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb94:	4313      	orrs	r3, r2
 800bb96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bb98:	4b2b      	ldr	r3, [pc, #172]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	4928      	ldr	r1, [pc, #160]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bba6:	4313      	orrs	r3, r2
 800bba8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bbaa:	4b27      	ldr	r3, [pc, #156]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbae:	4a26      	ldr	r2, [pc, #152]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bbb6:	4b24      	ldr	r3, [pc, #144]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbba:	4b24      	ldr	r3, [pc, #144]	; (800bc4c <RCCEx_PLL3_Config+0x160>)
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	69d2      	ldr	r2, [r2, #28]
 800bbc2:	00d2      	lsls	r2, r2, #3
 800bbc4:	4920      	ldr	r1, [pc, #128]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bbca:	4b1f      	ldr	r3, [pc, #124]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbce:	4a1e      	ldr	r2, [pc, #120]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d106      	bne.n	800bbea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bbdc:	4b1a      	ldr	r3, [pc, #104]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe0:	4a19      	ldr	r2, [pc, #100]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbe2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bbe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bbe8:	e00f      	b.n	800bc0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d106      	bne.n	800bbfe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bbf0:	4b15      	ldr	r3, [pc, #84]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf4:	4a14      	ldr	r2, [pc, #80]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bbfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bbfc:	e005      	b.n	800bc0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bbfe:	4b12      	ldr	r3, [pc, #72]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bc00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc02:	4a11      	ldr	r2, [pc, #68]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bc04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bc0a:	4b0f      	ldr	r3, [pc, #60]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a0e      	ldr	r2, [pc, #56]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bc10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc16:	f7f7 fb0b 	bl	8003230 <HAL_GetTick>
 800bc1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc1c:	e008      	b.n	800bc30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc1e:	f7f7 fb07 	bl	8003230 <HAL_GetTick>
 800bc22:	4602      	mov	r2, r0
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	d901      	bls.n	800bc30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e006      	b.n	800bc3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc30:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d0f0      	beq.n	800bc1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	58024400 	.word	0x58024400
 800bc4c:	ffff0007 	.word	0xffff0007

0800bc50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc50:	b084      	sub	sp, #16
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b084      	sub	sp, #16
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	f107 001c 	add.w	r0, r7, #28
 800bc5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d120      	bne.n	800bcaa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	68da      	ldr	r2, [r3, #12]
 800bc78:	4b2a      	ldr	r3, [pc, #168]	; (800bd24 <USB_CoreInit+0xd4>)
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bc8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d105      	bne.n	800bc9e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f001 faf8 	bl	800d294 <USB_CoreReset>
 800bca4:	4603      	mov	r3, r0
 800bca6:	73fb      	strb	r3, [r7, #15]
 800bca8:	e01a      	b.n	800bce0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f001 faec 	bl	800d294 <USB_CoreReset>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bcc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d106      	bne.n	800bcd4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	639a      	str	r2, [r3, #56]	; 0x38
 800bcd2:	e005      	b.n	800bce0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d116      	bne.n	800bd14 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcea:	b29a      	uxth	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bcf4:	4b0c      	ldr	r3, [pc, #48]	; (800bd28 <USB_CoreInit+0xd8>)
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	f043 0206 	orr.w	r2, r3, #6
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	f043 0220 	orr.w	r2, r3, #32
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bd14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd20:	b004      	add	sp, #16
 800bd22:	4770      	bx	lr
 800bd24:	ffbdffbf 	.word	0xffbdffbf
 800bd28:	03ee0000 	.word	0x03ee0000

0800bd2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b087      	sub	sp, #28
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	4613      	mov	r3, r2
 800bd38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d165      	bne.n	800be0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	4a41      	ldr	r2, [pc, #260]	; (800be48 <USB_SetTurnaroundTime+0x11c>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d906      	bls.n	800bd56 <USB_SetTurnaroundTime+0x2a>
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	4a40      	ldr	r2, [pc, #256]	; (800be4c <USB_SetTurnaroundTime+0x120>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d202      	bcs.n	800bd56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bd50:	230f      	movs	r3, #15
 800bd52:	617b      	str	r3, [r7, #20]
 800bd54:	e062      	b.n	800be1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	4a3c      	ldr	r2, [pc, #240]	; (800be4c <USB_SetTurnaroundTime+0x120>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d306      	bcc.n	800bd6c <USB_SetTurnaroundTime+0x40>
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	4a3b      	ldr	r2, [pc, #236]	; (800be50 <USB_SetTurnaroundTime+0x124>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d202      	bcs.n	800bd6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bd66:	230e      	movs	r3, #14
 800bd68:	617b      	str	r3, [r7, #20]
 800bd6a:	e057      	b.n	800be1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	4a38      	ldr	r2, [pc, #224]	; (800be50 <USB_SetTurnaroundTime+0x124>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d306      	bcc.n	800bd82 <USB_SetTurnaroundTime+0x56>
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	4a37      	ldr	r2, [pc, #220]	; (800be54 <USB_SetTurnaroundTime+0x128>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d202      	bcs.n	800bd82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bd7c:	230d      	movs	r3, #13
 800bd7e:	617b      	str	r3, [r7, #20]
 800bd80:	e04c      	b.n	800be1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	4a33      	ldr	r2, [pc, #204]	; (800be54 <USB_SetTurnaroundTime+0x128>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d306      	bcc.n	800bd98 <USB_SetTurnaroundTime+0x6c>
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	4a32      	ldr	r2, [pc, #200]	; (800be58 <USB_SetTurnaroundTime+0x12c>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d802      	bhi.n	800bd98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bd92:	230c      	movs	r3, #12
 800bd94:	617b      	str	r3, [r7, #20]
 800bd96:	e041      	b.n	800be1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	4a2f      	ldr	r2, [pc, #188]	; (800be58 <USB_SetTurnaroundTime+0x12c>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d906      	bls.n	800bdae <USB_SetTurnaroundTime+0x82>
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	4a2e      	ldr	r2, [pc, #184]	; (800be5c <USB_SetTurnaroundTime+0x130>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d802      	bhi.n	800bdae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bda8:	230b      	movs	r3, #11
 800bdaa:	617b      	str	r3, [r7, #20]
 800bdac:	e036      	b.n	800be1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	4a2a      	ldr	r2, [pc, #168]	; (800be5c <USB_SetTurnaroundTime+0x130>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d906      	bls.n	800bdc4 <USB_SetTurnaroundTime+0x98>
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	4a29      	ldr	r2, [pc, #164]	; (800be60 <USB_SetTurnaroundTime+0x134>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d802      	bhi.n	800bdc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bdbe:	230a      	movs	r3, #10
 800bdc0:	617b      	str	r3, [r7, #20]
 800bdc2:	e02b      	b.n	800be1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	4a26      	ldr	r2, [pc, #152]	; (800be60 <USB_SetTurnaroundTime+0x134>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d906      	bls.n	800bdda <USB_SetTurnaroundTime+0xae>
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	4a25      	ldr	r2, [pc, #148]	; (800be64 <USB_SetTurnaroundTime+0x138>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d202      	bcs.n	800bdda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bdd4:	2309      	movs	r3, #9
 800bdd6:	617b      	str	r3, [r7, #20]
 800bdd8:	e020      	b.n	800be1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	4a21      	ldr	r2, [pc, #132]	; (800be64 <USB_SetTurnaroundTime+0x138>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d306      	bcc.n	800bdf0 <USB_SetTurnaroundTime+0xc4>
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	4a20      	ldr	r2, [pc, #128]	; (800be68 <USB_SetTurnaroundTime+0x13c>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d802      	bhi.n	800bdf0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bdea:	2308      	movs	r3, #8
 800bdec:	617b      	str	r3, [r7, #20]
 800bdee:	e015      	b.n	800be1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	4a1d      	ldr	r2, [pc, #116]	; (800be68 <USB_SetTurnaroundTime+0x13c>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d906      	bls.n	800be06 <USB_SetTurnaroundTime+0xda>
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	4a1c      	ldr	r2, [pc, #112]	; (800be6c <USB_SetTurnaroundTime+0x140>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d202      	bcs.n	800be06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800be00:	2307      	movs	r3, #7
 800be02:	617b      	str	r3, [r7, #20]
 800be04:	e00a      	b.n	800be1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800be06:	2306      	movs	r3, #6
 800be08:	617b      	str	r3, [r7, #20]
 800be0a:	e007      	b.n	800be1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d102      	bne.n	800be18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800be12:	2309      	movs	r3, #9
 800be14:	617b      	str	r3, [r7, #20]
 800be16:	e001      	b.n	800be1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800be18:	2309      	movs	r3, #9
 800be1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	68da      	ldr	r2, [r3, #12]
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	029b      	lsls	r3, r3, #10
 800be30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800be34:	431a      	orrs	r2, r3
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	371c      	adds	r7, #28
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr
 800be48:	00d8acbf 	.word	0x00d8acbf
 800be4c:	00e4e1c0 	.word	0x00e4e1c0
 800be50:	00f42400 	.word	0x00f42400
 800be54:	01067380 	.word	0x01067380
 800be58:	011a499f 	.word	0x011a499f
 800be5c:	01312cff 	.word	0x01312cff
 800be60:	014ca43f 	.word	0x014ca43f
 800be64:	016e3600 	.word	0x016e3600
 800be68:	01a6ab1f 	.word	0x01a6ab1f
 800be6c:	01e84800 	.word	0x01e84800

0800be70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be70:	b480      	push	{r7}
 800be72:	b083      	sub	sp, #12
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	f043 0201 	orr.w	r2, r3, #1
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be92:	b480      	push	{r7}
 800be94:	b083      	sub	sp, #12
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	f023 0201 	bic.w	r2, r3, #1
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	460b      	mov	r3, r1
 800bebe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bec0:	2300      	movs	r3, #0
 800bec2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bed0:	78fb      	ldrb	r3, [r7, #3]
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d115      	bne.n	800bf02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bee2:	2001      	movs	r0, #1
 800bee4:	f7f7 f9b0 	bl	8003248 <HAL_Delay>
      ms++;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	3301      	adds	r3, #1
 800beec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f001 f93f 	bl	800d172 <USB_GetMode>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d01e      	beq.n	800bf38 <USB_SetCurrentMode+0x84>
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2b31      	cmp	r3, #49	; 0x31
 800befe:	d9f0      	bls.n	800bee2 <USB_SetCurrentMode+0x2e>
 800bf00:	e01a      	b.n	800bf38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bf02:	78fb      	ldrb	r3, [r7, #3]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d115      	bne.n	800bf34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bf14:	2001      	movs	r0, #1
 800bf16:	f7f7 f997 	bl	8003248 <HAL_Delay>
      ms++;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f001 f926 	bl	800d172 <USB_GetMode>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d005      	beq.n	800bf38 <USB_SetCurrentMode+0x84>
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2b31      	cmp	r3, #49	; 0x31
 800bf30:	d9f0      	bls.n	800bf14 <USB_SetCurrentMode+0x60>
 800bf32:	e001      	b.n	800bf38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	e005      	b.n	800bf44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2b32      	cmp	r3, #50	; 0x32
 800bf3c:	d101      	bne.n	800bf42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e000      	b.n	800bf44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3710      	adds	r7, #16
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf4c:	b084      	sub	sp, #16
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b086      	sub	sp, #24
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bf5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bf66:	2300      	movs	r3, #0
 800bf68:	613b      	str	r3, [r7, #16]
 800bf6a:	e009      	b.n	800bf80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	3340      	adds	r3, #64	; 0x40
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4413      	add	r3, r2
 800bf76:	2200      	movs	r2, #0
 800bf78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	613b      	str	r3, [r7, #16]
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	2b0e      	cmp	r3, #14
 800bf84:	d9f2      	bls.n	800bf6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bf86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d11c      	bne.n	800bfc6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf9a:	f043 0302 	orr.w	r3, r3, #2
 800bf9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	e005      	b.n	800bfd2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfd8:	461a      	mov	r2, r3
 800bfda:	2300      	movs	r3, #0
 800bfdc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfec:	461a      	mov	r2, r3
 800bfee:	680b      	ldr	r3, [r1, #0]
 800bff0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d10c      	bne.n	800c012 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d104      	bne.n	800c008 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bffe:	2100      	movs	r1, #0
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 f965 	bl	800c2d0 <USB_SetDevSpeed>
 800c006:	e008      	b.n	800c01a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c008:	2101      	movs	r1, #1
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 f960 	bl	800c2d0 <USB_SetDevSpeed>
 800c010:	e003      	b.n	800c01a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c012:	2103      	movs	r1, #3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f95b 	bl	800c2d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c01a:	2110      	movs	r1, #16
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 f8f3 	bl	800c208 <USB_FlushTxFifo>
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d001      	beq.n	800c02c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 f91f 	bl	800c270 <USB_FlushRxFifo>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d001      	beq.n	800c03c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c042:	461a      	mov	r2, r3
 800c044:	2300      	movs	r3, #0
 800c046:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c04e:	461a      	mov	r2, r3
 800c050:	2300      	movs	r3, #0
 800c052:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c05a:	461a      	mov	r2, r3
 800c05c:	2300      	movs	r3, #0
 800c05e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c060:	2300      	movs	r3, #0
 800c062:	613b      	str	r3, [r7, #16]
 800c064:	e043      	b.n	800c0ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	015a      	lsls	r2, r3, #5
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	4413      	add	r3, r2
 800c06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c07c:	d118      	bne.n	800c0b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d10a      	bne.n	800c09a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	015a      	lsls	r2, r3, #5
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	4413      	add	r3, r2
 800c08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c090:	461a      	mov	r2, r3
 800c092:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c096:	6013      	str	r3, [r2, #0]
 800c098:	e013      	b.n	800c0c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	015a      	lsls	r2, r3, #5
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c0ac:	6013      	str	r3, [r2, #0]
 800c0ae:	e008      	b.n	800c0c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	015a      	lsls	r2, r3, #5
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0bc:	461a      	mov	r2, r3
 800c0be:	2300      	movs	r3, #0
 800c0c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	015a      	lsls	r2, r3, #5
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	015a      	lsls	r2, r3, #5
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	4413      	add	r3, r2
 800c0dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c0e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	613b      	str	r3, [r7, #16]
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	693a      	ldr	r2, [r7, #16]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d3b7      	bcc.n	800c066 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	613b      	str	r3, [r7, #16]
 800c0fa:	e043      	b.n	800c184 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	015a      	lsls	r2, r3, #5
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	4413      	add	r3, r2
 800c104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c10e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c112:	d118      	bne.n	800c146 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10a      	bne.n	800c130 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	015a      	lsls	r2, r3, #5
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	4413      	add	r3, r2
 800c122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c126:	461a      	mov	r2, r3
 800c128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c12c:	6013      	str	r3, [r2, #0]
 800c12e:	e013      	b.n	800c158 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	015a      	lsls	r2, r3, #5
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	4413      	add	r3, r2
 800c138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c13c:	461a      	mov	r2, r3
 800c13e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c142:	6013      	str	r3, [r2, #0]
 800c144:	e008      	b.n	800c158 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	015a      	lsls	r2, r3, #5
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	4413      	add	r3, r2
 800c14e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c152:	461a      	mov	r2, r3
 800c154:	2300      	movs	r3, #0
 800c156:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	015a      	lsls	r2, r3, #5
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	4413      	add	r3, r2
 800c160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c164:	461a      	mov	r2, r3
 800c166:	2300      	movs	r3, #0
 800c168:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	015a      	lsls	r2, r3, #5
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	4413      	add	r3, r2
 800c172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c176:	461a      	mov	r2, r3
 800c178:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c17c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	3301      	adds	r3, #1
 800c182:	613b      	str	r3, [r7, #16]
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	693a      	ldr	r2, [r7, #16]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d3b7      	bcc.n	800c0fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c19a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c19e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c1ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d105      	bne.n	800c1c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	699b      	ldr	r3, [r3, #24]
 800c1b8:	f043 0210 	orr.w	r2, r3, #16
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	699a      	ldr	r2, [r3, #24]
 800c1c4:	4b0e      	ldr	r3, [pc, #56]	; (800c200 <USB_DevInit+0x2b4>)
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d005      	beq.n	800c1de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	f043 0208 	orr.w	r2, r3, #8
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c1de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d105      	bne.n	800c1f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	699a      	ldr	r2, [r3, #24]
 800c1e8:	4b06      	ldr	r3, [pc, #24]	; (800c204 <USB_DevInit+0x2b8>)
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c1f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3718      	adds	r7, #24
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c1fc:	b004      	add	sp, #16
 800c1fe:	4770      	bx	lr
 800c200:	803c3800 	.word	0x803c3800
 800c204:	40000004 	.word	0x40000004

0800c208 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c212:	2300      	movs	r3, #0
 800c214:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	3301      	adds	r3, #1
 800c21a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	4a13      	ldr	r2, [pc, #76]	; (800c26c <USB_FlushTxFifo+0x64>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d901      	bls.n	800c228 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c224:	2303      	movs	r3, #3
 800c226:	e01b      	b.n	800c260 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	daf2      	bge.n	800c216 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c230:	2300      	movs	r3, #0
 800c232:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	019b      	lsls	r3, r3, #6
 800c238:	f043 0220 	orr.w	r2, r3, #32
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	3301      	adds	r3, #1
 800c244:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	4a08      	ldr	r2, [pc, #32]	; (800c26c <USB_FlushTxFifo+0x64>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d901      	bls.n	800c252 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c24e:	2303      	movs	r3, #3
 800c250:	e006      	b.n	800c260 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	691b      	ldr	r3, [r3, #16]
 800c256:	f003 0320 	and.w	r3, r3, #32
 800c25a:	2b20      	cmp	r3, #32
 800c25c:	d0f0      	beq.n	800c240 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3714      	adds	r7, #20
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr
 800c26c:	00030d40 	.word	0x00030d40

0800c270 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c278:	2300      	movs	r3, #0
 800c27a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	3301      	adds	r3, #1
 800c280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	4a11      	ldr	r2, [pc, #68]	; (800c2cc <USB_FlushRxFifo+0x5c>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d901      	bls.n	800c28e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c28a:	2303      	movs	r3, #3
 800c28c:	e018      	b.n	800c2c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	2b00      	cmp	r3, #0
 800c294:	daf2      	bge.n	800c27c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c296:	2300      	movs	r3, #0
 800c298:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2210      	movs	r2, #16
 800c29e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	4a08      	ldr	r2, [pc, #32]	; (800c2cc <USB_FlushRxFifo+0x5c>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d901      	bls.n	800c2b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	e006      	b.n	800c2c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	f003 0310 	and.w	r3, r3, #16
 800c2ba:	2b10      	cmp	r3, #16
 800c2bc:	d0f0      	beq.n	800c2a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	00030d40 	.word	0x00030d40

0800c2d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	460b      	mov	r3, r1
 800c2da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	78fb      	ldrb	r3, [r7, #3]
 800c2ea:	68f9      	ldr	r1, [r7, #12]
 800c2ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3714      	adds	r7, #20
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr

0800c302 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c302:	b480      	push	{r7}
 800c304:	b087      	sub	sp, #28
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	f003 0306 	and.w	r3, r3, #6
 800c31a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d102      	bne.n	800c328 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c322:	2300      	movs	r3, #0
 800c324:	75fb      	strb	r3, [r7, #23]
 800c326:	e00a      	b.n	800c33e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d002      	beq.n	800c334 <USB_GetDevSpeed+0x32>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2b06      	cmp	r3, #6
 800c332:	d102      	bne.n	800c33a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c334:	2302      	movs	r3, #2
 800c336:	75fb      	strb	r3, [r7, #23]
 800c338:	e001      	b.n	800c33e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c33a:	230f      	movs	r3, #15
 800c33c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c33e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c340:	4618      	mov	r0, r3
 800c342:	371c      	adds	r7, #28
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	785b      	ldrb	r3, [r3, #1]
 800c364:	2b01      	cmp	r3, #1
 800c366:	d139      	bne.n	800c3dc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c36e:	69da      	ldr	r2, [r3, #28]
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	f003 030f 	and.w	r3, r3, #15
 800c378:	2101      	movs	r1, #1
 800c37a:	fa01 f303 	lsl.w	r3, r1, r3
 800c37e:	b29b      	uxth	r3, r3
 800c380:	68f9      	ldr	r1, [r7, #12]
 800c382:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c386:	4313      	orrs	r3, r2
 800c388:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	015a      	lsls	r2, r3, #5
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	4413      	add	r3, r2
 800c392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d153      	bne.n	800c448 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	015a      	lsls	r2, r3, #5
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	791b      	ldrb	r3, [r3, #4]
 800c3ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c3bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	059b      	lsls	r3, r3, #22
 800c3c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c3c4:	431a      	orrs	r2, r3
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	0159      	lsls	r1, r3, #5
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	440b      	add	r3, r1
 800c3ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	4b20      	ldr	r3, [pc, #128]	; (800c458 <USB_ActivateEndpoint+0x10c>)
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	600b      	str	r3, [r1, #0]
 800c3da:	e035      	b.n	800c448 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3e2:	69da      	ldr	r2, [r3, #28]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	f003 030f 	and.w	r3, r3, #15
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	fa01 f303 	lsl.w	r3, r1, r3
 800c3f2:	041b      	lsls	r3, r3, #16
 800c3f4:	68f9      	ldr	r1, [r7, #12]
 800c3f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	015a      	lsls	r2, r3, #5
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	4413      	add	r3, r2
 800c406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c410:	2b00      	cmp	r3, #0
 800c412:	d119      	bne.n	800c448 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	015a      	lsls	r2, r3, #5
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	4413      	add	r3, r2
 800c41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	791b      	ldrb	r3, [r3, #4]
 800c42e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c430:	430b      	orrs	r3, r1
 800c432:	431a      	orrs	r2, r3
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	0159      	lsls	r1, r3, #5
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	440b      	add	r3, r1
 800c43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c440:	4619      	mov	r1, r3
 800c442:	4b05      	ldr	r3, [pc, #20]	; (800c458 <USB_ActivateEndpoint+0x10c>)
 800c444:	4313      	orrs	r3, r2
 800c446:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3714      	adds	r7, #20
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	10008000 	.word	0x10008000

0800c45c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b085      	sub	sp, #20
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	785b      	ldrb	r3, [r3, #1]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d161      	bne.n	800c53c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	015a      	lsls	r2, r3, #5
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	4413      	add	r3, r2
 800c480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c48a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c48e:	d11f      	bne.n	800c4d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	015a      	lsls	r2, r3, #5
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	4413      	add	r3, r2
 800c498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	0151      	lsls	r1, r2, #5
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	440a      	add	r2, r1
 800c4a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c4ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	015a      	lsls	r2, r3, #5
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68ba      	ldr	r2, [r7, #8]
 800c4c0:	0151      	lsls	r1, r2, #5
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	440a      	add	r2, r1
 800c4c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c4ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	f003 030f 	and.w	r3, r3, #15
 800c4e0:	2101      	movs	r1, #1
 800c4e2:	fa01 f303 	lsl.w	r3, r1, r3
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	43db      	mvns	r3, r3
 800c4ea:	68f9      	ldr	r1, [r7, #12]
 800c4ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4fa:	69da      	ldr	r2, [r3, #28]
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	f003 030f 	and.w	r3, r3, #15
 800c504:	2101      	movs	r1, #1
 800c506:	fa01 f303 	lsl.w	r3, r1, r3
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	43db      	mvns	r3, r3
 800c50e:	68f9      	ldr	r1, [r7, #12]
 800c510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c514:	4013      	ands	r3, r2
 800c516:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	015a      	lsls	r2, r3, #5
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	4413      	add	r3, r2
 800c520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	0159      	lsls	r1, r3, #5
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	440b      	add	r3, r1
 800c52e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c532:	4619      	mov	r1, r3
 800c534:	4b35      	ldr	r3, [pc, #212]	; (800c60c <USB_DeactivateEndpoint+0x1b0>)
 800c536:	4013      	ands	r3, r2
 800c538:	600b      	str	r3, [r1, #0]
 800c53a:	e060      	b.n	800c5fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	015a      	lsls	r2, r3, #5
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	4413      	add	r3, r2
 800c544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c54e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c552:	d11f      	bne.n	800c594 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	015a      	lsls	r2, r3, #5
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	4413      	add	r3, r2
 800c55c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	0151      	lsls	r1, r2, #5
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	440a      	add	r2, r1
 800c56a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c56e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c572:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	015a      	lsls	r2, r3, #5
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	4413      	add	r3, r2
 800c57c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	0151      	lsls	r1, r2, #5
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	440a      	add	r2, r1
 800c58a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c58e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c592:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c59a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	f003 030f 	and.w	r3, r3, #15
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c5aa:	041b      	lsls	r3, r3, #16
 800c5ac:	43db      	mvns	r3, r3
 800c5ae:	68f9      	ldr	r1, [r7, #12]
 800c5b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5be:	69da      	ldr	r2, [r3, #28]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	f003 030f 	and.w	r3, r3, #15
 800c5c8:	2101      	movs	r1, #1
 800c5ca:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ce:	041b      	lsls	r3, r3, #16
 800c5d0:	43db      	mvns	r3, r3
 800c5d2:	68f9      	ldr	r1, [r7, #12]
 800c5d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5d8:	4013      	ands	r3, r2
 800c5da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	015a      	lsls	r2, r3, #5
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	0159      	lsls	r1, r3, #5
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	440b      	add	r3, r1
 800c5f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	4b05      	ldr	r3, [pc, #20]	; (800c610 <USB_DeactivateEndpoint+0x1b4>)
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3714      	adds	r7, #20
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	ec337800 	.word	0xec337800
 800c610:	eff37800 	.word	0xeff37800

0800c614 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b08a      	sub	sp, #40	; 0x28
 800c618:	af02      	add	r7, sp, #8
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	4613      	mov	r3, r2
 800c620:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	785b      	ldrb	r3, [r3, #1]
 800c630:	2b01      	cmp	r3, #1
 800c632:	f040 8181 	bne.w	800c938 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	691b      	ldr	r3, [r3, #16]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d132      	bne.n	800c6a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	015a      	lsls	r2, r3, #5
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	4413      	add	r3, r2
 800c646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c64a:	691a      	ldr	r2, [r3, #16]
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	0159      	lsls	r1, r3, #5
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	440b      	add	r3, r1
 800c654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c658:	4619      	mov	r1, r3
 800c65a:	4ba5      	ldr	r3, [pc, #660]	; (800c8f0 <USB_EPStartXfer+0x2dc>)
 800c65c:	4013      	ands	r3, r2
 800c65e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	015a      	lsls	r2, r3, #5
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	4413      	add	r3, r2
 800c668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c66c:	691b      	ldr	r3, [r3, #16]
 800c66e:	69ba      	ldr	r2, [r7, #24]
 800c670:	0151      	lsls	r1, r2, #5
 800c672:	69fa      	ldr	r2, [r7, #28]
 800c674:	440a      	add	r2, r1
 800c676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c67a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c67e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	015a      	lsls	r2, r3, #5
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	4413      	add	r3, r2
 800c688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c68c:	691a      	ldr	r2, [r3, #16]
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	0159      	lsls	r1, r3, #5
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	440b      	add	r3, r1
 800c696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c69a:	4619      	mov	r1, r3
 800c69c:	4b95      	ldr	r3, [pc, #596]	; (800c8f4 <USB_EPStartXfer+0x2e0>)
 800c69e:	4013      	ands	r3, r2
 800c6a0:	610b      	str	r3, [r1, #16]
 800c6a2:	e092      	b.n	800c7ca <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	015a      	lsls	r2, r3, #5
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b0:	691a      	ldr	r2, [r3, #16]
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	0159      	lsls	r1, r3, #5
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	440b      	add	r3, r1
 800c6ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6be:	4619      	mov	r1, r3
 800c6c0:	4b8c      	ldr	r3, [pc, #560]	; (800c8f4 <USB_EPStartXfer+0x2e0>)
 800c6c2:	4013      	ands	r3, r2
 800c6c4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	015a      	lsls	r2, r3, #5
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6d2:	691a      	ldr	r2, [r3, #16]
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	0159      	lsls	r1, r3, #5
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	440b      	add	r3, r1
 800c6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	4b83      	ldr	r3, [pc, #524]	; (800c8f0 <USB_EPStartXfer+0x2dc>)
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d11a      	bne.n	800c724 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	691a      	ldr	r2, [r3, #16]
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d903      	bls.n	800c702 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	689a      	ldr	r2, [r3, #8]
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	015a      	lsls	r2, r3, #5
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	4413      	add	r3, r2
 800c70a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	69ba      	ldr	r2, [r7, #24]
 800c712:	0151      	lsls	r1, r2, #5
 800c714:	69fa      	ldr	r2, [r7, #28]
 800c716:	440a      	add	r2, r1
 800c718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c71c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c720:	6113      	str	r3, [r2, #16]
 800c722:	e01b      	b.n	800c75c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	015a      	lsls	r2, r3, #5
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	4413      	add	r3, r2
 800c72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c730:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	6919      	ldr	r1, [r3, #16]
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	440b      	add	r3, r1
 800c73c:	1e59      	subs	r1, r3, #1
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	fbb1 f3f3 	udiv	r3, r1, r3
 800c746:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c748:	4b6b      	ldr	r3, [pc, #428]	; (800c8f8 <USB_EPStartXfer+0x2e4>)
 800c74a:	400b      	ands	r3, r1
 800c74c:	69b9      	ldr	r1, [r7, #24]
 800c74e:	0148      	lsls	r0, r1, #5
 800c750:	69f9      	ldr	r1, [r7, #28]
 800c752:	4401      	add	r1, r0
 800c754:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c758:	4313      	orrs	r3, r2
 800c75a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	015a      	lsls	r2, r3, #5
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	4413      	add	r3, r2
 800c764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c768:	691a      	ldr	r2, [r3, #16]
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c772:	69b9      	ldr	r1, [r7, #24]
 800c774:	0148      	lsls	r0, r1, #5
 800c776:	69f9      	ldr	r1, [r7, #28]
 800c778:	4401      	add	r1, r0
 800c77a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c77e:	4313      	orrs	r3, r2
 800c780:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	791b      	ldrb	r3, [r3, #4]
 800c786:	2b01      	cmp	r3, #1
 800c788:	d11f      	bne.n	800c7ca <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	015a      	lsls	r2, r3, #5
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	4413      	add	r3, r2
 800c792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	69ba      	ldr	r2, [r7, #24]
 800c79a:	0151      	lsls	r1, r2, #5
 800c79c:	69fa      	ldr	r2, [r7, #28]
 800c79e:	440a      	add	r2, r1
 800c7a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c7a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	015a      	lsls	r2, r3, #5
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	69ba      	ldr	r2, [r7, #24]
 800c7ba:	0151      	lsls	r1, r2, #5
 800c7bc:	69fa      	ldr	r2, [r7, #28]
 800c7be:	440a      	add	r2, r1
 800c7c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c7ca:	79fb      	ldrb	r3, [r7, #7]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d14b      	bne.n	800c868 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	69db      	ldr	r3, [r3, #28]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d009      	beq.n	800c7ec <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	015a      	lsls	r2, r3, #5
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	4413      	add	r3, r2
 800c7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	69db      	ldr	r3, [r3, #28]
 800c7ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	791b      	ldrb	r3, [r3, #4]
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d128      	bne.n	800c846 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c800:	2b00      	cmp	r3, #0
 800c802:	d110      	bne.n	800c826 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	015a      	lsls	r2, r3, #5
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	4413      	add	r3, r2
 800c80c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	69ba      	ldr	r2, [r7, #24]
 800c814:	0151      	lsls	r1, r2, #5
 800c816:	69fa      	ldr	r2, [r7, #28]
 800c818:	440a      	add	r2, r1
 800c81a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c81e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c822:	6013      	str	r3, [r2, #0]
 800c824:	e00f      	b.n	800c846 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	015a      	lsls	r2, r3, #5
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	4413      	add	r3, r2
 800c82e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	69ba      	ldr	r2, [r7, #24]
 800c836:	0151      	lsls	r1, r2, #5
 800c838:	69fa      	ldr	r2, [r7, #28]
 800c83a:	440a      	add	r2, r1
 800c83c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c844:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	015a      	lsls	r2, r3, #5
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	4413      	add	r3, r2
 800c84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	69ba      	ldr	r2, [r7, #24]
 800c856:	0151      	lsls	r1, r2, #5
 800c858:	69fa      	ldr	r2, [r7, #28]
 800c85a:	440a      	add	r2, r1
 800c85c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c860:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c864:	6013      	str	r3, [r2, #0]
 800c866:	e16a      	b.n	800cb3e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	015a      	lsls	r2, r3, #5
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	4413      	add	r3, r2
 800c870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	69ba      	ldr	r2, [r7, #24]
 800c878:	0151      	lsls	r1, r2, #5
 800c87a:	69fa      	ldr	r2, [r7, #28]
 800c87c:	440a      	add	r2, r1
 800c87e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c882:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c886:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	791b      	ldrb	r3, [r3, #4]
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d015      	beq.n	800c8bc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 8152 	beq.w	800cb3e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	f003 030f 	and.w	r3, r3, #15
 800c8aa:	2101      	movs	r1, #1
 800c8ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c8b0:	69f9      	ldr	r1, [r7, #28]
 800c8b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	634b      	str	r3, [r1, #52]	; 0x34
 800c8ba:	e140      	b.n	800cb3e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d117      	bne.n	800c8fc <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	015a      	lsls	r2, r3, #5
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	69ba      	ldr	r2, [r7, #24]
 800c8dc:	0151      	lsls	r1, r2, #5
 800c8de:	69fa      	ldr	r2, [r7, #28]
 800c8e0:	440a      	add	r2, r1
 800c8e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c8ea:	6013      	str	r3, [r2, #0]
 800c8ec:	e016      	b.n	800c91c <USB_EPStartXfer+0x308>
 800c8ee:	bf00      	nop
 800c8f0:	e007ffff 	.word	0xe007ffff
 800c8f4:	fff80000 	.word	0xfff80000
 800c8f8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	015a      	lsls	r2, r3, #5
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	4413      	add	r3, r2
 800c904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	69ba      	ldr	r2, [r7, #24]
 800c90c:	0151      	lsls	r1, r2, #5
 800c90e:	69fa      	ldr	r2, [r7, #28]
 800c910:	440a      	add	r2, r1
 800c912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c91a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	68d9      	ldr	r1, [r3, #12]
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	781a      	ldrb	r2, [r3, #0]
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	b298      	uxth	r0, r3
 800c92a:	79fb      	ldrb	r3, [r7, #7]
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	4603      	mov	r3, r0
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f000 f9b9 	bl	800cca8 <USB_WritePacket>
 800c936:	e102      	b.n	800cb3e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	015a      	lsls	r2, r3, #5
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	4413      	add	r3, r2
 800c940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c944:	691a      	ldr	r2, [r3, #16]
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	0159      	lsls	r1, r3, #5
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	440b      	add	r3, r1
 800c94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c952:	4619      	mov	r1, r3
 800c954:	4b7c      	ldr	r3, [pc, #496]	; (800cb48 <USB_EPStartXfer+0x534>)
 800c956:	4013      	ands	r3, r2
 800c958:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	015a      	lsls	r2, r3, #5
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	4413      	add	r3, r2
 800c962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c966:	691a      	ldr	r2, [r3, #16]
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	0159      	lsls	r1, r3, #5
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	440b      	add	r3, r1
 800c970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c974:	4619      	mov	r1, r3
 800c976:	4b75      	ldr	r3, [pc, #468]	; (800cb4c <USB_EPStartXfer+0x538>)
 800c978:	4013      	ands	r3, r2
 800c97a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d12f      	bne.n	800c9e2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d003      	beq.n	800c992 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	689a      	ldr	r2, [r3, #8]
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	689a      	ldr	r2, [r3, #8]
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	015a      	lsls	r2, r3, #5
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a6:	691a      	ldr	r2, [r3, #16]
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	6a1b      	ldr	r3, [r3, #32]
 800c9ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9b0:	69b9      	ldr	r1, [r7, #24]
 800c9b2:	0148      	lsls	r0, r1, #5
 800c9b4:	69f9      	ldr	r1, [r7, #28]
 800c9b6:	4401      	add	r1, r0
 800c9b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	015a      	lsls	r2, r3, #5
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	69ba      	ldr	r2, [r7, #24]
 800c9d0:	0151      	lsls	r1, r2, #5
 800c9d2:	69fa      	ldr	r2, [r7, #28]
 800c9d4:	440a      	add	r2, r1
 800c9d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9de:	6113      	str	r3, [r2, #16]
 800c9e0:	e05f      	b.n	800caa2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	691b      	ldr	r3, [r3, #16]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d123      	bne.n	800ca32 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	015a      	lsls	r2, r3, #5
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9f6:	691a      	ldr	r2, [r3, #16]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca00:	69b9      	ldr	r1, [r7, #24]
 800ca02:	0148      	lsls	r0, r1, #5
 800ca04:	69f9      	ldr	r1, [r7, #28]
 800ca06:	4401      	add	r1, r0
 800ca08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	015a      	lsls	r2, r3, #5
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	4413      	add	r3, r2
 800ca18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca1c:	691b      	ldr	r3, [r3, #16]
 800ca1e:	69ba      	ldr	r2, [r7, #24]
 800ca20:	0151      	lsls	r1, r2, #5
 800ca22:	69fa      	ldr	r2, [r7, #28]
 800ca24:	440a      	add	r2, r1
 800ca26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca2e:	6113      	str	r3, [r2, #16]
 800ca30:	e037      	b.n	800caa2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	691a      	ldr	r2, [r3, #16]
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	1e5a      	subs	r2, r3, #1
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca46:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	8afa      	ldrh	r2, [r7, #22]
 800ca4e:	fb03 f202 	mul.w	r2, r3, r2
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	015a      	lsls	r2, r3, #5
 800ca5a:	69fb      	ldr	r3, [r7, #28]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca62:	691a      	ldr	r2, [r3, #16]
 800ca64:	8afb      	ldrh	r3, [r7, #22]
 800ca66:	04d9      	lsls	r1, r3, #19
 800ca68:	4b39      	ldr	r3, [pc, #228]	; (800cb50 <USB_EPStartXfer+0x53c>)
 800ca6a:	400b      	ands	r3, r1
 800ca6c:	69b9      	ldr	r1, [r7, #24]
 800ca6e:	0148      	lsls	r0, r1, #5
 800ca70:	69f9      	ldr	r1, [r7, #28]
 800ca72:	4401      	add	r1, r0
 800ca74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	015a      	lsls	r2, r3, #5
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	4413      	add	r3, r2
 800ca84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca88:	691a      	ldr	r2, [r3, #16]
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca92:	69b9      	ldr	r1, [r7, #24]
 800ca94:	0148      	lsls	r0, r1, #5
 800ca96:	69f9      	ldr	r1, [r7, #28]
 800ca98:	4401      	add	r1, r0
 800ca9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800caa2:	79fb      	ldrb	r3, [r7, #7]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d10d      	bne.n	800cac4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d009      	beq.n	800cac4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	68d9      	ldr	r1, [r3, #12]
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	015a      	lsls	r2, r3, #5
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	4413      	add	r3, r2
 800cabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cac0:	460a      	mov	r2, r1
 800cac2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	791b      	ldrb	r3, [r3, #4]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d128      	bne.n	800cb1e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d110      	bne.n	800cafe <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	015a      	lsls	r2, r3, #5
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	4413      	add	r3, r2
 800cae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	69ba      	ldr	r2, [r7, #24]
 800caec:	0151      	lsls	r1, r2, #5
 800caee:	69fa      	ldr	r2, [r7, #28]
 800caf0:	440a      	add	r2, r1
 800caf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cafa:	6013      	str	r3, [r2, #0]
 800cafc:	e00f      	b.n	800cb1e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	015a      	lsls	r2, r3, #5
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	4413      	add	r3, r2
 800cb06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	69ba      	ldr	r2, [r7, #24]
 800cb0e:	0151      	lsls	r1, r2, #5
 800cb10:	69fa      	ldr	r2, [r7, #28]
 800cb12:	440a      	add	r2, r1
 800cb14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb1c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	015a      	lsls	r2, r3, #5
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	4413      	add	r3, r2
 800cb26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	69ba      	ldr	r2, [r7, #24]
 800cb2e:	0151      	lsls	r1, r2, #5
 800cb30:	69fa      	ldr	r2, [r7, #28]
 800cb32:	440a      	add	r2, r1
 800cb34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3720      	adds	r7, #32
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	fff80000 	.word	0xfff80000
 800cb4c:	e007ffff 	.word	0xe007ffff
 800cb50:	1ff80000 	.word	0x1ff80000

0800cb54 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b087      	sub	sp, #28
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	785b      	ldrb	r3, [r3, #1]
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d14a      	bne.n	800cc08 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	015a      	lsls	r2, r3, #5
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb8a:	f040 8086 	bne.w	800cc9a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	015a      	lsls	r2, r3, #5
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	4413      	add	r3, r2
 800cb98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	683a      	ldr	r2, [r7, #0]
 800cba0:	7812      	ldrb	r2, [r2, #0]
 800cba2:	0151      	lsls	r1, r2, #5
 800cba4:	693a      	ldr	r2, [r7, #16]
 800cba6:	440a      	add	r2, r1
 800cba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cbb0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	015a      	lsls	r2, r3, #5
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	4413      	add	r3, r2
 800cbbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	683a      	ldr	r2, [r7, #0]
 800cbc4:	7812      	ldrb	r2, [r2, #0]
 800cbc6:	0151      	lsls	r1, r2, #5
 800cbc8:	693a      	ldr	r2, [r7, #16]
 800cbca:	440a      	add	r2, r1
 800cbcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f242 7210 	movw	r2, #10000	; 0x2710
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d902      	bls.n	800cbec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	75fb      	strb	r3, [r7, #23]
          break;
 800cbea:	e056      	b.n	800cc9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	015a      	lsls	r2, r3, #5
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc04:	d0e7      	beq.n	800cbd6 <USB_EPStopXfer+0x82>
 800cc06:	e048      	b.n	800cc9a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	015a      	lsls	r2, r3, #5
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	4413      	add	r3, r2
 800cc12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc20:	d13b      	bne.n	800cc9a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	015a      	lsls	r2, r3, #5
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	7812      	ldrb	r2, [r2, #0]
 800cc36:	0151      	lsls	r1, r2, #5
 800cc38:	693a      	ldr	r2, [r7, #16]
 800cc3a:	440a      	add	r2, r1
 800cc3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc44:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	015a      	lsls	r2, r3, #5
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	4413      	add	r3, r2
 800cc50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	683a      	ldr	r2, [r7, #0]
 800cc58:	7812      	ldrb	r2, [r2, #0]
 800cc5a:	0151      	lsls	r1, r2, #5
 800cc5c:	693a      	ldr	r2, [r7, #16]
 800cc5e:	440a      	add	r2, r1
 800cc60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f242 7210 	movw	r2, #10000	; 0x2710
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d902      	bls.n	800cc80 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	75fb      	strb	r3, [r7, #23]
          break;
 800cc7e:	e00c      	b.n	800cc9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	015a      	lsls	r2, r3, #5
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	4413      	add	r3, r2
 800cc8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc98:	d0e7      	beq.n	800cc6a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	371c      	adds	r7, #28
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b089      	sub	sp, #36	; 0x24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	71fb      	strb	r3, [r7, #7]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ccc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d123      	bne.n	800cd16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ccce:	88bb      	ldrh	r3, [r7, #4]
 800ccd0:	3303      	adds	r3, #3
 800ccd2:	089b      	lsrs	r3, r3, #2
 800ccd4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	61bb      	str	r3, [r7, #24]
 800ccda:	e018      	b.n	800cd0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ccdc:	79fb      	ldrb	r3, [r7, #7]
 800ccde:	031a      	lsls	r2, r3, #12
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	4413      	add	r3, r2
 800cce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cce8:	461a      	mov	r2, r3
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	3301      	adds	r3, #1
 800cd06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	61bb      	str	r3, [r7, #24]
 800cd0e:	69ba      	ldr	r2, [r7, #24]
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d3e2      	bcc.n	800ccdc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3724      	adds	r7, #36	; 0x24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b08b      	sub	sp, #44	; 0x2c
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	4613      	mov	r3, r2
 800cd30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cd3a:	88fb      	ldrh	r3, [r7, #6]
 800cd3c:	089b      	lsrs	r3, r3, #2
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cd42:	88fb      	ldrh	r3, [r7, #6]
 800cd44:	f003 0303 	and.w	r3, r3, #3
 800cd48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	623b      	str	r3, [r7, #32]
 800cd4e:	e014      	b.n	800cd7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5a:	601a      	str	r2, [r3, #0]
    pDest++;
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5e:	3301      	adds	r3, #1
 800cd60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd64:	3301      	adds	r3, #1
 800cd66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd70:	3301      	adds	r3, #1
 800cd72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cd74:	6a3b      	ldr	r3, [r7, #32]
 800cd76:	3301      	adds	r3, #1
 800cd78:	623b      	str	r3, [r7, #32]
 800cd7a:	6a3a      	ldr	r2, [r7, #32]
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d3e6      	bcc.n	800cd50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cd82:	8bfb      	ldrh	r3, [r7, #30]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d01e      	beq.n	800cdc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cd8c:	69bb      	ldr	r3, [r7, #24]
 800cd8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd92:	461a      	mov	r2, r3
 800cd94:	f107 0310 	add.w	r3, r7, #16
 800cd98:	6812      	ldr	r2, [r2, #0]
 800cd9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cd9c:	693a      	ldr	r2, [r7, #16]
 800cd9e:	6a3b      	ldr	r3, [r7, #32]
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	00db      	lsls	r3, r3, #3
 800cda4:	fa22 f303 	lsr.w	r3, r2, r3
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdac:	701a      	strb	r2, [r3, #0]
      i++;
 800cdae:	6a3b      	ldr	r3, [r7, #32]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	623b      	str	r3, [r7, #32]
      pDest++;
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cdba:	8bfb      	ldrh	r3, [r7, #30]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cdc0:	8bfb      	ldrh	r3, [r7, #30]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1ea      	bne.n	800cd9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	372c      	adds	r7, #44	; 0x2c
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	785b      	ldrb	r3, [r3, #1]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d12c      	bne.n	800ce4a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	015a      	lsls	r2, r3, #5
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	db12      	blt.n	800ce28 <USB_EPSetStall+0x54>
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00f      	beq.n	800ce28 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	015a      	lsls	r2, r3, #5
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	4413      	add	r3, r2
 800ce10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	0151      	lsls	r1, r2, #5
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	440a      	add	r2, r1
 800ce1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce26:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	015a      	lsls	r2, r3, #5
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	4413      	add	r3, r2
 800ce30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68ba      	ldr	r2, [r7, #8]
 800ce38:	0151      	lsls	r1, r2, #5
 800ce3a:	68fa      	ldr	r2, [r7, #12]
 800ce3c:	440a      	add	r2, r1
 800ce3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce46:	6013      	str	r3, [r2, #0]
 800ce48:	e02b      	b.n	800cea2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	015a      	lsls	r2, r3, #5
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	4413      	add	r3, r2
 800ce52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	db12      	blt.n	800ce82 <USB_EPSetStall+0xae>
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00f      	beq.n	800ce82 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	015a      	lsls	r2, r3, #5
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	4413      	add	r3, r2
 800ce6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	0151      	lsls	r1, r2, #5
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	440a      	add	r2, r1
 800ce78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce80:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	015a      	lsls	r2, r3, #5
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	4413      	add	r3, r2
 800ce8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	0151      	lsls	r1, r2, #5
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	440a      	add	r2, r1
 800ce98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cea0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cea2:	2300      	movs	r3, #0
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3714      	adds	r7, #20
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	785b      	ldrb	r3, [r3, #1]
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d128      	bne.n	800cf1e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	015a      	lsls	r2, r3, #5
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	4413      	add	r3, r2
 800ced4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68ba      	ldr	r2, [r7, #8]
 800cedc:	0151      	lsls	r1, r2, #5
 800cede:	68fa      	ldr	r2, [r7, #12]
 800cee0:	440a      	add	r2, r1
 800cee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cee6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ceea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	791b      	ldrb	r3, [r3, #4]
 800cef0:	2b03      	cmp	r3, #3
 800cef2:	d003      	beq.n	800cefc <USB_EPClearStall+0x4c>
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	791b      	ldrb	r3, [r3, #4]
 800cef8:	2b02      	cmp	r3, #2
 800cefa:	d138      	bne.n	800cf6e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	015a      	lsls	r2, r3, #5
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	4413      	add	r3, r2
 800cf04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	0151      	lsls	r1, r2, #5
 800cf0e:	68fa      	ldr	r2, [r7, #12]
 800cf10:	440a      	add	r2, r1
 800cf12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf1a:	6013      	str	r3, [r2, #0]
 800cf1c:	e027      	b.n	800cf6e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	015a      	lsls	r2, r3, #5
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	4413      	add	r3, r2
 800cf26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	68ba      	ldr	r2, [r7, #8]
 800cf2e:	0151      	lsls	r1, r2, #5
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	440a      	add	r2, r1
 800cf34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cf3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	791b      	ldrb	r3, [r3, #4]
 800cf42:	2b03      	cmp	r3, #3
 800cf44:	d003      	beq.n	800cf4e <USB_EPClearStall+0x9e>
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	791b      	ldrb	r3, [r3, #4]
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d10f      	bne.n	800cf6e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	015a      	lsls	r2, r3, #5
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	4413      	add	r3, r2
 800cf56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	68ba      	ldr	r2, [r7, #8]
 800cf5e:	0151      	lsls	r1, r2, #5
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	440a      	add	r2, r1
 800cf64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf6c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	460b      	mov	r3, r1
 800cf86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cf9e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	78fb      	ldrb	r3, [r7, #3]
 800cfaa:	011b      	lsls	r3, r3, #4
 800cfac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cfb0:	68f9      	ldr	r1, [r7, #12]
 800cfb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cfba:	2300      	movs	r3, #0
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3714      	adds	r7, #20
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cfe2:	f023 0303 	bic.w	r3, r3, #3
 800cfe6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cff6:	f023 0302 	bic.w	r3, r3, #2
 800cffa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d00a:	b480      	push	{r7}
 800d00c:	b085      	sub	sp, #20
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d024:	f023 0303 	bic.w	r3, r3, #3
 800d028:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	68fa      	ldr	r2, [r7, #12]
 800d034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d038:	f043 0302 	orr.w	r3, r3, #2
 800d03c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d03e:	2300      	movs	r3, #0
}
 800d040:	4618      	mov	r0, r3
 800d042:	3714      	adds	r7, #20
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b085      	sub	sp, #20
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	695b      	ldr	r3, [r3, #20]
 800d058:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	4013      	ands	r3, r2
 800d062:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d064:	68fb      	ldr	r3, [r7, #12]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d072:	b480      	push	{r7}
 800d074:	b085      	sub	sp, #20
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d084:	699b      	ldr	r3, [r3, #24]
 800d086:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d08e:	69db      	ldr	r3, [r3, #28]
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	4013      	ands	r3, r2
 800d094:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	0c1b      	lsrs	r3, r3, #16
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3714      	adds	r7, #20
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr

0800d0a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0a6:	b480      	push	{r7}
 800d0a8:	b085      	sub	sp, #20
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0b8:	699b      	ldr	r3, [r3, #24]
 800d0ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0c2:	69db      	ldr	r3, [r3, #28]
 800d0c4:	68ba      	ldr	r2, [r7, #8]
 800d0c6:	4013      	ands	r3, r2
 800d0c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	b29b      	uxth	r3, r3
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3714      	adds	r7, #20
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b085      	sub	sp, #20
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d0ea:	78fb      	ldrb	r3, [r7, #3]
 800d0ec:	015a      	lsls	r2, r3, #5
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d100:	695b      	ldr	r3, [r3, #20]
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	4013      	ands	r3, r2
 800d106:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d108:	68bb      	ldr	r3, [r7, #8]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3714      	adds	r7, #20
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d116:	b480      	push	{r7}
 800d118:	b087      	sub	sp, #28
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
 800d11e:	460b      	mov	r3, r1
 800d120:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d12c:	691b      	ldr	r3, [r3, #16]
 800d12e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d138:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d13a:	78fb      	ldrb	r3, [r7, #3]
 800d13c:	f003 030f 	and.w	r3, r3, #15
 800d140:	68fa      	ldr	r2, [r7, #12]
 800d142:	fa22 f303 	lsr.w	r3, r2, r3
 800d146:	01db      	lsls	r3, r3, #7
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	693a      	ldr	r2, [r7, #16]
 800d14c:	4313      	orrs	r3, r2
 800d14e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d150:	78fb      	ldrb	r3, [r7, #3]
 800d152:	015a      	lsls	r2, r3, #5
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	4413      	add	r3, r2
 800d158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	693a      	ldr	r2, [r7, #16]
 800d160:	4013      	ands	r3, r2
 800d162:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d164:	68bb      	ldr	r3, [r7, #8]
}
 800d166:	4618      	mov	r0, r3
 800d168:	371c      	adds	r7, #28
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr

0800d172 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d172:	b480      	push	{r7}
 800d174:	b083      	sub	sp, #12
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	695b      	ldr	r3, [r3, #20]
 800d17e:	f003 0301 	and.w	r3, r3, #1
}
 800d182:	4618      	mov	r0, r3
 800d184:	370c      	adds	r7, #12
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
	...

0800d190 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	4b09      	ldr	r3, [pc, #36]	; (800d1d4 <USB_ActivateSetup+0x44>)
 800d1ae:	4013      	ands	r3, r2
 800d1b0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	68fa      	ldr	r2, [r7, #12]
 800d1bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d1c6:	2300      	movs	r3, #0
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3714      	adds	r7, #20
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr
 800d1d4:	fffff800 	.word	0xfffff800

0800d1d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b087      	sub	sp, #28
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	607a      	str	r2, [r7, #4]
 800d1e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	333c      	adds	r3, #60	; 0x3c
 800d1ee:	3304      	adds	r3, #4
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	4a26      	ldr	r2, [pc, #152]	; (800d290 <USB_EP0_OutStart+0xb8>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d90a      	bls.n	800d212 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d20c:	d101      	bne.n	800d212 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d20e:	2300      	movs	r3, #0
 800d210:	e037      	b.n	800d282 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d218:	461a      	mov	r2, r3
 800d21a:	2300      	movs	r3, #0
 800d21c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d224:	691b      	ldr	r3, [r3, #16]
 800d226:	697a      	ldr	r2, [r7, #20]
 800d228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d22c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d230:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d238:	691b      	ldr	r3, [r3, #16]
 800d23a:	697a      	ldr	r2, [r7, #20]
 800d23c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d240:	f043 0318 	orr.w	r3, r3, #24
 800d244:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	697a      	ldr	r2, [r7, #20]
 800d250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d254:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d258:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d25a:	7afb      	ldrb	r3, [r7, #11]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d10f      	bne.n	800d280 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d266:	461a      	mov	r2, r3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	697a      	ldr	r2, [r7, #20]
 800d276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d27a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d27e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	371c      	adds	r7, #28
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	4f54300a 	.word	0x4f54300a

0800d294 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d29c:	2300      	movs	r3, #0
 800d29e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	4a13      	ldr	r2, [pc, #76]	; (800d2f8 <USB_CoreReset+0x64>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d901      	bls.n	800d2b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d2ae:	2303      	movs	r3, #3
 800d2b0:	e01b      	b.n	800d2ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	daf2      	bge.n	800d2a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	f043 0201 	orr.w	r2, r3, #1
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	4a09      	ldr	r2, [pc, #36]	; (800d2f8 <USB_CoreReset+0x64>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d901      	bls.n	800d2dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d2d8:	2303      	movs	r3, #3
 800d2da:	e006      	b.n	800d2ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	691b      	ldr	r3, [r3, #16]
 800d2e0:	f003 0301 	and.w	r3, r3, #1
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d0f0      	beq.n	800d2ca <USB_CoreReset+0x36>

  return HAL_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3714      	adds	r7, #20
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	00030d40 	.word	0x00030d40

0800d2fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	460b      	mov	r3, r1
 800d306:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d308:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d30c:	f002 fca4 	bl	800fc58 <USBD_static_malloc>
 800d310:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d109      	bne.n	800d32c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	32b0      	adds	r2, #176	; 0xb0
 800d322:	2100      	movs	r1, #0
 800d324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d328:	2302      	movs	r3, #2
 800d32a:	e0d4      	b.n	800d4d6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d32c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d330:	2100      	movs	r1, #0
 800d332:	68f8      	ldr	r0, [r7, #12]
 800d334:	f002 fd1c 	bl	800fd70 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	32b0      	adds	r2, #176	; 0xb0
 800d342:	68f9      	ldr	r1, [r7, #12]
 800d344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	32b0      	adds	r2, #176	; 0xb0
 800d352:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	7c1b      	ldrb	r3, [r3, #16]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d138      	bne.n	800d3d6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d364:	4b5e      	ldr	r3, [pc, #376]	; (800d4e0 <USBD_CDC_Init+0x1e4>)
 800d366:	7819      	ldrb	r1, [r3, #0]
 800d368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d36c:	2202      	movs	r2, #2
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f002 fb4f 	bl	800fa12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d374:	4b5a      	ldr	r3, [pc, #360]	; (800d4e0 <USBD_CDC_Init+0x1e4>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	f003 020f 	and.w	r2, r3, #15
 800d37c:	6879      	ldr	r1, [r7, #4]
 800d37e:	4613      	mov	r3, r2
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	4413      	add	r3, r2
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	440b      	add	r3, r1
 800d388:	3324      	adds	r3, #36	; 0x24
 800d38a:	2201      	movs	r2, #1
 800d38c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d38e:	4b55      	ldr	r3, [pc, #340]	; (800d4e4 <USBD_CDC_Init+0x1e8>)
 800d390:	7819      	ldrb	r1, [r3, #0]
 800d392:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d396:	2202      	movs	r2, #2
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f002 fb3a 	bl	800fa12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d39e:	4b51      	ldr	r3, [pc, #324]	; (800d4e4 <USBD_CDC_Init+0x1e8>)
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	f003 020f 	and.w	r2, r3, #15
 800d3a6:	6879      	ldr	r1, [r7, #4]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	4413      	add	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	440b      	add	r3, r1
 800d3b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d3ba:	4b4b      	ldr	r3, [pc, #300]	; (800d4e8 <USBD_CDC_Init+0x1ec>)
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	f003 020f 	and.w	r2, r3, #15
 800d3c2:	6879      	ldr	r1, [r7, #4]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	4413      	add	r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	440b      	add	r3, r1
 800d3ce:	3326      	adds	r3, #38	; 0x26
 800d3d0:	2210      	movs	r2, #16
 800d3d2:	801a      	strh	r2, [r3, #0]
 800d3d4:	e035      	b.n	800d442 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d3d6:	4b42      	ldr	r3, [pc, #264]	; (800d4e0 <USBD_CDC_Init+0x1e4>)
 800d3d8:	7819      	ldrb	r1, [r3, #0]
 800d3da:	2340      	movs	r3, #64	; 0x40
 800d3dc:	2202      	movs	r2, #2
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f002 fb17 	bl	800fa12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d3e4:	4b3e      	ldr	r3, [pc, #248]	; (800d4e0 <USBD_CDC_Init+0x1e4>)
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	f003 020f 	and.w	r2, r3, #15
 800d3ec:	6879      	ldr	r1, [r7, #4]
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	4413      	add	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	440b      	add	r3, r1
 800d3f8:	3324      	adds	r3, #36	; 0x24
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d3fe:	4b39      	ldr	r3, [pc, #228]	; (800d4e4 <USBD_CDC_Init+0x1e8>)
 800d400:	7819      	ldrb	r1, [r3, #0]
 800d402:	2340      	movs	r3, #64	; 0x40
 800d404:	2202      	movs	r2, #2
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f002 fb03 	bl	800fa12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d40c:	4b35      	ldr	r3, [pc, #212]	; (800d4e4 <USBD_CDC_Init+0x1e8>)
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	f003 020f 	and.w	r2, r3, #15
 800d414:	6879      	ldr	r1, [r7, #4]
 800d416:	4613      	mov	r3, r2
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	440b      	add	r3, r1
 800d420:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d424:	2201      	movs	r2, #1
 800d426:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d428:	4b2f      	ldr	r3, [pc, #188]	; (800d4e8 <USBD_CDC_Init+0x1ec>)
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	f003 020f 	and.w	r2, r3, #15
 800d430:	6879      	ldr	r1, [r7, #4]
 800d432:	4613      	mov	r3, r2
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	4413      	add	r3, r2
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	440b      	add	r3, r1
 800d43c:	3326      	adds	r3, #38	; 0x26
 800d43e:	2210      	movs	r2, #16
 800d440:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d442:	4b29      	ldr	r3, [pc, #164]	; (800d4e8 <USBD_CDC_Init+0x1ec>)
 800d444:	7819      	ldrb	r1, [r3, #0]
 800d446:	2308      	movs	r3, #8
 800d448:	2203      	movs	r2, #3
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f002 fae1 	bl	800fa12 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d450:	4b25      	ldr	r3, [pc, #148]	; (800d4e8 <USBD_CDC_Init+0x1ec>)
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	f003 020f 	and.w	r2, r3, #15
 800d458:	6879      	ldr	r1, [r7, #4]
 800d45a:	4613      	mov	r3, r2
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	4413      	add	r3, r2
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	440b      	add	r3, r1
 800d464:	3324      	adds	r3, #36	; 0x24
 800d466:	2201      	movs	r2, #1
 800d468:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2200      	movs	r2, #0
 800d46e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	33b0      	adds	r3, #176	; 0xb0
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	4413      	add	r3, r2
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2200      	movs	r2, #0
 800d48a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2200      	movs	r2, #0
 800d492:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d101      	bne.n	800d4a4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d4a0:	2302      	movs	r3, #2
 800d4a2:	e018      	b.n	800d4d6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	7c1b      	ldrb	r3, [r3, #16]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10a      	bne.n	800d4c2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d4ac:	4b0d      	ldr	r3, [pc, #52]	; (800d4e4 <USBD_CDC_Init+0x1e8>)
 800d4ae:	7819      	ldrb	r1, [r3, #0]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d4b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f002 fb98 	bl	800fbf0 <USBD_LL_PrepareReceive>
 800d4c0:	e008      	b.n	800d4d4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d4c2:	4b08      	ldr	r3, [pc, #32]	; (800d4e4 <USBD_CDC_Init+0x1e8>)
 800d4c4:	7819      	ldrb	r1, [r3, #0]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d4cc:	2340      	movs	r3, #64	; 0x40
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f002 fb8e 	bl	800fbf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3710      	adds	r7, #16
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	240001a3 	.word	0x240001a3
 800d4e4:	240001a4 	.word	0x240001a4
 800d4e8:	240001a5 	.word	0x240001a5

0800d4ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d4f8:	4b3a      	ldr	r3, [pc, #232]	; (800d5e4 <USBD_CDC_DeInit+0xf8>)
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f002 faad 	bl	800fa5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d504:	4b37      	ldr	r3, [pc, #220]	; (800d5e4 <USBD_CDC_DeInit+0xf8>)
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	f003 020f 	and.w	r2, r3, #15
 800d50c:	6879      	ldr	r1, [r7, #4]
 800d50e:	4613      	mov	r3, r2
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	4413      	add	r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	440b      	add	r3, r1
 800d518:	3324      	adds	r3, #36	; 0x24
 800d51a:	2200      	movs	r2, #0
 800d51c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d51e:	4b32      	ldr	r3, [pc, #200]	; (800d5e8 <USBD_CDC_DeInit+0xfc>)
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	4619      	mov	r1, r3
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f002 fa9a 	bl	800fa5e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d52a:	4b2f      	ldr	r3, [pc, #188]	; (800d5e8 <USBD_CDC_DeInit+0xfc>)
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	f003 020f 	and.w	r2, r3, #15
 800d532:	6879      	ldr	r1, [r7, #4]
 800d534:	4613      	mov	r3, r2
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	4413      	add	r3, r2
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	440b      	add	r3, r1
 800d53e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d542:	2200      	movs	r2, #0
 800d544:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d546:	4b29      	ldr	r3, [pc, #164]	; (800d5ec <USBD_CDC_DeInit+0x100>)
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	4619      	mov	r1, r3
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f002 fa86 	bl	800fa5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d552:	4b26      	ldr	r3, [pc, #152]	; (800d5ec <USBD_CDC_DeInit+0x100>)
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	f003 020f 	and.w	r2, r3, #15
 800d55a:	6879      	ldr	r1, [r7, #4]
 800d55c:	4613      	mov	r3, r2
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	4413      	add	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	440b      	add	r3, r1
 800d566:	3324      	adds	r3, #36	; 0x24
 800d568:	2200      	movs	r2, #0
 800d56a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d56c:	4b1f      	ldr	r3, [pc, #124]	; (800d5ec <USBD_CDC_DeInit+0x100>)
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	f003 020f 	and.w	r2, r3, #15
 800d574:	6879      	ldr	r1, [r7, #4]
 800d576:	4613      	mov	r3, r2
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4413      	add	r3, r2
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	440b      	add	r3, r1
 800d580:	3326      	adds	r3, #38	; 0x26
 800d582:	2200      	movs	r2, #0
 800d584:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	32b0      	adds	r2, #176	; 0xb0
 800d590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d01f      	beq.n	800d5d8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	33b0      	adds	r3, #176	; 0xb0
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	4413      	add	r3, r2
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	32b0      	adds	r2, #176	; 0xb0
 800d5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f002 fb5a 	bl	800fc74 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	32b0      	adds	r2, #176	; 0xb0
 800d5ca:	2100      	movs	r1, #0
 800d5cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	240001a3 	.word	0x240001a3
 800d5e8:	240001a4 	.word	0x240001a4
 800d5ec:	240001a5 	.word	0x240001a5

0800d5f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	32b0      	adds	r2, #176	; 0xb0
 800d604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d608:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d60a:	2300      	movs	r3, #0
 800d60c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d60e:	2300      	movs	r3, #0
 800d610:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d101      	bne.n	800d620 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d61c:	2303      	movs	r3, #3
 800d61e:	e0bf      	b.n	800d7a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d050      	beq.n	800d6ce <USBD_CDC_Setup+0xde>
 800d62c:	2b20      	cmp	r3, #32
 800d62e:	f040 80af 	bne.w	800d790 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	88db      	ldrh	r3, [r3, #6]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d03a      	beq.n	800d6b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	b25b      	sxtb	r3, r3
 800d640:	2b00      	cmp	r3, #0
 800d642:	da1b      	bge.n	800d67c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	33b0      	adds	r3, #176	; 0xb0
 800d64e:	009b      	lsls	r3, r3, #2
 800d650:	4413      	add	r3, r2
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	683a      	ldr	r2, [r7, #0]
 800d658:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d65a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d65c:	683a      	ldr	r2, [r7, #0]
 800d65e:	88d2      	ldrh	r2, [r2, #6]
 800d660:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	88db      	ldrh	r3, [r3, #6]
 800d666:	2b07      	cmp	r3, #7
 800d668:	bf28      	it	cs
 800d66a:	2307      	movcs	r3, #7
 800d66c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	89fa      	ldrh	r2, [r7, #14]
 800d672:	4619      	mov	r1, r3
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f001 fd89 	bl	800f18c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d67a:	e090      	b.n	800d79e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	785a      	ldrb	r2, [r3, #1]
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	88db      	ldrh	r3, [r3, #6]
 800d68a:	2b3f      	cmp	r3, #63	; 0x3f
 800d68c:	d803      	bhi.n	800d696 <USBD_CDC_Setup+0xa6>
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	88db      	ldrh	r3, [r3, #6]
 800d692:	b2da      	uxtb	r2, r3
 800d694:	e000      	b.n	800d698 <USBD_CDC_Setup+0xa8>
 800d696:	2240      	movs	r2, #64	; 0x40
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d69e:	6939      	ldr	r1, [r7, #16]
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f001 fd9b 	bl	800f1e4 <USBD_CtlPrepareRx>
      break;
 800d6ae:	e076      	b.n	800d79e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	33b0      	adds	r3, #176	; 0xb0
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	4413      	add	r3, r2
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	683a      	ldr	r2, [r7, #0]
 800d6c4:	7850      	ldrb	r0, [r2, #1]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	4798      	blx	r3
      break;
 800d6cc:	e067      	b.n	800d79e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	785b      	ldrb	r3, [r3, #1]
 800d6d2:	2b0b      	cmp	r3, #11
 800d6d4:	d851      	bhi.n	800d77a <USBD_CDC_Setup+0x18a>
 800d6d6:	a201      	add	r2, pc, #4	; (adr r2, 800d6dc <USBD_CDC_Setup+0xec>)
 800d6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6dc:	0800d70d 	.word	0x0800d70d
 800d6e0:	0800d789 	.word	0x0800d789
 800d6e4:	0800d77b 	.word	0x0800d77b
 800d6e8:	0800d77b 	.word	0x0800d77b
 800d6ec:	0800d77b 	.word	0x0800d77b
 800d6f0:	0800d77b 	.word	0x0800d77b
 800d6f4:	0800d77b 	.word	0x0800d77b
 800d6f8:	0800d77b 	.word	0x0800d77b
 800d6fc:	0800d77b 	.word	0x0800d77b
 800d700:	0800d77b 	.word	0x0800d77b
 800d704:	0800d737 	.word	0x0800d737
 800d708:	0800d761 	.word	0x0800d761
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d712:	b2db      	uxtb	r3, r3
 800d714:	2b03      	cmp	r3, #3
 800d716:	d107      	bne.n	800d728 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d718:	f107 030a 	add.w	r3, r7, #10
 800d71c:	2202      	movs	r2, #2
 800d71e:	4619      	mov	r1, r3
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f001 fd33 	bl	800f18c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d726:	e032      	b.n	800d78e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d728:	6839      	ldr	r1, [r7, #0]
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f001 fcbd 	bl	800f0aa <USBD_CtlError>
            ret = USBD_FAIL;
 800d730:	2303      	movs	r3, #3
 800d732:	75fb      	strb	r3, [r7, #23]
          break;
 800d734:	e02b      	b.n	800d78e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d107      	bne.n	800d752 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d742:	f107 030d 	add.w	r3, r7, #13
 800d746:	2201      	movs	r2, #1
 800d748:	4619      	mov	r1, r3
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f001 fd1e 	bl	800f18c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d750:	e01d      	b.n	800d78e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d752:	6839      	ldr	r1, [r7, #0]
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f001 fca8 	bl	800f0aa <USBD_CtlError>
            ret = USBD_FAIL;
 800d75a:	2303      	movs	r3, #3
 800d75c:	75fb      	strb	r3, [r7, #23]
          break;
 800d75e:	e016      	b.n	800d78e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d766:	b2db      	uxtb	r3, r3
 800d768:	2b03      	cmp	r3, #3
 800d76a:	d00f      	beq.n	800d78c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d76c:	6839      	ldr	r1, [r7, #0]
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f001 fc9b 	bl	800f0aa <USBD_CtlError>
            ret = USBD_FAIL;
 800d774:	2303      	movs	r3, #3
 800d776:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d778:	e008      	b.n	800d78c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d77a:	6839      	ldr	r1, [r7, #0]
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f001 fc94 	bl	800f0aa <USBD_CtlError>
          ret = USBD_FAIL;
 800d782:	2303      	movs	r3, #3
 800d784:	75fb      	strb	r3, [r7, #23]
          break;
 800d786:	e002      	b.n	800d78e <USBD_CDC_Setup+0x19e>
          break;
 800d788:	bf00      	nop
 800d78a:	e008      	b.n	800d79e <USBD_CDC_Setup+0x1ae>
          break;
 800d78c:	bf00      	nop
      }
      break;
 800d78e:	e006      	b.n	800d79e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d790:	6839      	ldr	r1, [r7, #0]
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f001 fc89 	bl	800f0aa <USBD_CtlError>
      ret = USBD_FAIL;
 800d798:	2303      	movs	r3, #3
 800d79a:	75fb      	strb	r3, [r7, #23]
      break;
 800d79c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d79e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3718      	adds	r7, #24
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d7ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	32b0      	adds	r2, #176	; 0xb0
 800d7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d101      	bne.n	800d7d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	e065      	b.n	800d89e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	32b0      	adds	r2, #176	; 0xb0
 800d7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d7e2:	78fb      	ldrb	r3, [r7, #3]
 800d7e4:	f003 020f 	and.w	r2, r3, #15
 800d7e8:	6879      	ldr	r1, [r7, #4]
 800d7ea:	4613      	mov	r3, r2
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	4413      	add	r3, r2
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	440b      	add	r3, r1
 800d7f4:	3318      	adds	r3, #24
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d02f      	beq.n	800d85c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d7fc:	78fb      	ldrb	r3, [r7, #3]
 800d7fe:	f003 020f 	and.w	r2, r3, #15
 800d802:	6879      	ldr	r1, [r7, #4]
 800d804:	4613      	mov	r3, r2
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	4413      	add	r3, r2
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	440b      	add	r3, r1
 800d80e:	3318      	adds	r3, #24
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	78fb      	ldrb	r3, [r7, #3]
 800d814:	f003 010f 	and.w	r1, r3, #15
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	460b      	mov	r3, r1
 800d81c:	00db      	lsls	r3, r3, #3
 800d81e:	440b      	add	r3, r1
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	4403      	add	r3, r0
 800d824:	3344      	adds	r3, #68	; 0x44
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	fbb2 f1f3 	udiv	r1, r2, r3
 800d82c:	fb01 f303 	mul.w	r3, r1, r3
 800d830:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d832:	2b00      	cmp	r3, #0
 800d834:	d112      	bne.n	800d85c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d836:	78fb      	ldrb	r3, [r7, #3]
 800d838:	f003 020f 	and.w	r2, r3, #15
 800d83c:	6879      	ldr	r1, [r7, #4]
 800d83e:	4613      	mov	r3, r2
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	4413      	add	r3, r2
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	440b      	add	r3, r1
 800d848:	3318      	adds	r3, #24
 800d84a:	2200      	movs	r2, #0
 800d84c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d84e:	78f9      	ldrb	r1, [r7, #3]
 800d850:	2300      	movs	r3, #0
 800d852:	2200      	movs	r2, #0
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f002 f9aa 	bl	800fbae <USBD_LL_Transmit>
 800d85a:	e01f      	b.n	800d89c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	2200      	movs	r2, #0
 800d860:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	33b0      	adds	r3, #176	; 0xb0
 800d86e:	009b      	lsls	r3, r3, #2
 800d870:	4413      	add	r3, r2
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d010      	beq.n	800d89c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	33b0      	adds	r3, #176	; 0xb0
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	4413      	add	r3, r2
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	68ba      	ldr	r2, [r7, #8]
 800d88e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d898:	78fa      	ldrb	r2, [r7, #3]
 800d89a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d89c:	2300      	movs	r3, #0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b084      	sub	sp, #16
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	32b0      	adds	r2, #176	; 0xb0
 800d8bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	32b0      	adds	r2, #176	; 0xb0
 800d8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d101      	bne.n	800d8d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d8d4:	2303      	movs	r3, #3
 800d8d6:	e01a      	b.n	800d90e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d8d8:	78fb      	ldrb	r3, [r7, #3]
 800d8da:	4619      	mov	r1, r3
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f002 f9a8 	bl	800fc32 <USBD_LL_GetRxDataSize>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	33b0      	adds	r3, #176	; 0xb0
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	4413      	add	r3, r2
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d908:	4611      	mov	r1, r2
 800d90a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d916:	b580      	push	{r7, lr}
 800d918:	b084      	sub	sp, #16
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	32b0      	adds	r2, #176	; 0xb0
 800d928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d92c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d101      	bne.n	800d938 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d934:	2303      	movs	r3, #3
 800d936:	e025      	b.n	800d984 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	33b0      	adds	r3, #176	; 0xb0
 800d942:	009b      	lsls	r3, r3, #2
 800d944:	4413      	add	r3, r2
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d01a      	beq.n	800d982 <USBD_CDC_EP0_RxReady+0x6c>
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d952:	2bff      	cmp	r3, #255	; 0xff
 800d954:	d015      	beq.n	800d982 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	33b0      	adds	r3, #176	; 0xb0
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	4413      	add	r3, r2
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d96e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d970:	68fa      	ldr	r2, [r7, #12]
 800d972:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d976:	b292      	uxth	r2, r2
 800d978:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	22ff      	movs	r2, #255	; 0xff
 800d97e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d982:	2300      	movs	r3, #0
}
 800d984:	4618      	mov	r0, r3
 800d986:	3710      	adds	r7, #16
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b086      	sub	sp, #24
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d994:	2182      	movs	r1, #130	; 0x82
 800d996:	4818      	ldr	r0, [pc, #96]	; (800d9f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d998:	f000 fd4f 	bl	800e43a <USBD_GetEpDesc>
 800d99c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d99e:	2101      	movs	r1, #1
 800d9a0:	4815      	ldr	r0, [pc, #84]	; (800d9f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d9a2:	f000 fd4a 	bl	800e43a <USBD_GetEpDesc>
 800d9a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d9a8:	2181      	movs	r1, #129	; 0x81
 800d9aa:	4813      	ldr	r0, [pc, #76]	; (800d9f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d9ac:	f000 fd45 	bl	800e43a <USBD_GetEpDesc>
 800d9b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	2210      	movs	r2, #16
 800d9bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d006      	beq.n	800d9d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9cc:	711a      	strb	r2, [r3, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d006      	beq.n	800d9e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9e0:	711a      	strb	r2, [r3, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2243      	movs	r2, #67	; 0x43
 800d9ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d9ec:	4b02      	ldr	r3, [pc, #8]	; (800d9f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3718      	adds	r7, #24
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	24000160 	.word	0x24000160

0800d9fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800da04:	2182      	movs	r1, #130	; 0x82
 800da06:	4818      	ldr	r0, [pc, #96]	; (800da68 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800da08:	f000 fd17 	bl	800e43a <USBD_GetEpDesc>
 800da0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800da0e:	2101      	movs	r1, #1
 800da10:	4815      	ldr	r0, [pc, #84]	; (800da68 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800da12:	f000 fd12 	bl	800e43a <USBD_GetEpDesc>
 800da16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800da18:	2181      	movs	r1, #129	; 0x81
 800da1a:	4813      	ldr	r0, [pc, #76]	; (800da68 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800da1c:	f000 fd0d 	bl	800e43a <USBD_GetEpDesc>
 800da20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d002      	beq.n	800da2e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	2210      	movs	r2, #16
 800da2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d006      	beq.n	800da42 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	2200      	movs	r2, #0
 800da38:	711a      	strb	r2, [r3, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f042 0202 	orr.w	r2, r2, #2
 800da40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d006      	beq.n	800da56 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2200      	movs	r2, #0
 800da4c:	711a      	strb	r2, [r3, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	f042 0202 	orr.w	r2, r2, #2
 800da54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2243      	movs	r2, #67	; 0x43
 800da5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800da5c:	4b02      	ldr	r3, [pc, #8]	; (800da68 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3718      	adds	r7, #24
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	24000160 	.word	0x24000160

0800da6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b086      	sub	sp, #24
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800da74:	2182      	movs	r1, #130	; 0x82
 800da76:	4818      	ldr	r0, [pc, #96]	; (800dad8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800da78:	f000 fcdf 	bl	800e43a <USBD_GetEpDesc>
 800da7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800da7e:	2101      	movs	r1, #1
 800da80:	4815      	ldr	r0, [pc, #84]	; (800dad8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800da82:	f000 fcda 	bl	800e43a <USBD_GetEpDesc>
 800da86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800da88:	2181      	movs	r1, #129	; 0x81
 800da8a:	4813      	ldr	r0, [pc, #76]	; (800dad8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800da8c:	f000 fcd5 	bl	800e43a <USBD_GetEpDesc>
 800da90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d002      	beq.n	800da9e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	2210      	movs	r2, #16
 800da9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d006      	beq.n	800dab2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	2200      	movs	r2, #0
 800daa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800daac:	711a      	strb	r2, [r3, #4]
 800daae:	2200      	movs	r2, #0
 800dab0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d006      	beq.n	800dac6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2200      	movs	r2, #0
 800dabc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dac0:	711a      	strb	r2, [r3, #4]
 800dac2:	2200      	movs	r2, #0
 800dac4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2243      	movs	r2, #67	; 0x43
 800daca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dacc:	4b02      	ldr	r3, [pc, #8]	; (800dad8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3718      	adds	r7, #24
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	24000160 	.word	0x24000160

0800dadc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	220a      	movs	r2, #10
 800dae8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800daea:	4b03      	ldr	r3, [pc, #12]	; (800daf8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800daec:	4618      	mov	r0, r3
 800daee:	370c      	adds	r7, #12
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr
 800daf8:	2400011c 	.word	0x2400011c

0800dafc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d101      	bne.n	800db10 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800db0c:	2303      	movs	r3, #3
 800db0e:	e009      	b.n	800db24 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	33b0      	adds	r3, #176	; 0xb0
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	4413      	add	r3, r2
 800db1e:	683a      	ldr	r2, [r7, #0]
 800db20:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	370c      	adds	r7, #12
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr

0800db30 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800db30:	b480      	push	{r7}
 800db32:	b087      	sub	sp, #28
 800db34:	af00      	add	r7, sp, #0
 800db36:	60f8      	str	r0, [r7, #12]
 800db38:	60b9      	str	r1, [r7, #8]
 800db3a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	32b0      	adds	r2, #176	; 0xb0
 800db46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db4a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d101      	bne.n	800db56 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800db52:	2303      	movs	r3, #3
 800db54:	e008      	b.n	800db68 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	68ba      	ldr	r2, [r7, #8]
 800db5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800db66:	2300      	movs	r3, #0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	371c      	adds	r7, #28
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800db74:	b480      	push	{r7}
 800db76:	b085      	sub	sp, #20
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	32b0      	adds	r2, #176	; 0xb0
 800db88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d101      	bne.n	800db98 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800db94:	2303      	movs	r3, #3
 800db96:	e004      	b.n	800dba2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	683a      	ldr	r2, [r7, #0]
 800db9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3714      	adds	r7, #20
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr
	...

0800dbb0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	32b0      	adds	r2, #176	; 0xb0
 800dbc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbc6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d101      	bne.n	800dbd6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dbd2:	2303      	movs	r3, #3
 800dbd4:	e025      	b.n	800dc22 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d11f      	bne.n	800dc20 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800dbe8:	4b10      	ldr	r3, [pc, #64]	; (800dc2c <USBD_CDC_TransmitPacket+0x7c>)
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	f003 020f 	and.w	r2, r3, #15
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4413      	add	r3, r2
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	4403      	add	r3, r0
 800dc02:	3318      	adds	r3, #24
 800dc04:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800dc06:	4b09      	ldr	r3, [pc, #36]	; (800dc2c <USBD_CDC_TransmitPacket+0x7c>)
 800dc08:	7819      	ldrb	r1, [r3, #0]
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f001 ffc9 	bl	800fbae <USBD_LL_Transmit>

    ret = USBD_OK;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	240001a3 	.word	0x240001a3

0800dc30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	32b0      	adds	r2, #176	; 0xb0
 800dc42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc46:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	32b0      	adds	r2, #176	; 0xb0
 800dc52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d101      	bne.n	800dc5e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dc5a:	2303      	movs	r3, #3
 800dc5c:	e018      	b.n	800dc90 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	7c1b      	ldrb	r3, [r3, #16]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d10a      	bne.n	800dc7c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc66:	4b0c      	ldr	r3, [pc, #48]	; (800dc98 <USBD_CDC_ReceivePacket+0x68>)
 800dc68:	7819      	ldrb	r1, [r3, #0]
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dc70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f001 ffbb 	bl	800fbf0 <USBD_LL_PrepareReceive>
 800dc7a:	e008      	b.n	800dc8e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc7c:	4b06      	ldr	r3, [pc, #24]	; (800dc98 <USBD_CDC_ReceivePacket+0x68>)
 800dc7e:	7819      	ldrb	r1, [r3, #0]
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dc86:	2340      	movs	r3, #64	; 0x40
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f001 ffb1 	bl	800fbf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dc8e:	2300      	movs	r3, #0
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	240001a4 	.word	0x240001a4

0800dc9c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b086      	sub	sp, #24
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	4613      	mov	r3, r2
 800dca8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d101      	bne.n	800dcb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	e01f      	b.n	800dcf4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d003      	beq.n	800dcda <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	68ba      	ldr	r2, [r7, #8]
 800dcd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2201      	movs	r2, #1
 800dcde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	79fa      	ldrb	r2, [r7, #7]
 800dce6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f001 fe25 	bl	800f938 <USBD_LL_Init>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dcf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3718      	adds	r7, #24
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dd06:	2300      	movs	r3, #0
 800dd08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d101      	bne.n	800dd14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dd10:	2303      	movs	r3, #3
 800dd12:	e025      	b.n	800dd60 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	32ae      	adds	r2, #174	; 0xae
 800dd26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00f      	beq.n	800dd50 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	32ae      	adds	r2, #174	; 0xae
 800dd3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd40:	f107 020e 	add.w	r2, r7, #14
 800dd44:	4610      	mov	r0, r2
 800dd46:	4798      	blx	r3
 800dd48:	4602      	mov	r2, r0
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dd56:	1c5a      	adds	r2, r3, #1
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800dd5e:	2300      	movs	r3, #0
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f001 fe33 	bl	800f9dc <USBD_LL_Start>
 800dd76:	4603      	mov	r3, r0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dd88:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	370c      	adds	r7, #12
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr

0800dd96 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd96:	b580      	push	{r7, lr}
 800dd98:	b084      	sub	sp, #16
 800dd9a:	af00      	add	r7, sp, #0
 800dd9c:	6078      	str	r0, [r7, #4]
 800dd9e:	460b      	mov	r3, r1
 800dda0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dda2:	2300      	movs	r3, #0
 800dda4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d009      	beq.n	800ddc4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	78fa      	ldrb	r2, [r7, #3]
 800ddba:	4611      	mov	r1, r2
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	4798      	blx	r3
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ddc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3710      	adds	r7, #16
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b084      	sub	sp, #16
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ddda:	2300      	movs	r3, #0
 800dddc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	78fa      	ldrb	r2, [r7, #3]
 800dde8:	4611      	mov	r1, r2
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	4798      	blx	r3
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d001      	beq.n	800ddf8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ddf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3710      	adds	r7, #16
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b084      	sub	sp, #16
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de12:	6839      	ldr	r1, [r7, #0]
 800de14:	4618      	mov	r0, r3
 800de16:	f001 f90e 	bl	800f036 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2201      	movs	r2, #1
 800de1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800de28:	461a      	mov	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800de36:	f003 031f 	and.w	r3, r3, #31
 800de3a:	2b02      	cmp	r3, #2
 800de3c:	d01a      	beq.n	800de74 <USBD_LL_SetupStage+0x72>
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d822      	bhi.n	800de88 <USBD_LL_SetupStage+0x86>
 800de42:	2b00      	cmp	r3, #0
 800de44:	d002      	beq.n	800de4c <USBD_LL_SetupStage+0x4a>
 800de46:	2b01      	cmp	r3, #1
 800de48:	d00a      	beq.n	800de60 <USBD_LL_SetupStage+0x5e>
 800de4a:	e01d      	b.n	800de88 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de52:	4619      	mov	r1, r3
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f000 fb65 	bl	800e524 <USBD_StdDevReq>
 800de5a:	4603      	mov	r3, r0
 800de5c:	73fb      	strb	r3, [r7, #15]
      break;
 800de5e:	e020      	b.n	800dea2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de66:	4619      	mov	r1, r3
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f000 fbcd 	bl	800e608 <USBD_StdItfReq>
 800de6e:	4603      	mov	r3, r0
 800de70:	73fb      	strb	r3, [r7, #15]
      break;
 800de72:	e016      	b.n	800dea2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de7a:	4619      	mov	r1, r3
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 fc2f 	bl	800e6e0 <USBD_StdEPReq>
 800de82:	4603      	mov	r3, r0
 800de84:	73fb      	strb	r3, [r7, #15]
      break;
 800de86:	e00c      	b.n	800dea2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800de8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800de92:	b2db      	uxtb	r3, r3
 800de94:	4619      	mov	r1, r3
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f001 fe00 	bl	800fa9c <USBD_LL_StallEP>
 800de9c:	4603      	mov	r3, r0
 800de9e:	73fb      	strb	r3, [r7, #15]
      break;
 800dea0:	bf00      	nop
  }

  return ret;
 800dea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3710      	adds	r7, #16
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b086      	sub	sp, #24
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	460b      	mov	r3, r1
 800deb6:	607a      	str	r2, [r7, #4]
 800deb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800deba:	2300      	movs	r3, #0
 800debc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800debe:	7afb      	ldrb	r3, [r7, #11]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d16e      	bne.n	800dfa2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800deca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ded2:	2b03      	cmp	r3, #3
 800ded4:	f040 8098 	bne.w	800e008 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	689a      	ldr	r2, [r3, #8]
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d913      	bls.n	800df0c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	689a      	ldr	r2, [r3, #8]
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	1ad2      	subs	r2, r2, r3
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	68da      	ldr	r2, [r3, #12]
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	4293      	cmp	r3, r2
 800defc:	bf28      	it	cs
 800defe:	4613      	movcs	r3, r2
 800df00:	461a      	mov	r2, r3
 800df02:	6879      	ldr	r1, [r7, #4]
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f001 f98a 	bl	800f21e <USBD_CtlContinueRx>
 800df0a:	e07d      	b.n	800e008 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800df12:	f003 031f 	and.w	r3, r3, #31
 800df16:	2b02      	cmp	r3, #2
 800df18:	d014      	beq.n	800df44 <USBD_LL_DataOutStage+0x98>
 800df1a:	2b02      	cmp	r3, #2
 800df1c:	d81d      	bhi.n	800df5a <USBD_LL_DataOutStage+0xae>
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d002      	beq.n	800df28 <USBD_LL_DataOutStage+0x7c>
 800df22:	2b01      	cmp	r3, #1
 800df24:	d003      	beq.n	800df2e <USBD_LL_DataOutStage+0x82>
 800df26:	e018      	b.n	800df5a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800df28:	2300      	movs	r3, #0
 800df2a:	75bb      	strb	r3, [r7, #22]
            break;
 800df2c:	e018      	b.n	800df60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800df34:	b2db      	uxtb	r3, r3
 800df36:	4619      	mov	r1, r3
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f000 fa64 	bl	800e406 <USBD_CoreFindIF>
 800df3e:	4603      	mov	r3, r0
 800df40:	75bb      	strb	r3, [r7, #22]
            break;
 800df42:	e00d      	b.n	800df60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	4619      	mov	r1, r3
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f000 fa66 	bl	800e420 <USBD_CoreFindEP>
 800df54:	4603      	mov	r3, r0
 800df56:	75bb      	strb	r3, [r7, #22]
            break;
 800df58:	e002      	b.n	800df60 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800df5a:	2300      	movs	r3, #0
 800df5c:	75bb      	strb	r3, [r7, #22]
            break;
 800df5e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800df60:	7dbb      	ldrb	r3, [r7, #22]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d119      	bne.n	800df9a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	2b03      	cmp	r3, #3
 800df70:	d113      	bne.n	800df9a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800df72:	7dba      	ldrb	r2, [r7, #22]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	32ae      	adds	r2, #174	; 0xae
 800df78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df7c:	691b      	ldr	r3, [r3, #16]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d00b      	beq.n	800df9a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800df82:	7dba      	ldrb	r2, [r7, #22]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800df8a:	7dba      	ldrb	r2, [r7, #22]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	32ae      	adds	r2, #174	; 0xae
 800df90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df94:	691b      	ldr	r3, [r3, #16]
 800df96:	68f8      	ldr	r0, [r7, #12]
 800df98:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800df9a:	68f8      	ldr	r0, [r7, #12]
 800df9c:	f001 f950 	bl	800f240 <USBD_CtlSendStatus>
 800dfa0:	e032      	b.n	800e008 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dfa2:	7afb      	ldrb	r3, [r7, #11]
 800dfa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	4619      	mov	r1, r3
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f000 fa37 	bl	800e420 <USBD_CoreFindEP>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dfb6:	7dbb      	ldrb	r3, [r7, #22]
 800dfb8:	2bff      	cmp	r3, #255	; 0xff
 800dfba:	d025      	beq.n	800e008 <USBD_LL_DataOutStage+0x15c>
 800dfbc:	7dbb      	ldrb	r3, [r7, #22]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d122      	bne.n	800e008 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	2b03      	cmp	r3, #3
 800dfcc:	d117      	bne.n	800dffe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dfce:	7dba      	ldrb	r2, [r7, #22]
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	32ae      	adds	r2, #174	; 0xae
 800dfd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfd8:	699b      	ldr	r3, [r3, #24]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00f      	beq.n	800dffe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dfde:	7dba      	ldrb	r2, [r7, #22]
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dfe6:	7dba      	ldrb	r2, [r7, #22]
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	32ae      	adds	r2, #174	; 0xae
 800dfec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dff0:	699b      	ldr	r3, [r3, #24]
 800dff2:	7afa      	ldrb	r2, [r7, #11]
 800dff4:	4611      	mov	r1, r2
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	4798      	blx	r3
 800dffa:	4603      	mov	r3, r0
 800dffc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dffe:	7dfb      	ldrb	r3, [r7, #23]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e004:	7dfb      	ldrb	r3, [r7, #23]
 800e006:	e000      	b.n	800e00a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e008:	2300      	movs	r3, #0
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3718      	adds	r7, #24
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}

0800e012 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e012:	b580      	push	{r7, lr}
 800e014:	b086      	sub	sp, #24
 800e016:	af00      	add	r7, sp, #0
 800e018:	60f8      	str	r0, [r7, #12]
 800e01a:	460b      	mov	r3, r1
 800e01c:	607a      	str	r2, [r7, #4]
 800e01e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e020:	7afb      	ldrb	r3, [r7, #11]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d16f      	bne.n	800e106 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	3314      	adds	r3, #20
 800e02a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e032:	2b02      	cmp	r3, #2
 800e034:	d15a      	bne.n	800e0ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	689a      	ldr	r2, [r3, #8]
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d914      	bls.n	800e06c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	689a      	ldr	r2, [r3, #8]
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	1ad2      	subs	r2, r2, r3
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	461a      	mov	r2, r3
 800e056:	6879      	ldr	r1, [r7, #4]
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f001 f8b2 	bl	800f1c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e05e:	2300      	movs	r3, #0
 800e060:	2200      	movs	r2, #0
 800e062:	2100      	movs	r1, #0
 800e064:	68f8      	ldr	r0, [r7, #12]
 800e066:	f001 fdc3 	bl	800fbf0 <USBD_LL_PrepareReceive>
 800e06a:	e03f      	b.n	800e0ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	68da      	ldr	r2, [r3, #12]
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	429a      	cmp	r2, r3
 800e076:	d11c      	bne.n	800e0b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	685a      	ldr	r2, [r3, #4]
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e080:	429a      	cmp	r2, r3
 800e082:	d316      	bcc.n	800e0b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	685a      	ldr	r2, [r3, #4]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e08e:	429a      	cmp	r2, r3
 800e090:	d20f      	bcs.n	800e0b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e092:	2200      	movs	r2, #0
 800e094:	2100      	movs	r1, #0
 800e096:	68f8      	ldr	r0, [r7, #12]
 800e098:	f001 f893 	bl	800f1c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	2100      	movs	r1, #0
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f001 fda0 	bl	800fbf0 <USBD_LL_PrepareReceive>
 800e0b0:	e01c      	b.n	800e0ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d10f      	bne.n	800e0de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0c4:	68db      	ldr	r3, [r3, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d009      	beq.n	800e0de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0d8:	68db      	ldr	r3, [r3, #12]
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0de:	2180      	movs	r1, #128	; 0x80
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f001 fcdb 	bl	800fa9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e0e6:	68f8      	ldr	r0, [r7, #12]
 800e0e8:	f001 f8bd 	bl	800f266 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d03a      	beq.n	800e16c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f7ff fe42 	bl	800dd80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2200      	movs	r2, #0
 800e100:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e104:	e032      	b.n	800e16c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e106:	7afb      	ldrb	r3, [r7, #11]
 800e108:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	4619      	mov	r1, r3
 800e110:	68f8      	ldr	r0, [r7, #12]
 800e112:	f000 f985 	bl	800e420 <USBD_CoreFindEP>
 800e116:	4603      	mov	r3, r0
 800e118:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e11a:	7dfb      	ldrb	r3, [r7, #23]
 800e11c:	2bff      	cmp	r3, #255	; 0xff
 800e11e:	d025      	beq.n	800e16c <USBD_LL_DataInStage+0x15a>
 800e120:	7dfb      	ldrb	r3, [r7, #23]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d122      	bne.n	800e16c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	2b03      	cmp	r3, #3
 800e130:	d11c      	bne.n	800e16c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e132:	7dfa      	ldrb	r2, [r7, #23]
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	32ae      	adds	r2, #174	; 0xae
 800e138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e13c:	695b      	ldr	r3, [r3, #20]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d014      	beq.n	800e16c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e142:	7dfa      	ldrb	r2, [r7, #23]
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e14a:	7dfa      	ldrb	r2, [r7, #23]
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	32ae      	adds	r2, #174	; 0xae
 800e150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e154:	695b      	ldr	r3, [r3, #20]
 800e156:	7afa      	ldrb	r2, [r7, #11]
 800e158:	4611      	mov	r1, r2
 800e15a:	68f8      	ldr	r0, [r7, #12]
 800e15c:	4798      	blx	r3
 800e15e:	4603      	mov	r3, r0
 800e160:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e162:	7dbb      	ldrb	r3, [r7, #22]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d001      	beq.n	800e16c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e168:	7dbb      	ldrb	r3, [r7, #22]
 800e16a:	e000      	b.n	800e16e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e16c:	2300      	movs	r3, #0
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3718      	adds	r7, #24
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e176:	b580      	push	{r7, lr}
 800e178:	b084      	sub	sp, #16
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e17e:	2300      	movs	r3, #0
 800e180:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2201      	movs	r2, #1
 800e186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2200      	movs	r2, #0
 800e196:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d014      	beq.n	800e1dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d00e      	beq.n	800e1dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	6852      	ldr	r2, [r2, #4]
 800e1ca:	b2d2      	uxtb	r2, r2
 800e1cc:	4611      	mov	r1, r2
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	4798      	blx	r3
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e1d8:	2303      	movs	r3, #3
 800e1da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e1dc:	2340      	movs	r3, #64	; 0x40
 800e1de:	2200      	movs	r2, #0
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f001 fc15 	bl	800fa12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2240      	movs	r2, #64	; 0x40
 800e1f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e1f8:	2340      	movs	r3, #64	; 0x40
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	2180      	movs	r1, #128	; 0x80
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f001 fc07 	bl	800fa12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2201      	movs	r2, #1
 800e208:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2240      	movs	r2, #64	; 0x40
 800e20e:	621a      	str	r2, [r3, #32]

  return ret;
 800e210:	7bfb      	ldrb	r3, [r7, #15]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e21a:	b480      	push	{r7}
 800e21c:	b083      	sub	sp, #12
 800e21e:	af00      	add	r7, sp, #0
 800e220:	6078      	str	r0, [r7, #4]
 800e222:	460b      	mov	r3, r1
 800e224:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	78fa      	ldrb	r2, [r7, #3]
 800e22a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e23a:	b480      	push	{r7}
 800e23c:	b083      	sub	sp, #12
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	2b04      	cmp	r3, #4
 800e24c:	d006      	beq.n	800e25c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e254:	b2da      	uxtb	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2204      	movs	r2, #4
 800e260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	370c      	adds	r7, #12
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e272:	b480      	push	{r7}
 800e274:	b083      	sub	sp, #12
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e280:	b2db      	uxtb	r3, r3
 800e282:	2b04      	cmp	r3, #4
 800e284:	d106      	bne.n	800e294 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e28c:	b2da      	uxtb	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	370c      	adds	r7, #12
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr

0800e2a2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b082      	sub	sp, #8
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	2b03      	cmp	r3, #3
 800e2b4:	d110      	bne.n	800e2d8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00b      	beq.n	800e2d8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2c6:	69db      	ldr	r3, [r3, #28]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d005      	beq.n	800e2d8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2d2:	69db      	ldr	r3, [r3, #28]
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e2d8:	2300      	movs	r3, #0
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3708      	adds	r7, #8
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b082      	sub	sp, #8
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	32ae      	adds	r2, #174	; 0xae
 800e2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d101      	bne.n	800e304 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e300:	2303      	movs	r3, #3
 800e302:	e01c      	b.n	800e33e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	2b03      	cmp	r3, #3
 800e30e:	d115      	bne.n	800e33c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	32ae      	adds	r2, #174	; 0xae
 800e31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e31e:	6a1b      	ldr	r3, [r3, #32]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00b      	beq.n	800e33c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	32ae      	adds	r2, #174	; 0xae
 800e32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e332:	6a1b      	ldr	r3, [r3, #32]
 800e334:	78fa      	ldrb	r2, [r7, #3]
 800e336:	4611      	mov	r1, r2
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}

0800e346 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e346:	b580      	push	{r7, lr}
 800e348:	b082      	sub	sp, #8
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	6078      	str	r0, [r7, #4]
 800e34e:	460b      	mov	r3, r1
 800e350:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	32ae      	adds	r2, #174	; 0xae
 800e35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d101      	bne.n	800e368 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e364:	2303      	movs	r3, #3
 800e366:	e01c      	b.n	800e3a2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	2b03      	cmp	r3, #3
 800e372:	d115      	bne.n	800e3a0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	32ae      	adds	r2, #174	; 0xae
 800e37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e384:	2b00      	cmp	r3, #0
 800e386:	d00b      	beq.n	800e3a0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	32ae      	adds	r2, #174	; 0xae
 800e392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e398:	78fa      	ldrb	r2, [r7, #3]
 800e39a:	4611      	mov	r1, r2
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e3a0:	2300      	movs	r3, #0
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e3aa:	b480      	push	{r7}
 800e3ac:	b083      	sub	sp, #12
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d00e      	beq.n	800e3fc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	6852      	ldr	r2, [r2, #4]
 800e3ea:	b2d2      	uxtb	r2, r2
 800e3ec:	4611      	mov	r1, r2
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	4798      	blx	r3
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d001      	beq.n	800e3fc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e3f8:	2303      	movs	r3, #3
 800e3fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3710      	adds	r7, #16
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}

0800e406 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e406:	b480      	push	{r7}
 800e408:	b083      	sub	sp, #12
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	6078      	str	r0, [r7, #4]
 800e40e:	460b      	mov	r3, r1
 800e410:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e412:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e414:	4618      	mov	r0, r3
 800e416:	370c      	adds	r7, #12
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	460b      	mov	r3, r1
 800e42a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e42c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e42e:	4618      	mov	r0, r3
 800e430:	370c      	adds	r7, #12
 800e432:	46bd      	mov	sp, r7
 800e434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e438:	4770      	bx	lr

0800e43a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b086      	sub	sp, #24
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	460b      	mov	r3, r1
 800e444:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e44e:	2300      	movs	r3, #0
 800e450:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	885b      	ldrh	r3, [r3, #2]
 800e456:	b29a      	uxth	r2, r3
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	429a      	cmp	r2, r3
 800e460:	d920      	bls.n	800e4a4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	b29b      	uxth	r3, r3
 800e468:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e46a:	e013      	b.n	800e494 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e46c:	f107 030a 	add.w	r3, r7, #10
 800e470:	4619      	mov	r1, r3
 800e472:	6978      	ldr	r0, [r7, #20]
 800e474:	f000 f81b 	bl	800e4ae <USBD_GetNextDesc>
 800e478:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	785b      	ldrb	r3, [r3, #1]
 800e47e:	2b05      	cmp	r3, #5
 800e480:	d108      	bne.n	800e494 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	789b      	ldrb	r3, [r3, #2]
 800e48a:	78fa      	ldrb	r2, [r7, #3]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d008      	beq.n	800e4a2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e490:	2300      	movs	r3, #0
 800e492:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	885b      	ldrh	r3, [r3, #2]
 800e498:	b29a      	uxth	r2, r3
 800e49a:	897b      	ldrh	r3, [r7, #10]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d8e5      	bhi.n	800e46c <USBD_GetEpDesc+0x32>
 800e4a0:	e000      	b.n	800e4a4 <USBD_GetEpDesc+0x6a>
          break;
 800e4a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e4a4:	693b      	ldr	r3, [r7, #16]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3718      	adds	r7, #24
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}

0800e4ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e4ae:	b480      	push	{r7}
 800e4b0:	b085      	sub	sp, #20
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
 800e4b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	881a      	ldrh	r2, [r3, #0]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	4413      	add	r3, r2
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e4da:	68fb      	ldr	r3, [r7, #12]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3714      	adds	r7, #20
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr

0800e4e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b087      	sub	sp, #28
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e506:	8a3b      	ldrh	r3, [r7, #16]
 800e508:	021b      	lsls	r3, r3, #8
 800e50a:	b21a      	sxth	r2, r3
 800e50c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e510:	4313      	orrs	r3, r2
 800e512:	b21b      	sxth	r3, r3
 800e514:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e516:	89fb      	ldrh	r3, [r7, #14]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	371c      	adds	r7, #28
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e52e:	2300      	movs	r3, #0
 800e530:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e53a:	2b40      	cmp	r3, #64	; 0x40
 800e53c:	d005      	beq.n	800e54a <USBD_StdDevReq+0x26>
 800e53e:	2b40      	cmp	r3, #64	; 0x40
 800e540:	d857      	bhi.n	800e5f2 <USBD_StdDevReq+0xce>
 800e542:	2b00      	cmp	r3, #0
 800e544:	d00f      	beq.n	800e566 <USBD_StdDevReq+0x42>
 800e546:	2b20      	cmp	r3, #32
 800e548:	d153      	bne.n	800e5f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	32ae      	adds	r2, #174	; 0xae
 800e554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e558:	689b      	ldr	r3, [r3, #8]
 800e55a:	6839      	ldr	r1, [r7, #0]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	4798      	blx	r3
 800e560:	4603      	mov	r3, r0
 800e562:	73fb      	strb	r3, [r7, #15]
      break;
 800e564:	e04a      	b.n	800e5fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	785b      	ldrb	r3, [r3, #1]
 800e56a:	2b09      	cmp	r3, #9
 800e56c:	d83b      	bhi.n	800e5e6 <USBD_StdDevReq+0xc2>
 800e56e:	a201      	add	r2, pc, #4	; (adr r2, 800e574 <USBD_StdDevReq+0x50>)
 800e570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e574:	0800e5c9 	.word	0x0800e5c9
 800e578:	0800e5dd 	.word	0x0800e5dd
 800e57c:	0800e5e7 	.word	0x0800e5e7
 800e580:	0800e5d3 	.word	0x0800e5d3
 800e584:	0800e5e7 	.word	0x0800e5e7
 800e588:	0800e5a7 	.word	0x0800e5a7
 800e58c:	0800e59d 	.word	0x0800e59d
 800e590:	0800e5e7 	.word	0x0800e5e7
 800e594:	0800e5bf 	.word	0x0800e5bf
 800e598:	0800e5b1 	.word	0x0800e5b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 fa3c 	bl	800ea1c <USBD_GetDescriptor>
          break;
 800e5a4:	e024      	b.n	800e5f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e5a6:	6839      	ldr	r1, [r7, #0]
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 fba1 	bl	800ecf0 <USBD_SetAddress>
          break;
 800e5ae:	e01f      	b.n	800e5f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e5b0:	6839      	ldr	r1, [r7, #0]
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 fbe0 	bl	800ed78 <USBD_SetConfig>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	73fb      	strb	r3, [r7, #15]
          break;
 800e5bc:	e018      	b.n	800e5f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e5be:	6839      	ldr	r1, [r7, #0]
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fc83 	bl	800eecc <USBD_GetConfig>
          break;
 800e5c6:	e013      	b.n	800e5f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e5c8:	6839      	ldr	r1, [r7, #0]
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f000 fcb4 	bl	800ef38 <USBD_GetStatus>
          break;
 800e5d0:	e00e      	b.n	800e5f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e5d2:	6839      	ldr	r1, [r7, #0]
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 fce3 	bl	800efa0 <USBD_SetFeature>
          break;
 800e5da:	e009      	b.n	800e5f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e5dc:	6839      	ldr	r1, [r7, #0]
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 fd07 	bl	800eff2 <USBD_ClrFeature>
          break;
 800e5e4:	e004      	b.n	800e5f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e5e6:	6839      	ldr	r1, [r7, #0]
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 fd5e 	bl	800f0aa <USBD_CtlError>
          break;
 800e5ee:	bf00      	nop
      }
      break;
 800e5f0:	e004      	b.n	800e5fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 fd58 	bl	800f0aa <USBD_CtlError>
      break;
 800e5fa:	bf00      	nop
  }

  return ret;
 800e5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop

0800e608 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e612:	2300      	movs	r3, #0
 800e614:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e61e:	2b40      	cmp	r3, #64	; 0x40
 800e620:	d005      	beq.n	800e62e <USBD_StdItfReq+0x26>
 800e622:	2b40      	cmp	r3, #64	; 0x40
 800e624:	d852      	bhi.n	800e6cc <USBD_StdItfReq+0xc4>
 800e626:	2b00      	cmp	r3, #0
 800e628:	d001      	beq.n	800e62e <USBD_StdItfReq+0x26>
 800e62a:	2b20      	cmp	r3, #32
 800e62c:	d14e      	bne.n	800e6cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e634:	b2db      	uxtb	r3, r3
 800e636:	3b01      	subs	r3, #1
 800e638:	2b02      	cmp	r3, #2
 800e63a:	d840      	bhi.n	800e6be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	889b      	ldrh	r3, [r3, #4]
 800e640:	b2db      	uxtb	r3, r3
 800e642:	2b01      	cmp	r3, #1
 800e644:	d836      	bhi.n	800e6b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	889b      	ldrh	r3, [r3, #4]
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	4619      	mov	r1, r3
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f7ff fed9 	bl	800e406 <USBD_CoreFindIF>
 800e654:	4603      	mov	r3, r0
 800e656:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e658:	7bbb      	ldrb	r3, [r7, #14]
 800e65a:	2bff      	cmp	r3, #255	; 0xff
 800e65c:	d01d      	beq.n	800e69a <USBD_StdItfReq+0x92>
 800e65e:	7bbb      	ldrb	r3, [r7, #14]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d11a      	bne.n	800e69a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e664:	7bba      	ldrb	r2, [r7, #14]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	32ae      	adds	r2, #174	; 0xae
 800e66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d00f      	beq.n	800e694 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e674:	7bba      	ldrb	r2, [r7, #14]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e67c:	7bba      	ldrb	r2, [r7, #14]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	32ae      	adds	r2, #174	; 0xae
 800e682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	6839      	ldr	r1, [r7, #0]
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	4798      	blx	r3
 800e68e:	4603      	mov	r3, r0
 800e690:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e692:	e004      	b.n	800e69e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e694:	2303      	movs	r3, #3
 800e696:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e698:	e001      	b.n	800e69e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e69a:	2303      	movs	r3, #3
 800e69c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	88db      	ldrh	r3, [r3, #6]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d110      	bne.n	800e6c8 <USBD_StdItfReq+0xc0>
 800e6a6:	7bfb      	ldrb	r3, [r7, #15]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d10d      	bne.n	800e6c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 fdc7 	bl	800f240 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e6b2:	e009      	b.n	800e6c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e6b4:	6839      	ldr	r1, [r7, #0]
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 fcf7 	bl	800f0aa <USBD_CtlError>
          break;
 800e6bc:	e004      	b.n	800e6c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e6be:	6839      	ldr	r1, [r7, #0]
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 fcf2 	bl	800f0aa <USBD_CtlError>
          break;
 800e6c6:	e000      	b.n	800e6ca <USBD_StdItfReq+0xc2>
          break;
 800e6c8:	bf00      	nop
      }
      break;
 800e6ca:	e004      	b.n	800e6d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e6cc:	6839      	ldr	r1, [r7, #0]
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 fceb 	bl	800f0aa <USBD_CtlError>
      break;
 800e6d4:	bf00      	nop
  }

  return ret;
 800e6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	889b      	ldrh	r3, [r3, #4]
 800e6f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e6fc:	2b40      	cmp	r3, #64	; 0x40
 800e6fe:	d007      	beq.n	800e710 <USBD_StdEPReq+0x30>
 800e700:	2b40      	cmp	r3, #64	; 0x40
 800e702:	f200 817f 	bhi.w	800ea04 <USBD_StdEPReq+0x324>
 800e706:	2b00      	cmp	r3, #0
 800e708:	d02a      	beq.n	800e760 <USBD_StdEPReq+0x80>
 800e70a:	2b20      	cmp	r3, #32
 800e70c:	f040 817a 	bne.w	800ea04 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e710:	7bbb      	ldrb	r3, [r7, #14]
 800e712:	4619      	mov	r1, r3
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f7ff fe83 	bl	800e420 <USBD_CoreFindEP>
 800e71a:	4603      	mov	r3, r0
 800e71c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e71e:	7b7b      	ldrb	r3, [r7, #13]
 800e720:	2bff      	cmp	r3, #255	; 0xff
 800e722:	f000 8174 	beq.w	800ea0e <USBD_StdEPReq+0x32e>
 800e726:	7b7b      	ldrb	r3, [r7, #13]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	f040 8170 	bne.w	800ea0e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e72e:	7b7a      	ldrb	r2, [r7, #13]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e736:	7b7a      	ldrb	r2, [r7, #13]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	32ae      	adds	r2, #174	; 0xae
 800e73c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e740:	689b      	ldr	r3, [r3, #8]
 800e742:	2b00      	cmp	r3, #0
 800e744:	f000 8163 	beq.w	800ea0e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e748:	7b7a      	ldrb	r2, [r7, #13]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	32ae      	adds	r2, #174	; 0xae
 800e74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e752:	689b      	ldr	r3, [r3, #8]
 800e754:	6839      	ldr	r1, [r7, #0]
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	4798      	blx	r3
 800e75a:	4603      	mov	r3, r0
 800e75c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e75e:	e156      	b.n	800ea0e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	785b      	ldrb	r3, [r3, #1]
 800e764:	2b03      	cmp	r3, #3
 800e766:	d008      	beq.n	800e77a <USBD_StdEPReq+0x9a>
 800e768:	2b03      	cmp	r3, #3
 800e76a:	f300 8145 	bgt.w	800e9f8 <USBD_StdEPReq+0x318>
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f000 809b 	beq.w	800e8aa <USBD_StdEPReq+0x1ca>
 800e774:	2b01      	cmp	r3, #1
 800e776:	d03c      	beq.n	800e7f2 <USBD_StdEPReq+0x112>
 800e778:	e13e      	b.n	800e9f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e780:	b2db      	uxtb	r3, r3
 800e782:	2b02      	cmp	r3, #2
 800e784:	d002      	beq.n	800e78c <USBD_StdEPReq+0xac>
 800e786:	2b03      	cmp	r3, #3
 800e788:	d016      	beq.n	800e7b8 <USBD_StdEPReq+0xd8>
 800e78a:	e02c      	b.n	800e7e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e78c:	7bbb      	ldrb	r3, [r7, #14]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d00d      	beq.n	800e7ae <USBD_StdEPReq+0xce>
 800e792:	7bbb      	ldrb	r3, [r7, #14]
 800e794:	2b80      	cmp	r3, #128	; 0x80
 800e796:	d00a      	beq.n	800e7ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e798:	7bbb      	ldrb	r3, [r7, #14]
 800e79a:	4619      	mov	r1, r3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f001 f97d 	bl	800fa9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7a2:	2180      	movs	r1, #128	; 0x80
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f001 f979 	bl	800fa9c <USBD_LL_StallEP>
 800e7aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e7ac:	e020      	b.n	800e7f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e7ae:	6839      	ldr	r1, [r7, #0]
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 fc7a 	bl	800f0aa <USBD_CtlError>
              break;
 800e7b6:	e01b      	b.n	800e7f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	885b      	ldrh	r3, [r3, #2]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d10e      	bne.n	800e7de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e7c0:	7bbb      	ldrb	r3, [r7, #14]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00b      	beq.n	800e7de <USBD_StdEPReq+0xfe>
 800e7c6:	7bbb      	ldrb	r3, [r7, #14]
 800e7c8:	2b80      	cmp	r3, #128	; 0x80
 800e7ca:	d008      	beq.n	800e7de <USBD_StdEPReq+0xfe>
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	88db      	ldrh	r3, [r3, #6]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d104      	bne.n	800e7de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7d4:	7bbb      	ldrb	r3, [r7, #14]
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f001 f95f 	bl	800fa9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 fd2e 	bl	800f240 <USBD_CtlSendStatus>

              break;
 800e7e4:	e004      	b.n	800e7f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e7e6:	6839      	ldr	r1, [r7, #0]
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f000 fc5e 	bl	800f0aa <USBD_CtlError>
              break;
 800e7ee:	bf00      	nop
          }
          break;
 800e7f0:	e107      	b.n	800ea02 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	d002      	beq.n	800e804 <USBD_StdEPReq+0x124>
 800e7fe:	2b03      	cmp	r3, #3
 800e800:	d016      	beq.n	800e830 <USBD_StdEPReq+0x150>
 800e802:	e04b      	b.n	800e89c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e804:	7bbb      	ldrb	r3, [r7, #14]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00d      	beq.n	800e826 <USBD_StdEPReq+0x146>
 800e80a:	7bbb      	ldrb	r3, [r7, #14]
 800e80c:	2b80      	cmp	r3, #128	; 0x80
 800e80e:	d00a      	beq.n	800e826 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e810:	7bbb      	ldrb	r3, [r7, #14]
 800e812:	4619      	mov	r1, r3
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f001 f941 	bl	800fa9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e81a:	2180      	movs	r1, #128	; 0x80
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f001 f93d 	bl	800fa9c <USBD_LL_StallEP>
 800e822:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e824:	e040      	b.n	800e8a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e826:	6839      	ldr	r1, [r7, #0]
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 fc3e 	bl	800f0aa <USBD_CtlError>
              break;
 800e82e:	e03b      	b.n	800e8a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	885b      	ldrh	r3, [r3, #2]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d136      	bne.n	800e8a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e838:	7bbb      	ldrb	r3, [r7, #14]
 800e83a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d004      	beq.n	800e84c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e842:	7bbb      	ldrb	r3, [r7, #14]
 800e844:	4619      	mov	r1, r3
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f001 f947 	bl	800fada <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f000 fcf7 	bl	800f240 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e852:	7bbb      	ldrb	r3, [r7, #14]
 800e854:	4619      	mov	r1, r3
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f7ff fde2 	bl	800e420 <USBD_CoreFindEP>
 800e85c:	4603      	mov	r3, r0
 800e85e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e860:	7b7b      	ldrb	r3, [r7, #13]
 800e862:	2bff      	cmp	r3, #255	; 0xff
 800e864:	d01f      	beq.n	800e8a6 <USBD_StdEPReq+0x1c6>
 800e866:	7b7b      	ldrb	r3, [r7, #13]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d11c      	bne.n	800e8a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e86c:	7b7a      	ldrb	r2, [r7, #13]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e874:	7b7a      	ldrb	r2, [r7, #13]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	32ae      	adds	r2, #174	; 0xae
 800e87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e87e:	689b      	ldr	r3, [r3, #8]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d010      	beq.n	800e8a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e884:	7b7a      	ldrb	r2, [r7, #13]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	32ae      	adds	r2, #174	; 0xae
 800e88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	6839      	ldr	r1, [r7, #0]
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	4798      	blx	r3
 800e896:	4603      	mov	r3, r0
 800e898:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e89a:	e004      	b.n	800e8a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e89c:	6839      	ldr	r1, [r7, #0]
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 fc03 	bl	800f0aa <USBD_CtlError>
              break;
 800e8a4:	e000      	b.n	800e8a8 <USBD_StdEPReq+0x1c8>
              break;
 800e8a6:	bf00      	nop
          }
          break;
 800e8a8:	e0ab      	b.n	800ea02 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	2b02      	cmp	r3, #2
 800e8b4:	d002      	beq.n	800e8bc <USBD_StdEPReq+0x1dc>
 800e8b6:	2b03      	cmp	r3, #3
 800e8b8:	d032      	beq.n	800e920 <USBD_StdEPReq+0x240>
 800e8ba:	e097      	b.n	800e9ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e8bc:	7bbb      	ldrb	r3, [r7, #14]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d007      	beq.n	800e8d2 <USBD_StdEPReq+0x1f2>
 800e8c2:	7bbb      	ldrb	r3, [r7, #14]
 800e8c4:	2b80      	cmp	r3, #128	; 0x80
 800e8c6:	d004      	beq.n	800e8d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e8c8:	6839      	ldr	r1, [r7, #0]
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f000 fbed 	bl	800f0aa <USBD_CtlError>
                break;
 800e8d0:	e091      	b.n	800e9f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	da0b      	bge.n	800e8f2 <USBD_StdEPReq+0x212>
 800e8da:	7bbb      	ldrb	r3, [r7, #14]
 800e8dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	4413      	add	r3, r2
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	3310      	adds	r3, #16
 800e8ea:	687a      	ldr	r2, [r7, #4]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	3304      	adds	r3, #4
 800e8f0:	e00b      	b.n	800e90a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e8f2:	7bbb      	ldrb	r3, [r7, #14]
 800e8f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	009b      	lsls	r3, r3, #2
 800e8fc:	4413      	add	r3, r2
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	4413      	add	r3, r2
 800e908:	3304      	adds	r3, #4
 800e90a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	2200      	movs	r2, #0
 800e910:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	2202      	movs	r2, #2
 800e916:	4619      	mov	r1, r3
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 fc37 	bl	800f18c <USBD_CtlSendData>
              break;
 800e91e:	e06a      	b.n	800e9f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e924:	2b00      	cmp	r3, #0
 800e926:	da11      	bge.n	800e94c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e928:	7bbb      	ldrb	r3, [r7, #14]
 800e92a:	f003 020f 	and.w	r2, r3, #15
 800e92e:	6879      	ldr	r1, [r7, #4]
 800e930:	4613      	mov	r3, r2
 800e932:	009b      	lsls	r3, r3, #2
 800e934:	4413      	add	r3, r2
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	440b      	add	r3, r1
 800e93a:	3324      	adds	r3, #36	; 0x24
 800e93c:	881b      	ldrh	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d117      	bne.n	800e972 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e942:	6839      	ldr	r1, [r7, #0]
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 fbb0 	bl	800f0aa <USBD_CtlError>
                  break;
 800e94a:	e054      	b.n	800e9f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e94c:	7bbb      	ldrb	r3, [r7, #14]
 800e94e:	f003 020f 	and.w	r2, r3, #15
 800e952:	6879      	ldr	r1, [r7, #4]
 800e954:	4613      	mov	r3, r2
 800e956:	009b      	lsls	r3, r3, #2
 800e958:	4413      	add	r3, r2
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	440b      	add	r3, r1
 800e95e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e962:	881b      	ldrh	r3, [r3, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d104      	bne.n	800e972 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e968:	6839      	ldr	r1, [r7, #0]
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 fb9d 	bl	800f0aa <USBD_CtlError>
                  break;
 800e970:	e041      	b.n	800e9f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e976:	2b00      	cmp	r3, #0
 800e978:	da0b      	bge.n	800e992 <USBD_StdEPReq+0x2b2>
 800e97a:	7bbb      	ldrb	r3, [r7, #14]
 800e97c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e980:	4613      	mov	r3, r2
 800e982:	009b      	lsls	r3, r3, #2
 800e984:	4413      	add	r3, r2
 800e986:	009b      	lsls	r3, r3, #2
 800e988:	3310      	adds	r3, #16
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	4413      	add	r3, r2
 800e98e:	3304      	adds	r3, #4
 800e990:	e00b      	b.n	800e9aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e992:	7bbb      	ldrb	r3, [r7, #14]
 800e994:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e998:	4613      	mov	r3, r2
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	4413      	add	r3, r2
 800e99e:	009b      	lsls	r3, r3, #2
 800e9a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	4413      	add	r3, r2
 800e9a8:	3304      	adds	r3, #4
 800e9aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e9ac:	7bbb      	ldrb	r3, [r7, #14]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d002      	beq.n	800e9b8 <USBD_StdEPReq+0x2d8>
 800e9b2:	7bbb      	ldrb	r3, [r7, #14]
 800e9b4:	2b80      	cmp	r3, #128	; 0x80
 800e9b6:	d103      	bne.n	800e9c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	601a      	str	r2, [r3, #0]
 800e9be:	e00e      	b.n	800e9de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e9c0:	7bbb      	ldrb	r3, [r7, #14]
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f001 f8a7 	bl	800fb18 <USBD_LL_IsStallEP>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d003      	beq.n	800e9d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	e002      	b.n	800e9de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	2202      	movs	r2, #2
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 fbd1 	bl	800f18c <USBD_CtlSendData>
              break;
 800e9ea:	e004      	b.n	800e9f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e9ec:	6839      	ldr	r1, [r7, #0]
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 fb5b 	bl	800f0aa <USBD_CtlError>
              break;
 800e9f4:	bf00      	nop
          }
          break;
 800e9f6:	e004      	b.n	800ea02 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e9f8:	6839      	ldr	r1, [r7, #0]
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f000 fb55 	bl	800f0aa <USBD_CtlError>
          break;
 800ea00:	bf00      	nop
      }
      break;
 800ea02:	e005      	b.n	800ea10 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ea04:	6839      	ldr	r1, [r7, #0]
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 fb4f 	bl	800f0aa <USBD_CtlError>
      break;
 800ea0c:	e000      	b.n	800ea10 <USBD_StdEPReq+0x330>
      break;
 800ea0e:	bf00      	nop
  }

  return ret;
 800ea10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3710      	adds	r7, #16
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
	...

0800ea1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea26:	2300      	movs	r3, #0
 800ea28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	885b      	ldrh	r3, [r3, #2]
 800ea36:	0a1b      	lsrs	r3, r3, #8
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	3b01      	subs	r3, #1
 800ea3c:	2b06      	cmp	r3, #6
 800ea3e:	f200 8128 	bhi.w	800ec92 <USBD_GetDescriptor+0x276>
 800ea42:	a201      	add	r2, pc, #4	; (adr r2, 800ea48 <USBD_GetDescriptor+0x2c>)
 800ea44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea48:	0800ea65 	.word	0x0800ea65
 800ea4c:	0800ea7d 	.word	0x0800ea7d
 800ea50:	0800eabd 	.word	0x0800eabd
 800ea54:	0800ec93 	.word	0x0800ec93
 800ea58:	0800ec93 	.word	0x0800ec93
 800ea5c:	0800ec33 	.word	0x0800ec33
 800ea60:	0800ec5f 	.word	0x0800ec5f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	687a      	ldr	r2, [r7, #4]
 800ea6e:	7c12      	ldrb	r2, [r2, #16]
 800ea70:	f107 0108 	add.w	r1, r7, #8
 800ea74:	4610      	mov	r0, r2
 800ea76:	4798      	blx	r3
 800ea78:	60f8      	str	r0, [r7, #12]
      break;
 800ea7a:	e112      	b.n	800eca2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	7c1b      	ldrb	r3, [r3, #16]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d10d      	bne.n	800eaa0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea8c:	f107 0208 	add.w	r2, r7, #8
 800ea90:	4610      	mov	r0, r2
 800ea92:	4798      	blx	r3
 800ea94:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	2202      	movs	r2, #2
 800ea9c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ea9e:	e100      	b.n	800eca2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaa8:	f107 0208 	add.w	r2, r7, #8
 800eaac:	4610      	mov	r0, r2
 800eaae:	4798      	blx	r3
 800eab0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	3301      	adds	r3, #1
 800eab6:	2202      	movs	r2, #2
 800eab8:	701a      	strb	r2, [r3, #0]
      break;
 800eaba:	e0f2      	b.n	800eca2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	885b      	ldrh	r3, [r3, #2]
 800eac0:	b2db      	uxtb	r3, r3
 800eac2:	2b05      	cmp	r3, #5
 800eac4:	f200 80ac 	bhi.w	800ec20 <USBD_GetDescriptor+0x204>
 800eac8:	a201      	add	r2, pc, #4	; (adr r2, 800ead0 <USBD_GetDescriptor+0xb4>)
 800eaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eace:	bf00      	nop
 800ead0:	0800eae9 	.word	0x0800eae9
 800ead4:	0800eb1d 	.word	0x0800eb1d
 800ead8:	0800eb51 	.word	0x0800eb51
 800eadc:	0800eb85 	.word	0x0800eb85
 800eae0:	0800ebb9 	.word	0x0800ebb9
 800eae4:	0800ebed 	.word	0x0800ebed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d00b      	beq.n	800eb0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	7c12      	ldrb	r2, [r2, #16]
 800eb00:	f107 0108 	add.w	r1, r7, #8
 800eb04:	4610      	mov	r0, r2
 800eb06:	4798      	blx	r3
 800eb08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb0a:	e091      	b.n	800ec30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb0c:	6839      	ldr	r1, [r7, #0]
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f000 facb 	bl	800f0aa <USBD_CtlError>
            err++;
 800eb14:	7afb      	ldrb	r3, [r7, #11]
 800eb16:	3301      	adds	r3, #1
 800eb18:	72fb      	strb	r3, [r7, #11]
          break;
 800eb1a:	e089      	b.n	800ec30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00b      	beq.n	800eb40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb2e:	689b      	ldr	r3, [r3, #8]
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	7c12      	ldrb	r2, [r2, #16]
 800eb34:	f107 0108 	add.w	r1, r7, #8
 800eb38:	4610      	mov	r0, r2
 800eb3a:	4798      	blx	r3
 800eb3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb3e:	e077      	b.n	800ec30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb40:	6839      	ldr	r1, [r7, #0]
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 fab1 	bl	800f0aa <USBD_CtlError>
            err++;
 800eb48:	7afb      	ldrb	r3, [r7, #11]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	72fb      	strb	r3, [r7, #11]
          break;
 800eb4e:	e06f      	b.n	800ec30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00b      	beq.n	800eb74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb62:	68db      	ldr	r3, [r3, #12]
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	7c12      	ldrb	r2, [r2, #16]
 800eb68:	f107 0108 	add.w	r1, r7, #8
 800eb6c:	4610      	mov	r0, r2
 800eb6e:	4798      	blx	r3
 800eb70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb72:	e05d      	b.n	800ec30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb74:	6839      	ldr	r1, [r7, #0]
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f000 fa97 	bl	800f0aa <USBD_CtlError>
            err++;
 800eb7c:	7afb      	ldrb	r3, [r7, #11]
 800eb7e:	3301      	adds	r3, #1
 800eb80:	72fb      	strb	r3, [r7, #11]
          break;
 800eb82:	e055      	b.n	800ec30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d00b      	beq.n	800eba8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb96:	691b      	ldr	r3, [r3, #16]
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	7c12      	ldrb	r2, [r2, #16]
 800eb9c:	f107 0108 	add.w	r1, r7, #8
 800eba0:	4610      	mov	r0, r2
 800eba2:	4798      	blx	r3
 800eba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eba6:	e043      	b.n	800ec30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eba8:	6839      	ldr	r1, [r7, #0]
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 fa7d 	bl	800f0aa <USBD_CtlError>
            err++;
 800ebb0:	7afb      	ldrb	r3, [r7, #11]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	72fb      	strb	r3, [r7, #11]
          break;
 800ebb6:	e03b      	b.n	800ec30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebbe:	695b      	ldr	r3, [r3, #20]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d00b      	beq.n	800ebdc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebca:	695b      	ldr	r3, [r3, #20]
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	7c12      	ldrb	r2, [r2, #16]
 800ebd0:	f107 0108 	add.w	r1, r7, #8
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	4798      	blx	r3
 800ebd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebda:	e029      	b.n	800ec30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ebdc:	6839      	ldr	r1, [r7, #0]
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f000 fa63 	bl	800f0aa <USBD_CtlError>
            err++;
 800ebe4:	7afb      	ldrb	r3, [r7, #11]
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	72fb      	strb	r3, [r7, #11]
          break;
 800ebea:	e021      	b.n	800ec30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebf2:	699b      	ldr	r3, [r3, #24]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d00b      	beq.n	800ec10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebfe:	699b      	ldr	r3, [r3, #24]
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	7c12      	ldrb	r2, [r2, #16]
 800ec04:	f107 0108 	add.w	r1, r7, #8
 800ec08:	4610      	mov	r0, r2
 800ec0a:	4798      	blx	r3
 800ec0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ec0e:	e00f      	b.n	800ec30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ec10:	6839      	ldr	r1, [r7, #0]
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 fa49 	bl	800f0aa <USBD_CtlError>
            err++;
 800ec18:	7afb      	ldrb	r3, [r7, #11]
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ec1e:	e007      	b.n	800ec30 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ec20:	6839      	ldr	r1, [r7, #0]
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f000 fa41 	bl	800f0aa <USBD_CtlError>
          err++;
 800ec28:	7afb      	ldrb	r3, [r7, #11]
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ec2e:	bf00      	nop
      }
      break;
 800ec30:	e037      	b.n	800eca2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	7c1b      	ldrb	r3, [r3, #16]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d109      	bne.n	800ec4e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec42:	f107 0208 	add.w	r2, r7, #8
 800ec46:	4610      	mov	r0, r2
 800ec48:	4798      	blx	r3
 800ec4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec4c:	e029      	b.n	800eca2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ec4e:	6839      	ldr	r1, [r7, #0]
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 fa2a 	bl	800f0aa <USBD_CtlError>
        err++;
 800ec56:	7afb      	ldrb	r3, [r7, #11]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ec5c:	e021      	b.n	800eca2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	7c1b      	ldrb	r3, [r3, #16]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d10d      	bne.n	800ec82 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec6e:	f107 0208 	add.w	r2, r7, #8
 800ec72:	4610      	mov	r0, r2
 800ec74:	4798      	blx	r3
 800ec76:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	2207      	movs	r2, #7
 800ec7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec80:	e00f      	b.n	800eca2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ec82:	6839      	ldr	r1, [r7, #0]
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f000 fa10 	bl	800f0aa <USBD_CtlError>
        err++;
 800ec8a:	7afb      	ldrb	r3, [r7, #11]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	72fb      	strb	r3, [r7, #11]
      break;
 800ec90:	e007      	b.n	800eca2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ec92:	6839      	ldr	r1, [r7, #0]
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f000 fa08 	bl	800f0aa <USBD_CtlError>
      err++;
 800ec9a:	7afb      	ldrb	r3, [r7, #11]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	72fb      	strb	r3, [r7, #11]
      break;
 800eca0:	bf00      	nop
  }

  if (err != 0U)
 800eca2:	7afb      	ldrb	r3, [r7, #11]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d11e      	bne.n	800ece6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	88db      	ldrh	r3, [r3, #6]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d016      	beq.n	800ecde <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ecb0:	893b      	ldrh	r3, [r7, #8]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00e      	beq.n	800ecd4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	88da      	ldrh	r2, [r3, #6]
 800ecba:	893b      	ldrh	r3, [r7, #8]
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	bf28      	it	cs
 800ecc0:	4613      	movcs	r3, r2
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ecc6:	893b      	ldrh	r3, [r7, #8]
 800ecc8:	461a      	mov	r2, r3
 800ecca:	68f9      	ldr	r1, [r7, #12]
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 fa5d 	bl	800f18c <USBD_CtlSendData>
 800ecd2:	e009      	b.n	800ece8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ecd4:	6839      	ldr	r1, [r7, #0]
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f000 f9e7 	bl	800f0aa <USBD_CtlError>
 800ecdc:	e004      	b.n	800ece8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 faae 	bl	800f240 <USBD_CtlSendStatus>
 800ece4:	e000      	b.n	800ece8 <USBD_GetDescriptor+0x2cc>
    return;
 800ece6:	bf00      	nop
  }
}
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop

0800ecf0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	889b      	ldrh	r3, [r3, #4]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d131      	bne.n	800ed66 <USBD_SetAddress+0x76>
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	88db      	ldrh	r3, [r3, #6]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d12d      	bne.n	800ed66 <USBD_SetAddress+0x76>
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	885b      	ldrh	r3, [r3, #2]
 800ed0e:	2b7f      	cmp	r3, #127	; 0x7f
 800ed10:	d829      	bhi.n	800ed66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	885b      	ldrh	r3, [r3, #2]
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	2b03      	cmp	r3, #3
 800ed28:	d104      	bne.n	800ed34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ed2a:	6839      	ldr	r1, [r7, #0]
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f000 f9bc 	bl	800f0aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed32:	e01d      	b.n	800ed70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	7bfa      	ldrb	r2, [r7, #15]
 800ed38:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ed3c:	7bfb      	ldrb	r3, [r7, #15]
 800ed3e:	4619      	mov	r1, r3
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 ff15 	bl	800fb70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 fa7a 	bl	800f240 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ed4c:	7bfb      	ldrb	r3, [r7, #15]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d004      	beq.n	800ed5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2202      	movs	r2, #2
 800ed56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed5a:	e009      	b.n	800ed70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2201      	movs	r2, #1
 800ed60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed64:	e004      	b.n	800ed70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ed66:	6839      	ldr	r1, [r7, #0]
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f000 f99e 	bl	800f0aa <USBD_CtlError>
  }
}
 800ed6e:	bf00      	nop
 800ed70:	bf00      	nop
 800ed72:	3710      	adds	r7, #16
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed82:	2300      	movs	r3, #0
 800ed84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	885b      	ldrh	r3, [r3, #2]
 800ed8a:	b2da      	uxtb	r2, r3
 800ed8c:	4b4e      	ldr	r3, [pc, #312]	; (800eec8 <USBD_SetConfig+0x150>)
 800ed8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ed90:	4b4d      	ldr	r3, [pc, #308]	; (800eec8 <USBD_SetConfig+0x150>)
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d905      	bls.n	800eda4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ed98:	6839      	ldr	r1, [r7, #0]
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 f985 	bl	800f0aa <USBD_CtlError>
    return USBD_FAIL;
 800eda0:	2303      	movs	r3, #3
 800eda2:	e08c      	b.n	800eebe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	2b02      	cmp	r3, #2
 800edae:	d002      	beq.n	800edb6 <USBD_SetConfig+0x3e>
 800edb0:	2b03      	cmp	r3, #3
 800edb2:	d029      	beq.n	800ee08 <USBD_SetConfig+0x90>
 800edb4:	e075      	b.n	800eea2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800edb6:	4b44      	ldr	r3, [pc, #272]	; (800eec8 <USBD_SetConfig+0x150>)
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d020      	beq.n	800ee00 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800edbe:	4b42      	ldr	r3, [pc, #264]	; (800eec8 <USBD_SetConfig+0x150>)
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	461a      	mov	r2, r3
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800edc8:	4b3f      	ldr	r3, [pc, #252]	; (800eec8 <USBD_SetConfig+0x150>)
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	4619      	mov	r1, r3
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f7fe ffe1 	bl	800dd96 <USBD_SetClassConfig>
 800edd4:	4603      	mov	r3, r0
 800edd6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800edd8:	7bfb      	ldrb	r3, [r7, #15]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d008      	beq.n	800edf0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800edde:	6839      	ldr	r1, [r7, #0]
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f000 f962 	bl	800f0aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2202      	movs	r2, #2
 800edea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800edee:	e065      	b.n	800eebc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f000 fa25 	bl	800f240 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2203      	movs	r2, #3
 800edfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800edfe:	e05d      	b.n	800eebc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f000 fa1d 	bl	800f240 <USBD_CtlSendStatus>
      break;
 800ee06:	e059      	b.n	800eebc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ee08:	4b2f      	ldr	r3, [pc, #188]	; (800eec8 <USBD_SetConfig+0x150>)
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d112      	bne.n	800ee36 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2202      	movs	r2, #2
 800ee14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ee18:	4b2b      	ldr	r3, [pc, #172]	; (800eec8 <USBD_SetConfig+0x150>)
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee22:	4b29      	ldr	r3, [pc, #164]	; (800eec8 <USBD_SetConfig+0x150>)
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	4619      	mov	r1, r3
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7fe ffd0 	bl	800ddce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 fa06 	bl	800f240 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ee34:	e042      	b.n	800eebc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ee36:	4b24      	ldr	r3, [pc, #144]	; (800eec8 <USBD_SetConfig+0x150>)
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d02a      	beq.n	800ee9a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	685b      	ldr	r3, [r3, #4]
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7fe ffbe 	bl	800ddce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ee52:	4b1d      	ldr	r3, [pc, #116]	; (800eec8 <USBD_SetConfig+0x150>)
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	461a      	mov	r2, r3
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee5c:	4b1a      	ldr	r3, [pc, #104]	; (800eec8 <USBD_SetConfig+0x150>)
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	4619      	mov	r1, r3
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f7fe ff97 	bl	800dd96 <USBD_SetClassConfig>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ee6c:	7bfb      	ldrb	r3, [r7, #15]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d00f      	beq.n	800ee92 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 f918 	bl	800f0aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	4619      	mov	r1, r3
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f7fe ffa3 	bl	800ddce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2202      	movs	r2, #2
 800ee8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ee90:	e014      	b.n	800eebc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 f9d4 	bl	800f240 <USBD_CtlSendStatus>
      break;
 800ee98:	e010      	b.n	800eebc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f9d0 	bl	800f240 <USBD_CtlSendStatus>
      break;
 800eea0:	e00c      	b.n	800eebc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800eea2:	6839      	ldr	r1, [r7, #0]
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f000 f900 	bl	800f0aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eeaa:	4b07      	ldr	r3, [pc, #28]	; (800eec8 <USBD_SetConfig+0x150>)
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	4619      	mov	r1, r3
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7fe ff8c 	bl	800ddce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800eeb6:	2303      	movs	r3, #3
 800eeb8:	73fb      	strb	r3, [r7, #15]
      break;
 800eeba:	bf00      	nop
  }

  return ret;
 800eebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	24000de8 	.word	0x24000de8

0800eecc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	88db      	ldrh	r3, [r3, #6]
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	d004      	beq.n	800eee8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800eede:	6839      	ldr	r1, [r7, #0]
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 f8e2 	bl	800f0aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800eee6:	e023      	b.n	800ef30 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	2b02      	cmp	r3, #2
 800eef2:	dc02      	bgt.n	800eefa <USBD_GetConfig+0x2e>
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	dc03      	bgt.n	800ef00 <USBD_GetConfig+0x34>
 800eef8:	e015      	b.n	800ef26 <USBD_GetConfig+0x5a>
 800eefa:	2b03      	cmp	r3, #3
 800eefc:	d00b      	beq.n	800ef16 <USBD_GetConfig+0x4a>
 800eefe:	e012      	b.n	800ef26 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2200      	movs	r2, #0
 800ef04:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	3308      	adds	r3, #8
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f000 f93c 	bl	800f18c <USBD_CtlSendData>
        break;
 800ef14:	e00c      	b.n	800ef30 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	3304      	adds	r3, #4
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f000 f934 	bl	800f18c <USBD_CtlSendData>
        break;
 800ef24:	e004      	b.n	800ef30 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ef26:	6839      	ldr	r1, [r7, #0]
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 f8be 	bl	800f0aa <USBD_CtlError>
        break;
 800ef2e:	bf00      	nop
}
 800ef30:	bf00      	nop
 800ef32:	3708      	adds	r7, #8
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef48:	b2db      	uxtb	r3, r3
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	2b02      	cmp	r3, #2
 800ef4e:	d81e      	bhi.n	800ef8e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	88db      	ldrh	r3, [r3, #6]
 800ef54:	2b02      	cmp	r3, #2
 800ef56:	d004      	beq.n	800ef62 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ef58:	6839      	ldr	r1, [r7, #0]
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 f8a5 	bl	800f0aa <USBD_CtlError>
        break;
 800ef60:	e01a      	b.n	800ef98 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2201      	movs	r2, #1
 800ef66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d005      	beq.n	800ef7e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	f043 0202 	orr.w	r2, r3, #2
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	330c      	adds	r3, #12
 800ef82:	2202      	movs	r2, #2
 800ef84:	4619      	mov	r1, r3
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f000 f900 	bl	800f18c <USBD_CtlSendData>
      break;
 800ef8c:	e004      	b.n	800ef98 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ef8e:	6839      	ldr	r1, [r7, #0]
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f000 f88a 	bl	800f0aa <USBD_CtlError>
      break;
 800ef96:	bf00      	nop
  }
}
 800ef98:	bf00      	nop
 800ef9a:	3708      	adds	r7, #8
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	885b      	ldrh	r3, [r3, #2]
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d107      	bne.n	800efc2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2201      	movs	r2, #1
 800efb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f000 f940 	bl	800f240 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800efc0:	e013      	b.n	800efea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	885b      	ldrh	r3, [r3, #2]
 800efc6:	2b02      	cmp	r3, #2
 800efc8:	d10b      	bne.n	800efe2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	889b      	ldrh	r3, [r3, #4]
 800efce:	0a1b      	lsrs	r3, r3, #8
 800efd0:	b29b      	uxth	r3, r3
 800efd2:	b2da      	uxtb	r2, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f000 f930 	bl	800f240 <USBD_CtlSendStatus>
}
 800efe0:	e003      	b.n	800efea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800efe2:	6839      	ldr	r1, [r7, #0]
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f000 f860 	bl	800f0aa <USBD_CtlError>
}
 800efea:	bf00      	nop
 800efec:	3708      	adds	r7, #8
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}

0800eff2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eff2:	b580      	push	{r7, lr}
 800eff4:	b082      	sub	sp, #8
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	6078      	str	r0, [r7, #4]
 800effa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f002:	b2db      	uxtb	r3, r3
 800f004:	3b01      	subs	r3, #1
 800f006:	2b02      	cmp	r3, #2
 800f008:	d80b      	bhi.n	800f022 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	885b      	ldrh	r3, [r3, #2]
 800f00e:	2b01      	cmp	r3, #1
 800f010:	d10c      	bne.n	800f02c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2200      	movs	r2, #0
 800f016:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 f910 	bl	800f240 <USBD_CtlSendStatus>
      }
      break;
 800f020:	e004      	b.n	800f02c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f022:	6839      	ldr	r1, [r7, #0]
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 f840 	bl	800f0aa <USBD_CtlError>
      break;
 800f02a:	e000      	b.n	800f02e <USBD_ClrFeature+0x3c>
      break;
 800f02c:	bf00      	nop
  }
}
 800f02e:	bf00      	nop
 800f030:	3708      	adds	r7, #8
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}

0800f036 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f036:	b580      	push	{r7, lr}
 800f038:	b084      	sub	sp, #16
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	6078      	str	r0, [r7, #4]
 800f03e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	781a      	ldrb	r2, [r3, #0]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	3301      	adds	r3, #1
 800f050:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	781a      	ldrb	r2, [r3, #0]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	3301      	adds	r3, #1
 800f05e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f060:	68f8      	ldr	r0, [r7, #12]
 800f062:	f7ff fa41 	bl	800e4e8 <SWAPBYTE>
 800f066:	4603      	mov	r3, r0
 800f068:	461a      	mov	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	3301      	adds	r3, #1
 800f072:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	3301      	adds	r3, #1
 800f078:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f07a:	68f8      	ldr	r0, [r7, #12]
 800f07c:	f7ff fa34 	bl	800e4e8 <SWAPBYTE>
 800f080:	4603      	mov	r3, r0
 800f082:	461a      	mov	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	3301      	adds	r3, #1
 800f08c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	3301      	adds	r3, #1
 800f092:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f094:	68f8      	ldr	r0, [r7, #12]
 800f096:	f7ff fa27 	bl	800e4e8 <SWAPBYTE>
 800f09a:	4603      	mov	r3, r0
 800f09c:	461a      	mov	r2, r3
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	80da      	strh	r2, [r3, #6]
}
 800f0a2:	bf00      	nop
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}

0800f0aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0aa:	b580      	push	{r7, lr}
 800f0ac:	b082      	sub	sp, #8
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
 800f0b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0b4:	2180      	movs	r1, #128	; 0x80
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 fcf0 	bl	800fa9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f0bc:	2100      	movs	r1, #0
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f000 fcec 	bl	800fa9c <USBD_LL_StallEP>
}
 800f0c4:	bf00      	nop
 800f0c6:	3708      	adds	r7, #8
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b086      	sub	sp, #24
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d036      	beq.n	800f150 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f0e6:	6938      	ldr	r0, [r7, #16]
 800f0e8:	f000 f836 	bl	800f158 <USBD_GetLen>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	005b      	lsls	r3, r3, #1
 800f0f4:	b29a      	uxth	r2, r3
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f0fa:	7dfb      	ldrb	r3, [r7, #23]
 800f0fc:	68ba      	ldr	r2, [r7, #8]
 800f0fe:	4413      	add	r3, r2
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	7812      	ldrb	r2, [r2, #0]
 800f104:	701a      	strb	r2, [r3, #0]
  idx++;
 800f106:	7dfb      	ldrb	r3, [r7, #23]
 800f108:	3301      	adds	r3, #1
 800f10a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f10c:	7dfb      	ldrb	r3, [r7, #23]
 800f10e:	68ba      	ldr	r2, [r7, #8]
 800f110:	4413      	add	r3, r2
 800f112:	2203      	movs	r2, #3
 800f114:	701a      	strb	r2, [r3, #0]
  idx++;
 800f116:	7dfb      	ldrb	r3, [r7, #23]
 800f118:	3301      	adds	r3, #1
 800f11a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f11c:	e013      	b.n	800f146 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f11e:	7dfb      	ldrb	r3, [r7, #23]
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	4413      	add	r3, r2
 800f124:	693a      	ldr	r2, [r7, #16]
 800f126:	7812      	ldrb	r2, [r2, #0]
 800f128:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	3301      	adds	r3, #1
 800f12e:	613b      	str	r3, [r7, #16]
    idx++;
 800f130:	7dfb      	ldrb	r3, [r7, #23]
 800f132:	3301      	adds	r3, #1
 800f134:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f136:	7dfb      	ldrb	r3, [r7, #23]
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	4413      	add	r3, r2
 800f13c:	2200      	movs	r2, #0
 800f13e:	701a      	strb	r2, [r3, #0]
    idx++;
 800f140:	7dfb      	ldrb	r3, [r7, #23]
 800f142:	3301      	adds	r3, #1
 800f144:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d1e7      	bne.n	800f11e <USBD_GetString+0x52>
 800f14e:	e000      	b.n	800f152 <USBD_GetString+0x86>
    return;
 800f150:	bf00      	nop
  }
}
 800f152:	3718      	adds	r7, #24
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f158:	b480      	push	{r7}
 800f15a:	b085      	sub	sp, #20
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f160:	2300      	movs	r3, #0
 800f162:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f168:	e005      	b.n	800f176 <USBD_GetLen+0x1e>
  {
    len++;
 800f16a:	7bfb      	ldrb	r3, [r7, #15]
 800f16c:	3301      	adds	r3, #1
 800f16e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	3301      	adds	r3, #1
 800f174:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d1f5      	bne.n	800f16a <USBD_GetLen+0x12>
  }

  return len;
 800f17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f180:	4618      	mov	r0, r3
 800f182:	3714      	adds	r7, #20
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
 800f192:	60f8      	str	r0, [r7, #12]
 800f194:	60b9      	str	r1, [r7, #8]
 800f196:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2202      	movs	r2, #2
 800f19c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	68ba      	ldr	r2, [r7, #8]
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	68f8      	ldr	r0, [r7, #12]
 800f1b4:	f000 fcfb 	bl	800fbae <USBD_LL_Transmit>

  return USBD_OK;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3710      	adds	r7, #16
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f1c2:	b580      	push	{r7, lr}
 800f1c4:	b084      	sub	sp, #16
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	60f8      	str	r0, [r7, #12]
 800f1ca:	60b9      	str	r1, [r7, #8]
 800f1cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	68ba      	ldr	r2, [r7, #8]
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	68f8      	ldr	r0, [r7, #12]
 800f1d6:	f000 fcea 	bl	800fbae <USBD_LL_Transmit>

  return USBD_OK;
 800f1da:	2300      	movs	r3, #0
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3710      	adds	r7, #16
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}

0800f1e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b084      	sub	sp, #16
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	60f8      	str	r0, [r7, #12]
 800f1ec:	60b9      	str	r1, [r7, #8]
 800f1ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2203      	movs	r2, #3
 800f1f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	687a      	ldr	r2, [r7, #4]
 800f204:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	68ba      	ldr	r2, [r7, #8]
 800f20c:	2100      	movs	r1, #0
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	f000 fcee 	bl	800fbf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f214:	2300      	movs	r3, #0
}
 800f216:	4618      	mov	r0, r3
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}

0800f21e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f21e:	b580      	push	{r7, lr}
 800f220:	b084      	sub	sp, #16
 800f222:	af00      	add	r7, sp, #0
 800f224:	60f8      	str	r0, [r7, #12]
 800f226:	60b9      	str	r1, [r7, #8]
 800f228:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	68ba      	ldr	r2, [r7, #8]
 800f22e:	2100      	movs	r1, #0
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f000 fcdd 	bl	800fbf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f236:	2300      	movs	r3, #0
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3710      	adds	r7, #16
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2204      	movs	r2, #4
 800f24c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f250:	2300      	movs	r3, #0
 800f252:	2200      	movs	r2, #0
 800f254:	2100      	movs	r1, #0
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f000 fca9 	bl	800fbae <USBD_LL_Transmit>

  return USBD_OK;
 800f25c:	2300      	movs	r3, #0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3708      	adds	r7, #8
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}

0800f266 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f266:	b580      	push	{r7, lr}
 800f268:	b082      	sub	sp, #8
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2205      	movs	r2, #5
 800f272:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f276:	2300      	movs	r3, #0
 800f278:	2200      	movs	r2, #0
 800f27a:	2100      	movs	r1, #0
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 fcb7 	bl	800fbf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f282:	2300      	movs	r3, #0
}
 800f284:	4618      	mov	r0, r3
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800f290:	2201      	movs	r2, #1
 800f292:	4913      	ldr	r1, [pc, #76]	; (800f2e0 <MX_USB_DEVICE_Init+0x54>)
 800f294:	4813      	ldr	r0, [pc, #76]	; (800f2e4 <MX_USB_DEVICE_Init+0x58>)
 800f296:	f7fe fd01 	bl	800dc9c <USBD_Init>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d001      	beq.n	800f2a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f2a0:	f7f3 f91a 	bl	80024d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800f2a4:	4910      	ldr	r1, [pc, #64]	; (800f2e8 <MX_USB_DEVICE_Init+0x5c>)
 800f2a6:	480f      	ldr	r0, [pc, #60]	; (800f2e4 <MX_USB_DEVICE_Init+0x58>)
 800f2a8:	f7fe fd28 	bl	800dcfc <USBD_RegisterClass>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d001      	beq.n	800f2b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f2b2:	f7f3 f911 	bl	80024d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800f2b6:	490d      	ldr	r1, [pc, #52]	; (800f2ec <MX_USB_DEVICE_Init+0x60>)
 800f2b8:	480a      	ldr	r0, [pc, #40]	; (800f2e4 <MX_USB_DEVICE_Init+0x58>)
 800f2ba:	f7fe fc1f 	bl	800dafc <USBD_CDC_RegisterInterface>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f2c4:	f7f3 f908 	bl	80024d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800f2c8:	4806      	ldr	r0, [pc, #24]	; (800f2e4 <MX_USB_DEVICE_Init+0x58>)
 800f2ca:	f7fe fd4d 	bl	800dd68 <USBD_Start>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d001      	beq.n	800f2d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f2d4:	f7f3 f900 	bl	80024d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f2d8:	f7f9 f974 	bl	80085c4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f2dc:	bf00      	nop
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	240001bc 	.word	0x240001bc
 800f2e4:	24000dec 	.word	0x24000dec
 800f2e8:	24000128 	.word	0x24000128
 800f2ec:	240001a8 	.word	0x240001a8

0800f2f0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	4905      	ldr	r1, [pc, #20]	; (800f30c <CDC_Init_HS+0x1c>)
 800f2f8:	4805      	ldr	r0, [pc, #20]	; (800f310 <CDC_Init_HS+0x20>)
 800f2fa:	f7fe fc19 	bl	800db30 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800f2fe:	4905      	ldr	r1, [pc, #20]	; (800f314 <CDC_Init_HS+0x24>)
 800f300:	4803      	ldr	r0, [pc, #12]	; (800f310 <CDC_Init_HS+0x20>)
 800f302:	f7fe fc37 	bl	800db74 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f306:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800f308:	4618      	mov	r0, r3
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	240018c8 	.word	0x240018c8
 800f310:	24000dec 	.word	0x24000dec
 800f314:	240010c8 	.word	0x240010c8

0800f318 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800f318:	b480      	push	{r7}
 800f31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800f31c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800f31e:	4618      	mov	r0, r3
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	4603      	mov	r3, r0
 800f330:	6039      	str	r1, [r7, #0]
 800f332:	71fb      	strb	r3, [r7, #7]
 800f334:	4613      	mov	r3, r2
 800f336:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800f338:	79fb      	ldrb	r3, [r7, #7]
 800f33a:	2b23      	cmp	r3, #35	; 0x23
 800f33c:	d84a      	bhi.n	800f3d4 <CDC_Control_HS+0xac>
 800f33e:	a201      	add	r2, pc, #4	; (adr r2, 800f344 <CDC_Control_HS+0x1c>)
 800f340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f344:	0800f3d5 	.word	0x0800f3d5
 800f348:	0800f3d5 	.word	0x0800f3d5
 800f34c:	0800f3d5 	.word	0x0800f3d5
 800f350:	0800f3d5 	.word	0x0800f3d5
 800f354:	0800f3d5 	.word	0x0800f3d5
 800f358:	0800f3d5 	.word	0x0800f3d5
 800f35c:	0800f3d5 	.word	0x0800f3d5
 800f360:	0800f3d5 	.word	0x0800f3d5
 800f364:	0800f3d5 	.word	0x0800f3d5
 800f368:	0800f3d5 	.word	0x0800f3d5
 800f36c:	0800f3d5 	.word	0x0800f3d5
 800f370:	0800f3d5 	.word	0x0800f3d5
 800f374:	0800f3d5 	.word	0x0800f3d5
 800f378:	0800f3d5 	.word	0x0800f3d5
 800f37c:	0800f3d5 	.word	0x0800f3d5
 800f380:	0800f3d5 	.word	0x0800f3d5
 800f384:	0800f3d5 	.word	0x0800f3d5
 800f388:	0800f3d5 	.word	0x0800f3d5
 800f38c:	0800f3d5 	.word	0x0800f3d5
 800f390:	0800f3d5 	.word	0x0800f3d5
 800f394:	0800f3d5 	.word	0x0800f3d5
 800f398:	0800f3d5 	.word	0x0800f3d5
 800f39c:	0800f3d5 	.word	0x0800f3d5
 800f3a0:	0800f3d5 	.word	0x0800f3d5
 800f3a4:	0800f3d5 	.word	0x0800f3d5
 800f3a8:	0800f3d5 	.word	0x0800f3d5
 800f3ac:	0800f3d5 	.word	0x0800f3d5
 800f3b0:	0800f3d5 	.word	0x0800f3d5
 800f3b4:	0800f3d5 	.word	0x0800f3d5
 800f3b8:	0800f3d5 	.word	0x0800f3d5
 800f3bc:	0800f3d5 	.word	0x0800f3d5
 800f3c0:	0800f3d5 	.word	0x0800f3d5
 800f3c4:	0800f3d5 	.word	0x0800f3d5
 800f3c8:	0800f3d5 	.word	0x0800f3d5
 800f3cc:	0800f3d5 	.word	0x0800f3d5
 800f3d0:	0800f3d5 	.word	0x0800f3d5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f3d4:	bf00      	nop
  }

  return (USBD_OK);
 800f3d6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	370c      	adds	r7, #12
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e2:	4770      	bx	lr

0800f3e4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800f3ee:	6879      	ldr	r1, [r7, #4]
 800f3f0:	480e      	ldr	r0, [pc, #56]	; (800f42c <CDC_Receive_HS+0x48>)
 800f3f2:	f7fe fbbf 	bl	800db74 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800f3f6:	480d      	ldr	r0, [pc, #52]	; (800f42c <CDC_Receive_HS+0x48>)
 800f3f8:	f7fe fc1a 	bl	800dc30 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	60fb      	str	r3, [r7, #12]
  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 800f402:	4b0b      	ldr	r3, [pc, #44]	; (800f430 <CDC_Receive_HS+0x4c>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4a0b      	ldr	r2, [pc, #44]	; (800f434 <CDC_Receive_HS+0x50>)
 800f408:	4413      	add	r3, r2
 800f40a:	68fa      	ldr	r2, [r7, #12]
 800f40c:	6879      	ldr	r1, [r7, #4]
 800f40e:	4618      	mov	r0, r3
 800f410:	f000 fca0 	bl	800fd54 <memcpy>
  usbBytesReady += cpyLen;
 800f414:	4b06      	ldr	r3, [pc, #24]	; (800f430 <CDC_Receive_HS+0x4c>)
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	4413      	add	r3, r2
 800f41c:	4a04      	ldr	r2, [pc, #16]	; (800f430 <CDC_Receive_HS+0x4c>)
 800f41e:	6013      	str	r3, [r2, #0]

  return (USBD_OK);
 800f420:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800f422:	4618      	mov	r0, r3
 800f424:	3710      	adds	r7, #16
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop
 800f42c:	24000dec 	.word	0x24000dec
 800f430:	240009d0 	.word	0x240009d0
 800f434:	240008d0 	.word	0x240008d0

0800f438 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	460b      	mov	r3, r1
 800f442:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f444:	2300      	movs	r3, #0
 800f446:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800f448:	4b0d      	ldr	r3, [pc, #52]	; (800f480 <CDC_Transmit_HS+0x48>)
 800f44a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f44e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f456:	2b00      	cmp	r3, #0
 800f458:	d001      	beq.n	800f45e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800f45a:	2301      	movs	r3, #1
 800f45c:	e00b      	b.n	800f476 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800f45e:	887b      	ldrh	r3, [r7, #2]
 800f460:	461a      	mov	r2, r3
 800f462:	6879      	ldr	r1, [r7, #4]
 800f464:	4806      	ldr	r0, [pc, #24]	; (800f480 <CDC_Transmit_HS+0x48>)
 800f466:	f7fe fb63 	bl	800db30 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800f46a:	4805      	ldr	r0, [pc, #20]	; (800f480 <CDC_Transmit_HS+0x48>)
 800f46c:	f7fe fba0 	bl	800dbb0 <USBD_CDC_TransmitPacket>
 800f470:	4603      	mov	r3, r0
 800f472:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800f474:	7bfb      	ldrb	r3, [r7, #15]
}
 800f476:	4618      	mov	r0, r3
 800f478:	3710      	adds	r7, #16
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	24000dec 	.word	0x24000dec

0800f484 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f484:	b480      	push	{r7}
 800f486:	b087      	sub	sp, #28
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	4613      	mov	r3, r2
 800f490:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f492:	2300      	movs	r3, #0
 800f494:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800f496:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	371c      	adds	r7, #28
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr
	...

0800f4a8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b083      	sub	sp, #12
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	6039      	str	r1, [r7, #0]
 800f4b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	2212      	movs	r2, #18
 800f4b8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800f4ba:	4b03      	ldr	r3, [pc, #12]	; (800f4c8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr
 800f4c8:	240001d8 	.word	0x240001d8

0800f4cc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	6039      	str	r1, [r7, #0]
 800f4d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	2204      	movs	r2, #4
 800f4dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f4de:	4b03      	ldr	r3, [pc, #12]	; (800f4ec <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	370c      	adds	r7, #12
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	240001ec 	.word	0x240001ec

0800f4f0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	6039      	str	r1, [r7, #0]
 800f4fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f4fc:	79fb      	ldrb	r3, [r7, #7]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d105      	bne.n	800f50e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f502:	683a      	ldr	r2, [r7, #0]
 800f504:	4907      	ldr	r1, [pc, #28]	; (800f524 <USBD_HS_ProductStrDescriptor+0x34>)
 800f506:	4808      	ldr	r0, [pc, #32]	; (800f528 <USBD_HS_ProductStrDescriptor+0x38>)
 800f508:	f7ff fde0 	bl	800f0cc <USBD_GetString>
 800f50c:	e004      	b.n	800f518 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f50e:	683a      	ldr	r2, [r7, #0]
 800f510:	4904      	ldr	r1, [pc, #16]	; (800f524 <USBD_HS_ProductStrDescriptor+0x34>)
 800f512:	4805      	ldr	r0, [pc, #20]	; (800f528 <USBD_HS_ProductStrDescriptor+0x38>)
 800f514:	f7ff fdda 	bl	800f0cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800f518:	4b02      	ldr	r3, [pc, #8]	; (800f524 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3708      	adds	r7, #8
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	240020c8 	.word	0x240020c8
 800f528:	0801075c 	.word	0x0801075c

0800f52c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	4603      	mov	r3, r0
 800f534:	6039      	str	r1, [r7, #0]
 800f536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f538:	683a      	ldr	r2, [r7, #0]
 800f53a:	4904      	ldr	r1, [pc, #16]	; (800f54c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800f53c:	4804      	ldr	r0, [pc, #16]	; (800f550 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800f53e:	f7ff fdc5 	bl	800f0cc <USBD_GetString>
  return USBD_StrDesc;
 800f542:	4b02      	ldr	r3, [pc, #8]	; (800f54c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800f544:	4618      	mov	r0, r3
 800f546:	3708      	adds	r7, #8
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	240020c8 	.word	0x240020c8
 800f550:	08010774 	.word	0x08010774

0800f554 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
 800f55a:	4603      	mov	r3, r0
 800f55c:	6039      	str	r1, [r7, #0]
 800f55e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	221a      	movs	r2, #26
 800f564:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f566:	f000 f843 	bl	800f5f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f56a:	4b02      	ldr	r3, [pc, #8]	; (800f574 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	240001f0 	.word	0x240001f0

0800f578 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	4603      	mov	r3, r0
 800f580:	6039      	str	r1, [r7, #0]
 800f582:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f584:	79fb      	ldrb	r3, [r7, #7]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d105      	bne.n	800f596 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f58a:	683a      	ldr	r2, [r7, #0]
 800f58c:	4907      	ldr	r1, [pc, #28]	; (800f5ac <USBD_HS_ConfigStrDescriptor+0x34>)
 800f58e:	4808      	ldr	r0, [pc, #32]	; (800f5b0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f590:	f7ff fd9c 	bl	800f0cc <USBD_GetString>
 800f594:	e004      	b.n	800f5a0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f596:	683a      	ldr	r2, [r7, #0]
 800f598:	4904      	ldr	r1, [pc, #16]	; (800f5ac <USBD_HS_ConfigStrDescriptor+0x34>)
 800f59a:	4805      	ldr	r0, [pc, #20]	; (800f5b0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f59c:	f7ff fd96 	bl	800f0cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5a0:	4b02      	ldr	r3, [pc, #8]	; (800f5ac <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3708      	adds	r7, #8
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	240020c8 	.word	0x240020c8
 800f5b0:	08010788 	.word	0x08010788

0800f5b4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	6039      	str	r1, [r7, #0]
 800f5be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f5c0:	79fb      	ldrb	r3, [r7, #7]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d105      	bne.n	800f5d2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f5c6:	683a      	ldr	r2, [r7, #0]
 800f5c8:	4907      	ldr	r1, [pc, #28]	; (800f5e8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f5ca:	4808      	ldr	r0, [pc, #32]	; (800f5ec <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f5cc:	f7ff fd7e 	bl	800f0cc <USBD_GetString>
 800f5d0:	e004      	b.n	800f5dc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f5d2:	683a      	ldr	r2, [r7, #0]
 800f5d4:	4904      	ldr	r1, [pc, #16]	; (800f5e8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f5d6:	4805      	ldr	r0, [pc, #20]	; (800f5ec <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f5d8:	f7ff fd78 	bl	800f0cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5dc:	4b02      	ldr	r3, [pc, #8]	; (800f5e8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3708      	adds	r7, #8
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	240020c8 	.word	0x240020c8
 800f5ec:	08010794 	.word	0x08010794

0800f5f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f5f6:	4b0f      	ldr	r3, [pc, #60]	; (800f634 <Get_SerialNum+0x44>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f5fc:	4b0e      	ldr	r3, [pc, #56]	; (800f638 <Get_SerialNum+0x48>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f602:	4b0e      	ldr	r3, [pc, #56]	; (800f63c <Get_SerialNum+0x4c>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f608:	68fa      	ldr	r2, [r7, #12]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4413      	add	r3, r2
 800f60e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d009      	beq.n	800f62a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f616:	2208      	movs	r2, #8
 800f618:	4909      	ldr	r1, [pc, #36]	; (800f640 <Get_SerialNum+0x50>)
 800f61a:	68f8      	ldr	r0, [r7, #12]
 800f61c:	f000 f814 	bl	800f648 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f620:	2204      	movs	r2, #4
 800f622:	4908      	ldr	r1, [pc, #32]	; (800f644 <Get_SerialNum+0x54>)
 800f624:	68b8      	ldr	r0, [r7, #8]
 800f626:	f000 f80f 	bl	800f648 <IntToUnicode>
  }
}
 800f62a:	bf00      	nop
 800f62c:	3710      	adds	r7, #16
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	1ff1e800 	.word	0x1ff1e800
 800f638:	1ff1e804 	.word	0x1ff1e804
 800f63c:	1ff1e808 	.word	0x1ff1e808
 800f640:	240001f2 	.word	0x240001f2
 800f644:	24000202 	.word	0x24000202

0800f648 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f648:	b480      	push	{r7}
 800f64a:	b087      	sub	sp, #28
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	4613      	mov	r3, r2
 800f654:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f656:	2300      	movs	r3, #0
 800f658:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f65a:	2300      	movs	r3, #0
 800f65c:	75fb      	strb	r3, [r7, #23]
 800f65e:	e027      	b.n	800f6b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	0f1b      	lsrs	r3, r3, #28
 800f664:	2b09      	cmp	r3, #9
 800f666:	d80b      	bhi.n	800f680 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	0f1b      	lsrs	r3, r3, #28
 800f66c:	b2da      	uxtb	r2, r3
 800f66e:	7dfb      	ldrb	r3, [r7, #23]
 800f670:	005b      	lsls	r3, r3, #1
 800f672:	4619      	mov	r1, r3
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	440b      	add	r3, r1
 800f678:	3230      	adds	r2, #48	; 0x30
 800f67a:	b2d2      	uxtb	r2, r2
 800f67c:	701a      	strb	r2, [r3, #0]
 800f67e:	e00a      	b.n	800f696 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	0f1b      	lsrs	r3, r3, #28
 800f684:	b2da      	uxtb	r2, r3
 800f686:	7dfb      	ldrb	r3, [r7, #23]
 800f688:	005b      	lsls	r3, r3, #1
 800f68a:	4619      	mov	r1, r3
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	440b      	add	r3, r1
 800f690:	3237      	adds	r2, #55	; 0x37
 800f692:	b2d2      	uxtb	r2, r2
 800f694:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	011b      	lsls	r3, r3, #4
 800f69a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f69c:	7dfb      	ldrb	r3, [r7, #23]
 800f69e:	005b      	lsls	r3, r3, #1
 800f6a0:	3301      	adds	r3, #1
 800f6a2:	68ba      	ldr	r2, [r7, #8]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f6aa:	7dfb      	ldrb	r3, [r7, #23]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	75fb      	strb	r3, [r7, #23]
 800f6b0:	7dfa      	ldrb	r2, [r7, #23]
 800f6b2:	79fb      	ldrb	r3, [r7, #7]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d3d3      	bcc.n	800f660 <IntToUnicode+0x18>
  }
}
 800f6b8:	bf00      	nop
 800f6ba:	bf00      	nop
 800f6bc:	371c      	adds	r7, #28
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr
	...

0800f6c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b0b2      	sub	sp, #200	; 0xc8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f6d0:	f107 0310 	add.w	r3, r7, #16
 800f6d4:	22b8      	movs	r2, #184	; 0xb8
 800f6d6:	2100      	movs	r1, #0
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f000 fb49 	bl	800fd70 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	4a1a      	ldr	r2, [pc, #104]	; (800f74c <HAL_PCD_MspInit+0x84>)
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	d12c      	bne.n	800f742 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f6e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f6ec:	f04f 0300 	mov.w	r3, #0
 800f6f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f6f4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800f6f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f6fc:	f107 0310 	add.w	r3, r7, #16
 800f700:	4618      	mov	r0, r3
 800f702:	f7f9 febf 	bl	8009484 <HAL_RCCEx_PeriphCLKConfig>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d001      	beq.n	800f710 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 800f70c:	f7f2 fee4 	bl	80024d8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f710:	f7f8 ff58 	bl	80085c4 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800f714:	4b0e      	ldr	r3, [pc, #56]	; (800f750 <HAL_PCD_MspInit+0x88>)
 800f716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f71a:	4a0d      	ldr	r2, [pc, #52]	; (800f750 <HAL_PCD_MspInit+0x88>)
 800f71c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f720:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f724:	4b0a      	ldr	r3, [pc, #40]	; (800f750 <HAL_PCD_MspInit+0x88>)
 800f726:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f72a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f72e:	60fb      	str	r3, [r7, #12]
 800f730:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800f732:	2200      	movs	r2, #0
 800f734:	2100      	movs	r1, #0
 800f736:	204d      	movs	r0, #77	; 0x4d
 800f738:	f7f3 fe85 	bl	8003446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800f73c:	204d      	movs	r0, #77	; 0x4d
 800f73e:	f7f3 fe9c 	bl	800347a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800f742:	bf00      	nop
 800f744:	37c8      	adds	r7, #200	; 0xc8
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	40040000 	.word	0x40040000
 800f750:	58024400 	.word	0x58024400

0800f754 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f768:	4619      	mov	r1, r3
 800f76a:	4610      	mov	r0, r2
 800f76c:	f7fe fb49 	bl	800de02 <USBD_LL_SetupStage>
}
 800f770:	bf00      	nop
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	460b      	mov	r3, r1
 800f782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f78a:	78fa      	ldrb	r2, [r7, #3]
 800f78c:	6879      	ldr	r1, [r7, #4]
 800f78e:	4613      	mov	r3, r2
 800f790:	00db      	lsls	r3, r3, #3
 800f792:	4413      	add	r3, r2
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	440b      	add	r3, r1
 800f798:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	78fb      	ldrb	r3, [r7, #3]
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	f7fe fb83 	bl	800deac <USBD_LL_DataOutStage>
}
 800f7a6:	bf00      	nop
 800f7a8:	3708      	adds	r7, #8
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b082      	sub	sp, #8
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
 800f7b6:	460b      	mov	r3, r1
 800f7b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f7c0:	78fa      	ldrb	r2, [r7, #3]
 800f7c2:	6879      	ldr	r1, [r7, #4]
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	00db      	lsls	r3, r3, #3
 800f7c8:	4413      	add	r3, r2
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	440b      	add	r3, r1
 800f7ce:	3348      	adds	r3, #72	; 0x48
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	78fb      	ldrb	r3, [r7, #3]
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	f7fe fc1c 	bl	800e012 <USBD_LL_DataInStage>
}
 800f7da:	bf00      	nop
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}

0800f7e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7e2:	b580      	push	{r7, lr}
 800f7e4:	b082      	sub	sp, #8
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7fe fd56 	bl	800e2a2 <USBD_LL_SOF>
}
 800f7f6:	bf00      	nop
 800f7f8:	3708      	adds	r7, #8
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}

0800f7fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b084      	sub	sp, #16
 800f802:	af00      	add	r7, sp, #0
 800f804:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f806:	2301      	movs	r3, #1
 800f808:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	691b      	ldr	r3, [r3, #16]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d102      	bne.n	800f818 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f812:	2300      	movs	r3, #0
 800f814:	73fb      	strb	r3, [r7, #15]
 800f816:	e008      	b.n	800f82a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	691b      	ldr	r3, [r3, #16]
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	d102      	bne.n	800f826 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f820:	2301      	movs	r3, #1
 800f822:	73fb      	strb	r3, [r7, #15]
 800f824:	e001      	b.n	800f82a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f826:	f7f2 fe57 	bl	80024d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f830:	7bfa      	ldrb	r2, [r7, #15]
 800f832:	4611      	mov	r1, r2
 800f834:	4618      	mov	r0, r3
 800f836:	f7fe fcf0 	bl	800e21a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f840:	4618      	mov	r0, r3
 800f842:	f7fe fc98 	bl	800e176 <USBD_LL_Reset>
}
 800f846:	bf00      	nop
 800f848:	3710      	adds	r7, #16
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
	...

0800f850 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f85e:	4618      	mov	r0, r3
 800f860:	f7fe fceb 	bl	800e23a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	6812      	ldr	r2, [r2, #0]
 800f872:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f876:	f043 0301 	orr.w	r3, r3, #1
 800f87a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6a1b      	ldr	r3, [r3, #32]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d005      	beq.n	800f890 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f884:	4b04      	ldr	r3, [pc, #16]	; (800f898 <HAL_PCD_SuspendCallback+0x48>)
 800f886:	691b      	ldr	r3, [r3, #16]
 800f888:	4a03      	ldr	r2, [pc, #12]	; (800f898 <HAL_PCD_SuspendCallback+0x48>)
 800f88a:	f043 0306 	orr.w	r3, r3, #6
 800f88e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f890:	bf00      	nop
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	e000ed00 	.word	0xe000ed00

0800f89c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fe fce1 	bl	800e272 <USBD_LL_Resume>
}
 800f8b0:	bf00      	nop
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8ca:	78fa      	ldrb	r2, [r7, #3]
 800f8cc:	4611      	mov	r1, r2
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fe fd39 	bl	800e346 <USBD_LL_IsoOUTIncomplete>
}
 800f8d4:	bf00      	nop
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8ee:	78fa      	ldrb	r2, [r7, #3]
 800f8f0:	4611      	mov	r1, r2
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fe fcf5 	bl	800e2e2 <USBD_LL_IsoINIncomplete>
}
 800f8f8:	bf00      	nop
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fe fd4b 	bl	800e3aa <USBD_LL_DevConnected>
}
 800f914:	bf00      	nop
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fe fd48 	bl	800e3c0 <USBD_LL_DevDisconnected>
}
 800f930:	bf00      	nop
 800f932:	3708      	adds	r7, #8
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	2b01      	cmp	r3, #1
 800f946:	d140      	bne.n	800f9ca <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800f948:	4a22      	ldr	r2, [pc, #136]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	4a20      	ldr	r2, [pc, #128]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f954:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f958:	4b1e      	ldr	r3, [pc, #120]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f95a:	4a1f      	ldr	r2, [pc, #124]	; (800f9d8 <USBD_LL_Init+0xa0>)
 800f95c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800f95e:	4b1d      	ldr	r3, [pc, #116]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f960:	2209      	movs	r2, #9
 800f962:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800f964:	4b1b      	ldr	r3, [pc, #108]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f966:	2202      	movs	r2, #2
 800f968:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f96a:	4b1a      	ldr	r3, [pc, #104]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f96c:	2200      	movs	r2, #0
 800f96e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800f970:	4b18      	ldr	r3, [pc, #96]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f972:	2202      	movs	r2, #2
 800f974:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f976:	4b17      	ldr	r3, [pc, #92]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f978:	2200      	movs	r2, #0
 800f97a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f97c:	4b15      	ldr	r3, [pc, #84]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f97e:	2200      	movs	r2, #0
 800f980:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800f982:	4b14      	ldr	r3, [pc, #80]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f984:	2200      	movs	r2, #0
 800f986:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800f988:	4b12      	ldr	r3, [pc, #72]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f98a:	2200      	movs	r2, #0
 800f98c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800f98e:	4b11      	ldr	r3, [pc, #68]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f990:	2200      	movs	r2, #0
 800f992:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f994:	4b0f      	ldr	r3, [pc, #60]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f996:	2200      	movs	r2, #0
 800f998:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800f99a:	480e      	ldr	r0, [pc, #56]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f99c:	f7f7 fb1e 	bl	8006fdc <HAL_PCD_Init>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d001      	beq.n	800f9aa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f9a6:	f7f2 fd97 	bl	80024d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f9aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f9ae:	4809      	ldr	r0, [pc, #36]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f9b0:	f7f8 fd8d 	bl	80084ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800f9b4:	2280      	movs	r2, #128	; 0x80
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	4806      	ldr	r0, [pc, #24]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f9ba:	f7f8 fd41 	bl	8008440 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800f9be:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800f9c2:	2101      	movs	r1, #1
 800f9c4:	4803      	ldr	r0, [pc, #12]	; (800f9d4 <USBD_LL_Init+0x9c>)
 800f9c6:	f7f8 fd3b 	bl	8008440 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800f9ca:	2300      	movs	r3, #0
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3708      	adds	r7, #8
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	240022c8 	.word	0x240022c8
 800f9d8:	40040000 	.word	0x40040000

0800f9dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7f7 fc16 	bl	8007224 <HAL_PCD_Start>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9fc:	7bfb      	ldrb	r3, [r7, #15]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f000 f942 	bl	800fc88 <USBD_Get_USB_Status>
 800fa04:	4603      	mov	r3, r0
 800fa06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa08:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3710      	adds	r7, #16
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}

0800fa12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fa12:	b580      	push	{r7, lr}
 800fa14:	b084      	sub	sp, #16
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	6078      	str	r0, [r7, #4]
 800fa1a:	4608      	mov	r0, r1
 800fa1c:	4611      	mov	r1, r2
 800fa1e:	461a      	mov	r2, r3
 800fa20:	4603      	mov	r3, r0
 800fa22:	70fb      	strb	r3, [r7, #3]
 800fa24:	460b      	mov	r3, r1
 800fa26:	70bb      	strb	r3, [r7, #2]
 800fa28:	4613      	mov	r3, r2
 800fa2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa30:	2300      	movs	r3, #0
 800fa32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fa3a:	78bb      	ldrb	r3, [r7, #2]
 800fa3c:	883a      	ldrh	r2, [r7, #0]
 800fa3e:	78f9      	ldrb	r1, [r7, #3]
 800fa40:	f7f8 f916 	bl	8007c70 <HAL_PCD_EP_Open>
 800fa44:	4603      	mov	r3, r0
 800fa46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa48:	7bfb      	ldrb	r3, [r7, #15]
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f000 f91c 	bl	800fc88 <USBD_Get_USB_Status>
 800fa50:	4603      	mov	r3, r0
 800fa52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa54:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b084      	sub	sp, #16
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
 800fa66:	460b      	mov	r3, r1
 800fa68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa78:	78fa      	ldrb	r2, [r7, #3]
 800fa7a:	4611      	mov	r1, r2
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7f8 f95f 	bl	8007d40 <HAL_PCD_EP_Close>
 800fa82:	4603      	mov	r3, r0
 800fa84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa86:	7bfb      	ldrb	r3, [r7, #15]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f000 f8fd 	bl	800fc88 <USBD_Get_USB_Status>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa92:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3710      	adds	r7, #16
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	460b      	mov	r3, r1
 800faa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faa8:	2300      	movs	r3, #0
 800faaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800faac:	2300      	movs	r3, #0
 800faae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fab6:	78fa      	ldrb	r2, [r7, #3]
 800fab8:	4611      	mov	r1, r2
 800faba:	4618      	mov	r0, r3
 800fabc:	f7f8 fa19 	bl	8007ef2 <HAL_PCD_EP_SetStall>
 800fac0:	4603      	mov	r3, r0
 800fac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fac4:	7bfb      	ldrb	r3, [r7, #15]
 800fac6:	4618      	mov	r0, r3
 800fac8:	f000 f8de 	bl	800fc88 <USBD_Get_USB_Status>
 800facc:	4603      	mov	r3, r0
 800face:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fad0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3710      	adds	r7, #16
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}

0800fada <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fada:	b580      	push	{r7, lr}
 800fadc:	b084      	sub	sp, #16
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
 800fae2:	460b      	mov	r3, r1
 800fae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fae6:	2300      	movs	r3, #0
 800fae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800faea:	2300      	movs	r3, #0
 800faec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800faf4:	78fa      	ldrb	r2, [r7, #3]
 800faf6:	4611      	mov	r1, r2
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7f8 fa5e 	bl	8007fba <HAL_PCD_EP_ClrStall>
 800fafe:	4603      	mov	r3, r0
 800fb00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb02:	7bfb      	ldrb	r3, [r7, #15]
 800fb04:	4618      	mov	r0, r3
 800fb06:	f000 f8bf 	bl	800fc88 <USBD_Get_USB_Status>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3710      	adds	r7, #16
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b085      	sub	sp, #20
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	460b      	mov	r3, r1
 800fb22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fb2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	da0b      	bge.n	800fb4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fb34:	78fb      	ldrb	r3, [r7, #3]
 800fb36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb3a:	68f9      	ldr	r1, [r7, #12]
 800fb3c:	4613      	mov	r3, r2
 800fb3e:	00db      	lsls	r3, r3, #3
 800fb40:	4413      	add	r3, r2
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	440b      	add	r3, r1
 800fb46:	333e      	adds	r3, #62	; 0x3e
 800fb48:	781b      	ldrb	r3, [r3, #0]
 800fb4a:	e00b      	b.n	800fb64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fb4c:	78fb      	ldrb	r3, [r7, #3]
 800fb4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb52:	68f9      	ldr	r1, [r7, #12]
 800fb54:	4613      	mov	r3, r2
 800fb56:	00db      	lsls	r3, r3, #3
 800fb58:	4413      	add	r3, r2
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	440b      	add	r3, r1
 800fb5e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fb62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3714      	adds	r7, #20
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr

0800fb70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb80:	2300      	movs	r3, #0
 800fb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb8a:	78fa      	ldrb	r2, [r7, #3]
 800fb8c:	4611      	mov	r1, r2
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7f8 f849 	bl	8007c26 <HAL_PCD_SetAddress>
 800fb94:	4603      	mov	r3, r0
 800fb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f000 f874 	bl	800fc88 <USBD_Get_USB_Status>
 800fba0:	4603      	mov	r3, r0
 800fba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3710      	adds	r7, #16
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b086      	sub	sp, #24
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	60f8      	str	r0, [r7, #12]
 800fbb6:	607a      	str	r2, [r7, #4]
 800fbb8:	603b      	str	r3, [r7, #0]
 800fbba:	460b      	mov	r3, r1
 800fbbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fbcc:	7af9      	ldrb	r1, [r7, #11]
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	f7f8 f953 	bl	8007e7c <HAL_PCD_EP_Transmit>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbda:	7dfb      	ldrb	r3, [r7, #23]
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f000 f853 	bl	800fc88 <USBD_Get_USB_Status>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fbe6:	7dbb      	ldrb	r3, [r7, #22]
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3718      	adds	r7, #24
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}

0800fbf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b086      	sub	sp, #24
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	607a      	str	r2, [r7, #4]
 800fbfa:	603b      	str	r3, [r7, #0]
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc00:	2300      	movs	r3, #0
 800fc02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc04:	2300      	movs	r3, #0
 800fc06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc0e:	7af9      	ldrb	r1, [r7, #11]
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	f7f8 f8de 	bl	8007dd4 <HAL_PCD_EP_Receive>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc1c:	7dfb      	ldrb	r3, [r7, #23]
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f000 f832 	bl	800fc88 <USBD_Get_USB_Status>
 800fc24:	4603      	mov	r3, r0
 800fc26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc28:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3718      	adds	r7, #24
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}

0800fc32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc32:	b580      	push	{r7, lr}
 800fc34:	b082      	sub	sp, #8
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
 800fc3a:	460b      	mov	r3, r1
 800fc3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc44:	78fa      	ldrb	r2, [r7, #3]
 800fc46:	4611      	mov	r1, r2
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7f8 f8ff 	bl	8007e4c <HAL_PCD_EP_GetRxCount>
 800fc4e:	4603      	mov	r3, r0
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fc60:	4b03      	ldr	r3, [pc, #12]	; (800fc70 <USBD_static_malloc+0x18>)
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	370c      	adds	r7, #12
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop
 800fc70:	240027d4 	.word	0x240027d4

0800fc74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b083      	sub	sp, #12
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800fc7c:	bf00      	nop
 800fc7e:	370c      	adds	r7, #12
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr

0800fc88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b085      	sub	sp, #20
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	4603      	mov	r3, r0
 800fc90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc92:	2300      	movs	r3, #0
 800fc94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fc96:	79fb      	ldrb	r3, [r7, #7]
 800fc98:	2b03      	cmp	r3, #3
 800fc9a:	d817      	bhi.n	800fccc <USBD_Get_USB_Status+0x44>
 800fc9c:	a201      	add	r2, pc, #4	; (adr r2, 800fca4 <USBD_Get_USB_Status+0x1c>)
 800fc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fca2:	bf00      	nop
 800fca4:	0800fcb5 	.word	0x0800fcb5
 800fca8:	0800fcbb 	.word	0x0800fcbb
 800fcac:	0800fcc1 	.word	0x0800fcc1
 800fcb0:	0800fcc7 	.word	0x0800fcc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	73fb      	strb	r3, [r7, #15]
    break;
 800fcb8:	e00b      	b.n	800fcd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fcba:	2303      	movs	r3, #3
 800fcbc:	73fb      	strb	r3, [r7, #15]
    break;
 800fcbe:	e008      	b.n	800fcd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	73fb      	strb	r3, [r7, #15]
    break;
 800fcc4:	e005      	b.n	800fcd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fcc6:	2303      	movs	r3, #3
 800fcc8:	73fb      	strb	r3, [r7, #15]
    break;
 800fcca:	e002      	b.n	800fcd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fccc:	2303      	movs	r3, #3
 800fcce:	73fb      	strb	r3, [r7, #15]
    break;
 800fcd0:	bf00      	nop
  }
  return usb_status;
 800fcd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3714      	adds	r7, #20
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr

0800fce0 <calloc>:
 800fce0:	4b02      	ldr	r3, [pc, #8]	; (800fcec <calloc+0xc>)
 800fce2:	460a      	mov	r2, r1
 800fce4:	4601      	mov	r1, r0
 800fce6:	6818      	ldr	r0, [r3, #0]
 800fce8:	f000 b84a 	b.w	800fd80 <_calloc_r>
 800fcec:	2400020c 	.word	0x2400020c

0800fcf0 <__errno>:
 800fcf0:	4b01      	ldr	r3, [pc, #4]	; (800fcf8 <__errno+0x8>)
 800fcf2:	6818      	ldr	r0, [r3, #0]
 800fcf4:	4770      	bx	lr
 800fcf6:	bf00      	nop
 800fcf8:	2400020c 	.word	0x2400020c

0800fcfc <__libc_init_array>:
 800fcfc:	b570      	push	{r4, r5, r6, lr}
 800fcfe:	4d0d      	ldr	r5, [pc, #52]	; (800fd34 <__libc_init_array+0x38>)
 800fd00:	4c0d      	ldr	r4, [pc, #52]	; (800fd38 <__libc_init_array+0x3c>)
 800fd02:	1b64      	subs	r4, r4, r5
 800fd04:	10a4      	asrs	r4, r4, #2
 800fd06:	2600      	movs	r6, #0
 800fd08:	42a6      	cmp	r6, r4
 800fd0a:	d109      	bne.n	800fd20 <__libc_init_array+0x24>
 800fd0c:	4d0b      	ldr	r5, [pc, #44]	; (800fd3c <__libc_init_array+0x40>)
 800fd0e:	4c0c      	ldr	r4, [pc, #48]	; (800fd40 <__libc_init_array+0x44>)
 800fd10:	f000 fd10 	bl	8010734 <_init>
 800fd14:	1b64      	subs	r4, r4, r5
 800fd16:	10a4      	asrs	r4, r4, #2
 800fd18:	2600      	movs	r6, #0
 800fd1a:	42a6      	cmp	r6, r4
 800fd1c:	d105      	bne.n	800fd2a <__libc_init_array+0x2e>
 800fd1e:	bd70      	pop	{r4, r5, r6, pc}
 800fd20:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd24:	4798      	blx	r3
 800fd26:	3601      	adds	r6, #1
 800fd28:	e7ee      	b.n	800fd08 <__libc_init_array+0xc>
 800fd2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd2e:	4798      	blx	r3
 800fd30:	3601      	adds	r6, #1
 800fd32:	e7f2      	b.n	800fd1a <__libc_init_array+0x1e>
 800fd34:	08011ee8 	.word	0x08011ee8
 800fd38:	08011ee8 	.word	0x08011ee8
 800fd3c:	08011ee8 	.word	0x08011ee8
 800fd40:	08011eec 	.word	0x08011eec

0800fd44 <free>:
 800fd44:	4b02      	ldr	r3, [pc, #8]	; (800fd50 <free+0xc>)
 800fd46:	4601      	mov	r1, r0
 800fd48:	6818      	ldr	r0, [r3, #0]
 800fd4a:	f000 b82f 	b.w	800fdac <_free_r>
 800fd4e:	bf00      	nop
 800fd50:	2400020c 	.word	0x2400020c

0800fd54 <memcpy>:
 800fd54:	440a      	add	r2, r1
 800fd56:	4291      	cmp	r1, r2
 800fd58:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd5c:	d100      	bne.n	800fd60 <memcpy+0xc>
 800fd5e:	4770      	bx	lr
 800fd60:	b510      	push	{r4, lr}
 800fd62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd6a:	4291      	cmp	r1, r2
 800fd6c:	d1f9      	bne.n	800fd62 <memcpy+0xe>
 800fd6e:	bd10      	pop	{r4, pc}

0800fd70 <memset>:
 800fd70:	4402      	add	r2, r0
 800fd72:	4603      	mov	r3, r0
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d100      	bne.n	800fd7a <memset+0xa>
 800fd78:	4770      	bx	lr
 800fd7a:	f803 1b01 	strb.w	r1, [r3], #1
 800fd7e:	e7f9      	b.n	800fd74 <memset+0x4>

0800fd80 <_calloc_r>:
 800fd80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd82:	fba1 2402 	umull	r2, r4, r1, r2
 800fd86:	b94c      	cbnz	r4, 800fd9c <_calloc_r+0x1c>
 800fd88:	4611      	mov	r1, r2
 800fd8a:	9201      	str	r2, [sp, #4]
 800fd8c:	f000 f87a 	bl	800fe84 <_malloc_r>
 800fd90:	9a01      	ldr	r2, [sp, #4]
 800fd92:	4605      	mov	r5, r0
 800fd94:	b930      	cbnz	r0, 800fda4 <_calloc_r+0x24>
 800fd96:	4628      	mov	r0, r5
 800fd98:	b003      	add	sp, #12
 800fd9a:	bd30      	pop	{r4, r5, pc}
 800fd9c:	220c      	movs	r2, #12
 800fd9e:	6002      	str	r2, [r0, #0]
 800fda0:	2500      	movs	r5, #0
 800fda2:	e7f8      	b.n	800fd96 <_calloc_r+0x16>
 800fda4:	4621      	mov	r1, r4
 800fda6:	f7ff ffe3 	bl	800fd70 <memset>
 800fdaa:	e7f4      	b.n	800fd96 <_calloc_r+0x16>

0800fdac <_free_r>:
 800fdac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdae:	2900      	cmp	r1, #0
 800fdb0:	d044      	beq.n	800fe3c <_free_r+0x90>
 800fdb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdb6:	9001      	str	r0, [sp, #4]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	f1a1 0404 	sub.w	r4, r1, #4
 800fdbe:	bfb8      	it	lt
 800fdc0:	18e4      	addlt	r4, r4, r3
 800fdc2:	f000 f8e3 	bl	800ff8c <__malloc_lock>
 800fdc6:	4a1e      	ldr	r2, [pc, #120]	; (800fe40 <_free_r+0x94>)
 800fdc8:	9801      	ldr	r0, [sp, #4]
 800fdca:	6813      	ldr	r3, [r2, #0]
 800fdcc:	b933      	cbnz	r3, 800fddc <_free_r+0x30>
 800fdce:	6063      	str	r3, [r4, #4]
 800fdd0:	6014      	str	r4, [r2, #0]
 800fdd2:	b003      	add	sp, #12
 800fdd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fdd8:	f000 b8de 	b.w	800ff98 <__malloc_unlock>
 800fddc:	42a3      	cmp	r3, r4
 800fdde:	d908      	bls.n	800fdf2 <_free_r+0x46>
 800fde0:	6825      	ldr	r5, [r4, #0]
 800fde2:	1961      	adds	r1, r4, r5
 800fde4:	428b      	cmp	r3, r1
 800fde6:	bf01      	itttt	eq
 800fde8:	6819      	ldreq	r1, [r3, #0]
 800fdea:	685b      	ldreq	r3, [r3, #4]
 800fdec:	1949      	addeq	r1, r1, r5
 800fdee:	6021      	streq	r1, [r4, #0]
 800fdf0:	e7ed      	b.n	800fdce <_free_r+0x22>
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	b10b      	cbz	r3, 800fdfc <_free_r+0x50>
 800fdf8:	42a3      	cmp	r3, r4
 800fdfa:	d9fa      	bls.n	800fdf2 <_free_r+0x46>
 800fdfc:	6811      	ldr	r1, [r2, #0]
 800fdfe:	1855      	adds	r5, r2, r1
 800fe00:	42a5      	cmp	r5, r4
 800fe02:	d10b      	bne.n	800fe1c <_free_r+0x70>
 800fe04:	6824      	ldr	r4, [r4, #0]
 800fe06:	4421      	add	r1, r4
 800fe08:	1854      	adds	r4, r2, r1
 800fe0a:	42a3      	cmp	r3, r4
 800fe0c:	6011      	str	r1, [r2, #0]
 800fe0e:	d1e0      	bne.n	800fdd2 <_free_r+0x26>
 800fe10:	681c      	ldr	r4, [r3, #0]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	6053      	str	r3, [r2, #4]
 800fe16:	4421      	add	r1, r4
 800fe18:	6011      	str	r1, [r2, #0]
 800fe1a:	e7da      	b.n	800fdd2 <_free_r+0x26>
 800fe1c:	d902      	bls.n	800fe24 <_free_r+0x78>
 800fe1e:	230c      	movs	r3, #12
 800fe20:	6003      	str	r3, [r0, #0]
 800fe22:	e7d6      	b.n	800fdd2 <_free_r+0x26>
 800fe24:	6825      	ldr	r5, [r4, #0]
 800fe26:	1961      	adds	r1, r4, r5
 800fe28:	428b      	cmp	r3, r1
 800fe2a:	bf04      	itt	eq
 800fe2c:	6819      	ldreq	r1, [r3, #0]
 800fe2e:	685b      	ldreq	r3, [r3, #4]
 800fe30:	6063      	str	r3, [r4, #4]
 800fe32:	bf04      	itt	eq
 800fe34:	1949      	addeq	r1, r1, r5
 800fe36:	6021      	streq	r1, [r4, #0]
 800fe38:	6054      	str	r4, [r2, #4]
 800fe3a:	e7ca      	b.n	800fdd2 <_free_r+0x26>
 800fe3c:	b003      	add	sp, #12
 800fe3e:	bd30      	pop	{r4, r5, pc}
 800fe40:	240029f4 	.word	0x240029f4

0800fe44 <sbrk_aligned>:
 800fe44:	b570      	push	{r4, r5, r6, lr}
 800fe46:	4e0e      	ldr	r6, [pc, #56]	; (800fe80 <sbrk_aligned+0x3c>)
 800fe48:	460c      	mov	r4, r1
 800fe4a:	6831      	ldr	r1, [r6, #0]
 800fe4c:	4605      	mov	r5, r0
 800fe4e:	b911      	cbnz	r1, 800fe56 <sbrk_aligned+0x12>
 800fe50:	f000 f88c 	bl	800ff6c <_sbrk_r>
 800fe54:	6030      	str	r0, [r6, #0]
 800fe56:	4621      	mov	r1, r4
 800fe58:	4628      	mov	r0, r5
 800fe5a:	f000 f887 	bl	800ff6c <_sbrk_r>
 800fe5e:	1c43      	adds	r3, r0, #1
 800fe60:	d00a      	beq.n	800fe78 <sbrk_aligned+0x34>
 800fe62:	1cc4      	adds	r4, r0, #3
 800fe64:	f024 0403 	bic.w	r4, r4, #3
 800fe68:	42a0      	cmp	r0, r4
 800fe6a:	d007      	beq.n	800fe7c <sbrk_aligned+0x38>
 800fe6c:	1a21      	subs	r1, r4, r0
 800fe6e:	4628      	mov	r0, r5
 800fe70:	f000 f87c 	bl	800ff6c <_sbrk_r>
 800fe74:	3001      	adds	r0, #1
 800fe76:	d101      	bne.n	800fe7c <sbrk_aligned+0x38>
 800fe78:	f04f 34ff 	mov.w	r4, #4294967295
 800fe7c:	4620      	mov	r0, r4
 800fe7e:	bd70      	pop	{r4, r5, r6, pc}
 800fe80:	240029f8 	.word	0x240029f8

0800fe84 <_malloc_r>:
 800fe84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe88:	1ccd      	adds	r5, r1, #3
 800fe8a:	f025 0503 	bic.w	r5, r5, #3
 800fe8e:	3508      	adds	r5, #8
 800fe90:	2d0c      	cmp	r5, #12
 800fe92:	bf38      	it	cc
 800fe94:	250c      	movcc	r5, #12
 800fe96:	2d00      	cmp	r5, #0
 800fe98:	4607      	mov	r7, r0
 800fe9a:	db01      	blt.n	800fea0 <_malloc_r+0x1c>
 800fe9c:	42a9      	cmp	r1, r5
 800fe9e:	d905      	bls.n	800feac <_malloc_r+0x28>
 800fea0:	230c      	movs	r3, #12
 800fea2:	603b      	str	r3, [r7, #0]
 800fea4:	2600      	movs	r6, #0
 800fea6:	4630      	mov	r0, r6
 800fea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feac:	4e2e      	ldr	r6, [pc, #184]	; (800ff68 <_malloc_r+0xe4>)
 800feae:	f000 f86d 	bl	800ff8c <__malloc_lock>
 800feb2:	6833      	ldr	r3, [r6, #0]
 800feb4:	461c      	mov	r4, r3
 800feb6:	bb34      	cbnz	r4, 800ff06 <_malloc_r+0x82>
 800feb8:	4629      	mov	r1, r5
 800feba:	4638      	mov	r0, r7
 800febc:	f7ff ffc2 	bl	800fe44 <sbrk_aligned>
 800fec0:	1c43      	adds	r3, r0, #1
 800fec2:	4604      	mov	r4, r0
 800fec4:	d14d      	bne.n	800ff62 <_malloc_r+0xde>
 800fec6:	6834      	ldr	r4, [r6, #0]
 800fec8:	4626      	mov	r6, r4
 800feca:	2e00      	cmp	r6, #0
 800fecc:	d140      	bne.n	800ff50 <_malloc_r+0xcc>
 800fece:	6823      	ldr	r3, [r4, #0]
 800fed0:	4631      	mov	r1, r6
 800fed2:	4638      	mov	r0, r7
 800fed4:	eb04 0803 	add.w	r8, r4, r3
 800fed8:	f000 f848 	bl	800ff6c <_sbrk_r>
 800fedc:	4580      	cmp	r8, r0
 800fede:	d13a      	bne.n	800ff56 <_malloc_r+0xd2>
 800fee0:	6821      	ldr	r1, [r4, #0]
 800fee2:	3503      	adds	r5, #3
 800fee4:	1a6d      	subs	r5, r5, r1
 800fee6:	f025 0503 	bic.w	r5, r5, #3
 800feea:	3508      	adds	r5, #8
 800feec:	2d0c      	cmp	r5, #12
 800feee:	bf38      	it	cc
 800fef0:	250c      	movcc	r5, #12
 800fef2:	4629      	mov	r1, r5
 800fef4:	4638      	mov	r0, r7
 800fef6:	f7ff ffa5 	bl	800fe44 <sbrk_aligned>
 800fefa:	3001      	adds	r0, #1
 800fefc:	d02b      	beq.n	800ff56 <_malloc_r+0xd2>
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	442b      	add	r3, r5
 800ff02:	6023      	str	r3, [r4, #0]
 800ff04:	e00e      	b.n	800ff24 <_malloc_r+0xa0>
 800ff06:	6822      	ldr	r2, [r4, #0]
 800ff08:	1b52      	subs	r2, r2, r5
 800ff0a:	d41e      	bmi.n	800ff4a <_malloc_r+0xc6>
 800ff0c:	2a0b      	cmp	r2, #11
 800ff0e:	d916      	bls.n	800ff3e <_malloc_r+0xba>
 800ff10:	1961      	adds	r1, r4, r5
 800ff12:	42a3      	cmp	r3, r4
 800ff14:	6025      	str	r5, [r4, #0]
 800ff16:	bf18      	it	ne
 800ff18:	6059      	strne	r1, [r3, #4]
 800ff1a:	6863      	ldr	r3, [r4, #4]
 800ff1c:	bf08      	it	eq
 800ff1e:	6031      	streq	r1, [r6, #0]
 800ff20:	5162      	str	r2, [r4, r5]
 800ff22:	604b      	str	r3, [r1, #4]
 800ff24:	4638      	mov	r0, r7
 800ff26:	f104 060b 	add.w	r6, r4, #11
 800ff2a:	f000 f835 	bl	800ff98 <__malloc_unlock>
 800ff2e:	f026 0607 	bic.w	r6, r6, #7
 800ff32:	1d23      	adds	r3, r4, #4
 800ff34:	1af2      	subs	r2, r6, r3
 800ff36:	d0b6      	beq.n	800fea6 <_malloc_r+0x22>
 800ff38:	1b9b      	subs	r3, r3, r6
 800ff3a:	50a3      	str	r3, [r4, r2]
 800ff3c:	e7b3      	b.n	800fea6 <_malloc_r+0x22>
 800ff3e:	6862      	ldr	r2, [r4, #4]
 800ff40:	42a3      	cmp	r3, r4
 800ff42:	bf0c      	ite	eq
 800ff44:	6032      	streq	r2, [r6, #0]
 800ff46:	605a      	strne	r2, [r3, #4]
 800ff48:	e7ec      	b.n	800ff24 <_malloc_r+0xa0>
 800ff4a:	4623      	mov	r3, r4
 800ff4c:	6864      	ldr	r4, [r4, #4]
 800ff4e:	e7b2      	b.n	800feb6 <_malloc_r+0x32>
 800ff50:	4634      	mov	r4, r6
 800ff52:	6876      	ldr	r6, [r6, #4]
 800ff54:	e7b9      	b.n	800feca <_malloc_r+0x46>
 800ff56:	230c      	movs	r3, #12
 800ff58:	603b      	str	r3, [r7, #0]
 800ff5a:	4638      	mov	r0, r7
 800ff5c:	f000 f81c 	bl	800ff98 <__malloc_unlock>
 800ff60:	e7a1      	b.n	800fea6 <_malloc_r+0x22>
 800ff62:	6025      	str	r5, [r4, #0]
 800ff64:	e7de      	b.n	800ff24 <_malloc_r+0xa0>
 800ff66:	bf00      	nop
 800ff68:	240029f4 	.word	0x240029f4

0800ff6c <_sbrk_r>:
 800ff6c:	b538      	push	{r3, r4, r5, lr}
 800ff6e:	4d06      	ldr	r5, [pc, #24]	; (800ff88 <_sbrk_r+0x1c>)
 800ff70:	2300      	movs	r3, #0
 800ff72:	4604      	mov	r4, r0
 800ff74:	4608      	mov	r0, r1
 800ff76:	602b      	str	r3, [r5, #0]
 800ff78:	f7f2 fffc 	bl	8002f74 <_sbrk>
 800ff7c:	1c43      	adds	r3, r0, #1
 800ff7e:	d102      	bne.n	800ff86 <_sbrk_r+0x1a>
 800ff80:	682b      	ldr	r3, [r5, #0]
 800ff82:	b103      	cbz	r3, 800ff86 <_sbrk_r+0x1a>
 800ff84:	6023      	str	r3, [r4, #0]
 800ff86:	bd38      	pop	{r3, r4, r5, pc}
 800ff88:	240029fc 	.word	0x240029fc

0800ff8c <__malloc_lock>:
 800ff8c:	4801      	ldr	r0, [pc, #4]	; (800ff94 <__malloc_lock+0x8>)
 800ff8e:	f000 b809 	b.w	800ffa4 <__retarget_lock_acquire_recursive>
 800ff92:	bf00      	nop
 800ff94:	24002a00 	.word	0x24002a00

0800ff98 <__malloc_unlock>:
 800ff98:	4801      	ldr	r0, [pc, #4]	; (800ffa0 <__malloc_unlock+0x8>)
 800ff9a:	f000 b804 	b.w	800ffa6 <__retarget_lock_release_recursive>
 800ff9e:	bf00      	nop
 800ffa0:	24002a00 	.word	0x24002a00

0800ffa4 <__retarget_lock_acquire_recursive>:
 800ffa4:	4770      	bx	lr

0800ffa6 <__retarget_lock_release_recursive>:
 800ffa6:	4770      	bx	lr

0800ffa8 <exp>:
 800ffa8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800ffaa:	ee10 3a90 	vmov	r3, s1
 800ffae:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800ffb2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800ffb6:	18a2      	adds	r2, r4, r2
 800ffb8:	2a3e      	cmp	r2, #62	; 0x3e
 800ffba:	ee10 1a10 	vmov	r1, s0
 800ffbe:	d922      	bls.n	8010006 <exp+0x5e>
 800ffc0:	2a00      	cmp	r2, #0
 800ffc2:	da06      	bge.n	800ffd2 <exp+0x2a>
 800ffc4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ffc8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ffcc:	b004      	add	sp, #16
 800ffce:	bcf0      	pop	{r4, r5, r6, r7}
 800ffd0:	4770      	bx	lr
 800ffd2:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 800ffd6:	f04f 0000 	mov.w	r0, #0
 800ffda:	d913      	bls.n	8010004 <exp+0x5c>
 800ffdc:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800ffe0:	bf08      	it	eq
 800ffe2:	4281      	cmpeq	r1, r0
 800ffe4:	f000 80a0 	beq.w	8010128 <exp+0x180>
 800ffe8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ffec:	4294      	cmp	r4, r2
 800ffee:	d0e9      	beq.n	800ffc4 <exp+0x1c>
 800fff0:	4283      	cmp	r3, r0
 800fff2:	da03      	bge.n	800fffc <exp+0x54>
 800fff4:	b004      	add	sp, #16
 800fff6:	bcf0      	pop	{r4, r5, r6, r7}
 800fff8:	f000 b8c6 	b.w	8010188 <__math_uflow>
 800fffc:	b004      	add	sp, #16
 800fffe:	bcf0      	pop	{r4, r5, r6, r7}
 8010000:	f000 b8ca 	b.w	8010198 <__math_oflow>
 8010004:	4604      	mov	r4, r0
 8010006:	4950      	ldr	r1, [pc, #320]	; (8010148 <exp+0x1a0>)
 8010008:	ed91 6b02 	vldr	d6, [r1, #8]
 801000c:	ed91 5b00 	vldr	d5, [r1]
 8010010:	eeb0 7b46 	vmov.f64	d7, d6
 8010014:	eea5 7b00 	vfma.f64	d7, d5, d0
 8010018:	ee17 5a10 	vmov	r5, s14
 801001c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010020:	ed91 6b04 	vldr	d6, [r1, #16]
 8010024:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8010028:	eea6 0b07 	vfma.f64	d0, d6, d7
 801002c:	ed91 6b06 	vldr	d6, [r1, #24]
 8010030:	18d8      	adds	r0, r3, r3
 8010032:	f100 030f 	add.w	r3, r0, #15
 8010036:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801003a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801003e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8010042:	ee20 7b00 	vmul.f64	d7, d0, d0
 8010046:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 801004a:	ed91 5b08 	vldr	d5, [r1, #32]
 801004e:	ee30 6b06 	vadd.f64	d6, d0, d6
 8010052:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010056:	eea4 5b00 	vfma.f64	d5, d4, d0
 801005a:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801005e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010062:	ee27 7b07 	vmul.f64	d7, d7, d7
 8010066:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801006a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 801006e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8010072:	eea4 5b00 	vfma.f64	d5, d4, d0
 8010076:	2600      	movs	r6, #0
 8010078:	19f2      	adds	r2, r6, r7
 801007a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 801007e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010082:	2c00      	cmp	r4, #0
 8010084:	d14b      	bne.n	801011e <exp+0x176>
 8010086:	42b5      	cmp	r5, r6
 8010088:	db10      	blt.n	80100ac <exp+0x104>
 801008a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801008e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8010130 <exp+0x188>
 8010092:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8010096:	4610      	mov	r0, r2
 8010098:	ec41 0b10 	vmov	d0, r0, r1
 801009c:	eea6 0b00 	vfma.f64	d0, d6, d0
 80100a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80100a4:	b004      	add	sp, #16
 80100a6:	bcf0      	pop	{r4, r5, r6, r7}
 80100a8:	f000 b88a 	b.w	80101c0 <__math_check_oflow>
 80100ac:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80100b0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80100b4:	4610      	mov	r0, r2
 80100b6:	ec41 0b17 	vmov	d7, r0, r1
 80100ba:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80100be:	ee26 6b07 	vmul.f64	d6, d6, d7
 80100c2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80100c6:	eeb4 5bc4 	vcmpe.f64	d5, d4
 80100ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ce:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8010138 <exp+0x190>
 80100d2:	d51e      	bpl.n	8010112 <exp+0x16a>
 80100d4:	ee35 3b04 	vadd.f64	d3, d5, d4
 80100d8:	ee37 7b45 	vsub.f64	d7, d7, d5
 80100dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80100e0:	ee34 6b43 	vsub.f64	d6, d4, d3
 80100e4:	ee36 5b05 	vadd.f64	d5, d6, d5
 80100e8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80100ec:	ee35 5b03 	vadd.f64	d5, d5, d3
 80100f0:	ee35 5b44 	vsub.f64	d5, d5, d4
 80100f4:	eeb5 5b40 	vcmp.f64	d5, #0.0
 80100f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100fc:	d101      	bne.n	8010102 <exp+0x15a>
 80100fe:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8010140 <exp+0x198>
 8010102:	ed8d 0b00 	vstr	d0, [sp]
 8010106:	ed9d 7b00 	vldr	d7, [sp]
 801010a:	ee27 7b00 	vmul.f64	d7, d7, d0
 801010e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010112:	ee25 0b00 	vmul.f64	d0, d5, d0
 8010116:	b004      	add	sp, #16
 8010118:	bcf0      	pop	{r4, r5, r6, r7}
 801011a:	f000 b845 	b.w	80101a8 <__math_check_uflow>
 801011e:	ec43 2b10 	vmov	d0, r2, r3
 8010122:	eea6 0b00 	vfma.f64	d0, d6, d0
 8010126:	e751      	b.n	800ffcc <exp+0x24>
 8010128:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010140 <exp+0x198>
 801012c:	e74e      	b.n	800ffcc <exp+0x24>
 801012e:	bf00      	nop
 8010130:	00000000 	.word	0x00000000
 8010134:	7f000000 	.word	0x7f000000
 8010138:	00000000 	.word	0x00000000
 801013c:	00100000 	.word	0x00100000
	...
 8010148:	08011518 	.word	0x08011518

0801014c <with_errno>:
 801014c:	b513      	push	{r0, r1, r4, lr}
 801014e:	4604      	mov	r4, r0
 8010150:	ed8d 0b00 	vstr	d0, [sp]
 8010154:	f7ff fdcc 	bl	800fcf0 <__errno>
 8010158:	ed9d 0b00 	vldr	d0, [sp]
 801015c:	6004      	str	r4, [r0, #0]
 801015e:	b002      	add	sp, #8
 8010160:	bd10      	pop	{r4, pc}

08010162 <xflow>:
 8010162:	b082      	sub	sp, #8
 8010164:	b158      	cbz	r0, 801017e <xflow+0x1c>
 8010166:	eeb1 7b40 	vneg.f64	d7, d0
 801016a:	ed8d 7b00 	vstr	d7, [sp]
 801016e:	ed9d 7b00 	vldr	d7, [sp]
 8010172:	2022      	movs	r0, #34	; 0x22
 8010174:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010178:	b002      	add	sp, #8
 801017a:	f7ff bfe7 	b.w	801014c <with_errno>
 801017e:	eeb0 7b40 	vmov.f64	d7, d0
 8010182:	e7f2      	b.n	801016a <xflow+0x8>
 8010184:	0000      	movs	r0, r0
	...

08010188 <__math_uflow>:
 8010188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010190 <__math_uflow+0x8>
 801018c:	f7ff bfe9 	b.w	8010162 <xflow>
 8010190:	00000000 	.word	0x00000000
 8010194:	10000000 	.word	0x10000000

08010198 <__math_oflow>:
 8010198:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80101a0 <__math_oflow+0x8>
 801019c:	f7ff bfe1 	b.w	8010162 <xflow>
 80101a0:	00000000 	.word	0x00000000
 80101a4:	70000000 	.word	0x70000000

080101a8 <__math_check_uflow>:
 80101a8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80101ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101b0:	d102      	bne.n	80101b8 <__math_check_uflow+0x10>
 80101b2:	2022      	movs	r0, #34	; 0x22
 80101b4:	f7ff bfca 	b.w	801014c <with_errno>
 80101b8:	4770      	bx	lr
 80101ba:	0000      	movs	r0, r0
 80101bc:	0000      	movs	r0, r0
	...

080101c0 <__math_check_oflow>:
 80101c0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80101e0 <__math_check_oflow+0x20>
 80101c4:	eeb0 7bc0 	vabs.f64	d7, d0
 80101c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80101cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101d0:	dd02      	ble.n	80101d8 <__math_check_oflow+0x18>
 80101d2:	2022      	movs	r0, #34	; 0x22
 80101d4:	f7ff bfba 	b.w	801014c <with_errno>
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	f3af 8000 	nop.w
 80101e0:	ffffffff 	.word	0xffffffff
 80101e4:	7fefffff 	.word	0x7fefffff

080101e8 <ceil>:
 80101e8:	ee10 1a90 	vmov	r1, s1
 80101ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80101f0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80101f4:	2b13      	cmp	r3, #19
 80101f6:	b530      	push	{r4, r5, lr}
 80101f8:	ee10 0a10 	vmov	r0, s0
 80101fc:	ee10 5a10 	vmov	r5, s0
 8010200:	dc2f      	bgt.n	8010262 <ceil+0x7a>
 8010202:	2b00      	cmp	r3, #0
 8010204:	da13      	bge.n	801022e <ceil+0x46>
 8010206:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80102c8 <ceil+0xe0>
 801020a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801020e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010216:	dd05      	ble.n	8010224 <ceil+0x3c>
 8010218:	2900      	cmp	r1, #0
 801021a:	db4c      	blt.n	80102b6 <ceil+0xce>
 801021c:	4301      	orrs	r1, r0
 801021e:	d04e      	beq.n	80102be <ceil+0xd6>
 8010220:	492b      	ldr	r1, [pc, #172]	; (80102d0 <ceil+0xe8>)
 8010222:	2000      	movs	r0, #0
 8010224:	460b      	mov	r3, r1
 8010226:	4602      	mov	r2, r0
 8010228:	ec43 2b10 	vmov	d0, r2, r3
 801022c:	e020      	b.n	8010270 <ceil+0x88>
 801022e:	4a29      	ldr	r2, [pc, #164]	; (80102d4 <ceil+0xec>)
 8010230:	411a      	asrs	r2, r3
 8010232:	ea01 0402 	and.w	r4, r1, r2
 8010236:	4304      	orrs	r4, r0
 8010238:	d01a      	beq.n	8010270 <ceil+0x88>
 801023a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 80102c8 <ceil+0xe0>
 801023e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010242:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801024a:	ddeb      	ble.n	8010224 <ceil+0x3c>
 801024c:	2900      	cmp	r1, #0
 801024e:	bfc2      	ittt	gt
 8010250:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8010254:	fa40 f303 	asrgt.w	r3, r0, r3
 8010258:	18c9      	addgt	r1, r1, r3
 801025a:	ea21 0102 	bic.w	r1, r1, r2
 801025e:	2000      	movs	r0, #0
 8010260:	e7e0      	b.n	8010224 <ceil+0x3c>
 8010262:	2b33      	cmp	r3, #51	; 0x33
 8010264:	dd05      	ble.n	8010272 <ceil+0x8a>
 8010266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801026a:	d101      	bne.n	8010270 <ceil+0x88>
 801026c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010270:	bd30      	pop	{r4, r5, pc}
 8010272:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8010276:	f04f 32ff 	mov.w	r2, #4294967295
 801027a:	40e2      	lsrs	r2, r4
 801027c:	4202      	tst	r2, r0
 801027e:	d0f7      	beq.n	8010270 <ceil+0x88>
 8010280:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80102c8 <ceil+0xe0>
 8010284:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010288:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801028c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010290:	ddc8      	ble.n	8010224 <ceil+0x3c>
 8010292:	2900      	cmp	r1, #0
 8010294:	dd02      	ble.n	801029c <ceil+0xb4>
 8010296:	2b14      	cmp	r3, #20
 8010298:	d103      	bne.n	80102a2 <ceil+0xba>
 801029a:	3101      	adds	r1, #1
 801029c:	ea20 0002 	bic.w	r0, r0, r2
 80102a0:	e7c0      	b.n	8010224 <ceil+0x3c>
 80102a2:	2401      	movs	r4, #1
 80102a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80102a8:	fa04 f303 	lsl.w	r3, r4, r3
 80102ac:	4418      	add	r0, r3
 80102ae:	42a8      	cmp	r0, r5
 80102b0:	bf38      	it	cc
 80102b2:	1909      	addcc	r1, r1, r4
 80102b4:	e7f2      	b.n	801029c <ceil+0xb4>
 80102b6:	2000      	movs	r0, #0
 80102b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80102bc:	e7b2      	b.n	8010224 <ceil+0x3c>
 80102be:	4608      	mov	r0, r1
 80102c0:	e7b0      	b.n	8010224 <ceil+0x3c>
 80102c2:	bf00      	nop
 80102c4:	f3af 8000 	nop.w
 80102c8:	8800759c 	.word	0x8800759c
 80102cc:	7e37e43c 	.word	0x7e37e43c
 80102d0:	3ff00000 	.word	0x3ff00000
 80102d4:	000fffff 	.word	0x000fffff

080102d8 <floor>:
 80102d8:	ee10 1a90 	vmov	r1, s1
 80102dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80102e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80102e4:	2b13      	cmp	r3, #19
 80102e6:	b530      	push	{r4, r5, lr}
 80102e8:	ee10 0a10 	vmov	r0, s0
 80102ec:	ee10 5a10 	vmov	r5, s0
 80102f0:	dc31      	bgt.n	8010356 <floor+0x7e>
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	da15      	bge.n	8010322 <floor+0x4a>
 80102f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80103b0 <floor+0xd8>
 80102fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80102fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010306:	dd07      	ble.n	8010318 <floor+0x40>
 8010308:	2900      	cmp	r1, #0
 801030a:	da4e      	bge.n	80103aa <floor+0xd2>
 801030c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010310:	4318      	orrs	r0, r3
 8010312:	d001      	beq.n	8010318 <floor+0x40>
 8010314:	4928      	ldr	r1, [pc, #160]	; (80103b8 <floor+0xe0>)
 8010316:	2000      	movs	r0, #0
 8010318:	460b      	mov	r3, r1
 801031a:	4602      	mov	r2, r0
 801031c:	ec43 2b10 	vmov	d0, r2, r3
 8010320:	e020      	b.n	8010364 <floor+0x8c>
 8010322:	4a26      	ldr	r2, [pc, #152]	; (80103bc <floor+0xe4>)
 8010324:	411a      	asrs	r2, r3
 8010326:	ea01 0402 	and.w	r4, r1, r2
 801032a:	4304      	orrs	r4, r0
 801032c:	d01a      	beq.n	8010364 <floor+0x8c>
 801032e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80103b0 <floor+0xd8>
 8010332:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010336:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801033a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801033e:	ddeb      	ble.n	8010318 <floor+0x40>
 8010340:	2900      	cmp	r1, #0
 8010342:	bfbe      	ittt	lt
 8010344:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8010348:	fa40 f303 	asrlt.w	r3, r0, r3
 801034c:	18c9      	addlt	r1, r1, r3
 801034e:	ea21 0102 	bic.w	r1, r1, r2
 8010352:	2000      	movs	r0, #0
 8010354:	e7e0      	b.n	8010318 <floor+0x40>
 8010356:	2b33      	cmp	r3, #51	; 0x33
 8010358:	dd05      	ble.n	8010366 <floor+0x8e>
 801035a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801035e:	d101      	bne.n	8010364 <floor+0x8c>
 8010360:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010364:	bd30      	pop	{r4, r5, pc}
 8010366:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801036a:	f04f 32ff 	mov.w	r2, #4294967295
 801036e:	40e2      	lsrs	r2, r4
 8010370:	4202      	tst	r2, r0
 8010372:	d0f7      	beq.n	8010364 <floor+0x8c>
 8010374:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80103b0 <floor+0xd8>
 8010378:	ee30 0b07 	vadd.f64	d0, d0, d7
 801037c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010384:	ddc8      	ble.n	8010318 <floor+0x40>
 8010386:	2900      	cmp	r1, #0
 8010388:	da02      	bge.n	8010390 <floor+0xb8>
 801038a:	2b14      	cmp	r3, #20
 801038c:	d103      	bne.n	8010396 <floor+0xbe>
 801038e:	3101      	adds	r1, #1
 8010390:	ea20 0002 	bic.w	r0, r0, r2
 8010394:	e7c0      	b.n	8010318 <floor+0x40>
 8010396:	2401      	movs	r4, #1
 8010398:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801039c:	fa04 f303 	lsl.w	r3, r4, r3
 80103a0:	4418      	add	r0, r3
 80103a2:	42a8      	cmp	r0, r5
 80103a4:	bf38      	it	cc
 80103a6:	1909      	addcc	r1, r1, r4
 80103a8:	e7f2      	b.n	8010390 <floor+0xb8>
 80103aa:	2000      	movs	r0, #0
 80103ac:	4601      	mov	r1, r0
 80103ae:	e7b3      	b.n	8010318 <floor+0x40>
 80103b0:	8800759c 	.word	0x8800759c
 80103b4:	7e37e43c 	.word	0x7e37e43c
 80103b8:	bff00000 	.word	0xbff00000
 80103bc:	000fffff 	.word	0x000fffff

080103c0 <atanf>:
 80103c0:	b538      	push	{r3, r4, r5, lr}
 80103c2:	ee10 5a10 	vmov	r5, s0
 80103c6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80103ca:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80103ce:	eef0 7a40 	vmov.f32	s15, s0
 80103d2:	db0f      	blt.n	80103f4 <atanf+0x34>
 80103d4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80103d8:	dd04      	ble.n	80103e4 <atanf+0x24>
 80103da:	ee70 7a00 	vadd.f32	s15, s0, s0
 80103de:	eeb0 0a67 	vmov.f32	s0, s15
 80103e2:	bd38      	pop	{r3, r4, r5, pc}
 80103e4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801051c <atanf+0x15c>
 80103e8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8010520 <atanf+0x160>
 80103ec:	2d00      	cmp	r5, #0
 80103ee:	fe77 7a80 	vselgt.f32	s15, s15, s0
 80103f2:	e7f4      	b.n	80103de <atanf+0x1e>
 80103f4:	4b4b      	ldr	r3, [pc, #300]	; (8010524 <atanf+0x164>)
 80103f6:	429c      	cmp	r4, r3
 80103f8:	dc10      	bgt.n	801041c <atanf+0x5c>
 80103fa:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80103fe:	da0a      	bge.n	8010416 <atanf+0x56>
 8010400:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010528 <atanf+0x168>
 8010404:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010408:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801040c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010414:	dce3      	bgt.n	80103de <atanf+0x1e>
 8010416:	f04f 33ff 	mov.w	r3, #4294967295
 801041a:	e013      	b.n	8010444 <atanf+0x84>
 801041c:	f000 f8a4 	bl	8010568 <fabsf>
 8010420:	4b42      	ldr	r3, [pc, #264]	; (801052c <atanf+0x16c>)
 8010422:	429c      	cmp	r4, r3
 8010424:	dc4f      	bgt.n	80104c6 <atanf+0x106>
 8010426:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801042a:	429c      	cmp	r4, r3
 801042c:	dc41      	bgt.n	80104b2 <atanf+0xf2>
 801042e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010432:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010436:	eea0 7a27 	vfma.f32	s14, s0, s15
 801043a:	2300      	movs	r3, #0
 801043c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010440:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010444:	1c5a      	adds	r2, r3, #1
 8010446:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801044a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8010530 <atanf+0x170>
 801044e:	eddf 5a39 	vldr	s11, [pc, #228]	; 8010534 <atanf+0x174>
 8010452:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8010538 <atanf+0x178>
 8010456:	ee66 6a06 	vmul.f32	s13, s12, s12
 801045a:	eee6 5a87 	vfma.f32	s11, s13, s14
 801045e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801053c <atanf+0x17c>
 8010462:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010466:	eddf 5a36 	vldr	s11, [pc, #216]	; 8010540 <atanf+0x180>
 801046a:	eee7 5a26 	vfma.f32	s11, s14, s13
 801046e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8010544 <atanf+0x184>
 8010472:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010476:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010548 <atanf+0x188>
 801047a:	eee7 5a26 	vfma.f32	s11, s14, s13
 801047e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801054c <atanf+0x18c>
 8010482:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010486:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8010550 <atanf+0x190>
 801048a:	eea5 7a26 	vfma.f32	s14, s10, s13
 801048e:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8010554 <atanf+0x194>
 8010492:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010496:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8010558 <atanf+0x198>
 801049a:	eea5 7a26 	vfma.f32	s14, s10, s13
 801049e:	ee27 7a26 	vmul.f32	s14, s14, s13
 80104a2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80104a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80104aa:	d121      	bne.n	80104f0 <atanf+0x130>
 80104ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80104b0:	e795      	b.n	80103de <atanf+0x1e>
 80104b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80104b6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80104ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80104be:	2301      	movs	r3, #1
 80104c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80104c4:	e7be      	b.n	8010444 <atanf+0x84>
 80104c6:	4b25      	ldr	r3, [pc, #148]	; (801055c <atanf+0x19c>)
 80104c8:	429c      	cmp	r4, r3
 80104ca:	dc0b      	bgt.n	80104e4 <atanf+0x124>
 80104cc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80104d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80104d4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80104d8:	2302      	movs	r3, #2
 80104da:	ee70 6a67 	vsub.f32	s13, s0, s15
 80104de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80104e2:	e7af      	b.n	8010444 <atanf+0x84>
 80104e4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80104e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80104ec:	2303      	movs	r3, #3
 80104ee:	e7a9      	b.n	8010444 <atanf+0x84>
 80104f0:	4a1b      	ldr	r2, [pc, #108]	; (8010560 <atanf+0x1a0>)
 80104f2:	491c      	ldr	r1, [pc, #112]	; (8010564 <atanf+0x1a4>)
 80104f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80104f8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80104fc:	ed93 0a00 	vldr	s0, [r3]
 8010500:	ee37 7a40 	vsub.f32	s14, s14, s0
 8010504:	ed92 0a00 	vldr	s0, [r2]
 8010508:	ee77 7a67 	vsub.f32	s15, s14, s15
 801050c:	2d00      	cmp	r5, #0
 801050e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010512:	bfb8      	it	lt
 8010514:	eef1 7a67 	vneglt.f32	s15, s15
 8010518:	e761      	b.n	80103de <atanf+0x1e>
 801051a:	bf00      	nop
 801051c:	3fc90fdb 	.word	0x3fc90fdb
 8010520:	bfc90fdb 	.word	0xbfc90fdb
 8010524:	3edfffff 	.word	0x3edfffff
 8010528:	7149f2ca 	.word	0x7149f2ca
 801052c:	3f97ffff 	.word	0x3f97ffff
 8010530:	3c8569d7 	.word	0x3c8569d7
 8010534:	3d4bda59 	.word	0x3d4bda59
 8010538:	bd6ef16b 	.word	0xbd6ef16b
 801053c:	3d886b35 	.word	0x3d886b35
 8010540:	3dba2e6e 	.word	0x3dba2e6e
 8010544:	3e124925 	.word	0x3e124925
 8010548:	3eaaaaab 	.word	0x3eaaaaab
 801054c:	bd15a221 	.word	0xbd15a221
 8010550:	bd9d8795 	.word	0xbd9d8795
 8010554:	bde38e38 	.word	0xbde38e38
 8010558:	be4ccccd 	.word	0xbe4ccccd
 801055c:	401bffff 	.word	0x401bffff
 8010560:	08011d88 	.word	0x08011d88
 8010564:	08011d98 	.word	0x08011d98

08010568 <fabsf>:
 8010568:	ee10 3a10 	vmov	r3, s0
 801056c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010570:	ee00 3a10 	vmov	s0, r3
 8010574:	4770      	bx	lr

08010576 <sinf_poly>:
 8010576:	07cb      	lsls	r3, r1, #31
 8010578:	d412      	bmi.n	80105a0 <sinf_poly+0x2a>
 801057a:	ee21 5b00 	vmul.f64	d5, d1, d0
 801057e:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 8010582:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8010586:	eea6 7b01 	vfma.f64	d7, d6, d1
 801058a:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 801058e:	ee21 1b05 	vmul.f64	d1, d1, d5
 8010592:	eea6 0b05 	vfma.f64	d0, d6, d5
 8010596:	eea7 0b01 	vfma.f64	d0, d7, d1
 801059a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801059e:	4770      	bx	lr
 80105a0:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 80105a4:	ee21 5b01 	vmul.f64	d5, d1, d1
 80105a8:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 80105ac:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 80105b0:	eea1 7b06 	vfma.f64	d7, d1, d6
 80105b4:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 80105b8:	eea1 0b06 	vfma.f64	d0, d1, d6
 80105bc:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 80105c0:	ee21 1b05 	vmul.f64	d1, d1, d5
 80105c4:	eea5 0b06 	vfma.f64	d0, d5, d6
 80105c8:	e7e5      	b.n	8010596 <sinf_poly+0x20>
 80105ca:	0000      	movs	r0, r0
 80105cc:	0000      	movs	r0, r0
	...

080105d0 <sinf>:
 80105d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105d2:	ee10 4a10 	vmov	r4, s0
 80105d6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80105da:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80105de:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80105e2:	eef0 7a40 	vmov.f32	s15, s0
 80105e6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 80105ea:	d218      	bcs.n	801061e <sinf+0x4e>
 80105ec:	ee26 1b06 	vmul.f64	d1, d6, d6
 80105f0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 80105f4:	d20a      	bcs.n	801060c <sinf+0x3c>
 80105f6:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 80105fa:	d103      	bne.n	8010604 <sinf+0x34>
 80105fc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8010600:	ed8d 1a01 	vstr	s2, [sp, #4]
 8010604:	eeb0 0a67 	vmov.f32	s0, s15
 8010608:	b003      	add	sp, #12
 801060a:	bd30      	pop	{r4, r5, pc}
 801060c:	483a      	ldr	r0, [pc, #232]	; (80106f8 <sinf+0x128>)
 801060e:	eeb0 0b46 	vmov.f64	d0, d6
 8010612:	2100      	movs	r1, #0
 8010614:	b003      	add	sp, #12
 8010616:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801061a:	f7ff bfac 	b.w	8010576 <sinf_poly>
 801061e:	f240 422e 	movw	r2, #1070	; 0x42e
 8010622:	4293      	cmp	r3, r2
 8010624:	d824      	bhi.n	8010670 <sinf+0xa0>
 8010626:	4b34      	ldr	r3, [pc, #208]	; (80106f8 <sinf+0x128>)
 8010628:	ed93 7b08 	vldr	d7, [r3, #32]
 801062c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010630:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010634:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8010638:	ee17 1a90 	vmov	r1, s15
 801063c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8010640:	1609      	asrs	r1, r1, #24
 8010642:	ee07 1a90 	vmov	s15, r1
 8010646:	f001 0203 	and.w	r2, r1, #3
 801064a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801064e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010652:	ed92 0b00 	vldr	d0, [r2]
 8010656:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801065a:	f011 0f02 	tst.w	r1, #2
 801065e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8010662:	bf08      	it	eq
 8010664:	4618      	moveq	r0, r3
 8010666:	ee26 1b06 	vmul.f64	d1, d6, d6
 801066a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801066e:	e7d1      	b.n	8010614 <sinf+0x44>
 8010670:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8010674:	d237      	bcs.n	80106e6 <sinf+0x116>
 8010676:	4a21      	ldr	r2, [pc, #132]	; (80106fc <sinf+0x12c>)
 8010678:	f3c4 6183 	ubfx	r1, r4, #26, #4
 801067c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8010680:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8010684:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8010688:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801068c:	4083      	lsls	r3, r0
 801068e:	6a28      	ldr	r0, [r5, #32]
 8010690:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8010694:	fba3 1000 	umull	r1, r0, r3, r0
 8010698:	6929      	ldr	r1, [r5, #16]
 801069a:	435a      	muls	r2, r3
 801069c:	fbe3 0201 	umlal	r0, r2, r3, r1
 80106a0:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 80106a4:	0f8d      	lsrs	r5, r1, #30
 80106a6:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80106aa:	1a51      	subs	r1, r2, r1
 80106ac:	f7ef ffbe 	bl	800062c <__aeabi_l2d>
 80106b0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80106b4:	4b10      	ldr	r3, [pc, #64]	; (80106f8 <sinf+0x128>)
 80106b6:	f004 0203 	and.w	r2, r4, #3
 80106ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80106be:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80106f0 <sinf+0x120>
 80106c2:	ed92 0b00 	vldr	d0, [r2]
 80106c6:	ec41 0b16 	vmov	d6, r0, r1
 80106ca:	f014 0f02 	tst.w	r4, #2
 80106ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80106d2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80106d6:	4629      	mov	r1, r5
 80106d8:	bf08      	it	eq
 80106da:	4618      	moveq	r0, r3
 80106dc:	ee27 1b07 	vmul.f64	d1, d7, d7
 80106e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80106e4:	e796      	b.n	8010614 <sinf+0x44>
 80106e6:	b003      	add	sp, #12
 80106e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106ec:	f000 b813 	b.w	8010716 <__math_invalidf>
 80106f0:	54442d18 	.word	0x54442d18
 80106f4:	3c1921fb 	.word	0x3c1921fb
 80106f8:	08011e08 	.word	0x08011e08
 80106fc:	08011da8 	.word	0x08011da8

08010700 <with_errnof>:
 8010700:	b513      	push	{r0, r1, r4, lr}
 8010702:	4604      	mov	r4, r0
 8010704:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010708:	f7ff faf2 	bl	800fcf0 <__errno>
 801070c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010710:	6004      	str	r4, [r0, #0]
 8010712:	b002      	add	sp, #8
 8010714:	bd10      	pop	{r4, pc}

08010716 <__math_invalidf>:
 8010716:	eef0 7a40 	vmov.f32	s15, s0
 801071a:	ee30 7a40 	vsub.f32	s14, s0, s0
 801071e:	eef4 7a67 	vcmp.f32	s15, s15
 8010722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010726:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801072a:	d602      	bvs.n	8010732 <__math_invalidf+0x1c>
 801072c:	2021      	movs	r0, #33	; 0x21
 801072e:	f7ff bfe7 	b.w	8010700 <with_errnof>
 8010732:	4770      	bx	lr

08010734 <_init>:
 8010734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010736:	bf00      	nop
 8010738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801073a:	bc08      	pop	{r3}
 801073c:	469e      	mov	lr, r3
 801073e:	4770      	bx	lr

08010740 <_fini>:
 8010740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010742:	bf00      	nop
 8010744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010746:	bc08      	pop	{r3}
 8010748:	469e      	mov	lr, r3
 801074a:	4770      	bx	lr
