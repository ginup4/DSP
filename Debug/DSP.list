
DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101b4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f28  08010488  08010488  00020488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080113b0  080113b0  000213b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080113b4  080113b4  000213b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000270  24000000  080113b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002794  24000270  08011628  00030270  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24002a04  08011628  00032a04  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d2c8  00000000  00000000  0003029e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004039  00000000  00000000  0004d566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000015d0  00000000  00000000  000515a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001408  00000000  00000000  00052b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000354fb  00000000  00000000  00053f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e521  00000000  00000000  00089473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014024e  00000000  00000000  000a7994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001e7be2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005f74  00000000  00000000  001e7c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000270 	.word	0x24000270
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801046c 	.word	0x0801046c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000274 	.word	0x24000274
 800030c:	0801046c 	.word	0x0801046c

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <crash>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void crash(int code){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	if(code % 2 == 1){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	bfb8      	it	lt
 800069a:	425b      	neglt	r3, r3
 800069c:	2b01      	cmp	r3, #1
 800069e:	d104      	bne.n	80006aa <crash+0x22>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2108      	movs	r1, #8
 80006a4:	4808      	ldr	r0, [pc, #32]	; (80006c8 <crash+0x40>)
 80006a6:	f005 f93b 	bl	8005920 <HAL_GPIO_WritePin>
	}
	if((code >> 1) % 2 == 1){
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	105b      	asrs	r3, r3, #1
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	bfb8      	it	lt
 80006b6:	425b      	neglt	r3, r3
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d104      	bne.n	80006c6 <crash+0x3e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	2110      	movs	r1, #16
 80006c0:	4801      	ldr	r0, [pc, #4]	; (80006c8 <crash+0x40>)
 80006c2:	f005 f92d 	bl	8005920 <HAL_GPIO_WritePin>
	}
	while(1);
 80006c6:	e7fe      	b.n	80006c6 <crash+0x3e>
 80006c8:	58021000 	.word	0x58021000

080006cc <checkForNull>:
}

void checkForNull(void* ptr){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	if(ptr == NULL){
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <checkForNull+0x14>
		crash(3);
 80006da:	2003      	movs	r0, #3
 80006dc:	f7ff ffd4 	bl	8000688 <crash>
	}
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <loadEffects>:

void loadEffects(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0bc      	sub	sp, #240	; 0xf0
 80006ec:	af00      	add	r7, sp, #0
	unsigned int i = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint8_t effectId;
	unsigned int paramsLen;
	int channel = 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	memcpy(effectsData, effectsRawData, usbBufferLen);
 80006fa:	4adc      	ldr	r2, [pc, #880]	; (8000a6c <loadEffects+0x384>)
 80006fc:	4bdc      	ldr	r3, [pc, #880]	; (8000a70 <loadEffects+0x388>)
 80006fe:	4610      	mov	r0, r2
 8000700:	4619      	mov	r1, r3
 8000702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000706:	461a      	mov	r2, r3
 8000708:	f00f fade 	bl	800fcc8 <memcpy>

	while(1){
		effectId = *(effectsData + i);
 800070c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000710:	4ad6      	ldr	r2, [pc, #856]	; (8000a6c <loadEffects+0x384>)
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		i++;
 800071a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800071e:	3301      	adds	r3, #1
 8000720:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		if(effectId == 0xff){
 8000724:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000728:	2bff      	cmp	r3, #255	; 0xff
 800072a:	d108      	bne.n	800073e <loadEffects+0x56>
			if(channel == 1){
 800072c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000730:	2b01      	cmp	r3, #1
 8000732:	f040 82fd 	bne.w	8000d30 <loadEffects+0x648>
				channel = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				continue;
 800073c:	e2f7      	b.n	8000d2e <loadEffects+0x646>
			}else{
				break;
			}
		}

		if(effectId == 0){
 800073e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000742:	2b00      	cmp	r3, #0
 8000744:	d103      	bne.n	800074e <loadEffects+0x66>
			paramsLen = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800074c:	e2e8      	b.n	8000d20 <loadEffects+0x638>

		}else if(effectId == 1){
 800074e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000752:	2b01      	cmp	r3, #1
 8000754:	d10e      	bne.n	8000774 <loadEffects+0x8c>
			LOAD_EFFECT(dist)
 8000756:	2304      	movs	r3, #4
 8000758:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800075c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000760:	4ac2      	ldr	r2, [pc, #776]	; (8000a6c <loadEffects+0x384>)
 8000762:	1899      	adds	r1, r3, r2
 8000764:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000768:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800076c:	4618      	mov	r0, r3
 800076e:	f00f faab 	bl	800fcc8 <memcpy>
 8000772:	e2d5      	b.n	8000d20 <loadEffects+0x638>

		}else if(effectId == 2){
 8000774:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000778:	2b02      	cmp	r3, #2
 800077a:	d10e      	bne.n	800079a <loadEffects+0xb2>
			LOAD_EFFECT(softdist)
 800077c:	2304      	movs	r3, #4
 800077e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000782:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000786:	4ab9      	ldr	r2, [pc, #740]	; (8000a6c <loadEffects+0x384>)
 8000788:	1899      	adds	r1, r3, r2
 800078a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800078e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000792:	4618      	mov	r0, r3
 8000794:	f00f fa98 	bl	800fcc8 <memcpy>
 8000798:	e2c2      	b.n	8000d20 <loadEffects+0x638>

		}else if(effectId == 3){
 800079a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d151      	bne.n	8000846 <loadEffects+0x15e>
			LOAD_EFFECT(vibrato)
 80007a2:	2310      	movs	r3, #16
 80007a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80007a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80007ac:	4aaf      	ldr	r2, [pc, #700]	; (8000a6c <loadEffects+0x384>)
 80007ae:	1899      	adds	r1, r3, r2
 80007b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007b4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80007b8:	4618      	mov	r0, r3
 80007ba:	f00f fa85 	bl	800fcc8 <memcpy>
			vibratoParams.frequency = TWO_PI * vibratoParams.frequency / sampleRate;
 80007be:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80007c2:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8000a74 <loadEffects+0x38c>
 80007c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007ca:	eddf 6aab 	vldr	s13, [pc, #684]	; 8000a78 <loadEffects+0x390>
 80007ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007d2:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
			vibratoParams.strength = vibratoParams.strength / vibratoParams.frequency;
 80007d6:	edd7 6a34 	vldr	s13, [r7, #208]	; 0xd0
 80007da:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 80007de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007e2:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
			vibratoParams.previousInputsLen = ceil(2 * vibratoParams.strength) + 3;
 80007e6:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80007ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007f2:	eeb0 0b47 	vmov.f64	d0, d7
 80007f6:	f00f fb93 	bl	800ff20 <ceil>
 80007fa:	eeb0 7b40 	vmov.f64	d7, d0
 80007fe:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8000802:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000806:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800080a:	ee17 3a90 	vmov	r3, s15
 800080e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			vibratoParams.previousInputsPtr = (float*) calloc(vibratoParams.previousInputsLen, sizeof(float));
 8000812:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000816:	2104      	movs	r1, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f00f fa1b 	bl	800fc54 <calloc>
 800081e:	4603      	mov	r3, r0
 8000820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			checkForNull(vibratoParams.previousInputsPtr);
 8000824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff4f 	bl	80006cc <checkForNull>
			SAVE_EFFECT(vibrato)
 800082e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000832:	4a8e      	ldr	r2, [pc, #568]	; (8000a6c <loadEffects+0x384>)
 8000834:	4413      	add	r3, r2
 8000836:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800083a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800083e:	4618      	mov	r0, r3
 8000840:	f00f fa42 	bl	800fcc8 <memcpy>
 8000844:	e26c      	b.n	8000d20 <loadEffects+0x638>

		}else if(effectId == 4){
 8000846:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800084a:	2b04      	cmp	r3, #4
 800084c:	d151      	bne.n	80008f2 <loadEffects+0x20a>
			LOAD_EFFECT(chorus)
 800084e:	2310      	movs	r3, #16
 8000850:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000854:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000858:	4a84      	ldr	r2, [pc, #528]	; (8000a6c <loadEffects+0x384>)
 800085a:	1899      	adds	r1, r3, r2
 800085c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000860:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000864:	4618      	mov	r0, r3
 8000866:	f00f fa2f 	bl	800fcc8 <memcpy>
			chorusParams.frequency = TWO_PI * chorusParams.frequency / sampleRate;
 800086a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800086e:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8000a74 <loadEffects+0x38c>
 8000872:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000876:	eddf 6a80 	vldr	s13, [pc, #512]	; 8000a78 <loadEffects+0x390>
 800087a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800087e:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
			chorusParams.strength = chorusParams.strength / chorusParams.frequency;
 8000882:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8000886:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800088a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800088e:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
			chorusParams.previousInputsLen = ceil(2 * chorusParams.strength) + 3;
 8000892:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8000896:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800089a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800089e:	eeb0 0b47 	vmov.f64	d0, d7
 80008a2:	f00f fb3d 	bl	800ff20 <ceil>
 80008a6:	eeb0 7b40 	vmov.f64	d7, d0
 80008aa:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80008ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80008b2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80008b6:	ee17 3a90 	vmov	r3, s15
 80008ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			chorusParams.previousInputsPtr = (float*) calloc(chorusParams.previousInputsLen, sizeof(float));
 80008be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80008c2:	2104      	movs	r1, #4
 80008c4:	4618      	mov	r0, r3
 80008c6:	f00f f9c5 	bl	800fc54 <calloc>
 80008ca:	4603      	mov	r3, r0
 80008cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			checkForNull(chorusParams.previousInputsPtr);
 80008d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fef9 	bl	80006cc <checkForNull>
			SAVE_EFFECT(chorus)
 80008da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80008de:	4a63      	ldr	r2, [pc, #396]	; (8000a6c <loadEffects+0x384>)
 80008e0:	4413      	add	r3, r2
 80008e2:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80008e6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00f f9ec 	bl	800fcc8 <memcpy>
 80008f0:	e216      	b.n	8000d20 <loadEffects+0x638>

		}else if(effectId == 5){
 80008f2:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80008f6:	2b05      	cmp	r3, #5
 80008f8:	d13b      	bne.n	8000972 <loadEffects+0x28a>
			LOAD_EFFECT(echo)
 80008fa:	2310      	movs	r3, #16
 80008fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000900:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000904:	4a59      	ldr	r2, [pc, #356]	; (8000a6c <loadEffects+0x384>)
 8000906:	1899      	adds	r1, r3, r2
 8000908:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800090c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000910:	4618      	mov	r0, r3
 8000912:	f00f f9d9 	bl	800fcc8 <memcpy>
			echoParams.previousOutputsLen = ceil(echoParams.delay * sampleRate);
 8000916:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800091a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000a78 <loadEffects+0x390>
 800091e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000922:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000926:	eeb0 0b47 	vmov.f64	d0, d7
 800092a:	f00f faf9 	bl	800ff20 <ceil>
 800092e:	eeb0 7b40 	vmov.f64	d7, d0
 8000932:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000936:	ee17 3a90 	vmov	r3, s15
 800093a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			echoParams.previousOutputsPtr = (float*) calloc(echoParams.previousOutputsLen, sizeof(float));
 800093e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000942:	2104      	movs	r1, #4
 8000944:	4618      	mov	r0, r3
 8000946:	f00f f985 	bl	800fc54 <calloc>
 800094a:	4603      	mov	r3, r0
 800094c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			checkForNull(echoParams.previousOutputsPtr);
 8000950:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff feb9 	bl	80006cc <checkForNull>
			SAVE_EFFECT(echo)
 800095a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800095e:	4a43      	ldr	r2, [pc, #268]	; (8000a6c <loadEffects+0x384>)
 8000960:	4413      	add	r3, r2
 8000962:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000966:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800096a:	4618      	mov	r0, r3
 800096c:	f00f f9ac 	bl	800fcc8 <memcpy>
 8000970:	e1d6      	b.n	8000d20 <loadEffects+0x638>

		}else if(effectId == 6){
 8000972:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000976:	2b06      	cmp	r3, #6
 8000978:	d139      	bne.n	80009ee <loadEffects+0x306>
			LOAD_EFFECT(lowpass)
 800097a:	2308      	movs	r3, #8
 800097c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000980:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000984:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <loadEffects+0x384>)
 8000986:	1899      	adds	r1, r3, r2
 8000988:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800098c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000990:	4618      	mov	r0, r3
 8000992:	f00f f999 	bl	800fcc8 <memcpy>
			lowpassParams.filterConst = dt / (dt + 1 / (TWO_PI * lowpassParams.filterConst));
 8000996:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000a7c <loadEffects+0x394>
 800099a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800099e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000a74 <loadEffects+0x38c>
 80009a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80009aa:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80009ae:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000a7c <loadEffects+0x394>
 80009b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80009b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009ba:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
			lowpassParams.lastOutputPtr = (float*) calloc(1, sizeof(float));
 80009be:	2104      	movs	r1, #4
 80009c0:	2001      	movs	r0, #1
 80009c2:	f00f f947 	bl	800fc54 <calloc>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			checkForNull(lowpassParams.lastOutputPtr);
 80009cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fe7b 	bl	80006cc <checkForNull>
			SAVE_EFFECT(lowpass)
 80009d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80009da:	4a24      	ldr	r2, [pc, #144]	; (8000a6c <loadEffects+0x384>)
 80009dc:	4413      	add	r3, r2
 80009de:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80009e2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00f f96e 	bl	800fcc8 <memcpy>
 80009ec:	e198      	b.n	8000d20 <loadEffects+0x638>

		}else if(effectId == 7){
 80009ee:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80009f2:	2b07      	cmp	r3, #7
 80009f4:	d144      	bne.n	8000a80 <loadEffects+0x398>
			LOAD_EFFECT(highpass)
 80009f6:	2308      	movs	r3, #8
 80009f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80009fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <loadEffects+0x384>)
 8000a02:	1899      	adds	r1, r3, r2
 8000a04:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a08:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f00f f95b 	bl	800fcc8 <memcpy>
			highpassParams.filterConst = dt / (dt + 1 / (TWO_PI * highpassParams.filterConst));
 8000a12:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000a7c <loadEffects+0x394>
 8000a16:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8000a1a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000a74 <loadEffects+0x38c>
 8000a1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a22:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000a26:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8000a2a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000a7c <loadEffects+0x394>
 8000a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a36:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
			highpassParams.lastSamplesPtr = (float*) calloc(2, sizeof(float));
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f00f f909 	bl	800fc54 <calloc>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			checkForNull(highpassParams.lastSamplesPtr);
 8000a48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fe3d 	bl	80006cc <checkForNull>
			SAVE_EFFECT(highpass)
 8000a52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <loadEffects+0x384>)
 8000a58:	4413      	add	r3, r2
 8000a5a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8000a5e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000a62:	4618      	mov	r0, r3
 8000a64:	f00f f930 	bl	800fcc8 <memcpy>
 8000a68:	e15a      	b.n	8000d20 <loadEffects+0x638>
 8000a6a:	bf00      	nop
 8000a6c:	240007d0 	.word	0x240007d0
 8000a70:	2400000c 	.word	0x2400000c
 8000a74:	40c90fdb 	.word	0x40c90fdb
 8000a78:	473a7f00 	.word	0x473a7f00
 8000a7c:	37afb413 	.word	0x37afb413

		}else if(effectId == 8){
 8000a80:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000a84:	2b08      	cmp	r3, #8
 8000a86:	d125      	bne.n	8000ad4 <loadEffects+0x3ec>
			LOAD_EFFECT(tremolo)
 8000a88:	2308      	movs	r3, #8
 8000a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000a8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000a92:	4ab1      	ldr	r2, [pc, #708]	; (8000d58 <loadEffects+0x670>)
 8000a94:	1899      	adds	r1, r3, r2
 8000a96:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a9a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f00f f912 	bl	800fcc8 <memcpy>
			tremoloParams.frequency = TWO_PI * tremoloParams.frequency / sampleRate;
 8000aa4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000aa8:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8000d5c <loadEffects+0x674>
 8000aac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ab0:	eddf 6aab 	vldr	s13, [pc, #684]	; 8000d60 <loadEffects+0x678>
 8000ab4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ab8:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
			SAVE_EFFECT(tremolo)
 8000abc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ac0:	4aa5      	ldr	r2, [pc, #660]	; (8000d58 <loadEffects+0x670>)
 8000ac2:	4413      	add	r3, r2
 8000ac4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000ac8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000acc:	4618      	mov	r0, r3
 8000ace:	f00f f8fb 	bl	800fcc8 <memcpy>
 8000ad2:	e125      	b.n	8000d20 <loadEffects+0x638>

		}else if(effectId == 9){
 8000ad4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000ad8:	2b09      	cmp	r3, #9
 8000ada:	d14d      	bne.n	8000b78 <loadEffects+0x490>
			LOAD_EFFECT(rotary)
 8000adc:	2314      	movs	r3, #20
 8000ade:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000ae2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ae6:	4a9c      	ldr	r2, [pc, #624]	; (8000d58 <loadEffects+0x670>)
 8000ae8:	1899      	adds	r1, r3, r2
 8000aea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000aee:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00f f8e8 	bl	800fcc8 <memcpy>
			rotaryParams.frequency = TWO_PI * rotaryParams.frequency / sampleRate;
 8000af8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8000afc:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8000d5c <loadEffects+0x674>
 8000b00:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b04:	eddf 6a96 	vldr	s13, [pc, #600]	; 8000d60 <loadEffects+0x678>
 8000b08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b0c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
			rotaryParams.vibratoStrength = rotaryParams.vibratoStrength / rotaryParams.frequency;
 8000b10:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8000b14:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8000b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b1c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
			rotaryParams.previousInputsLen = ceil(2 * rotaryParams.vibratoStrength) + 3;
 8000b20:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8000b24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000b28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b2c:	eeb0 0b47 	vmov.f64	d0, d7
 8000b30:	f00f f9f6 	bl	800ff20 <ceil>
 8000b34:	eeb0 7b40 	vmov.f64	d7, d0
 8000b38:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8000b3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b40:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b44:	ee17 3a90 	vmov	r3, s15
 8000b48:	67fb      	str	r3, [r7, #124]	; 0x7c
			rotaryParams.previousInputsPtr = (float*) calloc(rotaryParams.previousInputsLen, sizeof(float));
 8000b4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f00f f880 	bl	800fc54 <calloc>
 8000b54:	4603      	mov	r3, r0
 8000b56:	67bb      	str	r3, [r7, #120]	; 0x78
			checkForNull(rotaryParams.previousInputsPtr);
 8000b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fdb6 	bl	80006cc <checkForNull>
			SAVE_EFFECT(rotary)
 8000b60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b64:	4a7c      	ldr	r2, [pc, #496]	; (8000d58 <loadEffects+0x670>)
 8000b66:	4413      	add	r3, r2
 8000b68:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000b6c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00f f8a9 	bl	800fcc8 <memcpy>
 8000b76:	e0d3      	b.n	8000d20 <loadEffects+0x638>

		}else if(effectId == 10){
 8000b78:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000b7c:	2b0a      	cmp	r3, #10
 8000b7e:	d17e      	bne.n	8000c7e <loadEffects+0x596>
//			LOAD_EFFECT(reverb)
			struct reverbConfig reverbParams;
			paramsLen = sizeof(struct reverbConfig);
 8000b80:	2368      	movs	r3, #104	; 0x68
 8000b82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			memcpy(&reverbParams, effectsData + i, paramsLen);
 8000b86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b8a:	4a73      	ldr	r2, [pc, #460]	; (8000d58 <loadEffects+0x670>)
 8000b8c:	1899      	adds	r1, r3, r2
 8000b8e:	463b      	mov	r3, r7
 8000b90:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000b94:	4618      	mov	r0, r3
 8000b96:	f00f f897 	bl	800fcc8 <memcpy>
			reverbParams.filtersParams[0].attenuation = reverbParams.attenuation * 1;
 8000b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b9c:	60fb      	str	r3, [r7, #12]
			reverbParams.filtersParams[0].previousOutputsLen = 9601;
 8000b9e:	f242 5381 	movw	r3, #9601	; 0x2581
 8000ba2:	607b      	str	r3, [r7, #4]
			reverbParams.filtersParams[1].attenuation = reverbParams.attenuation * 0.987870619946;
 8000ba4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000ba8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bac:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8000d40 <loadEffects+0x658>
 8000bb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bb8:	edc7 7a07 	vstr	s15, [r7, #28]
			reverbParams.filtersParams[1].previousOutputsLen = 9999;
 8000bbc:	f242 730f 	movw	r3, #9999	; 0x270f
 8000bc0:	617b      	str	r3, [r7, #20]
			reverbParams.filtersParams[2].attenuation = reverbParams.attenuation * 0.963611859838;
 8000bc2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000bc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bca:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8000d48 <loadEffects+0x660>
 8000bce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bd2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bd6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			reverbParams.filtersParams[2].previousOutputsLen = 10799;
 8000bda:	f642 232f 	movw	r3, #10799	; 0x2a2f
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
			reverbParams.filtersParams[3].attenuation = reverbParams.attenuation * 0.93935309973;
 8000be0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000be4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000be8:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8000d50 <loadEffects+0x668>
 8000bec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bf4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			reverbParams.filtersParams[3].previousOutputsLen = 11599;
 8000bf8:	f642 534f 	movw	r3, #11599	; 0x2d4f
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
			reverbParams.filtersParams[4].attenuation = reverbParams.attenuation;
 8000bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c00:	64fb      	str	r3, [r7, #76]	; 0x4c
			reverbParams.filtersParams[4].previousOutputsLen = 7001;
 8000c02:	f641 3359 	movw	r3, #7001	; 0x1b59
 8000c06:	647b      	str	r3, [r7, #68]	; 0x44
			reverbParams.filtersParams[5].attenuation = reverbParams.attenuation;
 8000c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
			reverbParams.filtersParams[5].previousOutputsLen = 2333;
 8000c0c:	f640 131d 	movw	r3, #2333	; 0x91d
 8000c10:	657b      	str	r3, [r7, #84]	; 0x54
			for(int i = 0; i < 6; i++){
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000c18:	e022      	b.n	8000c60 <loadEffects+0x578>
				reverbParams.filtersParams[i].previousOutputsPtr = (float*) calloc(reverbParams.filtersParams[i].previousOutputsLen, sizeof(float));
 8000c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	33f0      	adds	r3, #240	; 0xf0
 8000c22:	443b      	add	r3, r7
 8000c24:	3bec      	subs	r3, #236	; 0xec
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2104      	movs	r1, #4
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f00f f812 	bl	800fc54 <calloc>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	33f0      	adds	r3, #240	; 0xf0
 8000c3c:	443b      	add	r3, r7
 8000c3e:	3bf0      	subs	r3, #240	; 0xf0
 8000c40:	601a      	str	r2, [r3, #0]
				checkForNull(reverbParams.filtersParams[i].previousOutputsPtr);
 8000c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	33f0      	adds	r3, #240	; 0xf0
 8000c4a:	443b      	add	r3, r7
 8000c4c:	3bf0      	subs	r3, #240	; 0xf0
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fd3b 	bl	80006cc <checkForNull>
			for(int i = 0; i < 6; i++){
 8000c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c64:	2b05      	cmp	r3, #5
 8000c66:	ddd8      	ble.n	8000c1a <loadEffects+0x532>
			}
			memcpy(effectsData + i, &reverbParams, paramsLen);
 8000c68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c6c:	4a3a      	ldr	r2, [pc, #232]	; (8000d58 <loadEffects+0x670>)
 8000c6e:	4413      	add	r3, r2
 8000c70:	4639      	mov	r1, r7
 8000c72:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000c76:	4618      	mov	r0, r3
 8000c78:	f00f f826 	bl	800fcc8 <memcpy>
 8000c7c:	e050      	b.n	8000d20 <loadEffects+0x638>
//			SAVE_EFFECT(reverb)

		}else if(effectId == 11){
 8000c7e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000c82:	2b0b      	cmp	r3, #11
 8000c84:	d10e      	bne.n	8000ca4 <loadEffects+0x5bc>
			LOAD_EFFECT(gain)
 8000c86:	2304      	movs	r3, #4
 8000c88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000c8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c90:	4a31      	ldr	r2, [pc, #196]	; (8000d58 <loadEffects+0x670>)
 8000c92:	1899      	adds	r1, r3, r2
 8000c94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c98:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f00f f813 	bl	800fcc8 <memcpy>
 8000ca2:	e03d      	b.n	8000d20 <loadEffects+0x638>

		}else if(effectId == 12){
 8000ca4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000ca8:	2b0c      	cmp	r3, #12
 8000caa:	d123      	bne.n	8000cf4 <loadEffects+0x60c>
			LOAD_EFFECT(noiseSuppr)
 8000cac:	2308      	movs	r3, #8
 8000cae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000cb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000cb6:	4a28      	ldr	r2, [pc, #160]	; (8000d58 <loadEffects+0x670>)
 8000cb8:	1899      	adds	r1, r3, r2
 8000cba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cbe:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f00f f800 	bl	800fcc8 <memcpy>
			noiseSupprParams.counter = (int*) calloc(1, sizeof(int));
 8000cc8:	2104      	movs	r1, #4
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f00e ffc2 	bl	800fc54 <calloc>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
			checkForNull(noiseSupprParams.counter);
 8000cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fcf8 	bl	80006cc <checkForNull>
			SAVE_EFFECT(noiseSuppr)
 8000cdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ce0:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <loadEffects+0x670>)
 8000ce2:	4413      	add	r3, r2
 8000ce4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000ce8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000cec:	4618      	mov	r0, r3
 8000cee:	f00e ffeb 	bl	800fcc8 <memcpy>
 8000cf2:	e015      	b.n	8000d20 <loadEffects+0x638>

		}else if(effectId == 13){
 8000cf4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000cf8:	2b0d      	cmp	r3, #13
 8000cfa:	d10e      	bne.n	8000d1a <loadEffects+0x632>
			LOAD_EFFECT(fuzz)
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000d02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <loadEffects+0x670>)
 8000d08:	1899      	adds	r1, r3, r2
 8000d0a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d0e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000d12:	4618      	mov	r0, r3
 8000d14:	f00e ffd8 	bl	800fcc8 <memcpy>
 8000d18:	e002      	b.n	8000d20 <loadEffects+0x638>

		}else{
			crash(1);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff fcb4 	bl	8000688 <crash>
		}
		i += paramsLen;
 8000d20:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000d24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000d28:	4413      	add	r3, r2
 8000d2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		effectId = *(effectsData + i);
 8000d2e:	e4ed      	b.n	800070c <loadEffects+0x24>
				break;
 8000d30:	bf00      	nop
	}
}
 8000d32:	bf00      	nop
 8000d34:	37f0      	adds	r7, #240	; 0xf0
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	f3af 8000 	nop.w
 8000d40:	d8ab1d35 	.word	0xd8ab1d35
 8000d44:	3fef9ca2 	.word	0x3fef9ca2
 8000d48:	8a01579f 	.word	0x8a01579f
 8000d4c:	3feed5e8 	.word	0x3feed5e8
 8000d50:	3b579209 	.word	0x3b579209
 8000d54:	3fee0f2e 	.word	0x3fee0f2e
 8000d58:	240007d0 	.word	0x240007d0
 8000d5c:	40c90fdb 	.word	0x40c90fdb
 8000d60:	473a7f00 	.word	0x473a7f00

08000d64 <unloadEffects>:

void unloadEffects(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0bc      	sub	sp, #240	; 0xf0
 8000d68:	af00      	add	r7, sp, #0
	int i = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	int effectId;
	int paramsLen;
	int channel = 1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	while(1){
		effectId = *(effectsData + i);
 8000d76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d7a:	4aae      	ldr	r2, [pc, #696]	; (8001034 <unloadEffects+0x2d0>)
 8000d7c:	4413      	add	r3, r2
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		i++;
 8000d84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		if(effectId == 0xff){
 8000d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000d92:	2bff      	cmp	r3, #255	; 0xff
 8000d94:	d108      	bne.n	8000da8 <unloadEffects+0x44>
			if(channel == 1){
 8000d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	f040 8145 	bne.w	800102a <unloadEffects+0x2c6>
				channel = 2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				continue;
 8000da6:	e13f      	b.n	8001028 <unloadEffects+0x2c4>
			}else{
				break;
			}
		}

		if(effectId == 0){
 8000da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d103      	bne.n	8000db8 <unloadEffects+0x54>
			paramsLen = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000db6:	e130      	b.n	800101a <unloadEffects+0x2b6>

		}else if(effectId == 1){
 8000db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d10e      	bne.n	8000dde <unloadEffects+0x7a>
			LOAD_EFFECT(dist)
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000dc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000dca:	4a9a      	ldr	r2, [pc, #616]	; (8001034 <unloadEffects+0x2d0>)
 8000dcc:	1899      	adds	r1, r3, r2
 8000dce:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000dd2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f00e ff76 	bl	800fcc8 <memcpy>
 8000ddc:	e11d      	b.n	800101a <unloadEffects+0x2b6>

		}else if(effectId == 2){
 8000dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d10e      	bne.n	8000e04 <unloadEffects+0xa0>
			LOAD_EFFECT(softdist)
 8000de6:	2304      	movs	r3, #4
 8000de8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000dec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000df0:	4a90      	ldr	r2, [pc, #576]	; (8001034 <unloadEffects+0x2d0>)
 8000df2:	1899      	adds	r1, r3, r2
 8000df4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000df8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f00e ff63 	bl	800fcc8 <memcpy>
 8000e02:	e10a      	b.n	800101a <unloadEffects+0x2b6>

		}else if(effectId == 3){
 8000e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d113      	bne.n	8000e34 <unloadEffects+0xd0>
			LOAD_EFFECT(vibrato)
 8000e0c:	2310      	movs	r3, #16
 8000e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e16:	4a87      	ldr	r2, [pc, #540]	; (8001034 <unloadEffects+0x2d0>)
 8000e18:	1899      	adds	r1, r3, r2
 8000e1a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000e1e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e22:	4618      	mov	r0, r3
 8000e24:	f00e ff50 	bl	800fcc8 <memcpy>
			free(vibratoParams.previousInputsPtr);
 8000e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f00e ff43 	bl	800fcb8 <free>
 8000e32:	e0f2      	b.n	800101a <unloadEffects+0x2b6>

		}else if(effectId == 4){
 8000e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d113      	bne.n	8000e64 <unloadEffects+0x100>
			LOAD_EFFECT(chorus)
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e46:	4a7b      	ldr	r2, [pc, #492]	; (8001034 <unloadEffects+0x2d0>)
 8000e48:	1899      	adds	r1, r3, r2
 8000e4a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000e4e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e52:	4618      	mov	r0, r3
 8000e54:	f00e ff38 	bl	800fcc8 <memcpy>
			free(chorusParams.previousInputsPtr);
 8000e58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f00e ff2b 	bl	800fcb8 <free>
 8000e62:	e0da      	b.n	800101a <unloadEffects+0x2b6>

		}else if(effectId == 5){
 8000e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d113      	bne.n	8000e94 <unloadEffects+0x130>
			LOAD_EFFECT(echo)
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e76:	4a6f      	ldr	r2, [pc, #444]	; (8001034 <unloadEffects+0x2d0>)
 8000e78:	1899      	adds	r1, r3, r2
 8000e7a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000e7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e82:	4618      	mov	r0, r3
 8000e84:	f00e ff20 	bl	800fcc8 <memcpy>
			free(echoParams.previousOutputsPtr);
 8000e88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f00e ff13 	bl	800fcb8 <free>
 8000e92:	e0c2      	b.n	800101a <unloadEffects+0x2b6>

		}else if(effectId == 6){
 8000e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e98:	2b06      	cmp	r3, #6
 8000e9a:	d113      	bne.n	8000ec4 <unloadEffects+0x160>
			LOAD_EFFECT(lowpass)
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000ea2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ea6:	4a63      	ldr	r2, [pc, #396]	; (8001034 <unloadEffects+0x2d0>)
 8000ea8:	1899      	adds	r1, r3, r2
 8000eaa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000eae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00e ff08 	bl	800fcc8 <memcpy>
			free(lowpassParams.lastOutputPtr);
 8000eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f00e fefb 	bl	800fcb8 <free>
 8000ec2:	e0aa      	b.n	800101a <unloadEffects+0x2b6>

		}else if(effectId == 7){
 8000ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000ec8:	2b07      	cmp	r3, #7
 8000eca:	d113      	bne.n	8000ef4 <unloadEffects+0x190>
			LOAD_EFFECT(highpass)
 8000ecc:	2308      	movs	r3, #8
 8000ece:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000ed2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ed6:	4a57      	ldr	r2, [pc, #348]	; (8001034 <unloadEffects+0x2d0>)
 8000ed8:	1899      	adds	r1, r3, r2
 8000eda:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000ede:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f00e fef0 	bl	800fcc8 <memcpy>
			free(highpassParams.lastSamplesPtr);
 8000ee8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00e fee3 	bl	800fcb8 <free>
 8000ef2:	e092      	b.n	800101a <unloadEffects+0x2b6>

		}else if(effectId == 8){
 8000ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d10e      	bne.n	8000f1a <unloadEffects+0x1b6>
			LOAD_EFFECT(tremolo)
 8000efc:	2308      	movs	r3, #8
 8000efe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000f02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f06:	4a4b      	ldr	r2, [pc, #300]	; (8001034 <unloadEffects+0x2d0>)
 8000f08:	1899      	adds	r1, r3, r2
 8000f0a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000f0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00e fed8 	bl	800fcc8 <memcpy>
 8000f18:	e07f      	b.n	800101a <unloadEffects+0x2b6>

		}else if(effectId == 9){
 8000f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f1e:	2b09      	cmp	r3, #9
 8000f20:	d112      	bne.n	8000f48 <unloadEffects+0x1e4>
			LOAD_EFFECT(rotary)
 8000f22:	2314      	movs	r3, #20
 8000f24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000f28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f2c:	4a41      	ldr	r2, [pc, #260]	; (8001034 <unloadEffects+0x2d0>)
 8000f2e:	1899      	adds	r1, r3, r2
 8000f30:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000f34:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f00e fec5 	bl	800fcc8 <memcpy>
			free(rotaryParams.previousInputsPtr);
 8000f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f40:	4618      	mov	r0, r3
 8000f42:	f00e feb9 	bl	800fcb8 <free>
 8000f46:	e068      	b.n	800101a <unloadEffects+0x2b6>

		}else if(effectId == 10){
 8000f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f4c:	2b0a      	cmp	r3, #10
 8000f4e:	d124      	bne.n	8000f9a <unloadEffects+0x236>
			LOAD_EFFECT(reverb)
 8000f50:	2368      	movs	r3, #104	; 0x68
 8000f52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000f56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f5a:	4a36      	ldr	r2, [pc, #216]	; (8001034 <unloadEffects+0x2d0>)
 8000f5c:	1899      	adds	r1, r3, r2
 8000f5e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000f62:	463b      	mov	r3, r7
 8000f64:	4618      	mov	r0, r3
 8000f66:	f00e feaf 	bl	800fcc8 <memcpy>
			for(int i = 0; i < 6; i++){
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000f70:	e00e      	b.n	8000f90 <unloadEffects+0x22c>
				free(reverbParams.filtersParams[i].previousOutputsPtr);
 8000f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	33f0      	adds	r3, #240	; 0xf0
 8000f7a:	443b      	add	r3, r7
 8000f7c:	3bf0      	subs	r3, #240	; 0xf0
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f00e fe99 	bl	800fcb8 <free>
			for(int i = 0; i < 6; i++){
 8000f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f94:	2b05      	cmp	r3, #5
 8000f96:	ddec      	ble.n	8000f72 <unloadEffects+0x20e>
 8000f98:	e03f      	b.n	800101a <unloadEffects+0x2b6>
			}

		}else if(effectId == 11){
 8000f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f9e:	2b0b      	cmp	r3, #11
 8000fa0:	d10e      	bne.n	8000fc0 <unloadEffects+0x25c>
			LOAD_EFFECT(gain)
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000fa8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000fac:	4a21      	ldr	r2, [pc, #132]	; (8001034 <unloadEffects+0x2d0>)
 8000fae:	1899      	adds	r1, r3, r2
 8000fb0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000fb4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f00e fe85 	bl	800fcc8 <memcpy>
 8000fbe:	e02c      	b.n	800101a <unloadEffects+0x2b6>

		}else if(effectId == 12){
 8000fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fc4:	2b0c      	cmp	r3, #12
 8000fc6:	d112      	bne.n	8000fee <unloadEffects+0x28a>
			LOAD_EFFECT(noiseSuppr)
 8000fc8:	2308      	movs	r3, #8
 8000fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000fce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000fd2:	4a18      	ldr	r2, [pc, #96]	; (8001034 <unloadEffects+0x2d0>)
 8000fd4:	1899      	adds	r1, r3, r2
 8000fd6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000fda:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00e fe72 	bl	800fcc8 <memcpy>
			free(noiseSupprParams.counter);
 8000fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f00e fe66 	bl	800fcb8 <free>
 8000fec:	e015      	b.n	800101a <unloadEffects+0x2b6>

		}else if(effectId == 13){
 8000fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000ff2:	2b0d      	cmp	r3, #13
 8000ff4:	d10e      	bne.n	8001014 <unloadEffects+0x2b0>
			LOAD_EFFECT(fuzz)
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000ffc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <unloadEffects+0x2d0>)
 8001002:	1899      	adds	r1, r3, r2
 8001004:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001008:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800100c:	4618      	mov	r0, r3
 800100e:	f00e fe5b 	bl	800fcc8 <memcpy>
 8001012:	e002      	b.n	800101a <unloadEffects+0x2b6>

		}else{
			crash(1);
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff fb37 	bl	8000688 <crash>
		}
		i += paramsLen;
 800101a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800101e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001022:	4413      	add	r3, r2
 8001024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		effectId = *(effectsData + i);
 8001028:	e6a5      	b.n	8000d76 <unloadEffects+0x12>
				break;
 800102a:	bf00      	nop
	}
}
 800102c:	bf00      	nop
 800102e:	37f0      	adds	r7, #240	; 0xf0
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	240007d0 	.word	0x240007d0

08001038 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef * hi2s1){
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	  for(int i = 0; i < 32; i++){
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e00a      	b.n	800105c <HAL_I2S_RxHalfCpltCallback+0x24>
		  process[i] = inData[i];
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800104e:	490a      	ldr	r1, [pc, #40]	; (8001078 <HAL_I2S_RxHalfCpltCallback+0x40>)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i = 0; i < 32; i++){
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3301      	adds	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b1f      	cmp	r3, #31
 8001060:	ddf1      	ble.n	8001046 <HAL_I2S_RxHalfCpltCallback+0xe>
	  }
	inReady = 1;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_I2S_RxHalfCpltCallback+0x44>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	240004cc 	.word	0x240004cc
 8001078:	240006cc 	.word	0x240006cc
 800107c:	240007cc 	.word	0x240007cc

08001080 <HAL_I2S_TxHalfCpltCallback>:
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef * hi2s2){
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	  for(int i = 0; i < 32; i++){
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	e00a      	b.n	80010a4 <HAL_I2S_TxHalfCpltCallback+0x24>
		  outData[i] = output[i];
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <HAL_I2S_TxHalfCpltCallback+0x3c>)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001096:	490a      	ldr	r1, [pc, #40]	; (80010c0 <HAL_I2S_TxHalfCpltCallback+0x40>)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i = 0; i < 32; i++){
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b1f      	cmp	r3, #31
 80010a8:	ddf1      	ble.n	800108e <HAL_I2S_TxHalfCpltCallback+0xe>
	  }
	outReady = 1;
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_I2S_TxHalfCpltCallback+0x44>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	2400074c 	.word	0x2400074c
 80010c0:	240005cc 	.word	0x240005cc
 80010c4:	240007cd 	.word	0x240007cd

080010c8 <HAL_I2S_RxCpltCallback>:
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef * hi2s1){
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	  for(int i = 32; i < 64; i++){
 80010d0:	2320      	movs	r3, #32
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	e00b      	b.n	80010ee <HAL_I2S_RxCpltCallback+0x26>
		  process[i-32] = inData[i];
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3b20      	subs	r3, #32
 80010da:	490b      	ldr	r1, [pc, #44]	; (8001108 <HAL_I2S_RxCpltCallback+0x40>)
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010e2:	490a      	ldr	r1, [pc, #40]	; (800110c <HAL_I2S_RxCpltCallback+0x44>)
 80010e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i = 32; i < 64; i++){
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3301      	adds	r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2b3f      	cmp	r3, #63	; 0x3f
 80010f2:	ddf0      	ble.n	80010d6 <HAL_I2S_RxCpltCallback+0xe>
	  }
	inReady = 1;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_I2S_RxCpltCallback+0x48>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	240004cc 	.word	0x240004cc
 800110c:	240006cc 	.word	0x240006cc
 8001110:	240007cc 	.word	0x240007cc

08001114 <HAL_I2S_TxCpltCallback>:
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef * hi2s2){
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	  for(int i = 32; i < 64; i++){
 800111c:	2320      	movs	r3, #32
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	e00b      	b.n	800113a <HAL_I2S_TxCpltCallback+0x26>
		  outData[i] = output[i-32];
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3b20      	subs	r3, #32
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_I2S_TxCpltCallback+0x40>)
 8001128:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800112c:	490a      	ldr	r1, [pc, #40]	; (8001158 <HAL_I2S_TxCpltCallback+0x44>)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i = 32; i < 64; i++){
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3301      	adds	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2b3f      	cmp	r3, #63	; 0x3f
 800113e:	ddf0      	ble.n	8001122 <HAL_I2S_TxCpltCallback+0xe>
	  }
	outReady = 1;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_I2S_TxCpltCallback+0x48>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	2400074c 	.word	0x2400074c
 8001158:	240005cc 	.word	0x240005cc
 800115c:	240007cd 	.word	0x240007cd

08001160 <usbReceiveHandle>:

void usbReceiveHandle(){
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af04      	add	r7, sp, #16
	if(usbBytesReady >= 256){
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <usbReceiveHandle+0xb0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2bff      	cmp	r3, #255	; 0xff
 800116c:	d94b      	bls.n	8001206 <usbReceiveHandle+0xa6>
		if(usbBytesReady > 256){
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <usbReceiveHandle+0xb0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001176:	d902      	bls.n	800117e <usbReceiveHandle+0x1e>
			crash(2);
 8001178:	2002      	movs	r0, #2
 800117a:	f7ff fa85 	bl	8000688 <crash>
		}
		usbBytesReady = 0;
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <usbReceiveHandle+0xb0>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]

		if(usbDataBuffer[0] == 0xFE){
 8001184:	4b23      	ldr	r3, [pc, #140]	; (8001214 <usbReceiveHandle+0xb4>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2bfe      	cmp	r3, #254	; 0xfe
 800118a:	d113      	bne.n	80011b4 <usbReceiveHandle+0x54>
			for(int i = 0; i < usbBufferLen; i += 64){
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	e00c      	b.n	80011ac <usbReceiveHandle+0x4c>
				CDC_Transmit_HS(effectsRawData + i, 64);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a20      	ldr	r2, [pc, #128]	; (8001218 <usbReceiveHandle+0xb8>)
 8001196:	4413      	add	r3, r2
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	4618      	mov	r0, r3
 800119c:	f00e f906 	bl	800f3ac <CDC_Transmit_HS>
				HAL_Delay(5);
 80011a0:	2005      	movs	r0, #5
 80011a2:	f002 f80b 	bl	80031bc <HAL_Delay>
			for(int i = 0; i < usbBufferLen; i += 64){
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3340      	adds	r3, #64	; 0x40
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2bff      	cmp	r3, #255	; 0xff
 80011b0:	ddef      	ble.n	8001192 <usbReceiveHandle+0x32>
				HAL_Delay(5);
			}
			loadEffects();
		}
	}
}
 80011b2:	e028      	b.n	8001206 <usbReceiveHandle+0xa6>
			unloadEffects();
 80011b4:	f7ff fdd6 	bl	8000d64 <unloadEffects>
			memcpy(effectsRawData, usbDataBuffer, usbBufferLen);
 80011b8:	4a17      	ldr	r2, [pc, #92]	; (8001218 <usbReceiveHandle+0xb8>)
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <usbReceiveHandle+0xb4>)
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c4:	461a      	mov	r2, r3
 80011c6:	f00e fd7f 	bl	800fcc8 <memcpy>
			for(int i = 0; i < usbBufferLen; i += 32){
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	e015      	b.n	80011fc <usbReceiveHandle+0x9c>
				HAL_I2C_Mem_Write(&hi2c1, 0xA0, i, 2, effectsRawData + i, 32, HAL_MAX_DELAY);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	4910      	ldr	r1, [pc, #64]	; (8001218 <usbReceiveHandle+0xb8>)
 80011d8:	440b      	add	r3, r1
 80011da:	f04f 31ff 	mov.w	r1, #4294967295
 80011de:	9102      	str	r1, [sp, #8]
 80011e0:	2120      	movs	r1, #32
 80011e2:	9101      	str	r1, [sp, #4]
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2302      	movs	r3, #2
 80011e8:	21a0      	movs	r1, #160	; 0xa0
 80011ea:	480c      	ldr	r0, [pc, #48]	; (800121c <usbReceiveHandle+0xbc>)
 80011ec:	f004 fd36 	bl	8005c5c <HAL_I2C_Mem_Write>
				HAL_Delay(5);
 80011f0:	2005      	movs	r0, #5
 80011f2:	f001 ffe3 	bl	80031bc <HAL_Delay>
			for(int i = 0; i < usbBufferLen; i += 32){
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3320      	adds	r3, #32
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2bff      	cmp	r3, #255	; 0xff
 8001200:	dde6      	ble.n	80011d0 <usbReceiveHandle+0x70>
			loadEffects();
 8001202:	f7ff fa71 	bl	80006e8 <loadEffects>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	240009d0 	.word	0x240009d0
 8001214:	240008d0 	.word	0x240008d0
 8001218:	2400000c 	.word	0x2400000c
 800121c:	2400028c 	.word	0x2400028c

08001220 <loadSample>:

float loadSample(int i){
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	int32_t temp = process[i] << 8;
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <loadSample+0x48>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	60fb      	str	r3, [r7, #12]
	float d = (float) temp;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123e:	edc7 7a02 	vstr	s15, [r7, #8]
	d = d / 2147483392;
 8001242:	ed97 7a02 	vldr	s14, [r7, #8]
 8001246:	eddf 6a09 	vldr	s13, [pc, #36]	; 800126c <loadSample+0x4c>
 800124a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124e:	edc7 7a02 	vstr	s15, [r7, #8]
	return d;
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	ee07 3a90 	vmov	s15, r3
}
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	240006cc 	.word	0x240006cc
 800126c:	4efffffe 	.word	0x4efffffe

08001270 <saveSample>:

void saveSample(float d, int i){
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	ed87 0a01 	vstr	s0, [r7, #4]
 800127a:	6038      	str	r0, [r7, #0]
	d = d * 2147483392;
 800127c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001280:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80012b8 <saveSample+0x48>
 8001284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001288:	edc7 7a01 	vstr	s15, [r7, #4]
	int32_t temp = (int)d;
 800128c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001294:	ee17 3a90 	vmov	r3, s15
 8001298:	60fb      	str	r3, [r7, #12]
	temp = temp >> 8;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	121b      	asrs	r3, r3, #8
 800129e:	60fb      	str	r3, [r7, #12]
	output[i] = temp;
 80012a0:	4906      	ldr	r1, [pc, #24]	; (80012bc <saveSample+0x4c>)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	4efffffe 	.word	0x4efffffe
 80012bc:	2400074c 	.word	0x2400074c

080012c0 <dist>:

float dist(float d, struct distConfig params){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ca:	edc7 0a00 	vstr	s1, [r7]
	d = d * params.gain;
 80012ce:	edd7 7a00 	vldr	s15, [r7]
 80012d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80012d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012da:	edc7 7a01 	vstr	s15, [r7, #4]
	if(d > 1){
 80012de:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	dd03      	ble.n	80012f8 <dist+0x38>
		d = 1;
 80012f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	e00a      	b.n	800130e <dist+0x4e>
	}else if(d < -1){
 80012f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001308:	d501      	bpl.n	800130e <dist+0x4e>
		d = -1;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <dist+0x64>)
 800130c:	607b      	str	r3, [r7, #4]
	}
	return d;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	bf800000 	.word	0xbf800000

08001328 <softdist>:

float softdist(float d, struct softdistConfig params){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001332:	edc7 0a00 	vstr	s1, [r7]
	d = d * params.gain;
 8001336:	edd7 7a00 	vldr	s15, [r7]
 800133a:	ed97 7a01 	vldr	s14, [r7, #4]
 800133e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001342:	edc7 7a01 	vstr	s15, [r7, #4]
	return atanf(d);
 8001346:	ed97 0a01 	vldr	s0, [r7, #4]
 800134a:	f00e fed5 	bl	80100f8 <atanf>
 800134e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001352:	eeb0 0a67 	vmov.f32	s0, s15
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <getPreviousSample>:

float getPreviousSample(float prevSamps[], int prevSampsLen, int currInp, int offset){
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
	offset = -offset;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	425b      	negs	r3, r3
 800136e:	603b      	str	r3, [r7, #0]
	int index;
	if(offset <= currInp){
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	dc04      	bgt.n	8001382 <getPreviousSample+0x26>
		index = currInp - offset;
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e005      	b.n	800138e <getPreviousSample+0x32>
	}else{
		index = prevSampsLen + currInp - offset;
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	441a      	add	r2, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
	}

	return prevSamps[index];
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	ee07 3a90 	vmov	s15, r3
}
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	371c      	adds	r7, #28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <interpolate>:

float interpolate(float prevSamps[], int prevSampsLen, int currInp, float offset){
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b08e      	sub	sp, #56	; 0x38
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	ed87 0a00 	vstr	s0, [r7]
	int i = floor(offset);
 80013ba:	edd7 7a00 	vldr	s15, [r7]
 80013be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013c2:	eeb0 0b47 	vmov.f64	d0, d7
 80013c6:	f00e fe23 	bl	8010010 <floor>
 80013ca:	eeb0 7b40 	vmov.f64	d7, d0
 80013ce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80013d2:	ee17 3a90 	vmov	r3, s15
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
	float r0, r1, r2, r3;
	r0 = offset - 2 - i;
 80013d8:	edd7 7a00 	vldr	s15, [r7]
 80013dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	r1 = r0 + 1;
 80013f6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80013fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001402:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	r2 = r0 + 2;
 8001406:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800140a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800140e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001412:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	r3 = r0 + 3;
 8001416:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800141a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800141e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001422:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float i0, i1, i2, i3;

	i0 = getPreviousSample(prevSamps, prevSampsLen, currInp, i);
 8001426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	68b9      	ldr	r1, [r7, #8]
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f7ff ff95 	bl	800135c <getPreviousSample>
 8001432:	ed87 0a08 	vstr	s0, [r7, #32]
	i1 = getPreviousSample(prevSamps, prevSampsLen, currInp, i - 1);
 8001436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001438:	3b01      	subs	r3, #1
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff ff8c 	bl	800135c <getPreviousSample>
 8001444:	ed87 0a07 	vstr	s0, [r7, #28]
	i2 = getPreviousSample(prevSamps, prevSampsLen, currInp, i - 2);
 8001448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144a:	3b02      	subs	r3, #2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	68b9      	ldr	r1, [r7, #8]
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f7ff ff83 	bl	800135c <getPreviousSample>
 8001456:	ed87 0a06 	vstr	s0, [r7, #24]
	i3 = getPreviousSample(prevSamps, prevSampsLen, currInp, i - 3);
 800145a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145c:	3b03      	subs	r3, #3
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff ff7a 	bl	800135c <getPreviousSample>
 8001468:	ed87 0a05 	vstr	s0, [r7, #20]

	return  r1 * r2 * (r3 * i0 - r0 * i3) / 6 + r0 * r3 * (r1 * i2 - r2 * i1) / 2;
 800146c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001470:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001474:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001478:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800147c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001480:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001484:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8001488:	edd7 7a05 	vldr	s15, [r7, #20]
 800148c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001490:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001498:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800149c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014a0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80014a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014ac:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 80014b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80014b8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80014c4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80014c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014cc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80014d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80014d4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80014d8:	eeb0 0a67 	vmov.f32	s0, s15
 80014dc:	3738      	adds	r7, #56	; 0x38
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <vibrato>:

float vibrato(float d, struct vibratoConfig params){
 80014e4:	b5b0      	push	{r4, r5, r7, lr}
 80014e6:	ed2d 8b02 	vpush	{d8}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80014f2:	1d3c      	adds	r4, r7, #4
 80014f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int currInp = generalInputN % params.previousInputsLen;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <vibrato+0x8c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8001502:	fb01 f202 	mul.w	r2, r1, r2
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	61fb      	str	r3, [r7, #28]
	params.previousInputsPtr[currInp] = d;
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	601a      	str	r2, [r3, #0]
	return interpolate(params.previousInputsPtr, params.previousInputsLen, currInp, - params.strength * (sinf(params.frequency * generalInputN) + 1));
 8001516:	687c      	ldr	r4, [r7, #4]
 8001518:	68bd      	ldr	r5, [r7, #8]
 800151a:	edd7 7a04 	vldr	s15, [r7, #16]
 800151e:	eeb1 8a67 	vneg.f32	s16, s15
 8001522:	ed97 7a03 	vldr	s14, [r7, #12]
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <vibrato+0x8c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	f00e fee5 	bl	8010308 <sinf>
 800153e:	eef0 7a40 	vmov.f32	s15, s0
 8001542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001546:	ee77 7a87 	vadd.f32	s15, s15, s14
 800154a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	4629      	mov	r1, r5
 8001556:	4620      	mov	r0, r4
 8001558:	f7ff ff27 	bl	80013aa <interpolate>
 800155c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001560:	eeb0 0a67 	vmov.f32	s0, s15
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	ecbd 8b02 	vpop	{d8}
 800156c:	bdb0      	pop	{r4, r5, r7, pc}
 800156e:	bf00      	nop
 8001570:	240009d4 	.word	0x240009d4

08001574 <chorus>:

float chorus(float d, struct chorusConfig params){
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	ed2d 8b02 	vpush	{d8}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001582:	1d3c      	adds	r4, r7, #4
 8001584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int currInp = generalInputN % params.previousInputsLen;
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <chorus+0xc0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001592:	fb01 f202 	mul.w	r2, r1, r2
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
	params.previousInputsPtr[currInp] = d;
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]
	float vibr = interpolate(params.previousInputsPtr, params.previousInputsLen, currInp, - params.strength * (sinf(params.frequency * generalInputN) + 1));
 80015a6:	687c      	ldr	r4, [r7, #4]
 80015a8:	68bd      	ldr	r5, [r7, #8]
 80015aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80015ae:	eeb1 8a67 	vneg.f32	s16, s15
 80015b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <chorus+0xc0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ca:	f00e fe9d 	bl	8010308 <sinf>
 80015ce:	eef0 7a40 	vmov.f32	s15, s0
 80015d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015da:	ee68 7a27 	vmul.f32	s15, s16, s15
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e4:	4629      	mov	r1, r5
 80015e6:	4620      	mov	r0, r4
 80015e8:	f7ff fedf 	bl	80013aa <interpolate>
 80015ec:	ed87 0a08 	vstr	s0, [r7, #32]
	float clean = getPreviousSample(params.previousInputsPtr, params.previousInputsLen, currInp, - ((params.previousInputsLen - 3) / 3));
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3b03      	subs	r3, #3
 80015f8:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <chorus+0xc4>)
 80015fa:	fb82 4203 	smull	r4, r2, r2, r3
 80015fe:	17db      	asrs	r3, r3, #31
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001604:	f7ff feaa 	bl	800135c <getPreviousSample>
 8001608:	ed87 0a07 	vstr	s0, [r7, #28]
	return (vibr + clean) / 2;
 800160c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001610:	edd7 7a07 	vldr	s15, [r7, #28]
 8001614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001618:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800161c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001620:	eef0 7a66 	vmov.f32	s15, s13
}
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	3728      	adds	r7, #40	; 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	ecbd 8b02 	vpop	{d8}
 8001630:	bdb0      	pop	{r4, r5, r7, pc}
 8001632:	bf00      	nop
 8001634:	240009d4 	.word	0x240009d4
 8001638:	55555556 	.word	0x55555556

0800163c <echo>:

float echo(float d, struct echoConfig params){
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b08b      	sub	sp, #44	; 0x2c
 8001640:	af00      	add	r7, sp, #0
 8001642:	ed87 0a05 	vstr	s0, [r7, #20]
 8001646:	1d3c      	adds	r4, r7, #4
 8001648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int currSampN = generalInputN % params.previousOutputsLen;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <echo+0x6c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	fbb3 f1f2 	udiv	r1, r3, r2
 8001656:	fb01 f202 	mul.w	r2, r1, r2
 800165a:	1a9b      	subs	r3, r3, r2
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
	float prevSamp = getPreviousSample(params.previousOutputsPtr, params.previousOutputsLen, currSampN, -params.previousOutputsLen + 1);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	f1c3 0301 	rsb	r3, r3, #1
 8001668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166a:	f7ff fe77 	bl	800135c <getPreviousSample>
 800166e:	ed87 0a08 	vstr	s0, [r7, #32]
	float currSamp = d + params.attenuation * prevSamp;
 8001672:	ed97 7a04 	vldr	s14, [r7, #16]
 8001676:	edd7 7a08 	vldr	s15, [r7, #32]
 800167a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001686:	edc7 7a07 	vstr	s15, [r7, #28]
	params.previousOutputsPtr[currSampN] = currSamp;
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	601a      	str	r2, [r3, #0]
	return currSamp;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	ee07 3a90 	vmov	s15, r3
}
 800169c:	eeb0 0a67 	vmov.f32	s0, s15
 80016a0:	372c      	adds	r7, #44	; 0x2c
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}
 80016a6:	bf00      	nop
 80016a8:	240009d4 	.word	0x240009d4

080016ac <lowpass>:

float lowpass(float d, struct lowpassConfig params){
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	e883 0003 	stmia.w	r3, {r0, r1}
	d = *params.lastOutputPtr + params.filterConst * (d - (*params.lastOutputPtr));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	ed93 7a00 	vldr	s14, [r3]
 80016c2:	edd7 6a02 	vldr	s13, [r7, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80016d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016dc:	edc7 7a03 	vstr	s15, [r7, #12]
	*params.lastOutputPtr = d;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	601a      	str	r2, [r3, #0]
	return d;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	ee07 3a90 	vmov	s15, r3
}
 80016ec:	eeb0 0a67 	vmov.f32	s0, s15
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <highpass>:

float highpass(float d, struct highpassConfig params){
 80016fa:	b480      	push	{r7}
 80016fc:	b087      	sub	sp, #28
 80016fe:	af00      	add	r7, sp, #0
 8001700:	ed87 0a03 	vstr	s0, [r7, #12]
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	e883 0003 	stmia.w	r3, {r0, r1}
	float temp = params.filterConst * (params.lastSamplesPtr[0] + d - params.lastSamplesPtr[1]);
 800170a:	ed97 7a02 	vldr	s14, [r7, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	edd3 6a00 	vldr	s13, [r3]
 8001714:	edd7 7a03 	vldr	s15, [r7, #12]
 8001718:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3304      	adds	r3, #4
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	edc7 7a05 	vstr	s15, [r7, #20]
	params.lastSamplesPtr[1] = d;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3304      	adds	r3, #4
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	601a      	str	r2, [r3, #0]
	params.lastSamplesPtr[0] = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	601a      	str	r2, [r3, #0]
	return temp;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	ee07 3a90 	vmov	s15, r3
}
 8001744:	eeb0 0a67 	vmov.f32	s0, s15
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <tremolo>:

float tremolo(float d, struct tremoloConfig params){
 8001754:	b580      	push	{r7, lr}
 8001756:	ed2d 8b02 	vpush	{d8}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001762:	eeb0 7a60 	vmov.f32	s14, s1
 8001766:	eef0 7a41 	vmov.f32	s15, s2
 800176a:	ed87 7a01 	vstr	s14, [r7, #4]
 800176e:	edc7 7a02 	vstr	s15, [r7, #8]
	return d * (1 + params.strength * sinf(params.frequency * generalInputN)) / (1 + params.strength);
 8001772:	ed97 8a02 	vldr	s16, [r7, #8]
 8001776:	ed97 7a01 	vldr	s14, [r7, #4]
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <tremolo+0x78>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178a:	eeb0 0a67 	vmov.f32	s0, s15
 800178e:	f00e fdbb 	bl	8010308 <sinf>
 8001792:	eef0 7a40 	vmov.f32	s15, s0
 8001796:	ee68 7a27 	vmul.f32	s15, s16, s15
 800179a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800179e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80017a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80017be:	eeb0 0a67 	vmov.f32	s0, s15
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	ecbd 8b02 	vpop	{d8}
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	240009d4 	.word	0x240009d4

080017d0 <rotary>:

float rotary(float d, struct rotaryConfig params){
 80017d0:	b084      	sub	sp, #16
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	ed87 0a01 	vstr	s0, [r7, #4]
 80017dc:	f107 0c20 	add.w	ip, r7, #32
 80017e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int currInp = generalInputN % params.previousInputsLen;
 80017e4:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <rotary+0xc0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80017ee:	fb01 f202 	mul.w	r2, r1, r2
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	617b      	str	r3, [r7, #20]
	params.previousInputsPtr[currInp] = d;
 80017f6:	6a3a      	ldr	r2, [r7, #32]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	601a      	str	r2, [r3, #0]
	float effectSin = sinf(params.frequency * generalInputN);
 8001802:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <rotary+0xc0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001816:	eeb0 0a67 	vmov.f32	s0, s15
 800181a:	f00e fd75 	bl	8010308 <sinf>
 800181e:	ed87 0a04 	vstr	s0, [r7, #16]
	float vibr = interpolate(params.previousInputsPtr, params.previousInputsLen, currInp, - params.vibratoStrength * (effectSin + 1));
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001826:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800182a:	eeb1 7a67 	vneg.f32	s14, s15
 800182e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800183a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183e:	eeb0 0a67 	vmov.f32	s0, s15
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fdb0 	bl	80013aa <interpolate>
 800184a:	ed87 0a03 	vstr	s0, [r7, #12]
	return vibr * (1 + params.tremoloStrength * effectSin) / (1 + params.tremoloStrength);
 800184e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001852:	edd7 7a04 	vldr	s15, [r7, #16]
 8001856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800185e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001862:	edd7 7a03 	vldr	s15, [r7, #12]
 8001866:	ee27 7a27 	vmul.f32	s14, s14, s15
 800186a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800186e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001876:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800187a:	eef0 7a66 	vmov.f32	s15, s13
}
 800187e:	eeb0 0a67 	vmov.f32	s0, s15
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800188a:	b004      	add	sp, #16
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	240009d4 	.word	0x240009d4

08001894 <allPass>:

float allPass(float d, struct echoConfig params){
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b08b      	sub	sp, #44	; 0x2c
 8001898:	af00      	add	r7, sp, #0
 800189a:	ed87 0a05 	vstr	s0, [r7, #20]
 800189e:	1d3c      	adds	r4, r7, #4
 80018a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int currSampN = generalInputN % params.previousOutputsLen;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <allPass+0x90>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80018ae:	fb01 f202 	mul.w	r2, r1, r2
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
	float prevSamp = getPreviousSample(params.previousOutputsPtr, params.previousOutputsLen, currSampN, -params.previousOutputsLen + 1);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f1c3 0301 	rsb	r3, r3, #1
 80018c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c2:	f7ff fd4b 	bl	800135c <getPreviousSample>
 80018c6:	ed87 0a08 	vstr	s0, [r7, #32]
	float currSamp = d + params.attenuation * prevSamp;
 80018ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80018ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80018da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018de:	edc7 7a07 	vstr	s15, [r7, #28]
	params.previousOutputsPtr[currSampN] = currSamp;
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	601a      	str	r2, [r3, #0]
	return currSamp * (1 - params.attenuation * params.attenuation) - params.attenuation * d;
 80018ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80018f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001902:	edd7 7a07 	vldr	s15, [r7, #28]
 8001906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190a:	edd7 6a04 	vldr	s13, [r7, #16]
 800190e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001916:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800191a:	eeb0 0a67 	vmov.f32	s0, s15
 800191e:	372c      	adds	r7, #44	; 0x2c
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	240009d4 	.word	0x240009d4

08001928 <reverb>:

float reverb(float d, struct reverbConfig params){
 8001928:	b084      	sub	sp, #16
 800192a:	b580      	push	{r7, lr}
 800192c:	b088      	sub	sp, #32
 800192e:	af00      	add	r7, sp, #0
 8001930:	ed87 0a01 	vstr	s0, [r7, #4]
 8001934:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001938:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float comb1 = echo(d, params.filtersParams[0]);
 800193c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001942:	ed97 0a01 	vldr	s0, [r7, #4]
 8001946:	f7ff fe79 	bl	800163c <echo>
 800194a:	ed87 0a07 	vstr	s0, [r7, #28]
	float comb2 = echo(d, params.filtersParams[1]);
 800194e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001954:	ed97 0a01 	vldr	s0, [r7, #4]
 8001958:	f7ff fe70 	bl	800163c <echo>
 800195c:	ed87 0a06 	vstr	s0, [r7, #24]
	float comb3 = echo(d, params.filtersParams[2]);
 8001960:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001964:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001966:	ed97 0a01 	vldr	s0, [r7, #4]
 800196a:	f7ff fe67 	bl	800163c <echo>
 800196e:	ed87 0a05 	vstr	s0, [r7, #20]
	float comb4 = echo(d, params.filtersParams[3]);
 8001972:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001978:	ed97 0a01 	vldr	s0, [r7, #4]
 800197c:	f7ff fe5e 	bl	800163c <echo>
 8001980:	ed87 0a04 	vstr	s0, [r7, #16]
	float sum = comb1 + comb2 + comb3 + comb4;
 8001984:	ed97 7a07 	vldr	s14, [r7, #28]
 8001988:	edd7 7a06 	vldr	s15, [r7, #24]
 800198c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001990:	edd7 7a05 	vldr	s15, [r7, #20]
 8001994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001998:	ed97 7a04 	vldr	s14, [r7, #16]
 800199c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a0:	edc7 7a03 	vstr	s15, [r7, #12]

	return allPass(allPass(sum, params.filtersParams[4]), params.filtersParams[5]) * params.dry_wet + d * (1 - params.dry_wet);
 80019a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019aa:	ed97 0a03 	vldr	s0, [r7, #12]
 80019ae:	f7ff ff71 	bl	8001894 <allPass>
 80019b2:	eef0 7a40 	vmov.f32	s15, s0
 80019b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019bc:	eeb0 0a67 	vmov.f32	s0, s15
 80019c0:	f7ff ff68 	bl	8001894 <allPass>
 80019c4:	eeb0 7a40 	vmov.f32	s14, s0
 80019c8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80019cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80019d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80019e8:	eeb0 0a67 	vmov.f32	s0, s15
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019f4:	b004      	add	sp, #16
 80019f6:	4770      	bx	lr

080019f8 <gain>:

float gain(float d, struct gainConfig params){
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a02:	edc7 0a00 	vstr	s1, [r7]
	return d * params.gain;
 8001a06:	ed97 7a00 	vldr	s14, [r7]
 8001a0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001a12:	eeb0 0a67 	vmov.f32	s0, s15
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <noiseSuppr>:

float noiseSuppr(float d, struct noiseSupprConfig params){
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	e883 0003 	stmia.w	r3, {r0, r1}
	if(fabs(d) > params.threshold){
 8001a30:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a34:	eeb0 7ae7 	vabs.f32	s14, s15
 8001a38:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a44:	dd03      	ble.n	8001a4e <noiseSuppr+0x2e>
		*params.counter = 4000;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001a4c:	601a      	str	r2, [r3, #0]
	}
	if(*params.counter > 0){
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	dd06      	ble.n	8001a64 <noiseSuppr+0x44>
		*params.counter = *params.counter - 1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3a01      	subs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
		return d;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	e001      	b.n	8001a68 <noiseSuppr+0x48>
	}else{
		return 0;
 8001a64:	f04f 0300 	mov.w	r3, #0
	}
}
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <fuzz>:

float fuzz(float d, struct fuzzConfig params){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a86:	7038      	strb	r0, [r7, #0]
	if(d == 0){
 8001a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	d102      	bne.n	8001a9c <fuzz+0x20>
		return 0;
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e00a      	b.n	8001ab2 <fuzz+0x36>
	}
	if(d > 0){
 8001a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	dd02      	ble.n	8001ab0 <fuzz+0x34>
		return 1;
 8001aaa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001aae:	e000      	b.n	8001ab2 <fuzz+0x36>
	}else{
		return -1;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <fuzz+0x48>)
	}
}
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	bf800000 	.word	0xbf800000

08001ac8 <applyEffects>:

void applyEffects(float ch1, float ch2, int codecBufferInd){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0d6      	sub	sp, #344	; 0x158
 8001acc:	af16      	add	r7, sp, #88	; 0x58
 8001ace:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ad2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ad6:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	int effectId;
	int channel = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	float d = ch1;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	int paramsLen;

	while(1){
		effectId = *(effectsData + i);
 8001aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001aee:	4ad8      	ldr	r2, [pc, #864]	; (8001e50 <applyEffects+0x388>)
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		i++;
 8001af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001afc:	3301      	adds	r3, #1
 8001afe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		if(effectId == 0xff){
 8001b02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001b06:	2bff      	cmp	r3, #255	; 0xff
 8001b08:	d11c      	bne.n	8001b44 <applyEffects+0x7c>
			if(channel == 1){
 8001b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d109      	bne.n	8001b26 <applyEffects+0x5e>
				ch1 = d;
 8001b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b16:	60fb      	str	r3, [r7, #12]
				d = ch2;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				channel = 2;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
				continue;
 8001b24:	e1a0      	b.n	8001e68 <applyEffects+0x3a0>
			}else{
				ch2 = d;
 8001b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b2a:	60bb      	str	r3, [r7, #8]
				break;
 8001b2c:	bf00      	nop
			crash(1);
		}
		i += paramsLen;
	}

	if(ch1 > 1){
 8001b2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	f300 8194 	bgt.w	8001e6a <applyEffects+0x3a2>
 8001b42:	e196      	b.n	8001e72 <applyEffects+0x3aa>
		if(effectId == 0){
 8001b44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d107      	bne.n	8001b5c <applyEffects+0x94>
			paramsLen = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			d = 0;
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001b5a:	e17e      	b.n	8001e5a <applyEffects+0x392>
		}else if(effectId == 1){
 8001b5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d116      	bne.n	8001b92 <applyEffects+0xca>
			EXECUTE_EFFECT(dist)
 8001b64:	2304      	movs	r3, #4
 8001b66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b6e:	4ab8      	ldr	r2, [pc, #736]	; (8001e50 <applyEffects+0x388>)
 8001b70:	1899      	adds	r1, r3, r2
 8001b72:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001b76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f00e f8a4 	bl	800fcc8 <memcpy>
 8001b80:	edd7 0a3a 	vldr	s1, [r7, #232]	; 0xe8
 8001b84:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001b88:	f7ff fb9a 	bl	80012c0 <dist>
 8001b8c:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001b90:	e163      	b.n	8001e5a <applyEffects+0x392>
		}else if(effectId == 2){
 8001b92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d116      	bne.n	8001bc8 <applyEffects+0x100>
			EXECUTE_EFFECT(softdist)
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ba4:	4aaa      	ldr	r2, [pc, #680]	; (8001e50 <applyEffects+0x388>)
 8001ba6:	1899      	adds	r1, r3, r2
 8001ba8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001bac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f00e f889 	bl	800fcc8 <memcpy>
 8001bb6:	edd7 0a39 	vldr	s1, [r7, #228]	; 0xe4
 8001bba:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001bbe:	f7ff fbb3 	bl	8001328 <softdist>
 8001bc2:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001bc6:	e148      	b.n	8001e5a <applyEffects+0x392>
		}else if(effectId == 3){
 8001bc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d117      	bne.n	8001c00 <applyEffects+0x138>
			EXECUTE_EFFECT(vibrato)
 8001bd0:	2310      	movs	r3, #16
 8001bd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bda:	4a9d      	ldr	r2, [pc, #628]	; (8001e50 <applyEffects+0x388>)
 8001bdc:	1899      	adds	r1, r3, r2
 8001bde:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001be2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001be6:	4618      	mov	r0, r3
 8001be8:	f00e f86e 	bl	800fcc8 <memcpy>
 8001bec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bf2:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001bf6:	f7ff fc75 	bl	80014e4 <vibrato>
 8001bfa:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001bfe:	e12c      	b.n	8001e5a <applyEffects+0x392>
		}else if(effectId == 4){
 8001c00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d117      	bne.n	8001c38 <applyEffects+0x170>
			EXECUTE_EFFECT(chorus)
 8001c08:	2310      	movs	r3, #16
 8001c0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c12:	4a8f      	ldr	r2, [pc, #572]	; (8001e50 <applyEffects+0x388>)
 8001c14:	1899      	adds	r1, r3, r2
 8001c16:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001c1a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00e f852 	bl	800fcc8 <memcpy>
 8001c24:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c2a:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001c2e:	f7ff fca1 	bl	8001574 <chorus>
 8001c32:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001c36:	e110      	b.n	8001e5a <applyEffects+0x392>
		}else if(effectId == 5){
 8001c38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d117      	bne.n	8001c70 <applyEffects+0x1a8>
			EXECUTE_EFFECT(echo)
 8001c40:	2310      	movs	r3, #16
 8001c42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c4a:	4a81      	ldr	r2, [pc, #516]	; (8001e50 <applyEffects+0x388>)
 8001c4c:	1899      	adds	r1, r3, r2
 8001c4e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001c52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c56:	4618      	mov	r0, r3
 8001c58:	f00e f836 	bl	800fcc8 <memcpy>
 8001c5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c62:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001c66:	f7ff fce9 	bl	800163c <echo>
 8001c6a:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001c6e:	e0f4      	b.n	8001e5a <applyEffects+0x392>
		}else if(effectId == 6){
 8001c70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c74:	2b06      	cmp	r3, #6
 8001c76:	d118      	bne.n	8001caa <applyEffects+0x1e2>
			EXECUTE_EFFECT(lowpass)
 8001c78:	2308      	movs	r3, #8
 8001c7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c82:	4a73      	ldr	r2, [pc, #460]	; (8001e50 <applyEffects+0x388>)
 8001c84:	1899      	adds	r1, r3, r2
 8001c86:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001c8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f00e f81a 	bl	800fcc8 <memcpy>
 8001c94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c9c:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001ca0:	f7ff fd04 	bl	80016ac <lowpass>
 8001ca4:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001ca8:	e0d7      	b.n	8001e5a <applyEffects+0x392>
		}else if(effectId == 7){
 8001caa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001cae:	2b07      	cmp	r3, #7
 8001cb0:	d118      	bne.n	8001ce4 <applyEffects+0x21c>
			EXECUTE_EFFECT(highpass)
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cbc:	4a64      	ldr	r2, [pc, #400]	; (8001e50 <applyEffects+0x388>)
 8001cbe:	1899      	adds	r1, r3, r2
 8001cc0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001cc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f00d fffd 	bl	800fcc8 <memcpy>
 8001cce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001cd6:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001cda:	f7ff fd0e 	bl	80016fa <highpass>
 8001cde:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001ce2:	e0ba      	b.n	8001e5a <applyEffects+0x392>
		}else if(effectId == 8){
 8001ce4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d11c      	bne.n	8001d26 <applyEffects+0x25e>
			EXECUTE_EFFECT(tremolo)
 8001cec:	2308      	movs	r3, #8
 8001cee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cf6:	4a56      	ldr	r2, [pc, #344]	; (8001e50 <applyEffects+0x388>)
 8001cf8:	1899      	adds	r1, r3, r2
 8001cfa:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001cfe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d02:	4618      	mov	r0, r3
 8001d04:	f00d ffe0 	bl	800fcc8 <memcpy>
 8001d08:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8001d0c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001d10:	eef0 0a47 	vmov.f32	s1, s14
 8001d14:	eeb0 1a67 	vmov.f32	s2, s15
 8001d18:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001d1c:	f7ff fd1a 	bl	8001754 <tremolo>
 8001d20:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001d24:	e099      	b.n	8001e5a <applyEffects+0x392>
		}else if(effectId == 9){
 8001d26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d2a:	2b09      	cmp	r3, #9
 8001d2c:	d11a      	bne.n	8001d64 <applyEffects+0x29c>
			EXECUTE_EFFECT(rotary)
 8001d2e:	2314      	movs	r3, #20
 8001d30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d38:	4a45      	ldr	r2, [pc, #276]	; (8001e50 <applyEffects+0x388>)
 8001d3a:	1899      	adds	r1, r3, r2
 8001d3c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001d40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d44:	4618      	mov	r0, r3
 8001d46:	f00d ffbf 	bl	800fcc8 <memcpy>
 8001d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d56:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001d5a:	f7ff fd39 	bl	80017d0 <rotary>
 8001d5e:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001d62:	e07a      	b.n	8001e5a <applyEffects+0x392>
		}else if(effectId == 10){
 8001d64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d68:	2b0a      	cmp	r3, #10
 8001d6a:	d11e      	bne.n	8001daa <applyEffects+0x2e2>
			EXECUTE_EFFECT(reverb)
 8001d6c:	2368      	movs	r3, #104	; 0x68
 8001d6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d76:	4a36      	ldr	r2, [pc, #216]	; (8001e50 <applyEffects+0x388>)
 8001d78:	1899      	adds	r1, r3, r2
 8001d7a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	4618      	mov	r0, r3
 8001d84:	f00d ffa0 	bl	800fcc8 <memcpy>
 8001d88:	4668      	mov	r0, sp
 8001d8a:	f107 0320 	add.w	r3, r7, #32
 8001d8e:	2258      	movs	r2, #88	; 0x58
 8001d90:	4619      	mov	r1, r3
 8001d92:	f00d ff99 	bl	800fcc8 <memcpy>
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d9c:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001da0:	f7ff fdc2 	bl	8001928 <reverb>
 8001da4:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001da8:	e057      	b.n	8001e5a <applyEffects+0x392>
		}else if(effectId == 11){
 8001daa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001dae:	2b0b      	cmp	r3, #11
 8001db0:	d116      	bne.n	8001de0 <applyEffects+0x318>
			EXECUTE_EFFECT(gain)
 8001db2:	2304      	movs	r3, #4
 8001db4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dbc:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <applyEffects+0x388>)
 8001dbe:	1899      	adds	r1, r3, r2
 8001dc0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001dc4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00d ff7d 	bl	800fcc8 <memcpy>
 8001dce:	edd7 0a21 	vldr	s1, [r7, #132]	; 0x84
 8001dd2:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001dd6:	f7ff fe0f 	bl	80019f8 <gain>
 8001dda:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001dde:	e03c      	b.n	8001e5a <applyEffects+0x392>
		}else if(effectId == 12){
 8001de0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d118      	bne.n	8001e1a <applyEffects+0x352>
			EXECUTE_EFFECT(noiseSuppr)
 8001de8:	2308      	movs	r3, #8
 8001dea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001df2:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <applyEffects+0x388>)
 8001df4:	1899      	adds	r1, r3, r2
 8001df6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001dfa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f00d ff62 	bl	800fcc8 <memcpy>
 8001e04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e0c:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001e10:	f7ff fe06 	bl	8001a20 <noiseSuppr>
 8001e14:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001e18:	e01f      	b.n	8001e5a <applyEffects+0x392>
		}else if(effectId == 13){
 8001e1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e1e:	2b0d      	cmp	r3, #13
 8001e20:	d118      	bne.n	8001e54 <applyEffects+0x38c>
			EXECUTE_EFFECT(fuzz)
 8001e22:	2301      	movs	r3, #1
 8001e24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e2c:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <applyEffects+0x388>)
 8001e2e:	1899      	adds	r1, r3, r2
 8001e30:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001e34:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f00d ff45 	bl	800fcc8 <memcpy>
 8001e3e:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
 8001e42:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001e46:	f7ff fe19 	bl	8001a7c <fuzz>
 8001e4a:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
 8001e4e:	e004      	b.n	8001e5a <applyEffects+0x392>
 8001e50:	240007d0 	.word	0x240007d0
			crash(1);
 8001e54:	2001      	movs	r0, #1
 8001e56:	f7fe fc17 	bl	8000688 <crash>
		i += paramsLen;
 8001e5a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001e5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e62:	4413      	add	r3, r2
 8001e64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		effectId = *(effectsData + i);
 8001e68:	e63f      	b.n	8001aea <applyEffects+0x22>
		ch1 = 1;
 8001e6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e00a      	b.n	8001e88 <applyEffects+0x3c0>
	}else if(ch1 < -1){
 8001e72:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e76:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	d501      	bpl.n	8001e88 <applyEffects+0x3c0>
		ch1 = -1;
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <applyEffects+0x414>)
 8001e86:	60fb      	str	r3, [r7, #12]
	}
	if(ch2 > 1){
 8001e88:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e98:	dd03      	ble.n	8001ea2 <applyEffects+0x3da>
		ch2 = 1;
 8001e9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	e00a      	b.n	8001eb8 <applyEffects+0x3f0>
	}else if(ch2 < -1){
 8001ea2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ea6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb2:	d501      	bpl.n	8001eb8 <applyEffects+0x3f0>
		ch2 = -1;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <applyEffects+0x414>)
 8001eb6:	60bb      	str	r3, [r7, #8]
	}

	saveSample(ch1, codecBufferInd);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ebe:	f7ff f9d7 	bl	8001270 <saveSample>
	saveSample(ch2, codecBufferInd + 1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	ed97 0a02 	vldr	s0, [r7, #8]
 8001ecc:	f7ff f9d0 	bl	8001270 <saveSample>
}
 8001ed0:	bf00      	nop
 8001ed2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	bf800000 	.word	0xbf800000

08001ee0 <mainLoop>:

void mainLoop(){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
	usbReceiveHandle();
 8001ee6:	f7ff f93b 	bl	8001160 <usbReceiveHandle>
	//sound processing
	if(inReady && execute){ //executes when new data is fully loaded into half of the input buffer
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <mainLoop+0x70>)
 8001eec:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d028      	beq.n	8001f46 <mainLoop+0x66>
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <mainLoop+0x74>)
 8001ef6:	f993 3000 	ldrsb.w	r3, [r3]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d023      	beq.n	8001f46 <mainLoop+0x66>
		for(int i = 0; i<32; i += 2){
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	e01a      	b.n	8001f3a <mainLoop+0x5a>
			float ch1 = loadSample(i);
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7ff f98b 	bl	8001220 <loadSample>
 8001f0a:	ed87 0a02 	vstr	s0, [r7, #8]
			float ch2 = loadSample(i + 1);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3301      	adds	r3, #1
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f984 	bl	8001220 <loadSample>
 8001f18:	ed87 0a01 	vstr	s0, [r7, #4]

			applyEffects(ch1, ch2, i);
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001f22:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f26:	f7ff fdcf 	bl	8001ac8 <applyEffects>
			generalInputN++;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <mainLoop+0x78>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <mainLoop+0x78>)
 8001f32:	6013      	str	r3, [r2, #0]
		for(int i = 0; i<32; i += 2){
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3302      	adds	r3, #2
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b1f      	cmp	r3, #31
 8001f3e:	dde1      	ble.n	8001f04 <mainLoop+0x24>
		}
		inReady = 0;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <mainLoop+0x70>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
	}
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	240007cc 	.word	0x240007cc
 8001f54:	24000008 	.word	0x24000008
 8001f58:	240009d4 	.word	0x240009d4

08001f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f62:	f001 f899 	bl	8003098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f66:	f000 f863 	bl	8002030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f6a:	f000 f9e1 	bl	8002330 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f6e:	f000 f9b7 	bl	80022e0 <MX_DMA_Init>
  MX_I2S1_Init();
 8001f72:	f000 f94d 	bl	8002210 <MX_I2S1_Init>
  MX_I2S2_Init();
 8001f76:	f000 f97f 	bl	8002278 <MX_I2S2_Init>
  MX_I2C2_Init();
 8001f7a:	f000 f909 	bl	8002190 <MX_I2C2_Init>
  MX_I2C1_Init();
 8001f7e:	f000 f8c7 	bl	8002110 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001f82:	f00d f93d 	bl	800f200 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	MX_GPIO_Init();
 8001f86:	f000 f9d3 	bl	8002330 <MX_GPIO_Init>
	SSD1306_Init (); // initialize the display
 8001f8a:	f000 fa65 	bl	8002458 <SSD1306_Init>

	SSD1306_GotoXY (0,20); // goto 10, 10
 8001f8e:	2114      	movs	r1, #20
 8001f90:	2000      	movs	r0, #0
 8001f92:	f000 fbcb 	bl	800272c <SSD1306_GotoXY>
	SSD1306_Puts ("PLAYING :)", &Font_11x18, 1); //
 8001f96:	2201      	movs	r2, #1
 8001f98:	491c      	ldr	r1, [pc, #112]	; (800200c <main+0xb0>)
 8001f9a:	481d      	ldr	r0, [pc, #116]	; (8002010 <main+0xb4>)
 8001f9c:	f000 fc5c 	bl	8002858 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8001fa0:	f000 fb1e 	bl	80025e0 <SSD1306_UpdateScreen>
	MX_I2S1_Init();
 8001fa4:	f000 f934 	bl	8002210 <MX_I2S1_Init>
	MX_I2S2_Init();
 8001fa8:	f000 f966 	bl	8002278 <MX_I2S2_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 1);
 8001fac:	2201      	movs	r2, #1
 8001fae:	2104      	movs	r1, #4
 8001fb0:	4818      	ldr	r0, [pc, #96]	; (8002014 <main+0xb8>)
 8001fb2:	f003 fcb5 	bl	8005920 <HAL_GPIO_WritePin>

	HAL_I2S_Receive_DMA(&hi2s1, &inData, 64);
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	4917      	ldr	r1, [pc, #92]	; (8002018 <main+0xbc>)
 8001fba:	4818      	ldr	r0, [pc, #96]	; (800201c <main+0xc0>)
 8001fbc:	f004 fe98 	bl	8006cf0 <HAL_I2S_Receive_DMA>
	HAL_I2S_Transmit_DMA(&hi2s2, &outData, 64);
 8001fc0:	2240      	movs	r2, #64	; 0x40
 8001fc2:	4917      	ldr	r1, [pc, #92]	; (8002020 <main+0xc4>)
 8001fc4:	4817      	ldr	r0, [pc, #92]	; (8002024 <main+0xc8>)
 8001fc6:	f004 fdf1 	bl	8006bac <HAL_I2S_Transmit_DMA>

	for(int i = 0; i < usbBufferLen; i += 32){
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	e015      	b.n	8001ffc <main+0xa0>
		HAL_I2C_Mem_Read(&hi2c1, 0xA1, i, 2, effectsRawData + i, 32, HAL_MAX_DELAY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4914      	ldr	r1, [pc, #80]	; (8002028 <main+0xcc>)
 8001fd8:	440b      	add	r3, r1
 8001fda:	f04f 31ff 	mov.w	r1, #4294967295
 8001fde:	9102      	str	r1, [sp, #8]
 8001fe0:	2120      	movs	r1, #32
 8001fe2:	9101      	str	r1, [sp, #4]
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	21a1      	movs	r1, #161	; 0xa1
 8001fea:	4810      	ldr	r0, [pc, #64]	; (800202c <main+0xd0>)
 8001fec:	f003 ff4a 	bl	8005e84 <HAL_I2C_Mem_Read>
		HAL_Delay(5);
 8001ff0:	2005      	movs	r0, #5
 8001ff2:	f001 f8e3 	bl	80031bc <HAL_Delay>
	for(int i = 0; i < usbBufferLen; i += 32){
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3320      	adds	r3, #32
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2bff      	cmp	r3, #255	; 0xff
 8002000:	dde6      	ble.n	8001fd0 <main+0x74>
	}

	loadEffects();
 8002002:	f7fe fb71 	bl	80006e8 <loadEffects>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		mainLoop();
 8002006:	f7ff ff6b 	bl	8001ee0 <mainLoop>
 800200a:	e7fc      	b.n	8002006 <main+0xaa>
 800200c:	24000000 	.word	0x24000000
 8002010:	08010488 	.word	0x08010488
 8002014:	58021000 	.word	0x58021000
 8002018:	240004cc 	.word	0x240004cc
 800201c:	24000334 	.word	0x24000334
 8002020:	240005cc 	.word	0x240005cc
 8002024:	24000388 	.word	0x24000388
 8002028:	2400000c 	.word	0x2400000c
 800202c:	2400028c 	.word	0x2400028c

08002030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b09c      	sub	sp, #112	; 0x70
 8002034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203a:	224c      	movs	r2, #76	; 0x4c
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f00d fe50 	bl	800fce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2220      	movs	r2, #32
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f00d fe4a 	bl	800fce4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002050:	2002      	movs	r0, #2
 8002052:	f006 fa37 	bl	80084c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002056:	2300      	movs	r3, #0
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	4b2c      	ldr	r3, [pc, #176]	; (800210c <SystemClock_Config+0xdc>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	4a2b      	ldr	r2, [pc, #172]	; (800210c <SystemClock_Config+0xdc>)
 8002060:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002064:	6193      	str	r3, [r2, #24]
 8002066:	4b29      	ldr	r3, [pc, #164]	; (800210c <SystemClock_Config+0xdc>)
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002072:	bf00      	nop
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <SystemClock_Config+0xdc>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800207c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002080:	d1f8      	bne.n	8002074 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002082:	2321      	movs	r3, #33	; 0x21
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800208c:	2301      	movs	r3, #1
 800208e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002090:	2302      	movs	r3, #2
 8002092:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002094:	2302      	movs	r3, #2
 8002096:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002098:	2304      	movs	r3, #4
 800209a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800209c:	232c      	movs	r3, #44	; 0x2c
 800209e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80020a0:	2301      	movs	r3, #1
 80020a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80020a4:	2303      	movs	r3, #3
 80020a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020a8:	2302      	movs	r3, #2
 80020aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80020ac:	230c      	movs	r3, #12
 80020ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020bc:	4618      	mov	r0, r3
 80020be:	f006 fa4b 	bl	8008558 <HAL_RCC_OscConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80020c8:	f000 f9c0 	bl	800244c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020cc:	233f      	movs	r3, #63	; 0x3f
 80020ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020d0:	2303      	movs	r3, #3
 80020d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80020d8:	2308      	movs	r3, #8
 80020da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80020dc:	2340      	movs	r3, #64	; 0x40
 80020de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80020e0:	2340      	movs	r3, #64	; 0x40
 80020e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80020e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80020ea:	2340      	movs	r3, #64	; 0x40
 80020ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2103      	movs	r1, #3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f006 fe0a 	bl	8008d0c <HAL_RCC_ClockConfig>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80020fe:	f000 f9a5 	bl	800244c <Error_Handler>
  }
}
 8002102:	bf00      	nop
 8002104:	3770      	adds	r7, #112	; 0x70
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	58024800 	.word	0x58024800

08002110 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <MX_I2C1_Init+0x74>)
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <MX_I2C1_Init+0x78>)
 8002118:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <MX_I2C1_Init+0x74>)
 800211c:	4a1b      	ldr	r2, [pc, #108]	; (800218c <MX_I2C1_Init+0x7c>)
 800211e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_I2C1_Init+0x74>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <MX_I2C1_Init+0x74>)
 8002128:	2201      	movs	r2, #1
 800212a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <MX_I2C1_Init+0x74>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <MX_I2C1_Init+0x74>)
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <MX_I2C1_Init+0x74>)
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MX_I2C1_Init+0x74>)
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <MX_I2C1_Init+0x74>)
 8002146:	2200      	movs	r2, #0
 8002148:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800214a:	480e      	ldr	r0, [pc, #56]	; (8002184 <MX_I2C1_Init+0x74>)
 800214c:	f003 fc02 	bl	8005954 <HAL_I2C_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002156:	f000 f979 	bl	800244c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800215a:	2100      	movs	r1, #0
 800215c:	4809      	ldr	r0, [pc, #36]	; (8002184 <MX_I2C1_Init+0x74>)
 800215e:	f004 fb6b 	bl	8006838 <HAL_I2CEx_ConfigAnalogFilter>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002168:	f000 f970 	bl	800244c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800216c:	2100      	movs	r1, #0
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_I2C1_Init+0x74>)
 8002170:	f004 fbad 	bl	80068ce <HAL_I2CEx_ConfigDigitalFilter>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800217a:	f000 f967 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2400028c 	.word	0x2400028c
 8002188:	40005400 	.word	0x40005400
 800218c:	60404e72 	.word	0x60404e72

08002190 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <MX_I2C2_Init+0x74>)
 8002196:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <MX_I2C2_Init+0x78>)
 8002198:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00D049FB;
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <MX_I2C2_Init+0x74>)
 800219c:	4a1b      	ldr	r2, [pc, #108]	; (800220c <MX_I2C2_Init+0x7c>)
 800219e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <MX_I2C2_Init+0x74>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021a6:	4b17      	ldr	r3, [pc, #92]	; (8002204 <MX_I2C2_Init+0x74>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <MX_I2C2_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <MX_I2C2_Init+0x74>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <MX_I2C2_Init+0x74>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <MX_I2C2_Init+0x74>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <MX_I2C2_Init+0x74>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021ca:	480e      	ldr	r0, [pc, #56]	; (8002204 <MX_I2C2_Init+0x74>)
 80021cc:	f003 fbc2 	bl	8005954 <HAL_I2C_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80021d6:	f000 f939 	bl	800244c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021da:	2100      	movs	r1, #0
 80021dc:	4809      	ldr	r0, [pc, #36]	; (8002204 <MX_I2C2_Init+0x74>)
 80021de:	f004 fb2b 	bl	8006838 <HAL_I2CEx_ConfigAnalogFilter>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80021e8:	f000 f930 	bl	800244c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80021ec:	2100      	movs	r1, #0
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_I2C2_Init+0x74>)
 80021f0:	f004 fb6d 	bl	80068ce <HAL_I2CEx_ConfigDigitalFilter>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80021fa:	f000 f927 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	240002e0 	.word	0x240002e0
 8002208:	40005800 	.word	0x40005800
 800220c:	00d049fb 	.word	0x00d049fb

08002210 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8002214:	4b16      	ldr	r3, [pc, #88]	; (8002270 <MX_I2S1_Init+0x60>)
 8002216:	4a17      	ldr	r2, [pc, #92]	; (8002274 <MX_I2S1_Init+0x64>)
 8002218:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <MX_I2S1_Init+0x60>)
 800221c:	2206      	movs	r2, #6
 800221e:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <MX_I2S1_Init+0x60>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <MX_I2S1_Init+0x60>)
 8002228:	f44f 7280 	mov.w	r2, #256	; 0x100
 800222c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <MX_I2S1_Init+0x60>)
 8002230:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002234:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <MX_I2S1_Init+0x60>)
 8002238:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800223c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <MX_I2S1_Init+0x60>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <MX_I2S1_Init+0x60>)
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <MX_I2S1_Init+0x60>)
 800224c:	2200      	movs	r2, #0
 800224e:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <MX_I2S1_Init+0x60>)
 8002252:	2200      	movs	r2, #0
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <MX_I2S1_Init+0x60>)
 8002258:	2200      	movs	r2, #0
 800225a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800225c:	4804      	ldr	r0, [pc, #16]	; (8002270 <MX_I2S1_Init+0x60>)
 800225e:	f004 fb83 	bl	8006968 <HAL_I2S_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8002268:	f000 f8f0 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	24000334 	.word	0x24000334
 8002274:	40013000 	.word	0x40013000

08002278 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800227c:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <MX_I2S2_Init+0x60>)
 800227e:	4a17      	ldr	r2, [pc, #92]	; (80022dc <MX_I2S2_Init+0x64>)
 8002280:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <MX_I2S2_Init+0x60>)
 8002284:	2204      	movs	r2, #4
 8002286:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <MX_I2S2_Init+0x60>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <MX_I2S2_Init+0x60>)
 8002290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002294:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <MX_I2S2_Init+0x60>)
 8002298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800229c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <MX_I2S2_Init+0x60>)
 80022a0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80022a4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_I2S2_Init+0x60>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <MX_I2S2_Init+0x60>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_I2S2_Init+0x60>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <MX_I2S2_Init+0x60>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_I2S2_Init+0x60>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80022c4:	4804      	ldr	r0, [pc, #16]	; (80022d8 <MX_I2S2_Init+0x60>)
 80022c6:	f004 fb4f 	bl	8006968 <HAL_I2S_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_I2S2_Init+0x5c>
  {
    Error_Handler();
 80022d0:	f000 f8bc 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	24000388 	.word	0x24000388
 80022dc:	40003800 	.word	0x40003800

080022e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <MX_DMA_Init+0x4c>)
 80022e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022ec:	4a0f      	ldr	r2, [pc, #60]	; (800232c <MX_DMA_Init+0x4c>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <MX_DMA_Init+0x4c>)
 80022f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	200b      	movs	r0, #11
 800230a:	f001 f856 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800230e:	200b      	movs	r0, #11
 8002310:	f001 f86d 	bl	80033ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002314:	2200      	movs	r2, #0
 8002316:	2100      	movs	r1, #0
 8002318:	200c      	movs	r0, #12
 800231a:	f001 f84e 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800231e:	200c      	movs	r0, #12
 8002320:	f001 f865 	bl	80033ee <HAL_NVIC_EnableIRQ>

}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	58024400 	.word	0x58024400

08002330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08c      	sub	sp, #48	; 0x30
 8002334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002346:	4b3e      	ldr	r3, [pc, #248]	; (8002440 <MX_GPIO_Init+0x110>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234c:	4a3c      	ldr	r2, [pc, #240]	; (8002440 <MX_GPIO_Init+0x110>)
 800234e:	f043 0310 	orr.w	r3, r3, #16
 8002352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002356:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <MX_GPIO_Init+0x110>)
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002364:	4b36      	ldr	r3, [pc, #216]	; (8002440 <MX_GPIO_Init+0x110>)
 8002366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800236a:	4a35      	ldr	r2, [pc, #212]	; (8002440 <MX_GPIO_Init+0x110>)
 800236c:	f043 0320 	orr.w	r3, r3, #32
 8002370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002374:	4b32      	ldr	r3, [pc, #200]	; (8002440 <MX_GPIO_Init+0x110>)
 8002376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002382:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <MX_GPIO_Init+0x110>)
 8002384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002388:	4a2d      	ldr	r2, [pc, #180]	; (8002440 <MX_GPIO_Init+0x110>)
 800238a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002392:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <MX_GPIO_Init+0x110>)
 8002394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a0:	4b27      	ldr	r3, [pc, #156]	; (8002440 <MX_GPIO_Init+0x110>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a6:	4a26      	ldr	r2, [pc, #152]	; (8002440 <MX_GPIO_Init+0x110>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <MX_GPIO_Init+0x110>)
 80023b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	4b20      	ldr	r3, [pc, #128]	; (8002440 <MX_GPIO_Init+0x110>)
 80023c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c4:	4a1e      	ldr	r2, [pc, #120]	; (8002440 <MX_GPIO_Init+0x110>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <MX_GPIO_Init+0x110>)
 80023d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023dc:	4b18      	ldr	r3, [pc, #96]	; (8002440 <MX_GPIO_Init+0x110>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	4a17      	ldr	r2, [pc, #92]	; (8002440 <MX_GPIO_Init+0x110>)
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <MX_GPIO_Init+0x110>)
 80023ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	211c      	movs	r1, #28
 80023fe:	4811      	ldr	r0, [pc, #68]	; (8002444 <MX_GPIO_Init+0x114>)
 8002400:	f003 fa8e 	bl	8005920 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin PE3 PE4 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8002404:	231c      	movs	r3, #28
 8002406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002408:	2301      	movs	r3, #1
 800240a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	4619      	mov	r1, r3
 800241a:	480a      	ldr	r0, [pc, #40]	; (8002444 <MX_GPIO_Init+0x114>)
 800241c:	f003 f8d8 	bl	80055d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF3 PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002420:	231c      	movs	r3, #28
 8002422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002428:	2301      	movs	r3, #1
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800242c:	f107 031c 	add.w	r3, r7, #28
 8002430:	4619      	mov	r1, r3
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <MX_GPIO_Init+0x118>)
 8002434:	f003 f8cc 	bl	80055d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002438:	bf00      	nop
 800243a:	3730      	adds	r7, #48	; 0x30
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	58024400 	.word	0x58024400
 8002444:	58021000 	.word	0x58021000
 8002448:	58021400 	.word	0x58021400

0800244c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002450:	b672      	cpsid	i
}
 8002452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002454:	e7fe      	b.n	8002454 <Error_Handler+0x8>
	...

08002458 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800245e:	f000 fa21 	bl	80028a4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002462:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002466:	2201      	movs	r2, #1
 8002468:	2178      	movs	r1, #120	; 0x78
 800246a:	485b      	ldr	r0, [pc, #364]	; (80025d8 <SSD1306_Init+0x180>)
 800246c:	f003 fe24 	bl	80060b8 <HAL_I2C_IsDeviceReady>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002476:	2300      	movs	r3, #0
 8002478:	e0a9      	b.n	80025ce <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800247a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800247e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002480:	e002      	b.n	8002488 <SSD1306_Init+0x30>
		p--;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3b01      	subs	r3, #1
 8002486:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f9      	bne.n	8002482 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800248e:	22ae      	movs	r2, #174	; 0xae
 8002490:	2100      	movs	r1, #0
 8002492:	2078      	movs	r0, #120	; 0x78
 8002494:	f000 fa82 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002498:	2220      	movs	r2, #32
 800249a:	2100      	movs	r1, #0
 800249c:	2078      	movs	r0, #120	; 0x78
 800249e:	f000 fa7d 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80024a2:	2210      	movs	r2, #16
 80024a4:	2100      	movs	r1, #0
 80024a6:	2078      	movs	r0, #120	; 0x78
 80024a8:	f000 fa78 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80024ac:	22b0      	movs	r2, #176	; 0xb0
 80024ae:	2100      	movs	r1, #0
 80024b0:	2078      	movs	r0, #120	; 0x78
 80024b2:	f000 fa73 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80024b6:	22c8      	movs	r2, #200	; 0xc8
 80024b8:	2100      	movs	r1, #0
 80024ba:	2078      	movs	r0, #120	; 0x78
 80024bc:	f000 fa6e 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	2078      	movs	r0, #120	; 0x78
 80024c6:	f000 fa69 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80024ca:	2210      	movs	r2, #16
 80024cc:	2100      	movs	r1, #0
 80024ce:	2078      	movs	r0, #120	; 0x78
 80024d0:	f000 fa64 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80024d4:	2240      	movs	r2, #64	; 0x40
 80024d6:	2100      	movs	r1, #0
 80024d8:	2078      	movs	r0, #120	; 0x78
 80024da:	f000 fa5f 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80024de:	2281      	movs	r2, #129	; 0x81
 80024e0:	2100      	movs	r1, #0
 80024e2:	2078      	movs	r0, #120	; 0x78
 80024e4:	f000 fa5a 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80024e8:	22ff      	movs	r2, #255	; 0xff
 80024ea:	2100      	movs	r1, #0
 80024ec:	2078      	movs	r0, #120	; 0x78
 80024ee:	f000 fa55 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80024f2:	22a1      	movs	r2, #161	; 0xa1
 80024f4:	2100      	movs	r1, #0
 80024f6:	2078      	movs	r0, #120	; 0x78
 80024f8:	f000 fa50 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80024fc:	22a6      	movs	r2, #166	; 0xa6
 80024fe:	2100      	movs	r1, #0
 8002500:	2078      	movs	r0, #120	; 0x78
 8002502:	f000 fa4b 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002506:	22a8      	movs	r2, #168	; 0xa8
 8002508:	2100      	movs	r1, #0
 800250a:	2078      	movs	r0, #120	; 0x78
 800250c:	f000 fa46 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002510:	223f      	movs	r2, #63	; 0x3f
 8002512:	2100      	movs	r1, #0
 8002514:	2078      	movs	r0, #120	; 0x78
 8002516:	f000 fa41 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800251a:	22a4      	movs	r2, #164	; 0xa4
 800251c:	2100      	movs	r1, #0
 800251e:	2078      	movs	r0, #120	; 0x78
 8002520:	f000 fa3c 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002524:	22d3      	movs	r2, #211	; 0xd3
 8002526:	2100      	movs	r1, #0
 8002528:	2078      	movs	r0, #120	; 0x78
 800252a:	f000 fa37 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800252e:	2200      	movs	r2, #0
 8002530:	2100      	movs	r1, #0
 8002532:	2078      	movs	r0, #120	; 0x78
 8002534:	f000 fa32 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002538:	22d5      	movs	r2, #213	; 0xd5
 800253a:	2100      	movs	r1, #0
 800253c:	2078      	movs	r0, #120	; 0x78
 800253e:	f000 fa2d 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002542:	22f0      	movs	r2, #240	; 0xf0
 8002544:	2100      	movs	r1, #0
 8002546:	2078      	movs	r0, #120	; 0x78
 8002548:	f000 fa28 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800254c:	22d9      	movs	r2, #217	; 0xd9
 800254e:	2100      	movs	r1, #0
 8002550:	2078      	movs	r0, #120	; 0x78
 8002552:	f000 fa23 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002556:	2222      	movs	r2, #34	; 0x22
 8002558:	2100      	movs	r1, #0
 800255a:	2078      	movs	r0, #120	; 0x78
 800255c:	f000 fa1e 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002560:	22da      	movs	r2, #218	; 0xda
 8002562:	2100      	movs	r1, #0
 8002564:	2078      	movs	r0, #120	; 0x78
 8002566:	f000 fa19 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800256a:	2212      	movs	r2, #18
 800256c:	2100      	movs	r1, #0
 800256e:	2078      	movs	r0, #120	; 0x78
 8002570:	f000 fa14 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002574:	22db      	movs	r2, #219	; 0xdb
 8002576:	2100      	movs	r1, #0
 8002578:	2078      	movs	r0, #120	; 0x78
 800257a:	f000 fa0f 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800257e:	2220      	movs	r2, #32
 8002580:	2100      	movs	r1, #0
 8002582:	2078      	movs	r0, #120	; 0x78
 8002584:	f000 fa0a 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002588:	228d      	movs	r2, #141	; 0x8d
 800258a:	2100      	movs	r1, #0
 800258c:	2078      	movs	r0, #120	; 0x78
 800258e:	f000 fa05 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002592:	2214      	movs	r2, #20
 8002594:	2100      	movs	r1, #0
 8002596:	2078      	movs	r0, #120	; 0x78
 8002598:	f000 fa00 	bl	800299c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800259c:	22af      	movs	r2, #175	; 0xaf
 800259e:	2100      	movs	r1, #0
 80025a0:	2078      	movs	r0, #120	; 0x78
 80025a2:	f000 f9fb 	bl	800299c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80025a6:	222e      	movs	r2, #46	; 0x2e
 80025a8:	2100      	movs	r1, #0
 80025aa:	2078      	movs	r0, #120	; 0x78
 80025ac:	f000 f9f6 	bl	800299c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f000 f843 	bl	800263c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80025b6:	f000 f813 	bl	80025e0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <SSD1306_Init+0x184>)
 80025bc:	2200      	movs	r2, #0
 80025be:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <SSD1306_Init+0x184>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <SSD1306_Init+0x184>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80025cc:	2301      	movs	r3, #1
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	240002e0 	.word	0x240002e0
 80025dc:	24000dd8 	.word	0x24000dd8

080025e0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80025e6:	2300      	movs	r3, #0
 80025e8:	71fb      	strb	r3, [r7, #7]
 80025ea:	e01d      	b.n	8002628 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	3b50      	subs	r3, #80	; 0x50
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	2100      	movs	r1, #0
 80025f6:	2078      	movs	r0, #120	; 0x78
 80025f8:	f000 f9d0 	bl	800299c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2100      	movs	r1, #0
 8002600:	2078      	movs	r0, #120	; 0x78
 8002602:	f000 f9cb 	bl	800299c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002606:	2210      	movs	r2, #16
 8002608:	2100      	movs	r1, #0
 800260a:	2078      	movs	r0, #120	; 0x78
 800260c:	f000 f9c6 	bl	800299c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	01db      	lsls	r3, r3, #7
 8002614:	4a08      	ldr	r2, [pc, #32]	; (8002638 <SSD1306_UpdateScreen+0x58>)
 8002616:	441a      	add	r2, r3
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	2140      	movs	r1, #64	; 0x40
 800261c:	2078      	movs	r0, #120	; 0x78
 800261e:	f000 f957 	bl	80028d0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	3301      	adds	r3, #1
 8002626:	71fb      	strb	r3, [r7, #7]
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	2b07      	cmp	r3, #7
 800262c:	d9de      	bls.n	80025ec <SSD1306_UpdateScreen+0xc>
	}
}
 800262e:	bf00      	nop
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	240009d8 	.word	0x240009d8

0800263c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <SSD1306_Fill+0x14>
 800264c:	2300      	movs	r3, #0
 800264e:	e000      	b.n	8002652 <SSD1306_Fill+0x16>
 8002650:	23ff      	movs	r3, #255	; 0xff
 8002652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002656:	4619      	mov	r1, r3
 8002658:	4803      	ldr	r0, [pc, #12]	; (8002668 <SSD1306_Fill+0x2c>)
 800265a:	f00d fb43 	bl	800fce4 <memset>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	240009d8 	.word	0x240009d8

0800266c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	80fb      	strh	r3, [r7, #6]
 8002676:	460b      	mov	r3, r1
 8002678:	80bb      	strh	r3, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	70fb      	strb	r3, [r7, #3]
	if (
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	2b7f      	cmp	r3, #127	; 0x7f
 8002682:	d848      	bhi.n	8002716 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002684:	88bb      	ldrh	r3, [r7, #4]
 8002686:	2b3f      	cmp	r3, #63	; 0x3f
 8002688:	d845      	bhi.n	8002716 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800268a:	4b26      	ldr	r3, [pc, #152]	; (8002724 <SSD1306_DrawPixel+0xb8>)
 800268c:	791b      	ldrb	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d11a      	bne.n	80026dc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80026a6:	88fa      	ldrh	r2, [r7, #6]
 80026a8:	88bb      	ldrh	r3, [r7, #4]
 80026aa:	08db      	lsrs	r3, r3, #3
 80026ac:	b298      	uxth	r0, r3
 80026ae:	4603      	mov	r3, r0
 80026b0:	01db      	lsls	r3, r3, #7
 80026b2:	4413      	add	r3, r2
 80026b4:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <SSD1306_DrawPixel+0xbc>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	b25a      	sxtb	r2, r3
 80026ba:	88bb      	ldrh	r3, [r7, #4]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b259      	sxtb	r1, r3
 80026cc:	88fa      	ldrh	r2, [r7, #6]
 80026ce:	4603      	mov	r3, r0
 80026d0:	01db      	lsls	r3, r3, #7
 80026d2:	4413      	add	r3, r2
 80026d4:	b2c9      	uxtb	r1, r1
 80026d6:	4a14      	ldr	r2, [pc, #80]	; (8002728 <SSD1306_DrawPixel+0xbc>)
 80026d8:	54d1      	strb	r1, [r2, r3]
 80026da:	e01d      	b.n	8002718 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	88bb      	ldrh	r3, [r7, #4]
 80026e0:	08db      	lsrs	r3, r3, #3
 80026e2:	b298      	uxth	r0, r3
 80026e4:	4603      	mov	r3, r0
 80026e6:	01db      	lsls	r3, r3, #7
 80026e8:	4413      	add	r3, r2
 80026ea:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <SSD1306_DrawPixel+0xbc>)
 80026ec:	5cd3      	ldrb	r3, [r2, r3]
 80026ee:	b25a      	sxtb	r2, r3
 80026f0:	88bb      	ldrh	r3, [r7, #4]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	2101      	movs	r1, #1
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	b25b      	sxtb	r3, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	b25b      	sxtb	r3, r3
 8002702:	4013      	ands	r3, r2
 8002704:	b259      	sxtb	r1, r3
 8002706:	88fa      	ldrh	r2, [r7, #6]
 8002708:	4603      	mov	r3, r0
 800270a:	01db      	lsls	r3, r3, #7
 800270c:	4413      	add	r3, r2
 800270e:	b2c9      	uxtb	r1, r1
 8002710:	4a05      	ldr	r2, [pc, #20]	; (8002728 <SSD1306_DrawPixel+0xbc>)
 8002712:	54d1      	strb	r1, [r2, r3]
 8002714:	e000      	b.n	8002718 <SSD1306_DrawPixel+0xac>
		return;
 8002716:	bf00      	nop
	}
}
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	24000dd8 	.word	0x24000dd8
 8002728:	240009d8 	.word	0x240009d8

0800272c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	460a      	mov	r2, r1
 8002736:	80fb      	strh	r3, [r7, #6]
 8002738:	4613      	mov	r3, r2
 800273a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800273c:	4a05      	ldr	r2, [pc, #20]	; (8002754 <SSD1306_GotoXY+0x28>)
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002742:	4a04      	ldr	r2, [pc, #16]	; (8002754 <SSD1306_GotoXY+0x28>)
 8002744:	88bb      	ldrh	r3, [r7, #4]
 8002746:	8053      	strh	r3, [r2, #2]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	24000dd8 	.word	0x24000dd8

08002758 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	71fb      	strb	r3, [r7, #7]
 8002764:	4613      	mov	r3, r2
 8002766:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <SSD1306_Putc+0xfc>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	4413      	add	r3, r2
	if (
 8002774:	2b7f      	cmp	r3, #127	; 0x7f
 8002776:	dc07      	bgt.n	8002788 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002778:	4b36      	ldr	r3, [pc, #216]	; (8002854 <SSD1306_Putc+0xfc>)
 800277a:	885b      	ldrh	r3, [r3, #2]
 800277c:	461a      	mov	r2, r3
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	785b      	ldrb	r3, [r3, #1]
 8002782:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002784:	2b3f      	cmp	r3, #63	; 0x3f
 8002786:	dd01      	ble.n	800278c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002788:	2300      	movs	r3, #0
 800278a:	e05e      	b.n	800284a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	e04b      	b.n	800282a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	3b20      	subs	r3, #32
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	7849      	ldrb	r1, [r1, #1]
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4619      	mov	r1, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	440b      	add	r3, r1
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	e030      	b.n	8002818 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d010      	beq.n	80027e8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <SSD1306_Putc+0xfc>)
 80027c8:	881a      	ldrh	r2, [r3, #0]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	b298      	uxth	r0, r3
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <SSD1306_Putc+0xfc>)
 80027d4:	885a      	ldrh	r2, [r3, #2]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4413      	add	r3, r2
 80027dc:	b29b      	uxth	r3, r3
 80027de:	79ba      	ldrb	r2, [r7, #6]
 80027e0:	4619      	mov	r1, r3
 80027e2:	f7ff ff43 	bl	800266c <SSD1306_DrawPixel>
 80027e6:	e014      	b.n	8002812 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <SSD1306_Putc+0xfc>)
 80027ea:	881a      	ldrh	r2, [r3, #0]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	b298      	uxth	r0, r3
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <SSD1306_Putc+0xfc>)
 80027f6:	885a      	ldrh	r2, [r3, #2]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	b299      	uxth	r1, r3
 8002800:	79bb      	ldrb	r3, [r7, #6]
 8002802:	2b00      	cmp	r3, #0
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	f7ff ff2d 	bl	800266c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	3301      	adds	r3, #1
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4293      	cmp	r3, r2
 8002822:	d3c8      	bcc.n	80027b6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	461a      	mov	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	4293      	cmp	r3, r2
 8002834:	d3ad      	bcc.n	8002792 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002836:	4b07      	ldr	r3, [pc, #28]	; (8002854 <SSD1306_Putc+0xfc>)
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4413      	add	r3, r2
 8002842:	b29a      	uxth	r2, r3
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <SSD1306_Putc+0xfc>)
 8002846:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002848:	79fb      	ldrb	r3, [r7, #7]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	24000dd8 	.word	0x24000dd8

08002858 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	4613      	mov	r3, r2
 8002864:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002866:	e012      	b.n	800288e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	79fa      	ldrb	r2, [r7, #7]
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff71 	bl	8002758 <SSD1306_Putc>
 8002876:	4603      	mov	r3, r0
 8002878:	461a      	mov	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d002      	beq.n	8002888 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	e008      	b.n	800289a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3301      	adds	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1e8      	bne.n	8002868 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	781b      	ldrb	r3, [r3, #0]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <ssd1306_I2C_Init+0x28>)
 80028ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80028ae:	e002      	b.n	80028b6 <ssd1306_I2C_Init+0x12>
		p--;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f9      	bne.n	80028b0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	0003d090 	.word	0x0003d090

080028d0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b0c7      	sub	sp, #284	; 0x11c
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	4604      	mov	r4, r0
 80028d8:	4608      	mov	r0, r1
 80028da:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80028de:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80028e2:	600a      	str	r2, [r1, #0]
 80028e4:	4619      	mov	r1, r3
 80028e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028ea:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80028ee:	4622      	mov	r2, r4
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028f6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80028fa:	4602      	mov	r2, r0
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002902:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002906:	460a      	mov	r2, r1
 8002908:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800290a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800290e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002912:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002916:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800291a:	7812      	ldrb	r2, [r2, #0]
 800291c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800291e:	2300      	movs	r3, #0
 8002920:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002924:	e015      	b.n	8002952 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002926:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800292a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800292e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	441a      	add	r2, r3
 8002936:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800293a:	3301      	adds	r3, #1
 800293c:	7811      	ldrb	r1, [r2, #0]
 800293e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002942:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002946:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002948:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800294c:	3301      	adds	r3, #1
 800294e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002952:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002956:	b29b      	uxth	r3, r3
 8002958:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800295c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002960:	8812      	ldrh	r2, [r2, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d8df      	bhi.n	8002926 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8002966:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800296a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	b299      	uxth	r1, r3
 8002972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002976:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	b29b      	uxth	r3, r3
 8002980:	f107 020c 	add.w	r2, r7, #12
 8002984:	200a      	movs	r0, #10
 8002986:	9000      	str	r0, [sp, #0]
 8002988:	4803      	ldr	r0, [pc, #12]	; (8002998 <ssd1306_I2C_WriteMulti+0xc8>)
 800298a:	f003 f873 	bl	8005a74 <HAL_I2C_Master_Transmit>
}
 800298e:	bf00      	nop
 8002990:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002994:	46bd      	mov	sp, r7
 8002996:	bd90      	pop	{r4, r7, pc}
 8002998:	240002e0 	.word	0x240002e0

0800299c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
 80029a6:	460b      	mov	r3, r1
 80029a8:	71bb      	strb	r3, [r7, #6]
 80029aa:	4613      	mov	r3, r2
 80029ac:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80029ae:	79bb      	ldrb	r3, [r7, #6]
 80029b0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80029b2:	797b      	ldrb	r3, [r7, #5]
 80029b4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	b299      	uxth	r1, r3
 80029ba:	f107 020c 	add.w	r2, r7, #12
 80029be:	230a      	movs	r3, #10
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2302      	movs	r3, #2
 80029c4:	4803      	ldr	r0, [pc, #12]	; (80029d4 <ssd1306_I2C_Write+0x38>)
 80029c6:	f003 f855 	bl	8005a74 <HAL_I2C_Master_Transmit>
}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	240002e0 	.word	0x240002e0

080029d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_MspInit+0x30>)
 80029e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029e4:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <HAL_MspInit+0x30>)
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_MspInit+0x30>)
 80029f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	58024400 	.word	0x58024400

08002a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0ba      	sub	sp, #232	; 0xe8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a24:	f107 0318 	add.w	r3, r7, #24
 8002a28:	22b8      	movs	r2, #184	; 0xb8
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f00d f959 	bl	800fce4 <memset>
  if(hi2c->Instance==I2C1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4c      	ldr	r2, [pc, #304]	; (8002b68 <HAL_I2C_MspInit+0x15c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d146      	bne.n	8002aca <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a3c:	f04f 0208 	mov.w	r2, #8
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a4e:	f107 0318 	add.w	r3, r7, #24
 8002a52:	4618      	mov	r0, r3
 8002a54:	f006 fcd0 	bl	80093f8 <HAL_RCCEx_PeriphCLKConfig>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002a5e:	f7ff fcf5 	bl	800244c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a62:	4b42      	ldr	r3, [pc, #264]	; (8002b6c <HAL_I2C_MspInit+0x160>)
 8002a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a68:	4a40      	ldr	r2, [pc, #256]	; (8002b6c <HAL_I2C_MspInit+0x160>)
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a72:	4b3e      	ldr	r3, [pc, #248]	; (8002b6c <HAL_I2C_MspInit+0x160>)
 8002a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a80:	23c0      	movs	r3, #192	; 0xc0
 8002a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a86:	2312      	movs	r3, #18
 8002a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a98:	2304      	movs	r3, #4
 8002a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4832      	ldr	r0, [pc, #200]	; (8002b70 <HAL_I2C_MspInit+0x164>)
 8002aa6:	f002 fd93 	bl	80055d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aaa:	4b30      	ldr	r3, [pc, #192]	; (8002b6c <HAL_I2C_MspInit+0x160>)
 8002aac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ab0:	4a2e      	ldr	r2, [pc, #184]	; (8002b6c <HAL_I2C_MspInit+0x160>)
 8002ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ab6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002aba:	4b2c      	ldr	r3, [pc, #176]	; (8002b6c <HAL_I2C_MspInit+0x160>)
 8002abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ac8:	e04a      	b.n	8002b60 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a29      	ldr	r2, [pc, #164]	; (8002b74 <HAL_I2C_MspInit+0x168>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d145      	bne.n	8002b60 <HAL_I2C_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002ad4:	f04f 0208 	mov.w	r2, #8
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae6:	f107 0318 	add.w	r3, r7, #24
 8002aea:	4618      	mov	r0, r3
 8002aec:	f006 fc84 	bl	80093f8 <HAL_RCCEx_PeriphCLKConfig>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8002af6:	f7ff fca9 	bl	800244c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002afa:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <HAL_I2C_MspInit+0x160>)
 8002afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b00:	4a1a      	ldr	r2, [pc, #104]	; (8002b6c <HAL_I2C_MspInit+0x160>)
 8002b02:	f043 0320 	orr.w	r3, r3, #32
 8002b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b0a:	4b18      	ldr	r3, [pc, #96]	; (8002b6c <HAL_I2C_MspInit+0x160>)
 8002b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b1e:	2312      	movs	r3, #18
 8002b20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b30:	2304      	movs	r3, #4
 8002b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	480e      	ldr	r0, [pc, #56]	; (8002b78 <HAL_I2C_MspInit+0x16c>)
 8002b3e:	f002 fd47 	bl	80055d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <HAL_I2C_MspInit+0x160>)
 8002b44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b48:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <HAL_I2C_MspInit+0x160>)
 8002b4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_I2C_MspInit+0x160>)
 8002b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
}
 8002b60:	bf00      	nop
 8002b62:	37e8      	adds	r7, #232	; 0xe8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40005400 	.word	0x40005400
 8002b6c:	58024400 	.word	0x58024400
 8002b70:	58020400 	.word	0x58020400
 8002b74:	40005800 	.word	0x40005800
 8002b78:	58021400 	.word	0x58021400

08002b7c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b0bc      	sub	sp, #240	; 0xf0
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b94:	f107 0320 	add.w	r3, r7, #32
 8002b98:	22b8      	movs	r2, #184	; 0xb8
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f00d f8a1 	bl	800fce4 <memset>
  if(hi2s->Instance==SPI1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4aa2      	ldr	r2, [pc, #648]	; (8002e30 <HAL_I2S_MspInit+0x2b4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	f040 809b 	bne.w	8002ce4 <HAL_I2S_MspInit+0x168>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002bae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bbe:	f107 0320 	add.w	r3, r7, #32
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f006 fc18 	bl	80093f8 <HAL_RCCEx_PeriphCLKConfig>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8002bce:	f7ff fc3d 	bl	800244c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bd2:	4b98      	ldr	r3, [pc, #608]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bd8:	4a96      	ldr	r2, [pc, #600]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002bda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002be2:	4b94      	ldr	r3, [pc, #592]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf0:	4b90      	ldr	r3, [pc, #576]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf6:	4a8f      	ldr	r2, [pc, #572]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c00:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0e:	4b89      	ldr	r3, [pc, #548]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c14:	4a87      	ldr	r2, [pc, #540]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002c16:	f043 0304 	orr.w	r3, r3, #4
 8002c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c1e:	4b85      	ldr	r3, [pc, #532]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	697b      	ldr	r3, [r7, #20]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002c2c:	2370      	movs	r3, #112	; 0x70
 8002c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c44:	2305      	movs	r3, #5
 8002c46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4879      	ldr	r0, [pc, #484]	; (8002e38 <HAL_I2S_MspInit+0x2bc>)
 8002c52:	f002 fcbd 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c56:	2310      	movs	r3, #16
 8002c58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c6e:	2305      	movs	r3, #5
 8002c70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4870      	ldr	r0, [pc, #448]	; (8002e3c <HAL_I2S_MspInit+0x2c0>)
 8002c7c:	f002 fca8 	bl	80055d0 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002c80:	4b6f      	ldr	r3, [pc, #444]	; (8002e40 <HAL_I2S_MspInit+0x2c4>)
 8002c82:	4a70      	ldr	r2, [pc, #448]	; (8002e44 <HAL_I2S_MspInit+0x2c8>)
 8002c84:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002c86:	4b6e      	ldr	r3, [pc, #440]	; (8002e40 <HAL_I2S_MspInit+0x2c4>)
 8002c88:	2225      	movs	r2, #37	; 0x25
 8002c8a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c8c:	4b6c      	ldr	r3, [pc, #432]	; (8002e40 <HAL_I2S_MspInit+0x2c4>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c92:	4b6b      	ldr	r3, [pc, #428]	; (8002e40 <HAL_I2S_MspInit+0x2c4>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c98:	4b69      	ldr	r3, [pc, #420]	; (8002e40 <HAL_I2S_MspInit+0x2c4>)
 8002c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c9e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ca0:	4b67      	ldr	r3, [pc, #412]	; (8002e40 <HAL_I2S_MspInit+0x2c4>)
 8002ca2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ca6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ca8:	4b65      	ldr	r3, [pc, #404]	; (8002e40 <HAL_I2S_MspInit+0x2c4>)
 8002caa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cae:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002cb0:	4b63      	ldr	r3, [pc, #396]	; (8002e40 <HAL_I2S_MspInit+0x2c4>)
 8002cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cb6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cb8:	4b61      	ldr	r3, [pc, #388]	; (8002e40 <HAL_I2S_MspInit+0x2c4>)
 8002cba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002cbe:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cc0:	4b5f      	ldr	r3, [pc, #380]	; (8002e40 <HAL_I2S_MspInit+0x2c4>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002cc6:	485e      	ldr	r0, [pc, #376]	; (8002e40 <HAL_I2S_MspInit+0x2c4>)
 8002cc8:	f000 fbac 	bl	8003424 <HAL_DMA_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_I2S_MspInit+0x15a>
    {
      Error_Handler();
 8002cd2:	f7ff fbbb 	bl	800244c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a59      	ldr	r2, [pc, #356]	; (8002e40 <HAL_I2S_MspInit+0x2c4>)
 8002cda:	649a      	str	r2, [r3, #72]	; 0x48
 8002cdc:	4a58      	ldr	r2, [pc, #352]	; (8002e40 <HAL_I2S_MspInit+0x2c4>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ce2:	e0a0      	b.n	8002e26 <HAL_I2S_MspInit+0x2aa>
  else if(hi2s->Instance==SPI2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a57      	ldr	r2, [pc, #348]	; (8002e48 <HAL_I2S_MspInit+0x2cc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	f040 809b 	bne.w	8002e26 <HAL_I2S_MspInit+0x2aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d00:	f107 0320 	add.w	r3, r7, #32
 8002d04:	4618      	mov	r0, r3
 8002d06:	f006 fb77 	bl	80093f8 <HAL_RCCEx_PeriphCLKConfig>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_I2S_MspInit+0x198>
      Error_Handler();
 8002d10:	f7ff fb9c 	bl	800244c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d14:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d1a:	4a46      	ldr	r2, [pc, #280]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d24:	4b43      	ldr	r3, [pc, #268]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002d26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d32:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d38:	4a3e      	ldr	r2, [pc, #248]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002d3a:	f043 0304 	orr.w	r3, r3, #4
 8002d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d42:	4b3c      	ldr	r3, [pc, #240]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d50:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d56:	4a37      	ldr	r2, [pc, #220]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002d58:	f043 0302 	orr.w	r3, r3, #2
 8002d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d60:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <HAL_I2S_MspInit+0x2b8>)
 8002d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8002d6e:	2342      	movs	r3, #66	; 0x42
 8002d70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d86:	2305      	movs	r3, #5
 8002d88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d90:	4619      	mov	r1, r3
 8002d92:	482a      	ldr	r0, [pc, #168]	; (8002e3c <HAL_I2S_MspInit+0x2c0>)
 8002d94:	f002 fc1c 	bl	80055d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002d98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002db2:	2305      	movs	r3, #5
 8002db4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4823      	ldr	r0, [pc, #140]	; (8002e4c <HAL_I2S_MspInit+0x2d0>)
 8002dc0:	f002 fc06 	bl	80055d0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream1;
 8002dc4:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_I2S_MspInit+0x2d4>)
 8002dc6:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <HAL_I2S_MspInit+0x2d8>)
 8002dc8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002dca:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <HAL_I2S_MspInit+0x2d4>)
 8002dcc:	2228      	movs	r2, #40	; 0x28
 8002dce:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dd0:	4b1f      	ldr	r3, [pc, #124]	; (8002e50 <HAL_I2S_MspInit+0x2d4>)
 8002dd2:	2240      	movs	r2, #64	; 0x40
 8002dd4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <HAL_I2S_MspInit+0x2d4>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ddc:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <HAL_I2S_MspInit+0x2d4>)
 8002dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002de4:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <HAL_I2S_MspInit+0x2d4>)
 8002de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dea:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002dec:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <HAL_I2S_MspInit+0x2d4>)
 8002dee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002df2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8002df4:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <HAL_I2S_MspInit+0x2d4>)
 8002df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dfa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <HAL_I2S_MspInit+0x2d4>)
 8002dfe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e02:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <HAL_I2S_MspInit+0x2d4>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002e0a:	4811      	ldr	r0, [pc, #68]	; (8002e50 <HAL_I2S_MspInit+0x2d4>)
 8002e0c:	f000 fb0a 	bl	8003424 <HAL_DMA_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2S_MspInit+0x29e>
      Error_Handler();
 8002e16:	f7ff fb19 	bl	800244c <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <HAL_I2S_MspInit+0x2d4>)
 8002e1e:	645a      	str	r2, [r3, #68]	; 0x44
 8002e20:	4a0b      	ldr	r2, [pc, #44]	; (8002e50 <HAL_I2S_MspInit+0x2d4>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e26:	bf00      	nop
 8002e28:	37f0      	adds	r7, #240	; 0xf0
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40013000 	.word	0x40013000
 8002e34:	58024400 	.word	0x58024400
 8002e38:	58020000 	.word	0x58020000
 8002e3c:	58020800 	.word	0x58020800
 8002e40:	240003dc 	.word	0x240003dc
 8002e44:	40020010 	.word	0x40020010
 8002e48:	40003800 	.word	0x40003800
 8002e4c:	58020400 	.word	0x58020400
 8002e50:	24000454 	.word	0x24000454
 8002e54:	40020028 	.word	0x40020028

08002e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <NMI_Handler+0x4>

08002e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e62:	e7fe      	b.n	8002e62 <HardFault_Handler+0x4>

08002e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <MemManage_Handler+0x4>

08002e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e6e:	e7fe      	b.n	8002e6e <BusFault_Handler+0x4>

08002e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <UsageFault_Handler+0x4>

08002e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea4:	f000 f96a 	bl	800317c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002eb0:	4802      	ldr	r0, [pc, #8]	; (8002ebc <DMA1_Stream0_IRQHandler+0x10>)
 8002eb2:	f001 f87b 	bl	8003fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	240003dc 	.word	0x240003dc

08002ec0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <DMA1_Stream1_IRQHandler+0x10>)
 8002ec6:	f001 f871 	bl	8003fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	24000454 	.word	0x24000454

08002ed4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <OTG_HS_IRQHandler+0x10>)
 8002eda:	f004 f992 	bl	8007202 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	240022c8 	.word	0x240022c8

08002ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ef0:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <_sbrk+0x5c>)
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <_sbrk+0x60>)
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002efc:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <_sbrk+0x64>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <_sbrk+0x64>)
 8002f06:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <_sbrk+0x68>)
 8002f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <_sbrk+0x64>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d207      	bcs.n	8002f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f18:	f00c fea4 	bl	800fc64 <__errno>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	220c      	movs	r2, #12
 8002f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	e009      	b.n	8002f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <_sbrk+0x64>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <_sbrk+0x64>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	4a05      	ldr	r2, [pc, #20]	; (8002f4c <_sbrk+0x64>)
 8002f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	24050000 	.word	0x24050000
 8002f48:	00000400 	.word	0x00000400
 8002f4c:	24000de0 	.word	0x24000de0
 8002f50:	24002a08 	.word	0x24002a08

08002f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f58:	4b32      	ldr	r3, [pc, #200]	; (8003024 <SystemInit+0xd0>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	4a31      	ldr	r2, [pc, #196]	; (8003024 <SystemInit+0xd0>)
 8002f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f68:	4b2f      	ldr	r3, [pc, #188]	; (8003028 <SystemInit+0xd4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	2b06      	cmp	r3, #6
 8002f72:	d807      	bhi.n	8002f84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f74:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <SystemInit+0xd4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f023 030f 	bic.w	r3, r3, #15
 8002f7c:	4a2a      	ldr	r2, [pc, #168]	; (8003028 <SystemInit+0xd4>)
 8002f7e:	f043 0307 	orr.w	r3, r3, #7
 8002f82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f84:	4b29      	ldr	r3, [pc, #164]	; (800302c <SystemInit+0xd8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a28      	ldr	r2, [pc, #160]	; (800302c <SystemInit+0xd8>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f90:	4b26      	ldr	r3, [pc, #152]	; (800302c <SystemInit+0xd8>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f96:	4b25      	ldr	r3, [pc, #148]	; (800302c <SystemInit+0xd8>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4924      	ldr	r1, [pc, #144]	; (800302c <SystemInit+0xd8>)
 8002f9c:	4b24      	ldr	r3, [pc, #144]	; (8003030 <SystemInit+0xdc>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <SystemInit+0xd4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002fae:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <SystemInit+0xd4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 030f 	bic.w	r3, r3, #15
 8002fb6:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <SystemInit+0xd4>)
 8002fb8:	f043 0307 	orr.w	r3, r3, #7
 8002fbc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	; (800302c <SystemInit+0xd8>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002fc4:	4b19      	ldr	r3, [pc, #100]	; (800302c <SystemInit+0xd8>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002fca:	4b18      	ldr	r3, [pc, #96]	; (800302c <SystemInit+0xd8>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002fd0:	4b16      	ldr	r3, [pc, #88]	; (800302c <SystemInit+0xd8>)
 8002fd2:	4a18      	ldr	r2, [pc, #96]	; (8003034 <SystemInit+0xe0>)
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002fd6:	4b15      	ldr	r3, [pc, #84]	; (800302c <SystemInit+0xd8>)
 8002fd8:	4a17      	ldr	r2, [pc, #92]	; (8003038 <SystemInit+0xe4>)
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002fdc:	4b13      	ldr	r3, [pc, #76]	; (800302c <SystemInit+0xd8>)
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <SystemInit+0xe8>)
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002fe2:	4b12      	ldr	r3, [pc, #72]	; (800302c <SystemInit+0xd8>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002fe8:	4b10      	ldr	r3, [pc, #64]	; (800302c <SystemInit+0xd8>)
 8002fea:	4a14      	ldr	r2, [pc, #80]	; (800303c <SystemInit+0xe8>)
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002fee:	4b0f      	ldr	r3, [pc, #60]	; (800302c <SystemInit+0xd8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	; (800302c <SystemInit+0xd8>)
 8002ff6:	4a11      	ldr	r2, [pc, #68]	; (800303c <SystemInit+0xe8>)
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <SystemInit+0xd8>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <SystemInit+0xd8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a09      	ldr	r2, [pc, #36]	; (800302c <SystemInit+0xd8>)
 8003006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800300a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <SystemInit+0xd8>)
 800300e:	2200      	movs	r2, #0
 8003010:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <SystemInit+0xec>)
 8003014:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003018:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00
 8003028:	52002000 	.word	0x52002000
 800302c:	58024400 	.word	0x58024400
 8003030:	eaf6ed7f 	.word	0xeaf6ed7f
 8003034:	02020200 	.word	0x02020200
 8003038:	01ff0000 	.word	0x01ff0000
 800303c:	01010280 	.word	0x01010280
 8003040:	52004000 	.word	0x52004000

08003044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800307c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003048:	f7ff ff84 	bl	8002f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800304c:	480c      	ldr	r0, [pc, #48]	; (8003080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800304e:	490d      	ldr	r1, [pc, #52]	; (8003084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003050:	4a0d      	ldr	r2, [pc, #52]	; (8003088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003054:	e002      	b.n	800305c <LoopCopyDataInit>

08003056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800305a:	3304      	adds	r3, #4

0800305c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800305c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800305e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003060:	d3f9      	bcc.n	8003056 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003062:	4a0a      	ldr	r2, [pc, #40]	; (800308c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003064:	4c0a      	ldr	r4, [pc, #40]	; (8003090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003068:	e001      	b.n	800306e <LoopFillZerobss>

0800306a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800306a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800306c:	3204      	adds	r2, #4

0800306e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800306e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003070:	d3fb      	bcc.n	800306a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003072:	f00c fdfd 	bl	800fc70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003076:	f7fe ff71 	bl	8001f5c <main>
  bx  lr
 800307a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800307c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003080:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003084:	24000270 	.word	0x24000270
  ldr r2, =_sidata
 8003088:	080113b8 	.word	0x080113b8
  ldr r2, =_sbss
 800308c:	24000270 	.word	0x24000270
  ldr r4, =_ebss
 8003090:	24002a04 	.word	0x24002a04

08003094 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003094:	e7fe      	b.n	8003094 <ADC3_IRQHandler>
	...

08003098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800309e:	2003      	movs	r0, #3
 80030a0:	f000 f980 	bl	80033a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030a4:	f005 ffe8 	bl	8009078 <HAL_RCC_GetSysClockFreq>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <HAL_Init+0x68>)
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	4913      	ldr	r1, [pc, #76]	; (8003104 <HAL_Init+0x6c>)
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
 80030c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030c2:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <HAL_Init+0x68>)
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <HAL_Init+0x6c>)
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
 80030d8:	4a0b      	ldr	r2, [pc, #44]	; (8003108 <HAL_Init+0x70>)
 80030da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030dc:	4a0b      	ldr	r2, [pc, #44]	; (800310c <HAL_Init+0x74>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030e2:	200f      	movs	r0, #15
 80030e4:	f000 f814 	bl	8003110 <HAL_InitTick>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e002      	b.n	80030f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80030f2:	f7ff fc71 	bl	80029d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	58024400 	.word	0x58024400
 8003104:	08011238 	.word	0x08011238
 8003108:	24000110 	.word	0x24000110
 800310c:	2400010c 	.word	0x2400010c

08003110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003118:	4b15      	ldr	r3, [pc, #84]	; (8003170 <HAL_InitTick+0x60>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e021      	b.n	8003168 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <HAL_InitTick+0x64>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_InitTick+0x60>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003132:	fbb3 f3f1 	udiv	r3, r3, r1
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f965 	bl	800340a <HAL_SYSTICK_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e00e      	b.n	8003168 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b0f      	cmp	r3, #15
 800314e:	d80a      	bhi.n	8003166 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003150:	2200      	movs	r2, #0
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	f000 f92f 	bl	80033ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800315c:	4a06      	ldr	r2, [pc, #24]	; (8003178 <HAL_InitTick+0x68>)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e000      	b.n	8003168 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	24000118 	.word	0x24000118
 8003174:	2400010c 	.word	0x2400010c
 8003178:	24000114 	.word	0x24000114

0800317c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_IncTick+0x20>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_IncTick+0x24>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4413      	add	r3, r2
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <HAL_IncTick+0x24>)
 800318e:	6013      	str	r3, [r2, #0]
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	24000118 	.word	0x24000118
 80031a0:	24000de4 	.word	0x24000de4

080031a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return uwTick;
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_GetTick+0x14>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	24000de4 	.word	0x24000de4

080031bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031c4:	f7ff ffee 	bl	80031a4 <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d005      	beq.n	80031e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_Delay+0x44>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031e2:	bf00      	nop
 80031e4:	f7ff ffde 	bl	80031a4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d8f7      	bhi.n	80031e4 <HAL_Delay+0x28>
  {
  }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	24000118 	.word	0x24000118

08003204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <__NVIC_SetPriorityGrouping+0x40>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 800322e:	4313      	orrs	r3, r2
 8003230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003232:	4a04      	ldr	r2, [pc, #16]	; (8003244 <__NVIC_SetPriorityGrouping+0x40>)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	60d3      	str	r3, [r2, #12]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00
 8003248:	05fa0000 	.word	0x05fa0000

0800324c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4907      	ldr	r1, [pc, #28]	; (80032a0 <__NVIC_EnableIRQ+0x38>)
 8003282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0a      	blt.n	80032ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	490c      	ldr	r1, [pc, #48]	; (80032f0 <__NVIC_SetPriority+0x4c>)
 80032be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032cc:	e00a      	b.n	80032e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4908      	ldr	r1, [pc, #32]	; (80032f4 <__NVIC_SetPriority+0x50>)
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3b04      	subs	r3, #4
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	440b      	add	r3, r1
 80032e2:	761a      	strb	r2, [r3, #24]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf28      	it	cs
 8003316:	2304      	movcs	r3, #4
 8003318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3304      	adds	r3, #4
 800331e:	2b06      	cmp	r3, #6
 8003320:	d902      	bls.n	8003328 <NVIC_EncodePriority+0x30>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b03      	subs	r3, #3
 8003326:	e000      	b.n	800332a <NVIC_EncodePriority+0x32>
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003340:	f04f 31ff 	mov.w	r1, #4294967295
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43d9      	mvns	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	4313      	orrs	r3, r2
         );
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003370:	d301      	bcc.n	8003376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003372:	2301      	movs	r3, #1
 8003374:	e00f      	b.n	8003396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <SysTick_Config+0x40>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337e:	210f      	movs	r1, #15
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	f7ff ff8e 	bl	80032a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <SysTick_Config+0x40>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <SysTick_Config+0x40>)
 8003390:	2207      	movs	r2, #7
 8003392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	e000e010 	.word	0xe000e010

080033a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff29 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033c8:	f7ff ff40 	bl	800324c <__NVIC_GetPriorityGrouping>
 80033cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	6978      	ldr	r0, [r7, #20]
 80033d4:	f7ff ff90 	bl	80032f8 <NVIC_EncodePriority>
 80033d8:	4602      	mov	r2, r0
 80033da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff5f 	bl	80032a4 <__NVIC_SetPriority>
}
 80033e6:	bf00      	nop
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	4603      	mov	r3, r0
 80033f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ff33 	bl	8003268 <__NVIC_EnableIRQ>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ffa4 	bl	8003360 <SysTick_Config>
 8003418:	4603      	mov	r3, r0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800342c:	f7ff feba 	bl	80031a4 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e314      	b.n	8003a66 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a66      	ldr	r2, [pc, #408]	; (80035dc <HAL_DMA_Init+0x1b8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d04a      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a65      	ldr	r2, [pc, #404]	; (80035e0 <HAL_DMA_Init+0x1bc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d045      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a63      	ldr	r2, [pc, #396]	; (80035e4 <HAL_DMA_Init+0x1c0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d040      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a62      	ldr	r2, [pc, #392]	; (80035e8 <HAL_DMA_Init+0x1c4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d03b      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a60      	ldr	r2, [pc, #384]	; (80035ec <HAL_DMA_Init+0x1c8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d036      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a5f      	ldr	r2, [pc, #380]	; (80035f0 <HAL_DMA_Init+0x1cc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d031      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a5d      	ldr	r2, [pc, #372]	; (80035f4 <HAL_DMA_Init+0x1d0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d02c      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a5c      	ldr	r2, [pc, #368]	; (80035f8 <HAL_DMA_Init+0x1d4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d027      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a5a      	ldr	r2, [pc, #360]	; (80035fc <HAL_DMA_Init+0x1d8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d022      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a59      	ldr	r2, [pc, #356]	; (8003600 <HAL_DMA_Init+0x1dc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d01d      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a57      	ldr	r2, [pc, #348]	; (8003604 <HAL_DMA_Init+0x1e0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d018      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a56      	ldr	r2, [pc, #344]	; (8003608 <HAL_DMA_Init+0x1e4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d013      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a54      	ldr	r2, [pc, #336]	; (800360c <HAL_DMA_Init+0x1e8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00e      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a53      	ldr	r2, [pc, #332]	; (8003610 <HAL_DMA_Init+0x1ec>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d009      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a51      	ldr	r2, [pc, #324]	; (8003614 <HAL_DMA_Init+0x1f0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d004      	beq.n	80034dc <HAL_DMA_Init+0xb8>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a50      	ldr	r2, [pc, #320]	; (8003618 <HAL_DMA_Init+0x1f4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d101      	bne.n	80034e0 <HAL_DMA_Init+0xbc>
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <HAL_DMA_Init+0xbe>
 80034e0:	2300      	movs	r3, #0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 813c 	beq.w	8003760 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a37      	ldr	r2, [pc, #220]	; (80035dc <HAL_DMA_Init+0x1b8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d04a      	beq.n	8003598 <HAL_DMA_Init+0x174>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a36      	ldr	r2, [pc, #216]	; (80035e0 <HAL_DMA_Init+0x1bc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d045      	beq.n	8003598 <HAL_DMA_Init+0x174>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a34      	ldr	r2, [pc, #208]	; (80035e4 <HAL_DMA_Init+0x1c0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d040      	beq.n	8003598 <HAL_DMA_Init+0x174>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a33      	ldr	r2, [pc, #204]	; (80035e8 <HAL_DMA_Init+0x1c4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d03b      	beq.n	8003598 <HAL_DMA_Init+0x174>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a31      	ldr	r2, [pc, #196]	; (80035ec <HAL_DMA_Init+0x1c8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d036      	beq.n	8003598 <HAL_DMA_Init+0x174>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a30      	ldr	r2, [pc, #192]	; (80035f0 <HAL_DMA_Init+0x1cc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d031      	beq.n	8003598 <HAL_DMA_Init+0x174>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a2e      	ldr	r2, [pc, #184]	; (80035f4 <HAL_DMA_Init+0x1d0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d02c      	beq.n	8003598 <HAL_DMA_Init+0x174>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2d      	ldr	r2, [pc, #180]	; (80035f8 <HAL_DMA_Init+0x1d4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d027      	beq.n	8003598 <HAL_DMA_Init+0x174>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <HAL_DMA_Init+0x1d8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d022      	beq.n	8003598 <HAL_DMA_Init+0x174>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2a      	ldr	r2, [pc, #168]	; (8003600 <HAL_DMA_Init+0x1dc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d01d      	beq.n	8003598 <HAL_DMA_Init+0x174>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a28      	ldr	r2, [pc, #160]	; (8003604 <HAL_DMA_Init+0x1e0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d018      	beq.n	8003598 <HAL_DMA_Init+0x174>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a27      	ldr	r2, [pc, #156]	; (8003608 <HAL_DMA_Init+0x1e4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <HAL_DMA_Init+0x174>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a25      	ldr	r2, [pc, #148]	; (800360c <HAL_DMA_Init+0x1e8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00e      	beq.n	8003598 <HAL_DMA_Init+0x174>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a24      	ldr	r2, [pc, #144]	; (8003610 <HAL_DMA_Init+0x1ec>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d009      	beq.n	8003598 <HAL_DMA_Init+0x174>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_DMA_Init+0x1f0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <HAL_DMA_Init+0x174>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a21      	ldr	r2, [pc, #132]	; (8003618 <HAL_DMA_Init+0x1f4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d108      	bne.n	80035aa <HAL_DMA_Init+0x186>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e007      	b.n	80035ba <HAL_DMA_Init+0x196>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0201 	bic.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035ba:	e02f      	b.n	800361c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035bc:	f7ff fdf2 	bl	80031a4 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b05      	cmp	r3, #5
 80035c8:	d928      	bls.n	800361c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2203      	movs	r2, #3
 80035d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e244      	b.n	8003a66 <HAL_DMA_Init+0x642>
 80035dc:	40020010 	.word	0x40020010
 80035e0:	40020028 	.word	0x40020028
 80035e4:	40020040 	.word	0x40020040
 80035e8:	40020058 	.word	0x40020058
 80035ec:	40020070 	.word	0x40020070
 80035f0:	40020088 	.word	0x40020088
 80035f4:	400200a0 	.word	0x400200a0
 80035f8:	400200b8 	.word	0x400200b8
 80035fc:	40020410 	.word	0x40020410
 8003600:	40020428 	.word	0x40020428
 8003604:	40020440 	.word	0x40020440
 8003608:	40020458 	.word	0x40020458
 800360c:	40020470 	.word	0x40020470
 8003610:	40020488 	.word	0x40020488
 8003614:	400204a0 	.word	0x400204a0
 8003618:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1c8      	bne.n	80035bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4b84      	ldr	r3, [pc, #528]	; (8003848 <HAL_DMA_Init+0x424>)
 8003636:	4013      	ands	r3, r2
 8003638:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003642:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	2b04      	cmp	r3, #4
 800366e:	d107      	bne.n	8003680 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	4313      	orrs	r3, r2
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b28      	cmp	r3, #40	; 0x28
 8003686:	d903      	bls.n	8003690 <HAL_DMA_Init+0x26c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b2e      	cmp	r3, #46	; 0x2e
 800368e:	d91f      	bls.n	80036d0 <HAL_DMA_Init+0x2ac>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b3e      	cmp	r3, #62	; 0x3e
 8003696:	d903      	bls.n	80036a0 <HAL_DMA_Init+0x27c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b42      	cmp	r3, #66	; 0x42
 800369e:	d917      	bls.n	80036d0 <HAL_DMA_Init+0x2ac>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b46      	cmp	r3, #70	; 0x46
 80036a6:	d903      	bls.n	80036b0 <HAL_DMA_Init+0x28c>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b48      	cmp	r3, #72	; 0x48
 80036ae:	d90f      	bls.n	80036d0 <HAL_DMA_Init+0x2ac>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b4e      	cmp	r3, #78	; 0x4e
 80036b6:	d903      	bls.n	80036c0 <HAL_DMA_Init+0x29c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b52      	cmp	r3, #82	; 0x52
 80036be:	d907      	bls.n	80036d0 <HAL_DMA_Init+0x2ac>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b73      	cmp	r3, #115	; 0x73
 80036c6:	d905      	bls.n	80036d4 <HAL_DMA_Init+0x2b0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b77      	cmp	r3, #119	; 0x77
 80036ce:	d801      	bhi.n	80036d4 <HAL_DMA_Init+0x2b0>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <HAL_DMA_Init+0x2b2>
 80036d4:	2300      	movs	r3, #0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f023 0307 	bic.w	r3, r3, #7
 80036f8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	2b04      	cmp	r3, #4
 800370a:	d117      	bne.n	800373c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00e      	beq.n	800373c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f001 fdcc 	bl	80052bc <DMA_CheckFifoParam>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2240      	movs	r2, #64	; 0x40
 800372e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e194      	b.n	8003a66 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f001 fd07 	bl	8005158 <DMA_CalcBaseAndBitshift>
 800374a:	4603      	mov	r3, r0
 800374c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	223f      	movs	r2, #63	; 0x3f
 8003758:	409a      	lsls	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	e0ca      	b.n	80038f6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a39      	ldr	r2, [pc, #228]	; (800384c <HAL_DMA_Init+0x428>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d022      	beq.n	80037b0 <HAL_DMA_Init+0x38c>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a38      	ldr	r2, [pc, #224]	; (8003850 <HAL_DMA_Init+0x42c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d01d      	beq.n	80037b0 <HAL_DMA_Init+0x38c>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a36      	ldr	r2, [pc, #216]	; (8003854 <HAL_DMA_Init+0x430>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d018      	beq.n	80037b0 <HAL_DMA_Init+0x38c>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a35      	ldr	r2, [pc, #212]	; (8003858 <HAL_DMA_Init+0x434>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <HAL_DMA_Init+0x38c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a33      	ldr	r2, [pc, #204]	; (800385c <HAL_DMA_Init+0x438>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00e      	beq.n	80037b0 <HAL_DMA_Init+0x38c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a32      	ldr	r2, [pc, #200]	; (8003860 <HAL_DMA_Init+0x43c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_DMA_Init+0x38c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a30      	ldr	r2, [pc, #192]	; (8003864 <HAL_DMA_Init+0x440>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d004      	beq.n	80037b0 <HAL_DMA_Init+0x38c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <HAL_DMA_Init+0x444>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d101      	bne.n	80037b4 <HAL_DMA_Init+0x390>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <HAL_DMA_Init+0x392>
 80037b4:	2300      	movs	r3, #0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8094 	beq.w	80038e4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a22      	ldr	r2, [pc, #136]	; (800384c <HAL_DMA_Init+0x428>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d021      	beq.n	800380a <HAL_DMA_Init+0x3e6>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a21      	ldr	r2, [pc, #132]	; (8003850 <HAL_DMA_Init+0x42c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d01c      	beq.n	800380a <HAL_DMA_Init+0x3e6>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1f      	ldr	r2, [pc, #124]	; (8003854 <HAL_DMA_Init+0x430>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d017      	beq.n	800380a <HAL_DMA_Init+0x3e6>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <HAL_DMA_Init+0x434>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d012      	beq.n	800380a <HAL_DMA_Init+0x3e6>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1c      	ldr	r2, [pc, #112]	; (800385c <HAL_DMA_Init+0x438>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00d      	beq.n	800380a <HAL_DMA_Init+0x3e6>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <HAL_DMA_Init+0x43c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d008      	beq.n	800380a <HAL_DMA_Init+0x3e6>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a19      	ldr	r2, [pc, #100]	; (8003864 <HAL_DMA_Init+0x440>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d003      	beq.n	800380a <HAL_DMA_Init+0x3e6>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a18      	ldr	r2, [pc, #96]	; (8003868 <HAL_DMA_Init+0x444>)
 8003808:	4293      	cmp	r3, r2
 800380a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4b11      	ldr	r3, [pc, #68]	; (800386c <HAL_DMA_Init+0x448>)
 8003828:	4013      	ands	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b40      	cmp	r3, #64	; 0x40
 8003832:	d01d      	beq.n	8003870 <HAL_DMA_Init+0x44c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d102      	bne.n	8003842 <HAL_DMA_Init+0x41e>
 800383c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003840:	e017      	b.n	8003872 <HAL_DMA_Init+0x44e>
 8003842:	2300      	movs	r3, #0
 8003844:	e015      	b.n	8003872 <HAL_DMA_Init+0x44e>
 8003846:	bf00      	nop
 8003848:	fe10803f 	.word	0xfe10803f
 800384c:	58025408 	.word	0x58025408
 8003850:	5802541c 	.word	0x5802541c
 8003854:	58025430 	.word	0x58025430
 8003858:	58025444 	.word	0x58025444
 800385c:	58025458 	.word	0x58025458
 8003860:	5802546c 	.word	0x5802546c
 8003864:	58025480 	.word	0x58025480
 8003868:	58025494 	.word	0x58025494
 800386c:	fffe000f 	.word	0xfffe000f
 8003870:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68d2      	ldr	r2, [r2, #12]
 8003876:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003878:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003880:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003888:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003890:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003898:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80038a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	4b6e      	ldr	r3, [pc, #440]	; (8003a70 <HAL_DMA_Init+0x64c>)
 80038b8:	4413      	add	r3, r2
 80038ba:	4a6e      	ldr	r2, [pc, #440]	; (8003a74 <HAL_DMA_Init+0x650>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	009a      	lsls	r2, r3, #2
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f001 fc45 	bl	8005158 <DMA_CalcBaseAndBitshift>
 80038ce:	4603      	mov	r3, r0
 80038d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2201      	movs	r2, #1
 80038dc:	409a      	lsls	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	e008      	b.n	80038f6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2240      	movs	r2, #64	; 0x40
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2203      	movs	r2, #3
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0b7      	b.n	8003a66 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a5f      	ldr	r2, [pc, #380]	; (8003a78 <HAL_DMA_Init+0x654>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d072      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a5d      	ldr	r2, [pc, #372]	; (8003a7c <HAL_DMA_Init+0x658>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d06d      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a5c      	ldr	r2, [pc, #368]	; (8003a80 <HAL_DMA_Init+0x65c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d068      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5a      	ldr	r2, [pc, #360]	; (8003a84 <HAL_DMA_Init+0x660>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d063      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a59      	ldr	r2, [pc, #356]	; (8003a88 <HAL_DMA_Init+0x664>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d05e      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a57      	ldr	r2, [pc, #348]	; (8003a8c <HAL_DMA_Init+0x668>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d059      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a56      	ldr	r2, [pc, #344]	; (8003a90 <HAL_DMA_Init+0x66c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d054      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a54      	ldr	r2, [pc, #336]	; (8003a94 <HAL_DMA_Init+0x670>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d04f      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a53      	ldr	r2, [pc, #332]	; (8003a98 <HAL_DMA_Init+0x674>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d04a      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a51      	ldr	r2, [pc, #324]	; (8003a9c <HAL_DMA_Init+0x678>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d045      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a50      	ldr	r2, [pc, #320]	; (8003aa0 <HAL_DMA_Init+0x67c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d040      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a4e      	ldr	r2, [pc, #312]	; (8003aa4 <HAL_DMA_Init+0x680>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d03b      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a4d      	ldr	r2, [pc, #308]	; (8003aa8 <HAL_DMA_Init+0x684>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d036      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a4b      	ldr	r2, [pc, #300]	; (8003aac <HAL_DMA_Init+0x688>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d031      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a4a      	ldr	r2, [pc, #296]	; (8003ab0 <HAL_DMA_Init+0x68c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d02c      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a48      	ldr	r2, [pc, #288]	; (8003ab4 <HAL_DMA_Init+0x690>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d027      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a47      	ldr	r2, [pc, #284]	; (8003ab8 <HAL_DMA_Init+0x694>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d022      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a45      	ldr	r2, [pc, #276]	; (8003abc <HAL_DMA_Init+0x698>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01d      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a44      	ldr	r2, [pc, #272]	; (8003ac0 <HAL_DMA_Init+0x69c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d018      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a42      	ldr	r2, [pc, #264]	; (8003ac4 <HAL_DMA_Init+0x6a0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a41      	ldr	r2, [pc, #260]	; (8003ac8 <HAL_DMA_Init+0x6a4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a3f      	ldr	r2, [pc, #252]	; (8003acc <HAL_DMA_Init+0x6a8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a3e      	ldr	r2, [pc, #248]	; (8003ad0 <HAL_DMA_Init+0x6ac>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_DMA_Init+0x5c2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a3c      	ldr	r2, [pc, #240]	; (8003ad4 <HAL_DMA_Init+0x6b0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <HAL_DMA_Init+0x5c6>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_DMA_Init+0x5c8>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d032      	beq.n	8003a56 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f001 fcdf 	bl	80053b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b80      	cmp	r3, #128	; 0x80
 80039fc:	d102      	bne.n	8003a04 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d010      	beq.n	8003a44 <HAL_DMA_Init+0x620>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d80c      	bhi.n	8003a44 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f001 fd5c 	bl	80054e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	e008      	b.n	8003a56 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	a7fdabf8 	.word	0xa7fdabf8
 8003a74:	cccccccd 	.word	0xcccccccd
 8003a78:	40020010 	.word	0x40020010
 8003a7c:	40020028 	.word	0x40020028
 8003a80:	40020040 	.word	0x40020040
 8003a84:	40020058 	.word	0x40020058
 8003a88:	40020070 	.word	0x40020070
 8003a8c:	40020088 	.word	0x40020088
 8003a90:	400200a0 	.word	0x400200a0
 8003a94:	400200b8 	.word	0x400200b8
 8003a98:	40020410 	.word	0x40020410
 8003a9c:	40020428 	.word	0x40020428
 8003aa0:	40020440 	.word	0x40020440
 8003aa4:	40020458 	.word	0x40020458
 8003aa8:	40020470 	.word	0x40020470
 8003aac:	40020488 	.word	0x40020488
 8003ab0:	400204a0 	.word	0x400204a0
 8003ab4:	400204b8 	.word	0x400204b8
 8003ab8:	58025408 	.word	0x58025408
 8003abc:	5802541c 	.word	0x5802541c
 8003ac0:	58025430 	.word	0x58025430
 8003ac4:	58025444 	.word	0x58025444
 8003ac8:	58025458 	.word	0x58025458
 8003acc:	5802546c 	.word	0x5802546c
 8003ad0:	58025480 	.word	0x58025480
 8003ad4:	58025494 	.word	0x58025494

08003ad8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e226      	b.n	8003f42 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_DMA_Start_IT+0x2a>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e21f      	b.n	8003f42 <HAL_DMA_Start_IT+0x46a>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	f040 820a 	bne.w	8003f2c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a68      	ldr	r2, [pc, #416]	; (8003ccc <HAL_DMA_Start_IT+0x1f4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d04a      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a66      	ldr	r2, [pc, #408]	; (8003cd0 <HAL_DMA_Start_IT+0x1f8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d045      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a65      	ldr	r2, [pc, #404]	; (8003cd4 <HAL_DMA_Start_IT+0x1fc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d040      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a63      	ldr	r2, [pc, #396]	; (8003cd8 <HAL_DMA_Start_IT+0x200>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d03b      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a62      	ldr	r2, [pc, #392]	; (8003cdc <HAL_DMA_Start_IT+0x204>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d036      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a60      	ldr	r2, [pc, #384]	; (8003ce0 <HAL_DMA_Start_IT+0x208>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d031      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a5f      	ldr	r2, [pc, #380]	; (8003ce4 <HAL_DMA_Start_IT+0x20c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d02c      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a5d      	ldr	r2, [pc, #372]	; (8003ce8 <HAL_DMA_Start_IT+0x210>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d027      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a5c      	ldr	r2, [pc, #368]	; (8003cec <HAL_DMA_Start_IT+0x214>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d022      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a5a      	ldr	r2, [pc, #360]	; (8003cf0 <HAL_DMA_Start_IT+0x218>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01d      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a59      	ldr	r2, [pc, #356]	; (8003cf4 <HAL_DMA_Start_IT+0x21c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d018      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a57      	ldr	r2, [pc, #348]	; (8003cf8 <HAL_DMA_Start_IT+0x220>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a56      	ldr	r2, [pc, #344]	; (8003cfc <HAL_DMA_Start_IT+0x224>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a54      	ldr	r2, [pc, #336]	; (8003d00 <HAL_DMA_Start_IT+0x228>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d009      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a53      	ldr	r2, [pc, #332]	; (8003d04 <HAL_DMA_Start_IT+0x22c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a51      	ldr	r2, [pc, #324]	; (8003d08 <HAL_DMA_Start_IT+0x230>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d108      	bne.n	8003bd8 <HAL_DMA_Start_IT+0x100>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e007      	b.n	8003be8 <HAL_DMA_Start_IT+0x110>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f001 f906 	bl	8004e00 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a34      	ldr	r2, [pc, #208]	; (8003ccc <HAL_DMA_Start_IT+0x1f4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d04a      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a33      	ldr	r2, [pc, #204]	; (8003cd0 <HAL_DMA_Start_IT+0x1f8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d045      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a31      	ldr	r2, [pc, #196]	; (8003cd4 <HAL_DMA_Start_IT+0x1fc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d040      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a30      	ldr	r2, [pc, #192]	; (8003cd8 <HAL_DMA_Start_IT+0x200>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d03b      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2e      	ldr	r2, [pc, #184]	; (8003cdc <HAL_DMA_Start_IT+0x204>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d036      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a2d      	ldr	r2, [pc, #180]	; (8003ce0 <HAL_DMA_Start_IT+0x208>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d031      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2b      	ldr	r2, [pc, #172]	; (8003ce4 <HAL_DMA_Start_IT+0x20c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d02c      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ce8 <HAL_DMA_Start_IT+0x210>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d027      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a28      	ldr	r2, [pc, #160]	; (8003cec <HAL_DMA_Start_IT+0x214>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d022      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a27      	ldr	r2, [pc, #156]	; (8003cf0 <HAL_DMA_Start_IT+0x218>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d01d      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a25      	ldr	r2, [pc, #148]	; (8003cf4 <HAL_DMA_Start_IT+0x21c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d018      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a24      	ldr	r2, [pc, #144]	; (8003cf8 <HAL_DMA_Start_IT+0x220>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a22      	ldr	r2, [pc, #136]	; (8003cfc <HAL_DMA_Start_IT+0x224>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00e      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <HAL_DMA_Start_IT+0x228>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d009      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <HAL_DMA_Start_IT+0x22c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d004      	beq.n	8003c94 <HAL_DMA_Start_IT+0x1bc>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <HAL_DMA_Start_IT+0x230>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d101      	bne.n	8003c98 <HAL_DMA_Start_IT+0x1c0>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <HAL_DMA_Start_IT+0x1c2>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d036      	beq.n	8003d0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 021e 	bic.w	r2, r3, #30
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0216 	orr.w	r2, r2, #22
 8003cb0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d03e      	beq.n	8003d38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0208 	orr.w	r2, r2, #8
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e035      	b.n	8003d38 <HAL_DMA_Start_IT+0x260>
 8003ccc:	40020010 	.word	0x40020010
 8003cd0:	40020028 	.word	0x40020028
 8003cd4:	40020040 	.word	0x40020040
 8003cd8:	40020058 	.word	0x40020058
 8003cdc:	40020070 	.word	0x40020070
 8003ce0:	40020088 	.word	0x40020088
 8003ce4:	400200a0 	.word	0x400200a0
 8003ce8:	400200b8 	.word	0x400200b8
 8003cec:	40020410 	.word	0x40020410
 8003cf0:	40020428 	.word	0x40020428
 8003cf4:	40020440 	.word	0x40020440
 8003cf8:	40020458 	.word	0x40020458
 8003cfc:	40020470 	.word	0x40020470
 8003d00:	40020488 	.word	0x40020488
 8003d04:	400204a0 	.word	0x400204a0
 8003d08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 020e 	bic.w	r2, r3, #14
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 020a 	orr.w	r2, r2, #10
 8003d1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0204 	orr.w	r2, r2, #4
 8003d36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a83      	ldr	r2, [pc, #524]	; (8003f4c <HAL_DMA_Start_IT+0x474>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d072      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a82      	ldr	r2, [pc, #520]	; (8003f50 <HAL_DMA_Start_IT+0x478>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d06d      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a80      	ldr	r2, [pc, #512]	; (8003f54 <HAL_DMA_Start_IT+0x47c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d068      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a7f      	ldr	r2, [pc, #508]	; (8003f58 <HAL_DMA_Start_IT+0x480>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d063      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a7d      	ldr	r2, [pc, #500]	; (8003f5c <HAL_DMA_Start_IT+0x484>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d05e      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a7c      	ldr	r2, [pc, #496]	; (8003f60 <HAL_DMA_Start_IT+0x488>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d059      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a7a      	ldr	r2, [pc, #488]	; (8003f64 <HAL_DMA_Start_IT+0x48c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d054      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a79      	ldr	r2, [pc, #484]	; (8003f68 <HAL_DMA_Start_IT+0x490>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d04f      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a77      	ldr	r2, [pc, #476]	; (8003f6c <HAL_DMA_Start_IT+0x494>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d04a      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a76      	ldr	r2, [pc, #472]	; (8003f70 <HAL_DMA_Start_IT+0x498>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d045      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a74      	ldr	r2, [pc, #464]	; (8003f74 <HAL_DMA_Start_IT+0x49c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d040      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a73      	ldr	r2, [pc, #460]	; (8003f78 <HAL_DMA_Start_IT+0x4a0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d03b      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a71      	ldr	r2, [pc, #452]	; (8003f7c <HAL_DMA_Start_IT+0x4a4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d036      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a70      	ldr	r2, [pc, #448]	; (8003f80 <HAL_DMA_Start_IT+0x4a8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d031      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a6e      	ldr	r2, [pc, #440]	; (8003f84 <HAL_DMA_Start_IT+0x4ac>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d02c      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a6d      	ldr	r2, [pc, #436]	; (8003f88 <HAL_DMA_Start_IT+0x4b0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d027      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a6b      	ldr	r2, [pc, #428]	; (8003f8c <HAL_DMA_Start_IT+0x4b4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d022      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a6a      	ldr	r2, [pc, #424]	; (8003f90 <HAL_DMA_Start_IT+0x4b8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d01d      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a68      	ldr	r2, [pc, #416]	; (8003f94 <HAL_DMA_Start_IT+0x4bc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a67      	ldr	r2, [pc, #412]	; (8003f98 <HAL_DMA_Start_IT+0x4c0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a65      	ldr	r2, [pc, #404]	; (8003f9c <HAL_DMA_Start_IT+0x4c4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a64      	ldr	r2, [pc, #400]	; (8003fa0 <HAL_DMA_Start_IT+0x4c8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a62      	ldr	r2, [pc, #392]	; (8003fa4 <HAL_DMA_Start_IT+0x4cc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_DMA_Start_IT+0x350>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a61      	ldr	r2, [pc, #388]	; (8003fa8 <HAL_DMA_Start_IT+0x4d0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <HAL_DMA_Start_IT+0x354>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <HAL_DMA_Start_IT+0x356>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01a      	beq.n	8003e68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a37      	ldr	r2, [pc, #220]	; (8003f4c <HAL_DMA_Start_IT+0x474>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d04a      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a36      	ldr	r2, [pc, #216]	; (8003f50 <HAL_DMA_Start_IT+0x478>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d045      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a34      	ldr	r2, [pc, #208]	; (8003f54 <HAL_DMA_Start_IT+0x47c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d040      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a33      	ldr	r2, [pc, #204]	; (8003f58 <HAL_DMA_Start_IT+0x480>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d03b      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a31      	ldr	r2, [pc, #196]	; (8003f5c <HAL_DMA_Start_IT+0x484>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d036      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a30      	ldr	r2, [pc, #192]	; (8003f60 <HAL_DMA_Start_IT+0x488>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d031      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2e      	ldr	r2, [pc, #184]	; (8003f64 <HAL_DMA_Start_IT+0x48c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d02c      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2d      	ldr	r2, [pc, #180]	; (8003f68 <HAL_DMA_Start_IT+0x490>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d027      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2b      	ldr	r2, [pc, #172]	; (8003f6c <HAL_DMA_Start_IT+0x494>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d022      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2a      	ldr	r2, [pc, #168]	; (8003f70 <HAL_DMA_Start_IT+0x498>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d01d      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a28      	ldr	r2, [pc, #160]	; (8003f74 <HAL_DMA_Start_IT+0x49c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d018      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a27      	ldr	r2, [pc, #156]	; (8003f78 <HAL_DMA_Start_IT+0x4a0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d013      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a25      	ldr	r2, [pc, #148]	; (8003f7c <HAL_DMA_Start_IT+0x4a4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00e      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a24      	ldr	r2, [pc, #144]	; (8003f80 <HAL_DMA_Start_IT+0x4a8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d009      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <HAL_DMA_Start_IT+0x4ac>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <HAL_DMA_Start_IT+0x430>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <HAL_DMA_Start_IT+0x4b0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d108      	bne.n	8003f1a <HAL_DMA_Start_IT+0x442>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	e012      	b.n	8003f40 <HAL_DMA_Start_IT+0x468>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e009      	b.n	8003f40 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40020010 	.word	0x40020010
 8003f50:	40020028 	.word	0x40020028
 8003f54:	40020040 	.word	0x40020040
 8003f58:	40020058 	.word	0x40020058
 8003f5c:	40020070 	.word	0x40020070
 8003f60:	40020088 	.word	0x40020088
 8003f64:	400200a0 	.word	0x400200a0
 8003f68:	400200b8 	.word	0x400200b8
 8003f6c:	40020410 	.word	0x40020410
 8003f70:	40020428 	.word	0x40020428
 8003f74:	40020440 	.word	0x40020440
 8003f78:	40020458 	.word	0x40020458
 8003f7c:	40020470 	.word	0x40020470
 8003f80:	40020488 	.word	0x40020488
 8003f84:	400204a0 	.word	0x400204a0
 8003f88:	400204b8 	.word	0x400204b8
 8003f8c:	58025408 	.word	0x58025408
 8003f90:	5802541c 	.word	0x5802541c
 8003f94:	58025430 	.word	0x58025430
 8003f98:	58025444 	.word	0x58025444
 8003f9c:	58025458 	.word	0x58025458
 8003fa0:	5802546c 	.word	0x5802546c
 8003fa4:	58025480 	.word	0x58025480
 8003fa8:	58025494 	.word	0x58025494

08003fac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fb8:	4b67      	ldr	r3, [pc, #412]	; (8004158 <HAL_DMA_IRQHandler+0x1ac>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a67      	ldr	r2, [pc, #412]	; (800415c <HAL_DMA_IRQHandler+0x1b0>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	0a9b      	lsrs	r3, r3, #10
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a5f      	ldr	r2, [pc, #380]	; (8004160 <HAL_DMA_IRQHandler+0x1b4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d04a      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a5d      	ldr	r2, [pc, #372]	; (8004164 <HAL_DMA_IRQHandler+0x1b8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d045      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a5c      	ldr	r2, [pc, #368]	; (8004168 <HAL_DMA_IRQHandler+0x1bc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d040      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a5a      	ldr	r2, [pc, #360]	; (800416c <HAL_DMA_IRQHandler+0x1c0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d03b      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a59      	ldr	r2, [pc, #356]	; (8004170 <HAL_DMA_IRQHandler+0x1c4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d036      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a57      	ldr	r2, [pc, #348]	; (8004174 <HAL_DMA_IRQHandler+0x1c8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d031      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a56      	ldr	r2, [pc, #344]	; (8004178 <HAL_DMA_IRQHandler+0x1cc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d02c      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a54      	ldr	r2, [pc, #336]	; (800417c <HAL_DMA_IRQHandler+0x1d0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d027      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a53      	ldr	r2, [pc, #332]	; (8004180 <HAL_DMA_IRQHandler+0x1d4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d022      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a51      	ldr	r2, [pc, #324]	; (8004184 <HAL_DMA_IRQHandler+0x1d8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01d      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a50      	ldr	r2, [pc, #320]	; (8004188 <HAL_DMA_IRQHandler+0x1dc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d018      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a4e      	ldr	r2, [pc, #312]	; (800418c <HAL_DMA_IRQHandler+0x1e0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a4d      	ldr	r2, [pc, #308]	; (8004190 <HAL_DMA_IRQHandler+0x1e4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00e      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a4b      	ldr	r2, [pc, #300]	; (8004194 <HAL_DMA_IRQHandler+0x1e8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d009      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a4a      	ldr	r2, [pc, #296]	; (8004198 <HAL_DMA_IRQHandler+0x1ec>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d004      	beq.n	800407e <HAL_DMA_IRQHandler+0xd2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a48      	ldr	r2, [pc, #288]	; (800419c <HAL_DMA_IRQHandler+0x1f0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d101      	bne.n	8004082 <HAL_DMA_IRQHandler+0xd6>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <HAL_DMA_IRQHandler+0xd8>
 8004082:	2300      	movs	r3, #0
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 842b 	beq.w	80048e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	2208      	movs	r2, #8
 8004094:	409a      	lsls	r2, r3
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80a2 	beq.w	80041e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a2e      	ldr	r2, [pc, #184]	; (8004160 <HAL_DMA_IRQHandler+0x1b4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d04a      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2d      	ldr	r2, [pc, #180]	; (8004164 <HAL_DMA_IRQHandler+0x1b8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d045      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a2b      	ldr	r2, [pc, #172]	; (8004168 <HAL_DMA_IRQHandler+0x1bc>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d040      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2a      	ldr	r2, [pc, #168]	; (800416c <HAL_DMA_IRQHandler+0x1c0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d03b      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a28      	ldr	r2, [pc, #160]	; (8004170 <HAL_DMA_IRQHandler+0x1c4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d036      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a27      	ldr	r2, [pc, #156]	; (8004174 <HAL_DMA_IRQHandler+0x1c8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d031      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a25      	ldr	r2, [pc, #148]	; (8004178 <HAL_DMA_IRQHandler+0x1cc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d02c      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a24      	ldr	r2, [pc, #144]	; (800417c <HAL_DMA_IRQHandler+0x1d0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d027      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a22      	ldr	r2, [pc, #136]	; (8004180 <HAL_DMA_IRQHandler+0x1d4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d022      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a21      	ldr	r2, [pc, #132]	; (8004184 <HAL_DMA_IRQHandler+0x1d8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d01d      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <HAL_DMA_IRQHandler+0x1dc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d018      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1e      	ldr	r2, [pc, #120]	; (800418c <HAL_DMA_IRQHandler+0x1e0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <HAL_DMA_IRQHandler+0x1e4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00e      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <HAL_DMA_IRQHandler+0x1e8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d009      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a19      	ldr	r2, [pc, #100]	; (8004198 <HAL_DMA_IRQHandler+0x1ec>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_DMA_IRQHandler+0x194>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a18      	ldr	r2, [pc, #96]	; (800419c <HAL_DMA_IRQHandler+0x1f0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d12f      	bne.n	80041a0 <HAL_DMA_IRQHandler+0x1f4>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf14      	ite	ne
 800414e:	2301      	movne	r3, #1
 8004150:	2300      	moveq	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	e02e      	b.n	80041b4 <HAL_DMA_IRQHandler+0x208>
 8004156:	bf00      	nop
 8004158:	2400010c 	.word	0x2400010c
 800415c:	1b4e81b5 	.word	0x1b4e81b5
 8004160:	40020010 	.word	0x40020010
 8004164:	40020028 	.word	0x40020028
 8004168:	40020040 	.word	0x40020040
 800416c:	40020058 	.word	0x40020058
 8004170:	40020070 	.word	0x40020070
 8004174:	40020088 	.word	0x40020088
 8004178:	400200a0 	.word	0x400200a0
 800417c:	400200b8 	.word	0x400200b8
 8004180:	40020410 	.word	0x40020410
 8004184:	40020428 	.word	0x40020428
 8004188:	40020440 	.word	0x40020440
 800418c:	40020458 	.word	0x40020458
 8004190:	40020470 	.word	0x40020470
 8004194:	40020488 	.word	0x40020488
 8004198:	400204a0 	.word	0x400204a0
 800419c:	400204b8 	.word	0x400204b8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bf14      	ite	ne
 80041ae:	2301      	movne	r3, #1
 80041b0:	2300      	moveq	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0204 	bic.w	r2, r2, #4
 80041c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	2208      	movs	r2, #8
 80041d2:	409a      	lsls	r2, r3
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041dc:	f043 0201 	orr.w	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	fa22 f303 	lsr.w	r3, r2, r3
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d06e      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a69      	ldr	r2, [pc, #420]	; (80043a4 <HAL_DMA_IRQHandler+0x3f8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d04a      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a67      	ldr	r2, [pc, #412]	; (80043a8 <HAL_DMA_IRQHandler+0x3fc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d045      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a66      	ldr	r2, [pc, #408]	; (80043ac <HAL_DMA_IRQHandler+0x400>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d040      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a64      	ldr	r2, [pc, #400]	; (80043b0 <HAL_DMA_IRQHandler+0x404>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d03b      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a63      	ldr	r2, [pc, #396]	; (80043b4 <HAL_DMA_IRQHandler+0x408>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d036      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a61      	ldr	r2, [pc, #388]	; (80043b8 <HAL_DMA_IRQHandler+0x40c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d031      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a60      	ldr	r2, [pc, #384]	; (80043bc <HAL_DMA_IRQHandler+0x410>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d02c      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a5e      	ldr	r2, [pc, #376]	; (80043c0 <HAL_DMA_IRQHandler+0x414>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d027      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a5d      	ldr	r2, [pc, #372]	; (80043c4 <HAL_DMA_IRQHandler+0x418>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d022      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a5b      	ldr	r2, [pc, #364]	; (80043c8 <HAL_DMA_IRQHandler+0x41c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01d      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a5a      	ldr	r2, [pc, #360]	; (80043cc <HAL_DMA_IRQHandler+0x420>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d018      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a58      	ldr	r2, [pc, #352]	; (80043d0 <HAL_DMA_IRQHandler+0x424>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a57      	ldr	r2, [pc, #348]	; (80043d4 <HAL_DMA_IRQHandler+0x428>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00e      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a55      	ldr	r2, [pc, #340]	; (80043d8 <HAL_DMA_IRQHandler+0x42c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d009      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a54      	ldr	r2, [pc, #336]	; (80043dc <HAL_DMA_IRQHandler+0x430>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <HAL_DMA_IRQHandler+0x2ee>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a52      	ldr	r2, [pc, #328]	; (80043e0 <HAL_DMA_IRQHandler+0x434>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d10a      	bne.n	80042b0 <HAL_DMA_IRQHandler+0x304>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	e003      	b.n	80042b8 <HAL_DMA_IRQHandler+0x30c>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2300      	movs	r3, #0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00d      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2201      	movs	r2, #1
 80042c6:	409a      	lsls	r2, r3
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	f043 0202 	orr.w	r2, r3, #2
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	2204      	movs	r2, #4
 80042e2:	409a      	lsls	r2, r3
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 808f 	beq.w	800440c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2c      	ldr	r2, [pc, #176]	; (80043a4 <HAL_DMA_IRQHandler+0x3f8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d04a      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a2a      	ldr	r2, [pc, #168]	; (80043a8 <HAL_DMA_IRQHandler+0x3fc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d045      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a29      	ldr	r2, [pc, #164]	; (80043ac <HAL_DMA_IRQHandler+0x400>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d040      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a27      	ldr	r2, [pc, #156]	; (80043b0 <HAL_DMA_IRQHandler+0x404>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d03b      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a26      	ldr	r2, [pc, #152]	; (80043b4 <HAL_DMA_IRQHandler+0x408>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d036      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a24      	ldr	r2, [pc, #144]	; (80043b8 <HAL_DMA_IRQHandler+0x40c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d031      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a23      	ldr	r2, [pc, #140]	; (80043bc <HAL_DMA_IRQHandler+0x410>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d02c      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a21      	ldr	r2, [pc, #132]	; (80043c0 <HAL_DMA_IRQHandler+0x414>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d027      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a20      	ldr	r2, [pc, #128]	; (80043c4 <HAL_DMA_IRQHandler+0x418>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d022      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1e      	ldr	r2, [pc, #120]	; (80043c8 <HAL_DMA_IRQHandler+0x41c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d01d      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <HAL_DMA_IRQHandler+0x420>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d018      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <HAL_DMA_IRQHandler+0x424>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1a      	ldr	r2, [pc, #104]	; (80043d4 <HAL_DMA_IRQHandler+0x428>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00e      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a18      	ldr	r2, [pc, #96]	; (80043d8 <HAL_DMA_IRQHandler+0x42c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d009      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a17      	ldr	r2, [pc, #92]	; (80043dc <HAL_DMA_IRQHandler+0x430>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d004      	beq.n	800438e <HAL_DMA_IRQHandler+0x3e2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <HAL_DMA_IRQHandler+0x434>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d12a      	bne.n	80043e4 <HAL_DMA_IRQHandler+0x438>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	bf14      	ite	ne
 800439c:	2301      	movne	r3, #1
 800439e:	2300      	moveq	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e023      	b.n	80043ec <HAL_DMA_IRQHandler+0x440>
 80043a4:	40020010 	.word	0x40020010
 80043a8:	40020028 	.word	0x40020028
 80043ac:	40020040 	.word	0x40020040
 80043b0:	40020058 	.word	0x40020058
 80043b4:	40020070 	.word	0x40020070
 80043b8:	40020088 	.word	0x40020088
 80043bc:	400200a0 	.word	0x400200a0
 80043c0:	400200b8 	.word	0x400200b8
 80043c4:	40020410 	.word	0x40020410
 80043c8:	40020428 	.word	0x40020428
 80043cc:	40020440 	.word	0x40020440
 80043d0:	40020458 	.word	0x40020458
 80043d4:	40020470 	.word	0x40020470
 80043d8:	40020488 	.word	0x40020488
 80043dc:	400204a0 	.word	0x400204a0
 80043e0:	400204b8 	.word	0x400204b8
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2300      	movs	r3, #0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00d      	beq.n	800440c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	2204      	movs	r2, #4
 80043fa:	409a      	lsls	r2, r3
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	f043 0204 	orr.w	r2, r3, #4
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2210      	movs	r2, #16
 8004416:	409a      	lsls	r2, r3
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a6 	beq.w	800456e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a85      	ldr	r2, [pc, #532]	; (800463c <HAL_DMA_IRQHandler+0x690>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d04a      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a83      	ldr	r2, [pc, #524]	; (8004640 <HAL_DMA_IRQHandler+0x694>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d045      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a82      	ldr	r2, [pc, #520]	; (8004644 <HAL_DMA_IRQHandler+0x698>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d040      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a80      	ldr	r2, [pc, #512]	; (8004648 <HAL_DMA_IRQHandler+0x69c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d03b      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a7f      	ldr	r2, [pc, #508]	; (800464c <HAL_DMA_IRQHandler+0x6a0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d036      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a7d      	ldr	r2, [pc, #500]	; (8004650 <HAL_DMA_IRQHandler+0x6a4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d031      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a7c      	ldr	r2, [pc, #496]	; (8004654 <HAL_DMA_IRQHandler+0x6a8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d02c      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a7a      	ldr	r2, [pc, #488]	; (8004658 <HAL_DMA_IRQHandler+0x6ac>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d027      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a79      	ldr	r2, [pc, #484]	; (800465c <HAL_DMA_IRQHandler+0x6b0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d022      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a77      	ldr	r2, [pc, #476]	; (8004660 <HAL_DMA_IRQHandler+0x6b4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01d      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a76      	ldr	r2, [pc, #472]	; (8004664 <HAL_DMA_IRQHandler+0x6b8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d018      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a74      	ldr	r2, [pc, #464]	; (8004668 <HAL_DMA_IRQHandler+0x6bc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a73      	ldr	r2, [pc, #460]	; (800466c <HAL_DMA_IRQHandler+0x6c0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00e      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a71      	ldr	r2, [pc, #452]	; (8004670 <HAL_DMA_IRQHandler+0x6c4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d009      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a70      	ldr	r2, [pc, #448]	; (8004674 <HAL_DMA_IRQHandler+0x6c8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x516>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a6e      	ldr	r2, [pc, #440]	; (8004678 <HAL_DMA_IRQHandler+0x6cc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d10a      	bne.n	80044d8 <HAL_DMA_IRQHandler+0x52c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf14      	ite	ne
 80044d0:	2301      	movne	r3, #1
 80044d2:	2300      	moveq	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	e009      	b.n	80044ec <HAL_DMA_IRQHandler+0x540>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bf14      	ite	ne
 80044e6:	2301      	movne	r3, #1
 80044e8:	2300      	moveq	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d03e      	beq.n	800456e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	2210      	movs	r2, #16
 80044fa:	409a      	lsls	r2, r3
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d018      	beq.n	8004540 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d108      	bne.n	800452e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d024      	beq.n	800456e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	4798      	blx	r3
 800452c:	e01f      	b.n	800456e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01b      	beq.n	800456e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4798      	blx	r3
 800453e:	e016      	b.n	800456e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454a:	2b00      	cmp	r3, #0
 800454c:	d107      	bne.n	800455e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0208 	bic.w	r2, r2, #8
 800455c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2220      	movs	r2, #32
 8004578:	409a      	lsls	r2, r3
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8110 	beq.w	80047a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2c      	ldr	r2, [pc, #176]	; (800463c <HAL_DMA_IRQHandler+0x690>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d04a      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a2b      	ldr	r2, [pc, #172]	; (8004640 <HAL_DMA_IRQHandler+0x694>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d045      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a29      	ldr	r2, [pc, #164]	; (8004644 <HAL_DMA_IRQHandler+0x698>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d040      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a28      	ldr	r2, [pc, #160]	; (8004648 <HAL_DMA_IRQHandler+0x69c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d03b      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a26      	ldr	r2, [pc, #152]	; (800464c <HAL_DMA_IRQHandler+0x6a0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d036      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a25      	ldr	r2, [pc, #148]	; (8004650 <HAL_DMA_IRQHandler+0x6a4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d031      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a23      	ldr	r2, [pc, #140]	; (8004654 <HAL_DMA_IRQHandler+0x6a8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d02c      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a22      	ldr	r2, [pc, #136]	; (8004658 <HAL_DMA_IRQHandler+0x6ac>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d027      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a20      	ldr	r2, [pc, #128]	; (800465c <HAL_DMA_IRQHandler+0x6b0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d022      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <HAL_DMA_IRQHandler+0x6b4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d01d      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <HAL_DMA_IRQHandler+0x6b8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d018      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <HAL_DMA_IRQHandler+0x6bc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d013      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1a      	ldr	r2, [pc, #104]	; (800466c <HAL_DMA_IRQHandler+0x6c0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00e      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a19      	ldr	r2, [pc, #100]	; (8004670 <HAL_DMA_IRQHandler+0x6c4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d009      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a17      	ldr	r2, [pc, #92]	; (8004674 <HAL_DMA_IRQHandler+0x6c8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_DMA_IRQHandler+0x678>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a16      	ldr	r2, [pc, #88]	; (8004678 <HAL_DMA_IRQHandler+0x6cc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d12b      	bne.n	800467c <HAL_DMA_IRQHandler+0x6d0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	2b00      	cmp	r3, #0
 8004630:	bf14      	ite	ne
 8004632:	2301      	movne	r3, #1
 8004634:	2300      	moveq	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	e02a      	b.n	8004690 <HAL_DMA_IRQHandler+0x6e4>
 800463a:	bf00      	nop
 800463c:	40020010 	.word	0x40020010
 8004640:	40020028 	.word	0x40020028
 8004644:	40020040 	.word	0x40020040
 8004648:	40020058 	.word	0x40020058
 800464c:	40020070 	.word	0x40020070
 8004650:	40020088 	.word	0x40020088
 8004654:	400200a0 	.word	0x400200a0
 8004658:	400200b8 	.word	0x400200b8
 800465c:	40020410 	.word	0x40020410
 8004660:	40020428 	.word	0x40020428
 8004664:	40020440 	.word	0x40020440
 8004668:	40020458 	.word	0x40020458
 800466c:	40020470 	.word	0x40020470
 8004670:	40020488 	.word	0x40020488
 8004674:	400204a0 	.word	0x400204a0
 8004678:	400204b8 	.word	0x400204b8
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	bf14      	ite	ne
 800468a:	2301      	movne	r3, #1
 800468c:	2300      	moveq	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8087 	beq.w	80047a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	2220      	movs	r2, #32
 80046a0:	409a      	lsls	r2, r3
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d139      	bne.n	8004726 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0216 	bic.w	r2, r2, #22
 80046c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695a      	ldr	r2, [r3, #20]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d103      	bne.n	80046e2 <HAL_DMA_IRQHandler+0x736>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0208 	bic.w	r2, r2, #8
 80046f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	223f      	movs	r2, #63	; 0x3f
 80046fc:	409a      	lsls	r2, r3
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 834a 	beq.w	8004db0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	4798      	blx	r3
          }
          return;
 8004724:	e344      	b.n	8004db0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d018      	beq.n	8004766 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	2b00      	cmp	r3, #0
 8004748:	d02c      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	4798      	blx	r3
 8004752:	e027      	b.n	80047a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d023      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	4798      	blx	r3
 8004764:	e01e      	b.n	80047a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10f      	bne.n	8004794 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0210 	bic.w	r2, r2, #16
 8004782:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8306 	beq.w	8004dba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8088 	beq.w	80048cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2204      	movs	r2, #4
 80047c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a7a      	ldr	r2, [pc, #488]	; (80049b4 <HAL_DMA_IRQHandler+0xa08>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d04a      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a79      	ldr	r2, [pc, #484]	; (80049b8 <HAL_DMA_IRQHandler+0xa0c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d045      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a77      	ldr	r2, [pc, #476]	; (80049bc <HAL_DMA_IRQHandler+0xa10>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d040      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a76      	ldr	r2, [pc, #472]	; (80049c0 <HAL_DMA_IRQHandler+0xa14>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d03b      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a74      	ldr	r2, [pc, #464]	; (80049c4 <HAL_DMA_IRQHandler+0xa18>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d036      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a73      	ldr	r2, [pc, #460]	; (80049c8 <HAL_DMA_IRQHandler+0xa1c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d031      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a71      	ldr	r2, [pc, #452]	; (80049cc <HAL_DMA_IRQHandler+0xa20>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d02c      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a70      	ldr	r2, [pc, #448]	; (80049d0 <HAL_DMA_IRQHandler+0xa24>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d027      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a6e      	ldr	r2, [pc, #440]	; (80049d4 <HAL_DMA_IRQHandler+0xa28>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d022      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6d      	ldr	r2, [pc, #436]	; (80049d8 <HAL_DMA_IRQHandler+0xa2c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d01d      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a6b      	ldr	r2, [pc, #428]	; (80049dc <HAL_DMA_IRQHandler+0xa30>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d018      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a6a      	ldr	r2, [pc, #424]	; (80049e0 <HAL_DMA_IRQHandler+0xa34>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d013      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a68      	ldr	r2, [pc, #416]	; (80049e4 <HAL_DMA_IRQHandler+0xa38>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00e      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a67      	ldr	r2, [pc, #412]	; (80049e8 <HAL_DMA_IRQHandler+0xa3c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d009      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a65      	ldr	r2, [pc, #404]	; (80049ec <HAL_DMA_IRQHandler+0xa40>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_DMA_IRQHandler+0x8b8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a64      	ldr	r2, [pc, #400]	; (80049f0 <HAL_DMA_IRQHandler+0xa44>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d108      	bne.n	8004876 <HAL_DMA_IRQHandler+0x8ca>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e007      	b.n	8004886 <HAL_DMA_IRQHandler+0x8da>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3301      	adds	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488e:	429a      	cmp	r2, r3
 8004890:	d307      	bcc.n	80048a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f2      	bne.n	8004886 <HAL_DMA_IRQHandler+0x8da>
 80048a0:	e000      	b.n	80048a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80048a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d004      	beq.n	80048bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2203      	movs	r2, #3
 80048b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80048ba:	e003      	b.n	80048c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 8272 	beq.w	8004dba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	4798      	blx	r3
 80048de:	e26c      	b.n	8004dba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a43      	ldr	r2, [pc, #268]	; (80049f4 <HAL_DMA_IRQHandler+0xa48>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d022      	beq.n	8004930 <HAL_DMA_IRQHandler+0x984>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a42      	ldr	r2, [pc, #264]	; (80049f8 <HAL_DMA_IRQHandler+0xa4c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d01d      	beq.n	8004930 <HAL_DMA_IRQHandler+0x984>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a40      	ldr	r2, [pc, #256]	; (80049fc <HAL_DMA_IRQHandler+0xa50>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d018      	beq.n	8004930 <HAL_DMA_IRQHandler+0x984>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a3f      	ldr	r2, [pc, #252]	; (8004a00 <HAL_DMA_IRQHandler+0xa54>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d013      	beq.n	8004930 <HAL_DMA_IRQHandler+0x984>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a3d      	ldr	r2, [pc, #244]	; (8004a04 <HAL_DMA_IRQHandler+0xa58>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00e      	beq.n	8004930 <HAL_DMA_IRQHandler+0x984>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a3c      	ldr	r2, [pc, #240]	; (8004a08 <HAL_DMA_IRQHandler+0xa5c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d009      	beq.n	8004930 <HAL_DMA_IRQHandler+0x984>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a3a      	ldr	r2, [pc, #232]	; (8004a0c <HAL_DMA_IRQHandler+0xa60>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <HAL_DMA_IRQHandler+0x984>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a39      	ldr	r2, [pc, #228]	; (8004a10 <HAL_DMA_IRQHandler+0xa64>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d101      	bne.n	8004934 <HAL_DMA_IRQHandler+0x988>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <HAL_DMA_IRQHandler+0x98a>
 8004934:	2300      	movs	r3, #0
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 823f 	beq.w	8004dba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004948:	f003 031f 	and.w	r3, r3, #31
 800494c:	2204      	movs	r2, #4
 800494e:	409a      	lsls	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80cd 	beq.w	8004af4 <HAL_DMA_IRQHandler+0xb48>
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80c7 	beq.w	8004af4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	2204      	movs	r2, #4
 8004970:	409a      	lsls	r2, r3
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d049      	beq.n	8004a14 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8210 	beq.w	8004db4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800499c:	e20a      	b.n	8004db4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8206 	beq.w	8004db4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049b0:	e200      	b.n	8004db4 <HAL_DMA_IRQHandler+0xe08>
 80049b2:	bf00      	nop
 80049b4:	40020010 	.word	0x40020010
 80049b8:	40020028 	.word	0x40020028
 80049bc:	40020040 	.word	0x40020040
 80049c0:	40020058 	.word	0x40020058
 80049c4:	40020070 	.word	0x40020070
 80049c8:	40020088 	.word	0x40020088
 80049cc:	400200a0 	.word	0x400200a0
 80049d0:	400200b8 	.word	0x400200b8
 80049d4:	40020410 	.word	0x40020410
 80049d8:	40020428 	.word	0x40020428
 80049dc:	40020440 	.word	0x40020440
 80049e0:	40020458 	.word	0x40020458
 80049e4:	40020470 	.word	0x40020470
 80049e8:	40020488 	.word	0x40020488
 80049ec:	400204a0 	.word	0x400204a0
 80049f0:	400204b8 	.word	0x400204b8
 80049f4:	58025408 	.word	0x58025408
 80049f8:	5802541c 	.word	0x5802541c
 80049fc:	58025430 	.word	0x58025430
 8004a00:	58025444 	.word	0x58025444
 8004a04:	58025458 	.word	0x58025458
 8004a08:	5802546c 	.word	0x5802546c
 8004a0c:	58025480 	.word	0x58025480
 8004a10:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d160      	bne.n	8004ae0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a7f      	ldr	r2, [pc, #508]	; (8004c20 <HAL_DMA_IRQHandler+0xc74>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d04a      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a7d      	ldr	r2, [pc, #500]	; (8004c24 <HAL_DMA_IRQHandler+0xc78>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d045      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a7c      	ldr	r2, [pc, #496]	; (8004c28 <HAL_DMA_IRQHandler+0xc7c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d040      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a7a      	ldr	r2, [pc, #488]	; (8004c2c <HAL_DMA_IRQHandler+0xc80>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d03b      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a79      	ldr	r2, [pc, #484]	; (8004c30 <HAL_DMA_IRQHandler+0xc84>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d036      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a77      	ldr	r2, [pc, #476]	; (8004c34 <HAL_DMA_IRQHandler+0xc88>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d031      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a76      	ldr	r2, [pc, #472]	; (8004c38 <HAL_DMA_IRQHandler+0xc8c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d02c      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a74      	ldr	r2, [pc, #464]	; (8004c3c <HAL_DMA_IRQHandler+0xc90>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d027      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a73      	ldr	r2, [pc, #460]	; (8004c40 <HAL_DMA_IRQHandler+0xc94>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d022      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a71      	ldr	r2, [pc, #452]	; (8004c44 <HAL_DMA_IRQHandler+0xc98>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01d      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a70      	ldr	r2, [pc, #448]	; (8004c48 <HAL_DMA_IRQHandler+0xc9c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d018      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a6e      	ldr	r2, [pc, #440]	; (8004c4c <HAL_DMA_IRQHandler+0xca0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a6d      	ldr	r2, [pc, #436]	; (8004c50 <HAL_DMA_IRQHandler+0xca4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a6b      	ldr	r2, [pc, #428]	; (8004c54 <HAL_DMA_IRQHandler+0xca8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a6a      	ldr	r2, [pc, #424]	; (8004c58 <HAL_DMA_IRQHandler+0xcac>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_DMA_IRQHandler+0xb12>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a68      	ldr	r2, [pc, #416]	; (8004c5c <HAL_DMA_IRQHandler+0xcb0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d108      	bne.n	8004ad0 <HAL_DMA_IRQHandler+0xb24>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0208 	bic.w	r2, r2, #8
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e007      	b.n	8004ae0 <HAL_DMA_IRQHandler+0xb34>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0204 	bic.w	r2, r2, #4
 8004ade:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8165 	beq.w	8004db4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004af2:	e15f      	b.n	8004db4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	2202      	movs	r2, #2
 8004afe:	409a      	lsls	r2, r3
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80c5 	beq.w	8004c94 <HAL_DMA_IRQHandler+0xce8>
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 80bf 	beq.w	8004c94 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	2202      	movs	r2, #2
 8004b20:	409a      	lsls	r2, r3
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d018      	beq.n	8004b62 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 813a 	beq.w	8004db8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b4c:	e134      	b.n	8004db8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 8130 	beq.w	8004db8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b60:	e12a      	b.n	8004db8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f040 8089 	bne.w	8004c80 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a2b      	ldr	r2, [pc, #172]	; (8004c20 <HAL_DMA_IRQHandler+0xc74>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d04a      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a29      	ldr	r2, [pc, #164]	; (8004c24 <HAL_DMA_IRQHandler+0xc78>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d045      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a28      	ldr	r2, [pc, #160]	; (8004c28 <HAL_DMA_IRQHandler+0xc7c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d040      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a26      	ldr	r2, [pc, #152]	; (8004c2c <HAL_DMA_IRQHandler+0xc80>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d03b      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a25      	ldr	r2, [pc, #148]	; (8004c30 <HAL_DMA_IRQHandler+0xc84>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d036      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a23      	ldr	r2, [pc, #140]	; (8004c34 <HAL_DMA_IRQHandler+0xc88>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d031      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a22      	ldr	r2, [pc, #136]	; (8004c38 <HAL_DMA_IRQHandler+0xc8c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d02c      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a20      	ldr	r2, [pc, #128]	; (8004c3c <HAL_DMA_IRQHandler+0xc90>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d027      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1f      	ldr	r2, [pc, #124]	; (8004c40 <HAL_DMA_IRQHandler+0xc94>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d022      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <HAL_DMA_IRQHandler+0xc98>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01d      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1c      	ldr	r2, [pc, #112]	; (8004c48 <HAL_DMA_IRQHandler+0xc9c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d018      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1a      	ldr	r2, [pc, #104]	; (8004c4c <HAL_DMA_IRQHandler+0xca0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a19      	ldr	r2, [pc, #100]	; (8004c50 <HAL_DMA_IRQHandler+0xca4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00e      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <HAL_DMA_IRQHandler+0xca8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a16      	ldr	r2, [pc, #88]	; (8004c58 <HAL_DMA_IRQHandler+0xcac>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d004      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xc62>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a14      	ldr	r2, [pc, #80]	; (8004c5c <HAL_DMA_IRQHandler+0xcb0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d128      	bne.n	8004c60 <HAL_DMA_IRQHandler+0xcb4>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0214 	bic.w	r2, r2, #20
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	e027      	b.n	8004c70 <HAL_DMA_IRQHandler+0xcc4>
 8004c20:	40020010 	.word	0x40020010
 8004c24:	40020028 	.word	0x40020028
 8004c28:	40020040 	.word	0x40020040
 8004c2c:	40020058 	.word	0x40020058
 8004c30:	40020070 	.word	0x40020070
 8004c34:	40020088 	.word	0x40020088
 8004c38:	400200a0 	.word	0x400200a0
 8004c3c:	400200b8 	.word	0x400200b8
 8004c40:	40020410 	.word	0x40020410
 8004c44:	40020428 	.word	0x40020428
 8004c48:	40020440 	.word	0x40020440
 8004c4c:	40020458 	.word	0x40020458
 8004c50:	40020470 	.word	0x40020470
 8004c54:	40020488 	.word	0x40020488
 8004c58:	400204a0 	.word	0x400204a0
 8004c5c:	400204b8 	.word	0x400204b8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 020a 	bic.w	r2, r2, #10
 8004c6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8097 	beq.w	8004db8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c92:	e091      	b.n	8004db8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	2208      	movs	r2, #8
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8088 	beq.w	8004dba <HAL_DMA_IRQHandler+0xe0e>
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8082 	beq.w	8004dba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a41      	ldr	r2, [pc, #260]	; (8004dc0 <HAL_DMA_IRQHandler+0xe14>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d04a      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a3f      	ldr	r2, [pc, #252]	; (8004dc4 <HAL_DMA_IRQHandler+0xe18>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d045      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a3e      	ldr	r2, [pc, #248]	; (8004dc8 <HAL_DMA_IRQHandler+0xe1c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d040      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a3c      	ldr	r2, [pc, #240]	; (8004dcc <HAL_DMA_IRQHandler+0xe20>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d03b      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a3b      	ldr	r2, [pc, #236]	; (8004dd0 <HAL_DMA_IRQHandler+0xe24>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d036      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a39      	ldr	r2, [pc, #228]	; (8004dd4 <HAL_DMA_IRQHandler+0xe28>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d031      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a38      	ldr	r2, [pc, #224]	; (8004dd8 <HAL_DMA_IRQHandler+0xe2c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d02c      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a36      	ldr	r2, [pc, #216]	; (8004ddc <HAL_DMA_IRQHandler+0xe30>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d027      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a35      	ldr	r2, [pc, #212]	; (8004de0 <HAL_DMA_IRQHandler+0xe34>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d022      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a33      	ldr	r2, [pc, #204]	; (8004de4 <HAL_DMA_IRQHandler+0xe38>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d01d      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a32      	ldr	r2, [pc, #200]	; (8004de8 <HAL_DMA_IRQHandler+0xe3c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d018      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a30      	ldr	r2, [pc, #192]	; (8004dec <HAL_DMA_IRQHandler+0xe40>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a2f      	ldr	r2, [pc, #188]	; (8004df0 <HAL_DMA_IRQHandler+0xe44>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00e      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a2d      	ldr	r2, [pc, #180]	; (8004df4 <HAL_DMA_IRQHandler+0xe48>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2c      	ldr	r2, [pc, #176]	; (8004df8 <HAL_DMA_IRQHandler+0xe4c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xdaa>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a2a      	ldr	r2, [pc, #168]	; (8004dfc <HAL_DMA_IRQHandler+0xe50>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d108      	bne.n	8004d68 <HAL_DMA_IRQHandler+0xdbc>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 021c 	bic.w	r2, r2, #28
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e007      	b.n	8004d78 <HAL_DMA_IRQHandler+0xdcc>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 020e 	bic.w	r2, r2, #14
 8004d76:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	2201      	movs	r2, #1
 8004d82:	409a      	lsls	r2, r3
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	4798      	blx	r3
 8004dae:	e004      	b.n	8004dba <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004db0:	bf00      	nop
 8004db2:	e002      	b.n	8004dba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004db4:	bf00      	nop
 8004db6:	e000      	b.n	8004dba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004db8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004dba:	3728      	adds	r7, #40	; 0x28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40020010 	.word	0x40020010
 8004dc4:	40020028 	.word	0x40020028
 8004dc8:	40020040 	.word	0x40020040
 8004dcc:	40020058 	.word	0x40020058
 8004dd0:	40020070 	.word	0x40020070
 8004dd4:	40020088 	.word	0x40020088
 8004dd8:	400200a0 	.word	0x400200a0
 8004ddc:	400200b8 	.word	0x400200b8
 8004de0:	40020410 	.word	0x40020410
 8004de4:	40020428 	.word	0x40020428
 8004de8:	40020440 	.word	0x40020440
 8004dec:	40020458 	.word	0x40020458
 8004df0:	40020470 	.word	0x40020470
 8004df4:	40020488 	.word	0x40020488
 8004df8:	400204a0 	.word	0x400204a0
 8004dfc:	400204b8 	.word	0x400204b8

08004e00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e12:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e18:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a7f      	ldr	r2, [pc, #508]	; (800501c <DMA_SetConfig+0x21c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d072      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a7d      	ldr	r2, [pc, #500]	; (8005020 <DMA_SetConfig+0x220>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d06d      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a7c      	ldr	r2, [pc, #496]	; (8005024 <DMA_SetConfig+0x224>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d068      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a7a      	ldr	r2, [pc, #488]	; (8005028 <DMA_SetConfig+0x228>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d063      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a79      	ldr	r2, [pc, #484]	; (800502c <DMA_SetConfig+0x22c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d05e      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a77      	ldr	r2, [pc, #476]	; (8005030 <DMA_SetConfig+0x230>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d059      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a76      	ldr	r2, [pc, #472]	; (8005034 <DMA_SetConfig+0x234>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d054      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a74      	ldr	r2, [pc, #464]	; (8005038 <DMA_SetConfig+0x238>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d04f      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a73      	ldr	r2, [pc, #460]	; (800503c <DMA_SetConfig+0x23c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d04a      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a71      	ldr	r2, [pc, #452]	; (8005040 <DMA_SetConfig+0x240>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d045      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a70      	ldr	r2, [pc, #448]	; (8005044 <DMA_SetConfig+0x244>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d040      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a6e      	ldr	r2, [pc, #440]	; (8005048 <DMA_SetConfig+0x248>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d03b      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a6d      	ldr	r2, [pc, #436]	; (800504c <DMA_SetConfig+0x24c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d036      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a6b      	ldr	r2, [pc, #428]	; (8005050 <DMA_SetConfig+0x250>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d031      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a6a      	ldr	r2, [pc, #424]	; (8005054 <DMA_SetConfig+0x254>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d02c      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a68      	ldr	r2, [pc, #416]	; (8005058 <DMA_SetConfig+0x258>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d027      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a67      	ldr	r2, [pc, #412]	; (800505c <DMA_SetConfig+0x25c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d022      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a65      	ldr	r2, [pc, #404]	; (8005060 <DMA_SetConfig+0x260>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d01d      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a64      	ldr	r2, [pc, #400]	; (8005064 <DMA_SetConfig+0x264>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d018      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a62      	ldr	r2, [pc, #392]	; (8005068 <DMA_SetConfig+0x268>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a61      	ldr	r2, [pc, #388]	; (800506c <DMA_SetConfig+0x26c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00e      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a5f      	ldr	r2, [pc, #380]	; (8005070 <DMA_SetConfig+0x270>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d009      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a5e      	ldr	r2, [pc, #376]	; (8005074 <DMA_SetConfig+0x274>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d004      	beq.n	8004f0a <DMA_SetConfig+0x10a>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a5c      	ldr	r2, [pc, #368]	; (8005078 <DMA_SetConfig+0x278>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <DMA_SetConfig+0x10e>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <DMA_SetConfig+0x110>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00d      	beq.n	8004f30 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f1c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d004      	beq.n	8004f30 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f2e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a39      	ldr	r2, [pc, #228]	; (800501c <DMA_SetConfig+0x21c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d04a      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a38      	ldr	r2, [pc, #224]	; (8005020 <DMA_SetConfig+0x220>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d045      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a36      	ldr	r2, [pc, #216]	; (8005024 <DMA_SetConfig+0x224>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d040      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a35      	ldr	r2, [pc, #212]	; (8005028 <DMA_SetConfig+0x228>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d03b      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a33      	ldr	r2, [pc, #204]	; (800502c <DMA_SetConfig+0x22c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d036      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a32      	ldr	r2, [pc, #200]	; (8005030 <DMA_SetConfig+0x230>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d031      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a30      	ldr	r2, [pc, #192]	; (8005034 <DMA_SetConfig+0x234>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d02c      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a2f      	ldr	r2, [pc, #188]	; (8005038 <DMA_SetConfig+0x238>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d027      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a2d      	ldr	r2, [pc, #180]	; (800503c <DMA_SetConfig+0x23c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d022      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a2c      	ldr	r2, [pc, #176]	; (8005040 <DMA_SetConfig+0x240>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d01d      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <DMA_SetConfig+0x244>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d018      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a29      	ldr	r2, [pc, #164]	; (8005048 <DMA_SetConfig+0x248>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d013      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a27      	ldr	r2, [pc, #156]	; (800504c <DMA_SetConfig+0x24c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00e      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a26      	ldr	r2, [pc, #152]	; (8005050 <DMA_SetConfig+0x250>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d009      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a24      	ldr	r2, [pc, #144]	; (8005054 <DMA_SetConfig+0x254>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <DMA_SetConfig+0x1d0>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a23      	ldr	r2, [pc, #140]	; (8005058 <DMA_SetConfig+0x258>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d101      	bne.n	8004fd4 <DMA_SetConfig+0x1d4>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <DMA_SetConfig+0x1d6>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d059      	beq.n	800508e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	223f      	movs	r2, #63	; 0x3f
 8004fe4:	409a      	lsls	r2, r3
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ff8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b40      	cmp	r3, #64	; 0x40
 8005008:	d138      	bne.n	800507c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800501a:	e086      	b.n	800512a <DMA_SetConfig+0x32a>
 800501c:	40020010 	.word	0x40020010
 8005020:	40020028 	.word	0x40020028
 8005024:	40020040 	.word	0x40020040
 8005028:	40020058 	.word	0x40020058
 800502c:	40020070 	.word	0x40020070
 8005030:	40020088 	.word	0x40020088
 8005034:	400200a0 	.word	0x400200a0
 8005038:	400200b8 	.word	0x400200b8
 800503c:	40020410 	.word	0x40020410
 8005040:	40020428 	.word	0x40020428
 8005044:	40020440 	.word	0x40020440
 8005048:	40020458 	.word	0x40020458
 800504c:	40020470 	.word	0x40020470
 8005050:	40020488 	.word	0x40020488
 8005054:	400204a0 	.word	0x400204a0
 8005058:	400204b8 	.word	0x400204b8
 800505c:	58025408 	.word	0x58025408
 8005060:	5802541c 	.word	0x5802541c
 8005064:	58025430 	.word	0x58025430
 8005068:	58025444 	.word	0x58025444
 800506c:	58025458 	.word	0x58025458
 8005070:	5802546c 	.word	0x5802546c
 8005074:	58025480 	.word	0x58025480
 8005078:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]
}
 800508c:	e04d      	b.n	800512a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a29      	ldr	r2, [pc, #164]	; (8005138 <DMA_SetConfig+0x338>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d022      	beq.n	80050de <DMA_SetConfig+0x2de>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a27      	ldr	r2, [pc, #156]	; (800513c <DMA_SetConfig+0x33c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01d      	beq.n	80050de <DMA_SetConfig+0x2de>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a26      	ldr	r2, [pc, #152]	; (8005140 <DMA_SetConfig+0x340>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d018      	beq.n	80050de <DMA_SetConfig+0x2de>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a24      	ldr	r2, [pc, #144]	; (8005144 <DMA_SetConfig+0x344>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <DMA_SetConfig+0x2de>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a23      	ldr	r2, [pc, #140]	; (8005148 <DMA_SetConfig+0x348>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00e      	beq.n	80050de <DMA_SetConfig+0x2de>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a21      	ldr	r2, [pc, #132]	; (800514c <DMA_SetConfig+0x34c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <DMA_SetConfig+0x2de>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a20      	ldr	r2, [pc, #128]	; (8005150 <DMA_SetConfig+0x350>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <DMA_SetConfig+0x2de>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <DMA_SetConfig+0x354>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d101      	bne.n	80050e2 <DMA_SetConfig+0x2e2>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <DMA_SetConfig+0x2e4>
 80050e2:	2300      	movs	r3, #0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d020      	beq.n	800512a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	2201      	movs	r2, #1
 80050f2:	409a      	lsls	r2, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d108      	bne.n	800511a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	60da      	str	r2, [r3, #12]
}
 8005118:	e007      	b.n	800512a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	60da      	str	r2, [r3, #12]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	58025408 	.word	0x58025408
 800513c:	5802541c 	.word	0x5802541c
 8005140:	58025430 	.word	0x58025430
 8005144:	58025444 	.word	0x58025444
 8005148:	58025458 	.word	0x58025458
 800514c:	5802546c 	.word	0x5802546c
 8005150:	58025480 	.word	0x58025480
 8005154:	58025494 	.word	0x58025494

08005158 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a42      	ldr	r2, [pc, #264]	; (8005270 <DMA_CalcBaseAndBitshift+0x118>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d04a      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a41      	ldr	r2, [pc, #260]	; (8005274 <DMA_CalcBaseAndBitshift+0x11c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d045      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a3f      	ldr	r2, [pc, #252]	; (8005278 <DMA_CalcBaseAndBitshift+0x120>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d040      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a3e      	ldr	r2, [pc, #248]	; (800527c <DMA_CalcBaseAndBitshift+0x124>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d03b      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a3c      	ldr	r2, [pc, #240]	; (8005280 <DMA_CalcBaseAndBitshift+0x128>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d036      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a3b      	ldr	r2, [pc, #236]	; (8005284 <DMA_CalcBaseAndBitshift+0x12c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d031      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a39      	ldr	r2, [pc, #228]	; (8005288 <DMA_CalcBaseAndBitshift+0x130>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d02c      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a38      	ldr	r2, [pc, #224]	; (800528c <DMA_CalcBaseAndBitshift+0x134>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d027      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a36      	ldr	r2, [pc, #216]	; (8005290 <DMA_CalcBaseAndBitshift+0x138>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d022      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a35      	ldr	r2, [pc, #212]	; (8005294 <DMA_CalcBaseAndBitshift+0x13c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d01d      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a33      	ldr	r2, [pc, #204]	; (8005298 <DMA_CalcBaseAndBitshift+0x140>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d018      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a32      	ldr	r2, [pc, #200]	; (800529c <DMA_CalcBaseAndBitshift+0x144>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d013      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a30      	ldr	r2, [pc, #192]	; (80052a0 <DMA_CalcBaseAndBitshift+0x148>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00e      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a2f      	ldr	r2, [pc, #188]	; (80052a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d009      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a2d      	ldr	r2, [pc, #180]	; (80052a8 <DMA_CalcBaseAndBitshift+0x150>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d004      	beq.n	8005200 <DMA_CalcBaseAndBitshift+0xa8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a2c      	ldr	r2, [pc, #176]	; (80052ac <DMA_CalcBaseAndBitshift+0x154>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d101      	bne.n	8005204 <DMA_CalcBaseAndBitshift+0xac>
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <DMA_CalcBaseAndBitshift+0xae>
 8005204:	2300      	movs	r3, #0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d024      	beq.n	8005254 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	3b10      	subs	r3, #16
 8005212:	4a27      	ldr	r2, [pc, #156]	; (80052b0 <DMA_CalcBaseAndBitshift+0x158>)
 8005214:	fba2 2303 	umull	r2, r3, r2, r3
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	4a24      	ldr	r2, [pc, #144]	; (80052b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005224:	5cd3      	ldrb	r3, [r2, r3]
 8005226:	461a      	mov	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b03      	cmp	r3, #3
 8005230:	d908      	bls.n	8005244 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	4b1f      	ldr	r3, [pc, #124]	; (80052b8 <DMA_CalcBaseAndBitshift+0x160>)
 800523a:	4013      	ands	r3, r2
 800523c:	1d1a      	adds	r2, r3, #4
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	659a      	str	r2, [r3, #88]	; 0x58
 8005242:	e00d      	b.n	8005260 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <DMA_CalcBaseAndBitshift+0x160>)
 800524c:	4013      	ands	r3, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6593      	str	r3, [r2, #88]	; 0x58
 8005252:	e005      	b.n	8005260 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	40020010 	.word	0x40020010
 8005274:	40020028 	.word	0x40020028
 8005278:	40020040 	.word	0x40020040
 800527c:	40020058 	.word	0x40020058
 8005280:	40020070 	.word	0x40020070
 8005284:	40020088 	.word	0x40020088
 8005288:	400200a0 	.word	0x400200a0
 800528c:	400200b8 	.word	0x400200b8
 8005290:	40020410 	.word	0x40020410
 8005294:	40020428 	.word	0x40020428
 8005298:	40020440 	.word	0x40020440
 800529c:	40020458 	.word	0x40020458
 80052a0:	40020470 	.word	0x40020470
 80052a4:	40020488 	.word	0x40020488
 80052a8:	400204a0 	.word	0x400204a0
 80052ac:	400204b8 	.word	0x400204b8
 80052b0:	aaaaaaab 	.word	0xaaaaaaab
 80052b4:	08011248 	.word	0x08011248
 80052b8:	fffffc00 	.word	0xfffffc00

080052bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d120      	bne.n	8005312 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d858      	bhi.n	800538a <DMA_CheckFifoParam+0xce>
 80052d8:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <DMA_CheckFifoParam+0x24>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	080052f1 	.word	0x080052f1
 80052e4:	08005303 	.word	0x08005303
 80052e8:	080052f1 	.word	0x080052f1
 80052ec:	0800538b 	.word	0x0800538b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d048      	beq.n	800538e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005300:	e045      	b.n	800538e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800530a:	d142      	bne.n	8005392 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005310:	e03f      	b.n	8005392 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800531a:	d123      	bne.n	8005364 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	2b03      	cmp	r3, #3
 8005322:	d838      	bhi.n	8005396 <DMA_CheckFifoParam+0xda>
 8005324:	a201      	add	r2, pc, #4	; (adr r2, 800532c <DMA_CheckFifoParam+0x70>)
 8005326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532a:	bf00      	nop
 800532c:	0800533d 	.word	0x0800533d
 8005330:	08005343 	.word	0x08005343
 8005334:	0800533d 	.word	0x0800533d
 8005338:	08005355 	.word	0x08005355
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	73fb      	strb	r3, [r7, #15]
        break;
 8005340:	e030      	b.n	80053a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d025      	beq.n	800539a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005352:	e022      	b.n	800539a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800535c:	d11f      	bne.n	800539e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005362:	e01c      	b.n	800539e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	2b02      	cmp	r3, #2
 800536a:	d902      	bls.n	8005372 <DMA_CheckFifoParam+0xb6>
 800536c:	2b03      	cmp	r3, #3
 800536e:	d003      	beq.n	8005378 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005370:	e018      	b.n	80053a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
        break;
 8005376:	e015      	b.n	80053a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00e      	beq.n	80053a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
    break;
 8005388:	e00b      	b.n	80053a2 <DMA_CheckFifoParam+0xe6>
        break;
 800538a:	bf00      	nop
 800538c:	e00a      	b.n	80053a4 <DMA_CheckFifoParam+0xe8>
        break;
 800538e:	bf00      	nop
 8005390:	e008      	b.n	80053a4 <DMA_CheckFifoParam+0xe8>
        break;
 8005392:	bf00      	nop
 8005394:	e006      	b.n	80053a4 <DMA_CheckFifoParam+0xe8>
        break;
 8005396:	bf00      	nop
 8005398:	e004      	b.n	80053a4 <DMA_CheckFifoParam+0xe8>
        break;
 800539a:	bf00      	nop
 800539c:	e002      	b.n	80053a4 <DMA_CheckFifoParam+0xe8>
        break;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <DMA_CheckFifoParam+0xe8>
    break;
 80053a2:	bf00      	nop
    }
  }

  return status;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop

080053b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a38      	ldr	r2, [pc, #224]	; (80054a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d022      	beq.n	8005412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a36      	ldr	r2, [pc, #216]	; (80054ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01d      	beq.n	8005412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a35      	ldr	r2, [pc, #212]	; (80054b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d018      	beq.n	8005412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a33      	ldr	r2, [pc, #204]	; (80054b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a32      	ldr	r2, [pc, #200]	; (80054b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00e      	beq.n	8005412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a30      	ldr	r2, [pc, #192]	; (80054bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d009      	beq.n	8005412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a2f      	ldr	r2, [pc, #188]	; (80054c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a2d      	ldr	r2, [pc, #180]	; (80054c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d101      	bne.n	8005416 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005416:	2300      	movs	r3, #0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d01a      	beq.n	8005452 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	3b08      	subs	r3, #8
 8005424:	4a28      	ldr	r2, [pc, #160]	; (80054c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005426:	fba2 2303 	umull	r2, r3, r2, r3
 800542a:	091b      	lsrs	r3, r3, #4
 800542c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4b26      	ldr	r3, [pc, #152]	; (80054cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a24      	ldr	r2, [pc, #144]	; (80054d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005440:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f003 031f 	and.w	r3, r3, #31
 8005448:	2201      	movs	r2, #1
 800544a:	409a      	lsls	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005450:	e024      	b.n	800549c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	3b10      	subs	r3, #16
 800545a:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4a1c      	ldr	r2, [pc, #112]	; (80054d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d806      	bhi.n	800547a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4a1b      	ldr	r2, [pc, #108]	; (80054dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d902      	bls.n	800547a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3308      	adds	r3, #8
 8005478:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	461a      	mov	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800548c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	2201      	movs	r2, #1
 8005496:	409a      	lsls	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800549c:	bf00      	nop
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	58025408 	.word	0x58025408
 80054ac:	5802541c 	.word	0x5802541c
 80054b0:	58025430 	.word	0x58025430
 80054b4:	58025444 	.word	0x58025444
 80054b8:	58025458 	.word	0x58025458
 80054bc:	5802546c 	.word	0x5802546c
 80054c0:	58025480 	.word	0x58025480
 80054c4:	58025494 	.word	0x58025494
 80054c8:	cccccccd 	.word	0xcccccccd
 80054cc:	16009600 	.word	0x16009600
 80054d0:	58025880 	.word	0x58025880
 80054d4:	aaaaaaab 	.word	0xaaaaaaab
 80054d8:	400204b8 	.word	0x400204b8
 80054dc:	4002040f 	.word	0x4002040f
 80054e0:	10008200 	.word	0x10008200
 80054e4:	40020880 	.word	0x40020880

080054e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d04a      	beq.n	8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b08      	cmp	r3, #8
 8005502:	d847      	bhi.n	8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a25      	ldr	r2, [pc, #148]	; (80055a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d022      	beq.n	8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a24      	ldr	r2, [pc, #144]	; (80055a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d01d      	beq.n	8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a22      	ldr	r2, [pc, #136]	; (80055a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d018      	beq.n	8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a21      	ldr	r2, [pc, #132]	; (80055ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d013      	beq.n	8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1f      	ldr	r2, [pc, #124]	; (80055b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00e      	beq.n	8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1e      	ldr	r2, [pc, #120]	; (80055b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d009      	beq.n	8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1c      	ldr	r2, [pc, #112]	; (80055b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d004      	beq.n	8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1b      	ldr	r2, [pc, #108]	; (80055bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d101      	bne.n	8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005558:	2300      	movs	r3, #0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4b17      	ldr	r3, [pc, #92]	; (80055c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	461a      	mov	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005570:	671a      	str	r2, [r3, #112]	; 0x70
 8005572:	e009      	b.n	8005588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	461a      	mov	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a11      	ldr	r2, [pc, #68]	; (80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005586:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3b01      	subs	r3, #1
 800558c:	2201      	movs	r2, #1
 800558e:	409a      	lsls	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005594:	bf00      	nop
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	58025408 	.word	0x58025408
 80055a4:	5802541c 	.word	0x5802541c
 80055a8:	58025430 	.word	0x58025430
 80055ac:	58025444 	.word	0x58025444
 80055b0:	58025458 	.word	0x58025458
 80055b4:	5802546c 	.word	0x5802546c
 80055b8:	58025480 	.word	0x58025480
 80055bc:	58025494 	.word	0x58025494
 80055c0:	1600963f 	.word	0x1600963f
 80055c4:	58025940 	.word	0x58025940
 80055c8:	1000823f 	.word	0x1000823f
 80055cc:	40020940 	.word	0x40020940

080055d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b089      	sub	sp, #36	; 0x24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055da:	2300      	movs	r3, #0
 80055dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80055de:	4b86      	ldr	r3, [pc, #536]	; (80057f8 <HAL_GPIO_Init+0x228>)
 80055e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055e2:	e18c      	b.n	80058fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	2101      	movs	r1, #1
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	fa01 f303 	lsl.w	r3, r1, r3
 80055f0:	4013      	ands	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 817e 	beq.w	80058f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d005      	beq.n	8005614 <HAL_GPIO_Init+0x44>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f003 0303 	and.w	r3, r3, #3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d130      	bne.n	8005676 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	2203      	movs	r2, #3
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	43db      	mvns	r3, r3
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	4013      	ands	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4313      	orrs	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800564a:	2201      	movs	r2, #1
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43db      	mvns	r3, r3
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	4013      	ands	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	091b      	lsrs	r3, r3, #4
 8005660:	f003 0201 	and.w	r2, r3, #1
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	4313      	orrs	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	2b03      	cmp	r3, #3
 8005680:	d017      	beq.n	80056b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	2203      	movs	r2, #3
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	43db      	mvns	r3, r3
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	4013      	ands	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d123      	bne.n	8005706 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	08da      	lsrs	r2, r3, #3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3208      	adds	r2, #8
 80056c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	220f      	movs	r2, #15
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	43db      	mvns	r3, r3
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4013      	ands	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	08da      	lsrs	r2, r3, #3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3208      	adds	r2, #8
 8005700:	69b9      	ldr	r1, [r7, #24]
 8005702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	2203      	movs	r2, #3
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	43db      	mvns	r3, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4013      	ands	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f003 0203 	and.w	r2, r3, #3
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4313      	orrs	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 80d8 	beq.w	80058f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005748:	4b2c      	ldr	r3, [pc, #176]	; (80057fc <HAL_GPIO_Init+0x22c>)
 800574a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800574e:	4a2b      	ldr	r2, [pc, #172]	; (80057fc <HAL_GPIO_Init+0x22c>)
 8005750:	f043 0302 	orr.w	r3, r3, #2
 8005754:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005758:	4b28      	ldr	r3, [pc, #160]	; (80057fc <HAL_GPIO_Init+0x22c>)
 800575a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005766:	4a26      	ldr	r2, [pc, #152]	; (8005800 <HAL_GPIO_Init+0x230>)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	089b      	lsrs	r3, r3, #2
 800576c:	3302      	adds	r3, #2
 800576e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	220f      	movs	r2, #15
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	43db      	mvns	r3, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4013      	ands	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <HAL_GPIO_Init+0x234>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d04a      	beq.n	8005828 <HAL_GPIO_Init+0x258>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_GPIO_Init+0x238>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d02b      	beq.n	80057f2 <HAL_GPIO_Init+0x222>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a1b      	ldr	r2, [pc, #108]	; (800580c <HAL_GPIO_Init+0x23c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d025      	beq.n	80057ee <HAL_GPIO_Init+0x21e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a1a      	ldr	r2, [pc, #104]	; (8005810 <HAL_GPIO_Init+0x240>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01f      	beq.n	80057ea <HAL_GPIO_Init+0x21a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a19      	ldr	r2, [pc, #100]	; (8005814 <HAL_GPIO_Init+0x244>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d019      	beq.n	80057e6 <HAL_GPIO_Init+0x216>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a18      	ldr	r2, [pc, #96]	; (8005818 <HAL_GPIO_Init+0x248>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <HAL_GPIO_Init+0x212>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a17      	ldr	r2, [pc, #92]	; (800581c <HAL_GPIO_Init+0x24c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00d      	beq.n	80057de <HAL_GPIO_Init+0x20e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a16      	ldr	r2, [pc, #88]	; (8005820 <HAL_GPIO_Init+0x250>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d007      	beq.n	80057da <HAL_GPIO_Init+0x20a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a15      	ldr	r2, [pc, #84]	; (8005824 <HAL_GPIO_Init+0x254>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d101      	bne.n	80057d6 <HAL_GPIO_Init+0x206>
 80057d2:	2309      	movs	r3, #9
 80057d4:	e029      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057d6:	230a      	movs	r3, #10
 80057d8:	e027      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057da:	2307      	movs	r3, #7
 80057dc:	e025      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057de:	2306      	movs	r3, #6
 80057e0:	e023      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057e2:	2305      	movs	r3, #5
 80057e4:	e021      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057e6:	2304      	movs	r3, #4
 80057e8:	e01f      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057ea:	2303      	movs	r3, #3
 80057ec:	e01d      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e01b      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e019      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057f6:	bf00      	nop
 80057f8:	58000080 	.word	0x58000080
 80057fc:	58024400 	.word	0x58024400
 8005800:	58000400 	.word	0x58000400
 8005804:	58020000 	.word	0x58020000
 8005808:	58020400 	.word	0x58020400
 800580c:	58020800 	.word	0x58020800
 8005810:	58020c00 	.word	0x58020c00
 8005814:	58021000 	.word	0x58021000
 8005818:	58021400 	.word	0x58021400
 800581c:	58021800 	.word	0x58021800
 8005820:	58021c00 	.word	0x58021c00
 8005824:	58022400 	.word	0x58022400
 8005828:	2300      	movs	r3, #0
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	f002 0203 	and.w	r2, r2, #3
 8005830:	0092      	lsls	r2, r2, #2
 8005832:	4093      	lsls	r3, r2
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800583a:	4938      	ldr	r1, [pc, #224]	; (800591c <HAL_GPIO_Init+0x34c>)
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	089b      	lsrs	r3, r3, #2
 8005840:	3302      	adds	r3, #2
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	43db      	mvns	r3, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	4013      	ands	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800586e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	43db      	mvns	r3, r3
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	4013      	ands	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800589c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	43db      	mvns	r3, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4013      	ands	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	43db      	mvns	r3, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4013      	ands	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	3301      	adds	r3, #1
 80058fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	f47f ae6b 	bne.w	80055e4 <HAL_GPIO_Init+0x14>
  }
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	3724      	adds	r7, #36	; 0x24
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	58000400 	.word	0x58000400

08005920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	807b      	strh	r3, [r7, #2]
 800592c:	4613      	mov	r3, r2
 800592e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005930:	787b      	ldrb	r3, [r7, #1]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005936:	887a      	ldrh	r2, [r7, #2]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800593c:	e003      	b.n	8005946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800593e:	887b      	ldrh	r3, [r7, #2]
 8005940:	041a      	lsls	r2, r3, #16
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	619a      	str	r2, [r3, #24]
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
	...

08005954 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e07f      	b.n	8005a66 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fd f846 	bl	8002a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2224      	movs	r2, #36	; 0x24
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0201 	bic.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d107      	bne.n	80059ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059ca:	609a      	str	r2, [r3, #8]
 80059cc:	e006      	b.n	80059dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d104      	bne.n	80059ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6859      	ldr	r1, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <HAL_I2C_Init+0x11c>)
 80059fa:	430b      	orrs	r3, r1
 80059fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691a      	ldr	r2, [r3, #16]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69d9      	ldr	r1, [r3, #28]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a1a      	ldr	r2, [r3, #32]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	02008000 	.word	0x02008000

08005a74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	607a      	str	r2, [r7, #4]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	460b      	mov	r3, r1
 8005a82:	817b      	strh	r3, [r7, #10]
 8005a84:	4613      	mov	r3, r2
 8005a86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	f040 80da 	bne.w	8005c4a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_I2C_Master_Transmit+0x30>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e0d3      	b.n	8005c4c <HAL_I2C_Master_Transmit+0x1d8>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aac:	f7fd fb7a 	bl	80031a4 <HAL_GetTick>
 8005ab0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2319      	movs	r3, #25
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fcce 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e0be      	b.n	8005c4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2221      	movs	r2, #33	; 0x21
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2210      	movs	r2, #16
 8005ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	893a      	ldrh	r2, [r7, #8]
 8005aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2bff      	cmp	r3, #255	; 0xff
 8005afe:	d90e      	bls.n	8005b1e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	22ff      	movs	r2, #255	; 0xff
 8005b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	8979      	ldrh	r1, [r7, #10]
 8005b0e:	4b51      	ldr	r3, [pc, #324]	; (8005c54 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fe5c 	bl	80067d4 <I2C_TransferConfig>
 8005b1c:	e06c      	b.n	8005bf8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	8979      	ldrh	r1, [r7, #10]
 8005b30:	4b48      	ldr	r3, [pc, #288]	; (8005c54 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fe4b 	bl	80067d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b3e:	e05b      	b.n	8005bf8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	6a39      	ldr	r1, [r7, #32]
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 fcda 	bl	80064fe <I2C_WaitOnTXISFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e07b      	b.n	8005c4c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	781a      	ldrb	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d034      	beq.n	8005bf8 <HAL_I2C_Master_Transmit+0x184>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d130      	bne.n	8005bf8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2180      	movs	r1, #128	; 0x80
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 fc5d 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e04d      	b.n	8005c4c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2bff      	cmp	r3, #255	; 0xff
 8005bb8:	d90e      	bls.n	8005bd8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	22ff      	movs	r2, #255	; 0xff
 8005bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	8979      	ldrh	r1, [r7, #10]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fdff 	bl	80067d4 <I2C_TransferConfig>
 8005bd6:	e00f      	b.n	8005bf8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	8979      	ldrh	r1, [r7, #10]
 8005bea:	2300      	movs	r3, #0
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fdee 	bl	80067d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d19e      	bne.n	8005b40 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	6a39      	ldr	r1, [r7, #32]
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 fcc0 	bl	800658c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e01a      	b.n	8005c4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6859      	ldr	r1, [r3, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <HAL_I2C_Master_Transmit+0x1e4>)
 8005c2a:	400b      	ands	r3, r1
 8005c2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e000      	b.n	8005c4c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005c4a:	2302      	movs	r3, #2
  }
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	80002000 	.word	0x80002000
 8005c58:	fe00e800 	.word	0xfe00e800

08005c5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	4608      	mov	r0, r1
 8005c66:	4611      	mov	r1, r2
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	817b      	strh	r3, [r7, #10]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	813b      	strh	r3, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	f040 80f9 	bne.w	8005e76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_I2C_Mem_Write+0x34>
 8005c8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0ed      	b.n	8005e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <HAL_I2C_Mem_Write+0x4e>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e0e6      	b.n	8005e78 <HAL_I2C_Mem_Write+0x21c>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cb2:	f7fd fa77 	bl	80031a4 <HAL_GetTick>
 8005cb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	2319      	movs	r3, #25
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 fbcb 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0d1      	b.n	8005e78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2221      	movs	r2, #33	; 0x21
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2240      	movs	r2, #64	; 0x40
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a3a      	ldr	r2, [r7, #32]
 8005cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cfc:	88f8      	ldrh	r0, [r7, #6]
 8005cfe:	893a      	ldrh	r2, [r7, #8]
 8005d00:	8979      	ldrh	r1, [r7, #10]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 fadb 	bl	80062c8 <I2C_RequestMemoryWrite>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0a9      	b.n	8005e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2bff      	cmp	r3, #255	; 0xff
 8005d2c:	d90e      	bls.n	8005d4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	22ff      	movs	r2, #255	; 0xff
 8005d32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	8979      	ldrh	r1, [r7, #10]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 fd45 	bl	80067d4 <I2C_TransferConfig>
 8005d4a:	e00f      	b.n	8005d6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	8979      	ldrh	r1, [r7, #10]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 fd34 	bl	80067d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fbc4 	bl	80064fe <I2C_WaitOnTXISFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e07b      	b.n	8005e78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d034      	beq.n	8005e24 <HAL_I2C_Mem_Write+0x1c8>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d130      	bne.n	8005e24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2180      	movs	r1, #128	; 0x80
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fb47 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e04d      	b.n	8005e78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2bff      	cmp	r3, #255	; 0xff
 8005de4:	d90e      	bls.n	8005e04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	22ff      	movs	r2, #255	; 0xff
 8005dea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	8979      	ldrh	r1, [r7, #10]
 8005df4:	2300      	movs	r3, #0
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fce9 	bl	80067d4 <I2C_TransferConfig>
 8005e02:	e00f      	b.n	8005e24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	8979      	ldrh	r1, [r7, #10]
 8005e16:	2300      	movs	r3, #0
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 fcd8 	bl	80067d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d19e      	bne.n	8005d6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fbaa 	bl	800658c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e01a      	b.n	8005e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2220      	movs	r2, #32
 8005e48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b0a      	ldr	r3, [pc, #40]	; (8005e80 <HAL_I2C_Mem_Write+0x224>)
 8005e56:	400b      	ands	r3, r1
 8005e58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	e000      	b.n	8005e78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005e76:	2302      	movs	r3, #2
  }
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	fe00e800 	.word	0xfe00e800

08005e84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	4611      	mov	r1, r2
 8005e90:	461a      	mov	r2, r3
 8005e92:	4603      	mov	r3, r0
 8005e94:	817b      	strh	r3, [r7, #10]
 8005e96:	460b      	mov	r3, r1
 8005e98:	813b      	strh	r3, [r7, #8]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	f040 80fd 	bne.w	80060a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_I2C_Mem_Read+0x34>
 8005eb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ebe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0f1      	b.n	80060a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_I2C_Mem_Read+0x4e>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e0ea      	b.n	80060a8 <HAL_I2C_Mem_Read+0x224>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005eda:	f7fd f963 	bl	80031a4 <HAL_GetTick>
 8005ede:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	2319      	movs	r3, #25
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 fab7 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0d5      	b.n	80060a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2222      	movs	r2, #34	; 0x22
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2240      	movs	r2, #64	; 0x40
 8005f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a3a      	ldr	r2, [r7, #32]
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f24:	88f8      	ldrh	r0, [r7, #6]
 8005f26:	893a      	ldrh	r2, [r7, #8]
 8005f28:	8979      	ldrh	r1, [r7, #10]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	4603      	mov	r3, r0
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fa1b 	bl	8006370 <I2C_RequestMemoryRead>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0ad      	b.n	80060a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2bff      	cmp	r3, #255	; 0xff
 8005f54:	d90e      	bls.n	8005f74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	22ff      	movs	r2, #255	; 0xff
 8005f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	8979      	ldrh	r1, [r7, #10]
 8005f64:	4b52      	ldr	r3, [pc, #328]	; (80060b0 <HAL_I2C_Mem_Read+0x22c>)
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 fc31 	bl	80067d4 <I2C_TransferConfig>
 8005f72:	e00f      	b.n	8005f94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	8979      	ldrh	r1, [r7, #10]
 8005f86:	4b4a      	ldr	r3, [pc, #296]	; (80060b0 <HAL_I2C_Mem_Read+0x22c>)
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 fc20 	bl	80067d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2104      	movs	r1, #4
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 fa5e 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e07c      	b.n	80060a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d034      	beq.n	8006054 <HAL_I2C_Mem_Read+0x1d0>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d130      	bne.n	8006054 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2180      	movs	r1, #128	; 0x80
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fa2f 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e04d      	b.n	80060a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	2bff      	cmp	r3, #255	; 0xff
 8006014:	d90e      	bls.n	8006034 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	22ff      	movs	r2, #255	; 0xff
 800601a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006020:	b2da      	uxtb	r2, r3
 8006022:	8979      	ldrh	r1, [r7, #10]
 8006024:	2300      	movs	r3, #0
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 fbd1 	bl	80067d4 <I2C_TransferConfig>
 8006032:	e00f      	b.n	8006054 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006042:	b2da      	uxtb	r2, r3
 8006044:	8979      	ldrh	r1, [r7, #10]
 8006046:	2300      	movs	r3, #0
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fbc0 	bl	80067d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d19a      	bne.n	8005f94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fa92 	bl	800658c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e01a      	b.n	80060a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2220      	movs	r2, #32
 8006078:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6859      	ldr	r1, [r3, #4]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <HAL_I2C_Mem_Read+0x230>)
 8006086:	400b      	ands	r3, r1
 8006088:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2220      	movs	r2, #32
 800608e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e000      	b.n	80060a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80060a6:	2302      	movs	r3, #2
  }
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	80002400 	.word	0x80002400
 80060b4:	fe00e800 	.word	0xfe00e800

080060b8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	; 0x28
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	607a      	str	r2, [r7, #4]
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	460b      	mov	r3, r1
 80060c6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	f040 80ef 	bne.w	80062b8 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e8:	d101      	bne.n	80060ee <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80060ea:	2302      	movs	r3, #2
 80060ec:	e0e5      	b.n	80062ba <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_I2C_IsDeviceReady+0x44>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e0de      	b.n	80062ba <HAL_I2C_IsDeviceReady+0x202>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2224      	movs	r2, #36	; 0x24
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d105      	bne.n	8006126 <HAL_I2C_IsDeviceReady+0x6e>
 800611a:	897b      	ldrh	r3, [r7, #10]
 800611c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006120:	4b68      	ldr	r3, [pc, #416]	; (80062c4 <HAL_I2C_IsDeviceReady+0x20c>)
 8006122:	4313      	orrs	r3, r2
 8006124:	e004      	b.n	8006130 <HAL_I2C_IsDeviceReady+0x78>
 8006126:	897b      	ldrh	r3, [r7, #10]
 8006128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800612c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	6812      	ldr	r2, [r2, #0]
 8006134:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006136:	f7fd f835 	bl	80031a4 <HAL_GetTick>
 800613a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b20      	cmp	r3, #32
 8006148:	bf0c      	ite	eq
 800614a:	2301      	moveq	r3, #1
 800614c:	2300      	movne	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b10      	cmp	r3, #16
 800615e:	bf0c      	ite	eq
 8006160:	2301      	moveq	r3, #1
 8006162:	2300      	movne	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006168:	e034      	b.n	80061d4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d01a      	beq.n	80061a8 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006172:	f7fd f817 	bl	80031a4 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d302      	bcc.n	8006188 <HAL_I2C_IsDeviceReady+0xd0>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10f      	bne.n	80061a8 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006194:	f043 0220 	orr.w	r2, r3, #32
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e088      	b.n	80062ba <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	bf0c      	ite	eq
 80061b6:	2301      	moveq	r3, #1
 80061b8:	2300      	movne	r3, #0
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	bf0c      	ite	eq
 80061cc:	2301      	moveq	r3, #1
 80061ce:	2300      	movne	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80061d4:	7ffb      	ldrb	r3, [r7, #31]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d102      	bne.n	80061e0 <HAL_I2C_IsDeviceReady+0x128>
 80061da:	7fbb      	ldrb	r3, [r7, #30]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0c4      	beq.n	800616a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f003 0310 	and.w	r3, r3, #16
 80061ea:	2b10      	cmp	r3, #16
 80061ec:	d01a      	beq.n	8006224 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2200      	movs	r2, #0
 80061f6:	2120      	movs	r1, #32
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f931 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e058      	b.n	80062ba <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2220      	movs	r2, #32
 800620e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	e04a      	b.n	80062ba <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2200      	movs	r2, #0
 800622c:	2120      	movs	r1, #32
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f916 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e03d      	b.n	80062ba <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2210      	movs	r2, #16
 8006244:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2220      	movs	r2, #32
 800624c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	429a      	cmp	r2, r3
 8006254:	d118      	bne.n	8006288 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006264:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2200      	movs	r2, #0
 800626e:	2120      	movs	r1, #32
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f8f5 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e01c      	b.n	80062ba <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2220      	movs	r2, #32
 8006286:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	3301      	adds	r3, #1
 800628c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	429a      	cmp	r2, r3
 8006294:	f63f af3d 	bhi.w	8006112 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a4:	f043 0220 	orr.w	r2, r3, #32
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
  }
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3720      	adds	r7, #32
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	02002000 	.word	0x02002000

080062c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	4608      	mov	r0, r1
 80062d2:	4611      	mov	r1, r2
 80062d4:	461a      	mov	r2, r3
 80062d6:	4603      	mov	r3, r0
 80062d8:	817b      	strh	r3, [r7, #10]
 80062da:	460b      	mov	r3, r1
 80062dc:	813b      	strh	r3, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80062e2:	88fb      	ldrh	r3, [r7, #6]
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	8979      	ldrh	r1, [r7, #10]
 80062e8:	4b20      	ldr	r3, [pc, #128]	; (800636c <I2C_RequestMemoryWrite+0xa4>)
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 fa6f 	bl	80067d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	69b9      	ldr	r1, [r7, #24]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f8ff 	bl	80064fe <I2C_WaitOnTXISFlagUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e02c      	b.n	8006364 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d105      	bne.n	800631c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006310:	893b      	ldrh	r3, [r7, #8]
 8006312:	b2da      	uxtb	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	629a      	str	r2, [r3, #40]	; 0x28
 800631a:	e015      	b.n	8006348 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800631c:	893b      	ldrh	r3, [r7, #8]
 800631e:	0a1b      	lsrs	r3, r3, #8
 8006320:	b29b      	uxth	r3, r3
 8006322:	b2da      	uxtb	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	69b9      	ldr	r1, [r7, #24]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 f8e5 	bl	80064fe <I2C_WaitOnTXISFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e012      	b.n	8006364 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800633e:	893b      	ldrh	r3, [r7, #8]
 8006340:	b2da      	uxtb	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	2200      	movs	r2, #0
 8006350:	2180      	movs	r1, #128	; 0x80
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 f884 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e000      	b.n	8006364 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	80002000 	.word	0x80002000

08006370 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af02      	add	r7, sp, #8
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	4608      	mov	r0, r1
 800637a:	4611      	mov	r1, r2
 800637c:	461a      	mov	r2, r3
 800637e:	4603      	mov	r3, r0
 8006380:	817b      	strh	r3, [r7, #10]
 8006382:	460b      	mov	r3, r1
 8006384:	813b      	strh	r3, [r7, #8]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800638a:	88fb      	ldrh	r3, [r7, #6]
 800638c:	b2da      	uxtb	r2, r3
 800638e:	8979      	ldrh	r1, [r7, #10]
 8006390:	4b20      	ldr	r3, [pc, #128]	; (8006414 <I2C_RequestMemoryRead+0xa4>)
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	2300      	movs	r3, #0
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fa1c 	bl	80067d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	69b9      	ldr	r1, [r7, #24]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f8ac 	bl	80064fe <I2C_WaitOnTXISFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e02c      	b.n	800640a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063b0:	88fb      	ldrh	r3, [r7, #6]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d105      	bne.n	80063c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063b6:	893b      	ldrh	r3, [r7, #8]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	629a      	str	r2, [r3, #40]	; 0x28
 80063c0:	e015      	b.n	80063ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063c2:	893b      	ldrh	r3, [r7, #8]
 80063c4:	0a1b      	lsrs	r3, r3, #8
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	69b9      	ldr	r1, [r7, #24]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f892 	bl	80064fe <I2C_WaitOnTXISFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e012      	b.n	800640a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063e4:	893b      	ldrh	r3, [r7, #8]
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2200      	movs	r2, #0
 80063f6:	2140      	movs	r1, #64	; 0x40
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f831 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	80002000 	.word	0x80002000

08006418 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b02      	cmp	r3, #2
 800642c:	d103      	bne.n	8006436 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b01      	cmp	r3, #1
 8006442:	d007      	beq.n	8006454 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0201 	orr.w	r2, r2, #1
 8006452:	619a      	str	r2, [r3, #24]
  }
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006470:	e031      	b.n	80064d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d02d      	beq.n	80064d6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647a:	f7fc fe93 	bl	80031a4 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d122      	bne.n	80064d6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	4013      	ands	r3, r2
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	429a      	cmp	r2, r3
 800649e:	bf0c      	ite	eq
 80064a0:	2301      	moveq	r3, #1
 80064a2:	2300      	movne	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d113      	bne.n	80064d6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2220      	movs	r2, #32
 80064be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e00f      	b.n	80064f6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	bf0c      	ite	eq
 80064e6:	2301      	moveq	r3, #1
 80064e8:	2300      	movne	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d0be      	beq.n	8006472 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800650a:	e033      	b.n	8006574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f87f 	bl	8006614 <I2C_IsErrorOccurred>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e031      	b.n	8006584 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d025      	beq.n	8006574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006528:	f7fc fe3c 	bl	80031a4 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	429a      	cmp	r2, r3
 8006536:	d302      	bcc.n	800653e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d11a      	bne.n	8006574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b02      	cmp	r3, #2
 800654a:	d013      	beq.n	8006574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006550:	f043 0220 	orr.w	r2, r3, #32
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e007      	b.n	8006584 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b02      	cmp	r3, #2
 8006580:	d1c4      	bne.n	800650c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006598:	e02f      	b.n	80065fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	68b9      	ldr	r1, [r7, #8]
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 f838 	bl	8006614 <I2C_IsErrorOccurred>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e02d      	b.n	800660a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ae:	f7fc fdf9 	bl	80031a4 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d302      	bcc.n	80065c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d11a      	bne.n	80065fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	d013      	beq.n	80065fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d6:	f043 0220 	orr.w	r2, r3, #32
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e007      	b.n	800660a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b20      	cmp	r3, #32
 8006606:	d1c8      	bne.n	800659a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08a      	sub	sp, #40	; 0x28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	d068      	beq.n	8006712 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2210      	movs	r2, #16
 8006646:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006648:	e049      	b.n	80066de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006650:	d045      	beq.n	80066de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006652:	f7fc fda7 	bl	80031a4 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	429a      	cmp	r2, r3
 8006660:	d302      	bcc.n	8006668 <I2C_IsErrorOccurred+0x54>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d13a      	bne.n	80066de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006672:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800667a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668a:	d121      	bne.n	80066d0 <I2C_IsErrorOccurred+0xbc>
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006692:	d01d      	beq.n	80066d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006694:	7cfb      	ldrb	r3, [r7, #19]
 8006696:	2b20      	cmp	r3, #32
 8006698:	d01a      	beq.n	80066d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80066aa:	f7fc fd7b 	bl	80031a4 <HAL_GetTick>
 80066ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066b0:	e00e      	b.n	80066d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80066b2:	f7fc fd77 	bl	80031a4 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b19      	cmp	r3, #25
 80066be:	d907      	bls.n	80066d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	f043 0320 	orr.w	r3, r3, #32
 80066c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80066ce:	e006      	b.n	80066de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b20      	cmp	r3, #32
 80066dc:	d1e9      	bne.n	80066b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	d003      	beq.n	80066f4 <I2C_IsErrorOccurred+0xe0>
 80066ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0aa      	beq.n	800664a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80066f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d103      	bne.n	8006704 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2220      	movs	r2, #32
 8006702:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	f043 0304 	orr.w	r3, r3, #4
 800670a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006734:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	f043 0308 	orr.w	r3, r3, #8
 800674c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006756:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	f043 0302 	orr.w	r3, r3, #2
 800676e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006778:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01c      	beq.n	80067c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff fe45 	bl	8006418 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6859      	ldr	r1, [r3, #4]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <I2C_IsErrorOccurred+0x1bc>)
 800679a:	400b      	ands	r3, r1
 800679c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	431a      	orrs	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80067c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3728      	adds	r7, #40	; 0x28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	fe00e800 	.word	0xfe00e800

080067d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	817b      	strh	r3, [r7, #10]
 80067e2:	4613      	mov	r3, r2
 80067e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067e6:	897b      	ldrh	r3, [r7, #10]
 80067e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067ec:	7a7b      	ldrb	r3, [r7, #9]
 80067ee:	041b      	lsls	r3, r3, #16
 80067f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006802:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	0d5b      	lsrs	r3, r3, #21
 800680e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006812:	4b08      	ldr	r3, [pc, #32]	; (8006834 <I2C_TransferConfig+0x60>)
 8006814:	430b      	orrs	r3, r1
 8006816:	43db      	mvns	r3, r3
 8006818:	ea02 0103 	and.w	r1, r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	03ff63ff 	.word	0x03ff63ff

08006838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b20      	cmp	r3, #32
 800684c:	d138      	bne.n	80068c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006858:	2302      	movs	r3, #2
 800685a:	e032      	b.n	80068c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2224      	movs	r2, #36	; 0x24
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0201 	bic.w	r2, r2, #1
 800687a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800688a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6819      	ldr	r1, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	e000      	b.n	80068c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068c0:	2302      	movs	r3, #2
  }
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d139      	bne.n	8006958 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d101      	bne.n	80068f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80068ee:	2302      	movs	r3, #2
 80068f0:	e033      	b.n	800695a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2224      	movs	r2, #36	; 0x24
 80068fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006920:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0201 	orr.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2220      	movs	r2, #32
 8006948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	e000      	b.n	800695a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006958:	2302      	movs	r3, #2
  }
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
	...

08006968 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e10d      	b.n	8006b96 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fc f8f4 	bl	8002b7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d107      	bne.n	80069ba <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 0201 	bic.w	r2, r2, #1
 80069b8:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2200      	movs	r2, #0
 80069c0:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d008      	beq.n	80069dc <HAL_I2S_Init+0x74>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b06      	cmp	r3, #6
 80069d0:	d004      	beq.n	80069dc <HAL_I2S_Init+0x74>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2b0a      	cmp	r3, #10
 80069d8:	f040 8087 	bne.w	8006aea <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d05a      	beq.n	8006a9a <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80069ec:	2302      	movs	r3, #2
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	e001      	b.n	80069f6 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80069f2:	2301      	movs	r3, #1
 80069f4:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b30      	cmp	r3, #48	; 0x30
 80069fc:	d003      	beq.n	8006a06 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8006a02:	2bb0      	cmp	r3, #176	; 0xb0
 8006a04:	d102      	bne.n	8006a0c <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8006a06:	2301      	movs	r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	e001      	b.n	8006a10 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8006a10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006a14:	f04f 0100 	mov.w	r1, #0
 8006a18:	f003 fe8e 	bl	800a738 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a1c:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a26:	d113      	bne.n	8006a50 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8006a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a38:	4613      	mov	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	461a      	mov	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4a:	3305      	adds	r3, #5
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	e014      	b.n	8006a7a <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8006a50:	2220      	movs	r2, #32
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	fa22 f303 	lsr.w	r3, r2, r3
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	fb02 f303 	mul.w	r3, r2, r3
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a76:	3305      	adds	r3, #5
 8006a78:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	4a48      	ldr	r2, [pc, #288]	; (8006ba0 <HAL_I2S_Init+0x238>)
 8006a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a82:	08db      	lsrs	r3, r3, #3
 8006a84:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	085b      	lsrs	r3, r3, #1
 8006a96:	61fb      	str	r3, [r7, #28]
 8006a98:	e003      	b.n	8006aa2 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d102      	bne.n	8006aae <HAL_I2S_Init+0x146>
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d002      	beq.n	8006ab4 <HAL_I2S_Init+0x14c>
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	2bff      	cmp	r3, #255	; 0xff
 8006ab2:	d907      	bls.n	8006ac4 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab8:	f043 0210 	orr.w	r2, r3, #16
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e068      	b.n	8006b96 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8006aca:	2301      	movs	r3, #1
 8006acc:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ad4:	4b33      	ldr	r3, [pc, #204]	; (8006ba4 <HAL_I2S_Init+0x23c>)
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	69fa      	ldr	r2, [r7, #28]
 8006ada:	0411      	lsls	r1, r2, #16
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	0612      	lsls	r2, r2, #24
 8006ae0:	4311      	orrs	r1, r2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	430b      	orrs	r3, r1
 8006ae8:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006af0:	4b2d      	ldr	r3, [pc, #180]	; (8006ba8 <HAL_I2S_Init+0x240>)
 8006af2:	4013      	ands	r3, r2
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6851      	ldr	r1, [r2, #4]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6892      	ldr	r2, [r2, #8]
 8006afc:	4311      	orrs	r1, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	68d2      	ldr	r2, [r2, #12]
 8006b02:	4311      	orrs	r1, r2
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	6992      	ldr	r2, [r2, #24]
 8006b08:	4311      	orrs	r1, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6a12      	ldr	r2, [r2, #32]
 8006b0e:	4311      	orrs	r1, r2
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b14:	4311      	orrs	r1, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6912      	ldr	r2, [r2, #16]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f640 72f8 	movw	r2, #4088	; 0xff8
 8006b30:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b40:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d007      	beq.n	8006b70 <HAL_I2S_Init+0x208>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b06      	cmp	r3, #6
 8006b66:	d003      	beq.n	8006b70 <HAL_I2S_Init+0x208>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b0a      	cmp	r3, #10
 8006b6e:	d10a      	bne.n	8006b86 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3720      	adds	r7, #32
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	cccccccd 	.word	0xcccccccd
 8006ba4:	fe00ffff 	.word	0xfe00ffff
 8006ba8:	fdff9040 	.word	0xfdff9040

08006bac <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pData, uint16_t Size)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <HAL_I2S_Transmit_DMA+0x1e>
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_I2S_Transmit_DMA+0x22>
  {
    return  HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e086      	b.n	8006cdc <HAL_I2S_Transmit_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d001      	beq.n	8006bde <HAL_I2S_Transmit_DMA+0x32>
  {
    return HAL_BUSY;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e07e      	b.n	8006cdc <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_I2S_Transmit_DMA+0x42>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e076      	b.n	8006cdc <HAL_I2S_Transmit_DMA+0x130>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	88fa      	ldrh	r2, [r7, #6]
 8006c0e:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	88fa      	ldrh	r2, [r7, #6]
 8006c14:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Init field not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t)0UL;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t)0UL;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ce4 <HAL_I2S_Transmit_DMA+0x138>)
 8006c2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c34:	4a2c      	ldr	r2, [pc, #176]	; (8006ce8 <HAL_I2S_Transmit_DMA+0x13c>)
 8006c36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3c:	4a2b      	ldr	r2, [pc, #172]	; (8006cec <HAL_I2S_Transmit_DMA+0x140>)
 8006c3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	4619      	mov	r1, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3320      	adds	r3, #32
 8006c50:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c56:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8006c58:	f7fc ff3e 	bl	8003ad8 <HAL_DMA_Start_IT>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d011      	beq.n	8006c86 <HAL_I2S_Transmit_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c66:	f043 0208 	orr.w	r2, r3, #8
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
 8006c84:	e02a      	b.n	8006cdc <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d107      	bne.n	8006ca4 <HAL_I2S_Transmit_DMA+0xf8>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ca2:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d107      	bne.n	8006cc2 <HAL_I2S_Transmit_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f042 0201 	orr.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd0:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	08006e8b 	.word	0x08006e8b
 8006ce8:	08006e49 	.word	0x08006e49
 8006cec:	08006f05 	.word	0x08006f05

08006cf0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_I2S_Receive_DMA+0x1e>
 8006d08:	88fb      	ldrh	r3, [r7, #6]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e086      	b.n	8006e20 <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d001      	beq.n	8006d22 <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	e07e      	b.n	8006e20 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <HAL_I2S_Receive_DMA+0x42>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e076      	b.n	8006e20 <HAL_I2S_Receive_DMA+0x130>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2204      	movs	r2, #4
 8006d3e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pRxBuffPtr  = pData;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = Size;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	88fa      	ldrh	r2, [r7, #6]
 8006d52:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	88fa      	ldrh	r2, [r7, #6]
 8006d58:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	865a      	strh	r2, [r3, #50]	; 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d70:	4a2d      	ldr	r2, [pc, #180]	; (8006e28 <HAL_I2S_Receive_DMA+0x138>)
 8006d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d78:	4a2c      	ldr	r2, [pc, #176]	; (8006e2c <HAL_I2S_Receive_DMA+0x13c>)
 8006d7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d80:	4a2b      	ldr	r2, [pc, #172]	; (8006e30 <HAL_I2S_Receive_DMA+0x140>)
 8006d82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3330      	adds	r3, #48	; 0x30
 8006d8e:	4619      	mov	r1, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d94:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006d9a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8006d9c:	f7fc fe9c 	bl	8003ad8 <HAL_DMA_Start_IT>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d011      	beq.n	8006dca <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006daa:	f043 0208 	orr.w	r2, r3, #8
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return errorcode;
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	e02a      	b.n	8006e20 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d107      	bne.n	8006de8 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006de6:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d107      	bne.n	8006e06 <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0201 	orr.w	r2, r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e14:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8006e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	08006ee9 	.word	0x08006ee9
 8006e2c:	08006ea7 	.word	0x08006ea7
 8006e30:	08006f05 	.word	0x08006f05

08006e34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10e      	bne.n	8006e7c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e6c:	609a      	str	r2, [r3, #8]

    hi2s->TxXferCount = (uint16_t) 0UL;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f7fa f949 	bl	8001114 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7fa f8f1 	bl	8001080 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006e9e:	bf00      	nop
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10e      	bne.n	8006eda <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006eca:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	875a      	strh	r2, [r3, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7fa f8f4 	bl	80010c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006ee0:	bf00      	nop
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7fa f89e 	bl	8001038 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006efc:	bf00      	nop
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006f20:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3a:	f043 0208 	orr.w	r2, r3, #8
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f7ff ff76 	bl	8006e34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006f48:	bf00      	nop
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f52:	b08f      	sub	sp, #60	; 0x3c
 8006f54:	af0a      	add	r7, sp, #40	; 0x28
 8006f56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e116      	b.n	8007190 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d106      	bne.n	8006f82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f008 fb5d 	bl	800f63c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2203      	movs	r2, #3
 8006f86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d102      	bne.n	8006f9c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f004 ff30 	bl	800be06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	603b      	str	r3, [r7, #0]
 8006fac:	687e      	ldr	r6, [r7, #4]
 8006fae:	466d      	mov	r5, sp
 8006fb0:	f106 0410 	add.w	r4, r6, #16
 8006fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006fc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8006fc4:	1d33      	adds	r3, r6, #4
 8006fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fc8:	6838      	ldr	r0, [r7, #0]
 8006fca:	f004 fdfb 	bl	800bbc4 <USB_CoreInit>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e0d7      	b.n	8007190 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f004 ff1e 	bl	800be28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]
 8006ff0:	e04a      	b.n	8007088 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ff2:	7bfa      	ldrb	r2, [r7, #15]
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	440b      	add	r3, r1
 8007000:	333d      	adds	r3, #61	; 0x3d
 8007002:	2201      	movs	r2, #1
 8007004:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007006:	7bfa      	ldrb	r2, [r7, #15]
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	4613      	mov	r3, r2
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	4413      	add	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	333c      	adds	r3, #60	; 0x3c
 8007016:	7bfa      	ldrb	r2, [r7, #15]
 8007018:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800701a:	7bfa      	ldrb	r2, [r7, #15]
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	b298      	uxth	r0, r3
 8007020:	6879      	ldr	r1, [r7, #4]
 8007022:	4613      	mov	r3, r2
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	440b      	add	r3, r1
 800702c:	3356      	adds	r3, #86	; 0x56
 800702e:	4602      	mov	r2, r0
 8007030:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007032:	7bfa      	ldrb	r2, [r7, #15]
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	4613      	mov	r3, r2
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	440b      	add	r3, r1
 8007040:	3340      	adds	r3, #64	; 0x40
 8007042:	2200      	movs	r2, #0
 8007044:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007046:	7bfa      	ldrb	r2, [r7, #15]
 8007048:	6879      	ldr	r1, [r7, #4]
 800704a:	4613      	mov	r3, r2
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	440b      	add	r3, r1
 8007054:	3344      	adds	r3, #68	; 0x44
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800705a:	7bfa      	ldrb	r2, [r7, #15]
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	4613      	mov	r3, r2
 8007060:	00db      	lsls	r3, r3, #3
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	3348      	adds	r3, #72	; 0x48
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800706e:	7bfa      	ldrb	r2, [r7, #15]
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	440b      	add	r3, r1
 800707c:	334c      	adds	r3, #76	; 0x4c
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	3301      	adds	r3, #1
 8007086:	73fb      	strb	r3, [r7, #15]
 8007088:	7bfa      	ldrb	r2, [r7, #15]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	429a      	cmp	r2, r3
 8007090:	d3af      	bcc.n	8006ff2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]
 8007096:	e044      	b.n	8007122 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007098:	7bfa      	ldrb	r2, [r7, #15]
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80070aa:	2200      	movs	r2, #0
 80070ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80070ae:	7bfa      	ldrb	r2, [r7, #15]
 80070b0:	6879      	ldr	r1, [r7, #4]
 80070b2:	4613      	mov	r3, r2
 80070b4:	00db      	lsls	r3, r3, #3
 80070b6:	4413      	add	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	440b      	add	r3, r1
 80070bc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80070c0:	7bfa      	ldrb	r2, [r7, #15]
 80070c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80070c4:	7bfa      	ldrb	r2, [r7, #15]
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	4613      	mov	r3, r2
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070d6:	2200      	movs	r2, #0
 80070d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80070da:	7bfa      	ldrb	r2, [r7, #15]
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80070f0:	7bfa      	ldrb	r2, [r7, #15]
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	4613      	mov	r3, r2
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4413      	add	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	440b      	add	r3, r1
 80070fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007106:	7bfa      	ldrb	r2, [r7, #15]
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	3301      	adds	r3, #1
 8007120:	73fb      	strb	r3, [r7, #15]
 8007122:	7bfa      	ldrb	r2, [r7, #15]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	429a      	cmp	r2, r3
 800712a:	d3b5      	bcc.n	8007098 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	603b      	str	r3, [r7, #0]
 8007132:	687e      	ldr	r6, [r7, #4]
 8007134:	466d      	mov	r5, sp
 8007136:	f106 0410 	add.w	r4, r6, #16
 800713a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800713c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800713e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007142:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007146:	e885 0003 	stmia.w	r5, {r0, r1}
 800714a:	1d33      	adds	r3, r6, #4
 800714c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800714e:	6838      	ldr	r0, [r7, #0]
 8007150:	f004 feb6 	bl	800bec0 <USB_DevInit>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d005      	beq.n	8007166 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2202      	movs	r2, #2
 800715e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e014      	b.n	8007190 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	2b01      	cmp	r3, #1
 800717c:	d102      	bne.n	8007184 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 f970 	bl	8008464 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f005 fef8 	bl	800cf7e <USB_DevDisconnect>

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007198 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_PCD_Start+0x1c>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e022      	b.n	80071fa <HAL_PCD_Start+0x62>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d109      	bne.n	80071dc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d105      	bne.n	80071dc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f004 fdff 	bl	800bde4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f005 fea6 	bl	800cf3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007202:	b590      	push	{r4, r7, lr}
 8007204:	b08d      	sub	sp, #52	; 0x34
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4618      	mov	r0, r3
 800721a:	f005 ff64 	bl	800d0e6 <USB_GetMode>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	f040 84b7 	bne.w	8007b94 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4618      	mov	r0, r3
 800722c:	f005 fec8 	bl	800cfc0 <USB_ReadInterrupts>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 84ad 	beq.w	8007b92 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	0a1b      	lsrs	r3, r3, #8
 8007242:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4618      	mov	r0, r3
 8007252:	f005 feb5 	bl	800cfc0 <USB_ReadInterrupts>
 8007256:	4603      	mov	r3, r0
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	2b02      	cmp	r3, #2
 800725e:	d107      	bne.n	8007270 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695a      	ldr	r2, [r3, #20]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f002 0202 	and.w	r2, r2, #2
 800726e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4618      	mov	r0, r3
 8007276:	f005 fea3 	bl	800cfc0 <USB_ReadInterrupts>
 800727a:	4603      	mov	r3, r0
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	2b10      	cmp	r3, #16
 8007282:	d161      	bne.n	8007348 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0210 	bic.w	r2, r2, #16
 8007292:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	f003 020f 	and.w	r2, r3, #15
 80072a0:	4613      	mov	r3, r2
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	4413      	add	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	4413      	add	r3, r2
 80072b0:	3304      	adds	r3, #4
 80072b2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	0c5b      	lsrs	r3, r3, #17
 80072b8:	f003 030f 	and.w	r3, r3, #15
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d124      	bne.n	800730a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80072c6:	4013      	ands	r3, r2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d035      	beq.n	8007338 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	091b      	lsrs	r3, r3, #4
 80072d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80072d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072da:	b29b      	uxth	r3, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	6a38      	ldr	r0, [r7, #32]
 80072e0:	f005 fcda 	bl	800cc98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	091b      	lsrs	r3, r3, #4
 80072ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072f0:	441a      	add	r2, r3
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	695a      	ldr	r2, [r3, #20]
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	091b      	lsrs	r3, r3, #4
 80072fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007302:	441a      	add	r2, r3
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	615a      	str	r2, [r3, #20]
 8007308:	e016      	b.n	8007338 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	0c5b      	lsrs	r3, r3, #17
 800730e:	f003 030f 	and.w	r3, r3, #15
 8007312:	2b06      	cmp	r3, #6
 8007314:	d110      	bne.n	8007338 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800731c:	2208      	movs	r2, #8
 800731e:	4619      	mov	r1, r3
 8007320:	6a38      	ldr	r0, [r7, #32]
 8007322:	f005 fcb9 	bl	800cc98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	695a      	ldr	r2, [r3, #20]
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	091b      	lsrs	r3, r3, #4
 800732e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007332:	441a      	add	r2, r3
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	699a      	ldr	r2, [r3, #24]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0210 	orr.w	r2, r2, #16
 8007346:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4618      	mov	r0, r3
 800734e:	f005 fe37 	bl	800cfc0 <USB_ReadInterrupts>
 8007352:	4603      	mov	r3, r0
 8007354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007358:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800735c:	f040 80a7 	bne.w	80074ae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4618      	mov	r0, r3
 800736a:	f005 fe3c 	bl	800cfe6 <USB_ReadDevAllOutEpInterrupt>
 800736e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007370:	e099      	b.n	80074a6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 808e 	beq.w	800749a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007384:	b2d2      	uxtb	r2, r2
 8007386:	4611      	mov	r1, r2
 8007388:	4618      	mov	r0, r3
 800738a:	f005 fe60 	bl	800d04e <USB_ReadDevOutEPInterrupt>
 800738e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00c      	beq.n	80073b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a6:	461a      	mov	r2, r3
 80073a8:	2301      	movs	r3, #1
 80073aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80073ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fed2 	bl	8008158 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f003 0308 	and.w	r3, r3, #8
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00c      	beq.n	80073d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ca:	461a      	mov	r2, r3
 80073cc:	2308      	movs	r3, #8
 80073ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80073d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 ffa8 	bl	8008328 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f003 0310 	and.w	r3, r3, #16
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d008      	beq.n	80073f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ee:	461a      	mov	r2, r3
 80073f0:	2310      	movs	r3, #16
 80073f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d030      	beq.n	8007460 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007406:	2b80      	cmp	r3, #128	; 0x80
 8007408:	d109      	bne.n	800741e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007418:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800741c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800741e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007420:	4613      	mov	r3, r2
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	4413      	add	r3, r2
 8007430:	3304      	adds	r3, #4
 8007432:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	78db      	ldrb	r3, [r3, #3]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d108      	bne.n	800744e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2200      	movs	r2, #0
 8007440:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	b2db      	uxtb	r3, r3
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f008 f9ef 	bl	800f82c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745a:	461a      	mov	r2, r3
 800745c:	2302      	movs	r3, #2
 800745e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d008      	beq.n	800747c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007476:	461a      	mov	r2, r3
 8007478:	2320      	movs	r3, #32
 800747a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d009      	beq.n	800749a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007492:	461a      	mov	r2, r3
 8007494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007498:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	3301      	adds	r3, #1
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	085b      	lsrs	r3, r3, #1
 80074a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f47f af62 	bne.w	8007372 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f005 fd84 	bl	800cfc0 <USB_ReadInterrupts>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074c2:	f040 80db 	bne.w	800767c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f005 fda5 	bl	800d01a <USB_ReadDevAllInEpInterrupt>
 80074d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80074d6:	e0cd      	b.n	8007674 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80074d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 80c2 	beq.w	8007668 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	4611      	mov	r1, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f005 fdcb 	bl	800d08a <USB_ReadDevInEPInterrupt>
 80074f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d057      	beq.n	80075b0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	f003 030f 	and.w	r3, r3, #15
 8007506:	2201      	movs	r2, #1
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	43db      	mvns	r3, r3
 800751a:	69f9      	ldr	r1, [r7, #28]
 800751c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007520:	4013      	ands	r3, r2
 8007522:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007530:	461a      	mov	r2, r3
 8007532:	2301      	movs	r3, #1
 8007534:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d132      	bne.n	80075a4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007542:	4613      	mov	r3, r2
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	3348      	adds	r3, #72	; 0x48
 800754e:	6819      	ldr	r1, [r3, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007554:	4613      	mov	r3, r2
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4403      	add	r3, r0
 800755e:	3344      	adds	r3, #68	; 0x44
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4419      	add	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007568:	4613      	mov	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4403      	add	r3, r0
 8007572:	3348      	adds	r3, #72	; 0x48
 8007574:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	2b00      	cmp	r3, #0
 800757a:	d113      	bne.n	80075a4 <HAL_PCD_IRQHandler+0x3a2>
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007580:	4613      	mov	r3, r2
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	440b      	add	r3, r1
 800758a:	334c      	adds	r3, #76	; 0x4c
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d108      	bne.n	80075a4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6818      	ldr	r0, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800759c:	461a      	mov	r2, r3
 800759e:	2101      	movs	r1, #1
 80075a0:	f005 fdd4 	bl	800d14c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f008 f8b9 	bl	800f722 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f003 0308 	and.w	r3, r3, #8
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d008      	beq.n	80075cc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c6:	461a      	mov	r2, r3
 80075c8:	2308      	movs	r3, #8
 80075ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f003 0310 	and.w	r3, r3, #16
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d008      	beq.n	80075e8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e2:	461a      	mov	r2, r3
 80075e4:	2310      	movs	r3, #16
 80075e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d008      	beq.n	8007604 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fe:	461a      	mov	r2, r3
 8007600:	2340      	movs	r3, #64	; 0x40
 8007602:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d023      	beq.n	8007656 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800760e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007610:	6a38      	ldr	r0, [r7, #32]
 8007612:	f004 fdb3 	bl	800c17c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007618:	4613      	mov	r3, r2
 800761a:	00db      	lsls	r3, r3, #3
 800761c:	4413      	add	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	3338      	adds	r3, #56	; 0x38
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	4413      	add	r3, r2
 8007626:	3304      	adds	r3, #4
 8007628:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	78db      	ldrb	r3, [r3, #3]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d108      	bne.n	8007644 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2200      	movs	r2, #0
 8007636:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	b2db      	uxtb	r3, r3
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f008 f906 	bl	800f850 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007650:	461a      	mov	r2, r3
 8007652:	2302      	movs	r3, #2
 8007654:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fcea 	bl	800803c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	3301      	adds	r3, #1
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	085b      	lsrs	r3, r3, #1
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	2b00      	cmp	r3, #0
 8007678:	f47f af2e 	bne.w	80074d8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4618      	mov	r0, r3
 8007682:	f005 fc9d 	bl	800cfc0 <USB_ReadInterrupts>
 8007686:	4603      	mov	r3, r0
 8007688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800768c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007690:	d122      	bne.n	80076d8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076a0:	f023 0301 	bic.w	r3, r3, #1
 80076a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d108      	bne.n	80076c2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80076b8:	2100      	movs	r1, #0
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fef6 	bl	80084ac <HAL_PCDEx_LPM_Callback>
 80076c0:	e002      	b.n	80076c8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f008 f8a4 	bl	800f810 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	695a      	ldr	r2, [r3, #20]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80076d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4618      	mov	r0, r3
 80076de:	f005 fc6f 	bl	800cfc0 <USB_ReadInterrupts>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ec:	d112      	bne.n	8007714 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d102      	bne.n	8007704 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f008 f860 	bl	800f7c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695a      	ldr	r2, [r3, #20]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007712:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4618      	mov	r0, r3
 800771a:	f005 fc51 	bl	800cfc0 <USB_ReadInterrupts>
 800771e:	4603      	mov	r3, r0
 8007720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007728:	d121      	bne.n	800776e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	695a      	ldr	r2, [r3, #20]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007738:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007740:	2b00      	cmp	r3, #0
 8007742:	d111      	bne.n	8007768 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007752:	089b      	lsrs	r3, r3, #2
 8007754:	f003 020f 	and.w	r2, r3, #15
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800775e:	2101      	movs	r1, #1
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fea3 	bl	80084ac <HAL_PCDEx_LPM_Callback>
 8007766:	e002      	b.n	800776e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f008 f82b 	bl	800f7c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4618      	mov	r0, r3
 8007774:	f005 fc24 	bl	800cfc0 <USB_ReadInterrupts>
 8007778:	4603      	mov	r3, r0
 800777a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800777e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007782:	f040 80b7 	bne.w	80078f4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2110      	movs	r1, #16
 80077a0:	4618      	mov	r0, r3
 80077a2:	f004 fceb 	bl	800c17c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077a6:	2300      	movs	r3, #0
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077aa:	e046      	b.n	800783a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b8:	461a      	mov	r2, r3
 80077ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80077c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ec:	461a      	mov	r2, r3
 80077ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80077f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007804:	0151      	lsls	r1, r2, #5
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	440a      	add	r2, r1
 800780a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800780e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007812:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007824:	0151      	lsls	r1, r2, #5
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	440a      	add	r2, r1
 800782a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800782e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007832:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007836:	3301      	adds	r3, #1
 8007838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007840:	429a      	cmp	r2, r3
 8007842:	d3b3      	bcc.n	80077ac <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007852:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007856:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785c:	2b00      	cmp	r3, #0
 800785e:	d016      	beq.n	800788e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800786a:	69fa      	ldr	r2, [r7, #28]
 800786c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007870:	f043 030b 	orr.w	r3, r3, #11
 8007874:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007886:	f043 030b 	orr.w	r3, r3, #11
 800788a:	6453      	str	r3, [r2, #68]	; 0x44
 800788c:	e015      	b.n	80078ba <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007894:	695a      	ldr	r2, [r3, #20]
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789c:	4619      	mov	r1, r3
 800789e:	f242 032b 	movw	r3, #8235	; 0x202b
 80078a2:	4313      	orrs	r3, r2
 80078a4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	69fa      	ldr	r2, [r7, #28]
 80078b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078b4:	f043 030b 	orr.w	r3, r3, #11
 80078b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69fa      	ldr	r2, [r7, #28]
 80078c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80078cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6818      	ldr	r0, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80078de:	461a      	mov	r2, r3
 80078e0:	f005 fc34 	bl	800d14c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	695a      	ldr	r2, [r3, #20]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80078f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f005 fb61 	bl	800cfc0 <USB_ReadInterrupts>
 80078fe:	4603      	mov	r3, r0
 8007900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007908:	d124      	bne.n	8007954 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4618      	mov	r0, r3
 8007910:	f005 fbf8 	bl	800d104 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	f004 fcac 	bl	800c276 <USB_GetDevSpeed>
 800791e:	4603      	mov	r3, r0
 8007920:	461a      	mov	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681c      	ldr	r4, [r3, #0]
 800792a:	f001 fd1f 	bl	800936c <HAL_RCC_GetHCLKFreq>
 800792e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007934:	b2db      	uxtb	r3, r3
 8007936:	461a      	mov	r2, r3
 8007938:	4620      	mov	r0, r4
 800793a:	f004 f9b1 	bl	800bca0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f007 ff17 	bl	800f772 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695a      	ldr	r2, [r3, #20]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007952:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4618      	mov	r0, r3
 800795a:	f005 fb31 	bl	800cfc0 <USB_ReadInterrupts>
 800795e:	4603      	mov	r3, r0
 8007960:	f003 0308 	and.w	r3, r3, #8
 8007964:	2b08      	cmp	r3, #8
 8007966:	d10a      	bne.n	800797e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f007 fef4 	bl	800f756 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	695a      	ldr	r2, [r3, #20]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f002 0208 	and.w	r2, r2, #8
 800797c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f005 fb1c 	bl	800cfc0 <USB_ReadInterrupts>
 8007988:	4603      	mov	r3, r0
 800798a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800798e:	2b80      	cmp	r3, #128	; 0x80
 8007990:	d122      	bne.n	80079d8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800799e:	2301      	movs	r3, #1
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
 80079a2:	e014      	b.n	80079ce <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a8:	4613      	mov	r3, r2
 80079aa:	00db      	lsls	r3, r3, #3
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d105      	bne.n	80079c8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fb09 	bl	8007fda <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	3301      	adds	r3, #1
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d3e5      	bcc.n	80079a4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4618      	mov	r0, r3
 80079de:	f005 faef 	bl	800cfc0 <USB_ReadInterrupts>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ec:	d13b      	bne.n	8007a66 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079ee:	2301      	movs	r3, #1
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
 80079f2:	e02b      	b.n	8007a4c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a08:	4613      	mov	r3, r2
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	3340      	adds	r3, #64	; 0x40
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d115      	bne.n	8007a46 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007a1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	da12      	bge.n	8007a46 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a24:	4613      	mov	r3, r2
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	333f      	adds	r3, #63	; 0x3f
 8007a30:	2201      	movs	r2, #1
 8007a32:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 faca 	bl	8007fda <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	3301      	adds	r3, #1
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d3ce      	bcc.n	80079f4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	695a      	ldr	r2, [r3, #20]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f005 faa8 	bl	800cfc0 <USB_ReadInterrupts>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a7a:	d155      	bne.n	8007b28 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a80:	e045      	b.n	8007b0e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a96:	4613      	mov	r3, r2
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	440b      	add	r3, r1
 8007aa0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d12e      	bne.n	8007b08 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007aaa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	da2b      	bge.n	8007b08 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007abc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d121      	bne.n	8007b08 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007ac4:	6879      	ldr	r1, [r7, #4]
 8007ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac8:	4613      	mov	r3, r2
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b04:	6053      	str	r3, [r2, #4]
            break;
 8007b06:	e007      	b.n	8007b18 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d3b4      	bcc.n	8007a82 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	695a      	ldr	r2, [r3, #20]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007b26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f005 fa47 	bl	800cfc0 <USB_ReadInterrupts>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b3c:	d10a      	bne.n	8007b54 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f007 fe98 	bl	800f874 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695a      	ldr	r2, [r3, #20]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f005 fa31 	bl	800cfc0 <USB_ReadInterrupts>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d115      	bne.n	8007b94 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f003 0304 	and.w	r3, r3, #4
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f007 fe88 	bl	800f890 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6859      	ldr	r1, [r3, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	605a      	str	r2, [r3, #4]
 8007b90:	e000      	b.n	8007b94 <HAL_PCD_IRQHandler+0x992>
      return;
 8007b92:	bf00      	nop
    }
  }
}
 8007b94:	3734      	adds	r7, #52	; 0x34
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd90      	pop	{r4, r7, pc}

08007b9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d101      	bne.n	8007bb4 <HAL_PCD_SetAddress+0x1a>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	e013      	b.n	8007bdc <HAL_PCD_SetAddress+0x42>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	78fa      	ldrb	r2, [r7, #3]
 8007bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	78fa      	ldrb	r2, [r7, #3]
 8007bca:	4611      	mov	r1, r2
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f005 f98f 	bl	800cef0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	4608      	mov	r0, r1
 8007bee:	4611      	mov	r1, r2
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	70fb      	strb	r3, [r7, #3]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	803b      	strh	r3, [r7, #0]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	da0f      	bge.n	8007c2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	4613      	mov	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	3338      	adds	r3, #56	; 0x38
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	3304      	adds	r3, #4
 8007c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2201      	movs	r2, #1
 8007c26:	705a      	strb	r2, [r3, #1]
 8007c28:	e00f      	b.n	8007c4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	f003 020f 	and.w	r2, r3, #15
 8007c30:	4613      	mov	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	3304      	adds	r3, #4
 8007c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007c56:	883a      	ldrh	r2, [r7, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	78ba      	ldrb	r2, [r7, #2]
 8007c60:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d004      	beq.n	8007c74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007c74:	78bb      	ldrb	r3, [r7, #2]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d102      	bne.n	8007c80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d101      	bne.n	8007c8e <HAL_PCD_EP_Open+0xaa>
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	e00e      	b.n	8007cac <HAL_PCD_EP_Open+0xc8>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68f9      	ldr	r1, [r7, #12]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f004 fb0f 	bl	800c2c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007caa:	7afb      	ldrb	r3, [r7, #11]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	da0f      	bge.n	8007ce8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	f003 020f 	and.w	r2, r3, #15
 8007cce:	4613      	mov	r3, r2
 8007cd0:	00db      	lsls	r3, r3, #3
 8007cd2:	4413      	add	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	3338      	adds	r3, #56	; 0x38
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	4413      	add	r3, r2
 8007cdc:	3304      	adds	r3, #4
 8007cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	705a      	strb	r2, [r3, #1]
 8007ce6:	e00f      	b.n	8007d08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	f003 020f 	and.w	r2, r3, #15
 8007cee:	4613      	mov	r3, r2
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	3304      	adds	r3, #4
 8007d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	f003 030f 	and.w	r3, r3, #15
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_PCD_EP_Close+0x6e>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e00e      	b.n	8007d40 <HAL_PCD_EP_Close+0x8c>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68f9      	ldr	r1, [r7, #12]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f004 fb4d 	bl	800c3d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	460b      	mov	r3, r1
 8007d56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	f003 020f 	and.w	r2, r3, #15
 8007d5e:	4613      	mov	r3, r2
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	3304      	adds	r3, #4
 8007d70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2200      	movs	r2, #0
 8007d82:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2200      	movs	r2, #0
 8007d88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
 8007d8c:	f003 030f 	and.w	r3, r3, #15
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d102      	bne.n	8007da4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6818      	ldr	r0, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	461a      	mov	r2, r3
 8007db0:	6979      	ldr	r1, [r7, #20]
 8007db2:	f004 fbe9 	bl	800c588 <USB_EPStartXfer>

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007dcc:	78fb      	ldrb	r3, [r7, #3]
 8007dce:	f003 020f 	and.w	r2, r3, #15
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8007de2:	681b      	ldr	r3, [r3, #0]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	607a      	str	r2, [r7, #4]
 8007dfa:	603b      	str	r3, [r7, #0]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e00:	7afb      	ldrb	r3, [r7, #11]
 8007e02:	f003 020f 	and.w	r2, r3, #15
 8007e06:	4613      	mov	r3, r2
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	4413      	add	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	3338      	adds	r3, #56	; 0x38
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	4413      	add	r3, r2
 8007e14:	3304      	adds	r3, #4
 8007e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2200      	movs	r2, #0
 8007e28:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e30:	7afb      	ldrb	r3, [r7, #11]
 8007e32:	f003 030f 	and.w	r3, r3, #15
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d102      	bne.n	8007e4a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	461a      	mov	r2, r3
 8007e56:	6979      	ldr	r1, [r7, #20]
 8007e58:	f004 fb96 	bl	800c588 <USB_EPStartXfer>

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	460b      	mov	r3, r1
 8007e70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	f003 020f 	and.w	r2, r3, #15
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d901      	bls.n	8007e84 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e050      	b.n	8007f26 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	da0f      	bge.n	8007eac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	f003 020f 	and.w	r2, r3, #15
 8007e92:	4613      	mov	r3, r2
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	3338      	adds	r3, #56	; 0x38
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	705a      	strb	r2, [r3, #1]
 8007eaa:	e00d      	b.n	8007ec8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007eac:	78fa      	ldrb	r2, [r7, #3]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	f003 030f 	and.w	r3, r3, #15
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d101      	bne.n	8007ee8 <HAL_PCD_EP_SetStall+0x82>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	e01e      	b.n	8007f26 <HAL_PCD_EP_SetStall+0xc0>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68f9      	ldr	r1, [r7, #12]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f004 ff26 	bl	800cd48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007efc:	78fb      	ldrb	r3, [r7, #3]
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10a      	bne.n	8007f1c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	b2d9      	uxtb	r1, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007f16:	461a      	mov	r2, r3
 8007f18:	f005 f918 	bl	800d14c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b084      	sub	sp, #16
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	460b      	mov	r3, r1
 8007f38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	f003 020f 	and.w	r2, r3, #15
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d901      	bls.n	8007f4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e042      	b.n	8007fd2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	da0f      	bge.n	8007f74 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	f003 020f 	and.w	r2, r3, #15
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	00db      	lsls	r3, r3, #3
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	3338      	adds	r3, #56	; 0x38
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	4413      	add	r3, r2
 8007f68:	3304      	adds	r3, #4
 8007f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	705a      	strb	r2, [r3, #1]
 8007f72:	e00f      	b.n	8007f94 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	f003 020f 	and.w	r2, r3, #15
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	00db      	lsls	r3, r3, #3
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	4413      	add	r3, r2
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_PCD_EP_ClrStall+0x86>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e00e      	b.n	8007fd2 <HAL_PCD_EP_ClrStall+0xa4>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68f9      	ldr	r1, [r7, #12]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f004 ff2e 	bl	800ce24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b084      	sub	sp, #16
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	da0c      	bge.n	8008008 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	f003 020f 	and.w	r2, r3, #15
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	3338      	adds	r3, #56	; 0x38
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	4413      	add	r3, r2
 8008002:	3304      	adds	r3, #4
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	e00c      	b.n	8008022 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008008:	78fb      	ldrb	r3, [r7, #3]
 800800a:	f003 020f 	and.w	r2, r3, #15
 800800e:	4613      	mov	r3, r2
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	3304      	adds	r3, #4
 8008020:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68f9      	ldr	r1, [r7, #12]
 8008028:	4618      	mov	r0, r3
 800802a:	f004 fd4d 	bl	800cac8 <USB_EPStopXfer>
 800802e:	4603      	mov	r3, r0
 8008030:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008032:	7afb      	ldrb	r3, [r7, #11]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b08a      	sub	sp, #40	; 0x28
 8008040:	af02      	add	r7, sp, #8
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	4613      	mov	r3, r2
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	4413      	add	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	3338      	adds	r3, #56	; 0x38
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	4413      	add	r3, r2
 8008060:	3304      	adds	r3, #4
 8008062:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	695a      	ldr	r2, [r3, #20]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	429a      	cmp	r2, r3
 800806e:	d901      	bls.n	8008074 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e06c      	b.n	800814e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	691a      	ldr	r2, [r3, #16]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	69fa      	ldr	r2, [r7, #28]
 8008086:	429a      	cmp	r2, r3
 8008088:	d902      	bls.n	8008090 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	3303      	adds	r3, #3
 8008094:	089b      	lsrs	r3, r3, #2
 8008096:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008098:	e02b      	b.n	80080f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	691a      	ldr	r2, [r3, #16]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d902      	bls.n	80080b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	3303      	adds	r3, #3
 80080ba:	089b      	lsrs	r3, r3, #2
 80080bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	68d9      	ldr	r1, [r3, #12]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	4603      	mov	r3, r0
 80080d4:	6978      	ldr	r0, [r7, #20]
 80080d6:	f004 fda1 	bl	800cc1c <USB_WritePacket>

    ep->xfer_buff  += len;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	441a      	add	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	695a      	ldr	r2, [r3, #20]
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	441a      	add	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	015a      	lsls	r2, r3, #5
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	b29b      	uxth	r3, r3
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	429a      	cmp	r2, r3
 8008106:	d809      	bhi.n	800811c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	695a      	ldr	r2, [r3, #20]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008110:	429a      	cmp	r2, r3
 8008112:	d203      	bcs.n	800811c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1be      	bne.n	800809a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	691a      	ldr	r2, [r3, #16]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	429a      	cmp	r2, r3
 8008126:	d811      	bhi.n	800814c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	f003 030f 	and.w	r3, r3, #15
 800812e:	2201      	movs	r2, #1
 8008130:	fa02 f303 	lsl.w	r3, r2, r3
 8008134:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800813c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	43db      	mvns	r3, r3
 8008142:	6939      	ldr	r1, [r7, #16]
 8008144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008148:	4013      	ands	r3, r2
 800814a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3720      	adds	r7, #32
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	333c      	adds	r3, #60	; 0x3c
 8008170:	3304      	adds	r3, #4
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d17b      	bne.n	8008286 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f003 0308 	and.w	r3, r3, #8
 8008194:	2b00      	cmp	r3, #0
 8008196:	d015      	beq.n	80081c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	4a61      	ldr	r2, [pc, #388]	; (8008320 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800819c:	4293      	cmp	r3, r2
 800819e:	f240 80b9 	bls.w	8008314 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 80b3 	beq.w	8008314 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ba:	461a      	mov	r2, r3
 80081bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081c0:	6093      	str	r3, [r2, #8]
 80081c2:	e0a7      	b.n	8008314 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d009      	beq.n	80081e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081da:	461a      	mov	r2, r3
 80081dc:	2320      	movs	r3, #32
 80081de:	6093      	str	r3, [r2, #8]
 80081e0:	e098      	b.n	8008314 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f040 8093 	bne.w	8008314 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	4a4b      	ldr	r2, [pc, #300]	; (8008320 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d90f      	bls.n	8008216 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00a      	beq.n	8008216 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	4413      	add	r3, r2
 8008208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820c:	461a      	mov	r2, r3
 800820e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008212:	6093      	str	r3, [r2, #8]
 8008214:	e07e      	b.n	8008314 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	4613      	mov	r3, r2
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	4413      	add	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	4413      	add	r3, r2
 8008228:	3304      	adds	r3, #4
 800822a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6a1a      	ldr	r2, [r3, #32]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	0159      	lsls	r1, r3, #5
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	440b      	add	r3, r1
 8008238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008242:	1ad2      	subs	r2, r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d114      	bne.n	8008278 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6818      	ldr	r0, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008260:	461a      	mov	r2, r3
 8008262:	2101      	movs	r1, #1
 8008264:	f004 ff72 	bl	800d14c <USB_EP0_OutStart>
 8008268:	e006      	b.n	8008278 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	441a      	add	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	b2db      	uxtb	r3, r3
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f007 fa34 	bl	800f6ec <HAL_PCD_DataOutStageCallback>
 8008284:	e046      	b.n	8008314 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	4a26      	ldr	r2, [pc, #152]	; (8008324 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d124      	bne.n	80082d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00a      	beq.n	80082ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a4:	461a      	mov	r2, r3
 80082a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082aa:	6093      	str	r3, [r2, #8]
 80082ac:	e032      	b.n	8008314 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	f003 0320 	and.w	r3, r3, #32
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d008      	beq.n	80082ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c4:	461a      	mov	r2, r3
 80082c6:	2320      	movs	r3, #32
 80082c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f007 fa0b 	bl	800f6ec <HAL_PCD_DataOutStageCallback>
 80082d6:	e01d      	b.n	8008314 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d114      	bne.n	8008308 <PCD_EP_OutXfrComplete_int+0x1b0>
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	4613      	mov	r3, r2
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	4413      	add	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	440b      	add	r3, r1
 80082ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d108      	bne.n	8008308 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008300:	461a      	mov	r2, r3
 8008302:	2100      	movs	r1, #0
 8008304:	f004 ff22 	bl	800d14c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	b2db      	uxtb	r3, r3
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f007 f9ec 	bl	800f6ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3720      	adds	r7, #32
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	4f54300a 	.word	0x4f54300a
 8008324:	4f54310a 	.word	0x4f54310a

08008328 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	333c      	adds	r3, #60	; 0x3c
 8008340:	3304      	adds	r3, #4
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4a15      	ldr	r2, [pc, #84]	; (80083b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d90e      	bls.n	800837c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008364:	2b00      	cmp	r3, #0
 8008366:	d009      	beq.n	800837c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008374:	461a      	mov	r2, r3
 8008376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800837a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f007 f9a3 	bl	800f6c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4a0a      	ldr	r2, [pc, #40]	; (80083b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d90c      	bls.n	80083a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d108      	bne.n	80083a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800839c:	461a      	mov	r2, r3
 800839e:	2101      	movs	r1, #1
 80083a0:	f004 fed4 	bl	800d14c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	4f54300a 	.word	0x4f54300a

080083b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	70fb      	strb	r3, [r7, #3]
 80083c0:	4613      	mov	r3, r2
 80083c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d107      	bne.n	80083e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80083d2:	883b      	ldrh	r3, [r7, #0]
 80083d4:	0419      	lsls	r1, r3, #16
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	430a      	orrs	r2, r1
 80083de:	629a      	str	r2, [r3, #40]	; 0x28
 80083e0:	e028      	b.n	8008434 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e8:	0c1b      	lsrs	r3, r3, #16
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	4413      	add	r3, r2
 80083ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
 80083f4:	e00d      	b.n	8008412 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	3340      	adds	r3, #64	; 0x40
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	0c1b      	lsrs	r3, r3, #16
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	4413      	add	r3, r2
 800840a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	3301      	adds	r3, #1
 8008410:	73fb      	strb	r3, [r7, #15]
 8008412:	7bfa      	ldrb	r2, [r7, #15]
 8008414:	78fb      	ldrb	r3, [r7, #3]
 8008416:	3b01      	subs	r3, #1
 8008418:	429a      	cmp	r2, r3
 800841a:	d3ec      	bcc.n	80083f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800841c:	883b      	ldrh	r3, [r7, #0]
 800841e:	0418      	lsls	r0, r3, #16
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6819      	ldr	r1, [r3, #0]
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	3b01      	subs	r3, #1
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	4302      	orrs	r2, r0
 800842c:	3340      	adds	r3, #64	; 0x40
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	440b      	add	r3, r1
 8008432:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008442:	b480      	push	{r7}
 8008444:	b083      	sub	sp, #12
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	887a      	ldrh	r2, [r7, #2]
 8008454:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008492:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8008494:	4313      	orrs	r3, r2
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	10000003 	.word	0x10000003

080084ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80084cc:	4b19      	ldr	r3, [pc, #100]	; (8008534 <HAL_PWREx_ConfigSupply+0x70>)
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f003 0304 	and.w	r3, r3, #4
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	d00a      	beq.n	80084ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80084d8:	4b16      	ldr	r3, [pc, #88]	; (8008534 <HAL_PWREx_ConfigSupply+0x70>)
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	f003 0307 	and.w	r3, r3, #7
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d001      	beq.n	80084ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e01f      	b.n	800852a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	e01d      	b.n	800852a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80084ee:	4b11      	ldr	r3, [pc, #68]	; (8008534 <HAL_PWREx_ConfigSupply+0x70>)
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f023 0207 	bic.w	r2, r3, #7
 80084f6:	490f      	ldr	r1, [pc, #60]	; (8008534 <HAL_PWREx_ConfigSupply+0x70>)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80084fe:	f7fa fe51 	bl	80031a4 <HAL_GetTick>
 8008502:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008504:	e009      	b.n	800851a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008506:	f7fa fe4d 	bl	80031a4 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008514:	d901      	bls.n	800851a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e007      	b.n	800852a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800851a:	4b06      	ldr	r3, [pc, #24]	; (8008534 <HAL_PWREx_ConfigSupply+0x70>)
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008526:	d1ee      	bne.n	8008506 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	58024800 	.word	0x58024800

08008538 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800853c:	4b05      	ldr	r3, [pc, #20]	; (8008554 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	4a04      	ldr	r2, [pc, #16]	; (8008554 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008546:	60d3      	str	r3, [r2, #12]
}
 8008548:	bf00      	nop
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	58024800 	.word	0x58024800

08008558 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08c      	sub	sp, #48	; 0x30
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e3c8      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 8087 	beq.w	8008686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008578:	4b88      	ldr	r3, [pc, #544]	; (800879c <HAL_RCC_OscConfig+0x244>)
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008580:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008582:	4b86      	ldr	r3, [pc, #536]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008586:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	2b10      	cmp	r3, #16
 800858c:	d007      	beq.n	800859e <HAL_RCC_OscConfig+0x46>
 800858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008590:	2b18      	cmp	r3, #24
 8008592:	d110      	bne.n	80085b6 <HAL_RCC_OscConfig+0x5e>
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	2b02      	cmp	r3, #2
 800859c:	d10b      	bne.n	80085b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800859e:	4b7f      	ldr	r3, [pc, #508]	; (800879c <HAL_RCC_OscConfig+0x244>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d06c      	beq.n	8008684 <HAL_RCC_OscConfig+0x12c>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d168      	bne.n	8008684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e3a2      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085be:	d106      	bne.n	80085ce <HAL_RCC_OscConfig+0x76>
 80085c0:	4b76      	ldr	r3, [pc, #472]	; (800879c <HAL_RCC_OscConfig+0x244>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a75      	ldr	r2, [pc, #468]	; (800879c <HAL_RCC_OscConfig+0x244>)
 80085c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ca:	6013      	str	r3, [r2, #0]
 80085cc:	e02e      	b.n	800862c <HAL_RCC_OscConfig+0xd4>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10c      	bne.n	80085f0 <HAL_RCC_OscConfig+0x98>
 80085d6:	4b71      	ldr	r3, [pc, #452]	; (800879c <HAL_RCC_OscConfig+0x244>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a70      	ldr	r2, [pc, #448]	; (800879c <HAL_RCC_OscConfig+0x244>)
 80085dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	4b6e      	ldr	r3, [pc, #440]	; (800879c <HAL_RCC_OscConfig+0x244>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a6d      	ldr	r2, [pc, #436]	; (800879c <HAL_RCC_OscConfig+0x244>)
 80085e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	e01d      	b.n	800862c <HAL_RCC_OscConfig+0xd4>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085f8:	d10c      	bne.n	8008614 <HAL_RCC_OscConfig+0xbc>
 80085fa:	4b68      	ldr	r3, [pc, #416]	; (800879c <HAL_RCC_OscConfig+0x244>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a67      	ldr	r2, [pc, #412]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	4b65      	ldr	r3, [pc, #404]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a64      	ldr	r2, [pc, #400]	; (800879c <HAL_RCC_OscConfig+0x244>)
 800860c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	e00b      	b.n	800862c <HAL_RCC_OscConfig+0xd4>
 8008614:	4b61      	ldr	r3, [pc, #388]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a60      	ldr	r2, [pc, #384]	; (800879c <HAL_RCC_OscConfig+0x244>)
 800861a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	4b5e      	ldr	r3, [pc, #376]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a5d      	ldr	r2, [pc, #372]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800862a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d013      	beq.n	800865c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008634:	f7fa fdb6 	bl	80031a4 <HAL_GetTick>
 8008638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800863a:	e008      	b.n	800864e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800863c:	f7fa fdb2 	bl	80031a4 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b64      	cmp	r3, #100	; 0x64
 8008648:	d901      	bls.n	800864e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e356      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800864e:	4b53      	ldr	r3, [pc, #332]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0f0      	beq.n	800863c <HAL_RCC_OscConfig+0xe4>
 800865a:	e014      	b.n	8008686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800865c:	f7fa fda2 	bl	80031a4 <HAL_GetTick>
 8008660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008662:	e008      	b.n	8008676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008664:	f7fa fd9e 	bl	80031a4 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	2b64      	cmp	r3, #100	; 0x64
 8008670:	d901      	bls.n	8008676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e342      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008676:	4b49      	ldr	r3, [pc, #292]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1f0      	bne.n	8008664 <HAL_RCC_OscConfig+0x10c>
 8008682:	e000      	b.n	8008686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 808c 	beq.w	80087ac <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008694:	4b41      	ldr	r3, [pc, #260]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800869c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800869e:	4b3f      	ldr	r3, [pc, #252]	; (800879c <HAL_RCC_OscConfig+0x244>)
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d007      	beq.n	80086ba <HAL_RCC_OscConfig+0x162>
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	2b18      	cmp	r3, #24
 80086ae:	d137      	bne.n	8008720 <HAL_RCC_OscConfig+0x1c8>
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d132      	bne.n	8008720 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086ba:	4b38      	ldr	r3, [pc, #224]	; (800879c <HAL_RCC_OscConfig+0x244>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0304 	and.w	r3, r3, #4
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d005      	beq.n	80086d2 <HAL_RCC_OscConfig+0x17a>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e314      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086d2:	4b32      	ldr	r3, [pc, #200]	; (800879c <HAL_RCC_OscConfig+0x244>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f023 0219 	bic.w	r2, r3, #25
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	492f      	ldr	r1, [pc, #188]	; (800879c <HAL_RCC_OscConfig+0x244>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e4:	f7fa fd5e 	bl	80031a4 <HAL_GetTick>
 80086e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086ea:	e008      	b.n	80086fe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086ec:	f7fa fd5a 	bl	80031a4 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d901      	bls.n	80086fe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e2fe      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086fe:	4b27      	ldr	r3, [pc, #156]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0304 	and.w	r3, r3, #4
 8008706:	2b00      	cmp	r3, #0
 8008708:	d0f0      	beq.n	80086ec <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800870a:	4b24      	ldr	r3, [pc, #144]	; (800879c <HAL_RCC_OscConfig+0x244>)
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	061b      	lsls	r3, r3, #24
 8008718:	4920      	ldr	r1, [pc, #128]	; (800879c <HAL_RCC_OscConfig+0x244>)
 800871a:	4313      	orrs	r3, r2
 800871c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800871e:	e045      	b.n	80087ac <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d026      	beq.n	8008776 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008728:	4b1c      	ldr	r3, [pc, #112]	; (800879c <HAL_RCC_OscConfig+0x244>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f023 0219 	bic.w	r2, r3, #25
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	4919      	ldr	r1, [pc, #100]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008736:	4313      	orrs	r3, r2
 8008738:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873a:	f7fa fd33 	bl	80031a4 <HAL_GetTick>
 800873e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008740:	e008      	b.n	8008754 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008742:	f7fa fd2f 	bl	80031a4 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	2b02      	cmp	r3, #2
 800874e:	d901      	bls.n	8008754 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e2d3      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008754:	4b11      	ldr	r3, [pc, #68]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d0f0      	beq.n	8008742 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008760:	4b0e      	ldr	r3, [pc, #56]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	061b      	lsls	r3, r3, #24
 800876e:	490b      	ldr	r1, [pc, #44]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008770:	4313      	orrs	r3, r2
 8008772:	604b      	str	r3, [r1, #4]
 8008774:	e01a      	b.n	80087ac <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008776:	4b09      	ldr	r3, [pc, #36]	; (800879c <HAL_RCC_OscConfig+0x244>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a08      	ldr	r2, [pc, #32]	; (800879c <HAL_RCC_OscConfig+0x244>)
 800877c:	f023 0301 	bic.w	r3, r3, #1
 8008780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008782:	f7fa fd0f 	bl	80031a4 <HAL_GetTick>
 8008786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008788:	e00a      	b.n	80087a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800878a:	f7fa fd0b 	bl	80031a4 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d903      	bls.n	80087a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e2af      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
 800879c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80087a0:	4b96      	ldr	r3, [pc, #600]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 0304 	and.w	r3, r3, #4
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1ee      	bne.n	800878a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0310 	and.w	r3, r3, #16
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d06a      	beq.n	800888e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087b8:	4b90      	ldr	r3, [pc, #576]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087c0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087c2:	4b8e      	ldr	r3, [pc, #568]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80087c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	2b08      	cmp	r3, #8
 80087cc:	d007      	beq.n	80087de <HAL_RCC_OscConfig+0x286>
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	2b18      	cmp	r3, #24
 80087d2:	d11b      	bne.n	800880c <HAL_RCC_OscConfig+0x2b4>
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f003 0303 	and.w	r3, r3, #3
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d116      	bne.n	800880c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087de:	4b87      	ldr	r3, [pc, #540]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <HAL_RCC_OscConfig+0x29e>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	2b80      	cmp	r3, #128	; 0x80
 80087f0:	d001      	beq.n	80087f6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e282      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087f6:	4b81      	ldr	r3, [pc, #516]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	061b      	lsls	r3, r3, #24
 8008804:	497d      	ldr	r1, [pc, #500]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 8008806:	4313      	orrs	r3, r2
 8008808:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800880a:	e040      	b.n	800888e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d023      	beq.n	800885c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008814:	4b79      	ldr	r3, [pc, #484]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a78      	ldr	r2, [pc, #480]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 800881a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008820:	f7fa fcc0 	bl	80031a4 <HAL_GetTick>
 8008824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008826:	e008      	b.n	800883a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008828:	f7fa fcbc 	bl	80031a4 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	2b02      	cmp	r3, #2
 8008834:	d901      	bls.n	800883a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e260      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800883a:	4b70      	ldr	r3, [pc, #448]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0f0      	beq.n	8008828 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008846:	4b6d      	ldr	r3, [pc, #436]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	061b      	lsls	r3, r3, #24
 8008854:	4969      	ldr	r1, [pc, #420]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 8008856:	4313      	orrs	r3, r2
 8008858:	60cb      	str	r3, [r1, #12]
 800885a:	e018      	b.n	800888e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800885c:	4b67      	ldr	r3, [pc, #412]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a66      	ldr	r2, [pc, #408]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 8008862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008868:	f7fa fc9c 	bl	80031a4 <HAL_GetTick>
 800886c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800886e:	e008      	b.n	8008882 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008870:	f7fa fc98 	bl	80031a4 <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	2b02      	cmp	r3, #2
 800887c:	d901      	bls.n	8008882 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e23c      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008882:	4b5e      	ldr	r3, [pc, #376]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1f0      	bne.n	8008870 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0308 	and.w	r3, r3, #8
 8008896:	2b00      	cmp	r3, #0
 8008898:	d036      	beq.n	8008908 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d019      	beq.n	80088d6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088a2:	4b56      	ldr	r3, [pc, #344]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80088a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a6:	4a55      	ldr	r2, [pc, #340]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80088a8:	f043 0301 	orr.w	r3, r3, #1
 80088ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088ae:	f7fa fc79 	bl	80031a4 <HAL_GetTick>
 80088b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088b4:	e008      	b.n	80088c8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088b6:	f7fa fc75 	bl	80031a4 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d901      	bls.n	80088c8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e219      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088c8:	4b4c      	ldr	r3, [pc, #304]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80088ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0f0      	beq.n	80088b6 <HAL_RCC_OscConfig+0x35e>
 80088d4:	e018      	b.n	8008908 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088d6:	4b49      	ldr	r3, [pc, #292]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80088d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088da:	4a48      	ldr	r2, [pc, #288]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80088dc:	f023 0301 	bic.w	r3, r3, #1
 80088e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e2:	f7fa fc5f 	bl	80031a4 <HAL_GetTick>
 80088e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088e8:	e008      	b.n	80088fc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088ea:	f7fa fc5b 	bl	80031a4 <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d901      	bls.n	80088fc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e1ff      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088fc:	4b3f      	ldr	r3, [pc, #252]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80088fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1f0      	bne.n	80088ea <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0320 	and.w	r3, r3, #32
 8008910:	2b00      	cmp	r3, #0
 8008912:	d036      	beq.n	8008982 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d019      	beq.n	8008950 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800891c:	4b37      	ldr	r3, [pc, #220]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a36      	ldr	r2, [pc, #216]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 8008922:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008926:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008928:	f7fa fc3c 	bl	80031a4 <HAL_GetTick>
 800892c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800892e:	e008      	b.n	8008942 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008930:	f7fa fc38 	bl	80031a4 <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e1dc      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008942:	4b2e      	ldr	r3, [pc, #184]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0f0      	beq.n	8008930 <HAL_RCC_OscConfig+0x3d8>
 800894e:	e018      	b.n	8008982 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008950:	4b2a      	ldr	r3, [pc, #168]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a29      	ldr	r2, [pc, #164]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 8008956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800895a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800895c:	f7fa fc22 	bl	80031a4 <HAL_GetTick>
 8008960:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008962:	e008      	b.n	8008976 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008964:	f7fa fc1e 	bl	80031a4 <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	2b02      	cmp	r3, #2
 8008970:	d901      	bls.n	8008976 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e1c2      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008976:	4b21      	ldr	r3, [pc, #132]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f0      	bne.n	8008964 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0304 	and.w	r3, r3, #4
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 8086 	beq.w	8008a9c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008990:	4b1b      	ldr	r3, [pc, #108]	; (8008a00 <HAL_RCC_OscConfig+0x4a8>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a1a      	ldr	r2, [pc, #104]	; (8008a00 <HAL_RCC_OscConfig+0x4a8>)
 8008996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800899a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800899c:	f7fa fc02 	bl	80031a4 <HAL_GetTick>
 80089a0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089a2:	e008      	b.n	80089b6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089a4:	f7fa fbfe 	bl	80031a4 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b64      	cmp	r3, #100	; 0x64
 80089b0:	d901      	bls.n	80089b6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e1a2      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089b6:	4b12      	ldr	r3, [pc, #72]	; (8008a00 <HAL_RCC_OscConfig+0x4a8>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0f0      	beq.n	80089a4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d106      	bne.n	80089d8 <HAL_RCC_OscConfig+0x480>
 80089ca:	4b0c      	ldr	r3, [pc, #48]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80089cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ce:	4a0b      	ldr	r2, [pc, #44]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80089d0:	f043 0301 	orr.w	r3, r3, #1
 80089d4:	6713      	str	r3, [r2, #112]	; 0x70
 80089d6:	e032      	b.n	8008a3e <HAL_RCC_OscConfig+0x4e6>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d111      	bne.n	8008a04 <HAL_RCC_OscConfig+0x4ac>
 80089e0:	4b06      	ldr	r3, [pc, #24]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80089e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e4:	4a05      	ldr	r2, [pc, #20]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80089e6:	f023 0301 	bic.w	r3, r3, #1
 80089ea:	6713      	str	r3, [r2, #112]	; 0x70
 80089ec:	4b03      	ldr	r3, [pc, #12]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80089ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f0:	4a02      	ldr	r2, [pc, #8]	; (80089fc <HAL_RCC_OscConfig+0x4a4>)
 80089f2:	f023 0304 	bic.w	r3, r3, #4
 80089f6:	6713      	str	r3, [r2, #112]	; 0x70
 80089f8:	e021      	b.n	8008a3e <HAL_RCC_OscConfig+0x4e6>
 80089fa:	bf00      	nop
 80089fc:	58024400 	.word	0x58024400
 8008a00:	58024800 	.word	0x58024800
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	2b05      	cmp	r3, #5
 8008a0a:	d10c      	bne.n	8008a26 <HAL_RCC_OscConfig+0x4ce>
 8008a0c:	4b83      	ldr	r3, [pc, #524]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a10:	4a82      	ldr	r2, [pc, #520]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008a12:	f043 0304 	orr.w	r3, r3, #4
 8008a16:	6713      	str	r3, [r2, #112]	; 0x70
 8008a18:	4b80      	ldr	r3, [pc, #512]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1c:	4a7f      	ldr	r2, [pc, #508]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008a1e:	f043 0301 	orr.w	r3, r3, #1
 8008a22:	6713      	str	r3, [r2, #112]	; 0x70
 8008a24:	e00b      	b.n	8008a3e <HAL_RCC_OscConfig+0x4e6>
 8008a26:	4b7d      	ldr	r3, [pc, #500]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2a:	4a7c      	ldr	r2, [pc, #496]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008a2c:	f023 0301 	bic.w	r3, r3, #1
 8008a30:	6713      	str	r3, [r2, #112]	; 0x70
 8008a32:	4b7a      	ldr	r3, [pc, #488]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a36:	4a79      	ldr	r2, [pc, #484]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008a38:	f023 0304 	bic.w	r3, r3, #4
 8008a3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d015      	beq.n	8008a72 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a46:	f7fa fbad 	bl	80031a4 <HAL_GetTick>
 8008a4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a4c:	e00a      	b.n	8008a64 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a4e:	f7fa fba9 	bl	80031a4 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d901      	bls.n	8008a64 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e14b      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a64:	4b6d      	ldr	r3, [pc, #436]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0ee      	beq.n	8008a4e <HAL_RCC_OscConfig+0x4f6>
 8008a70:	e014      	b.n	8008a9c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a72:	f7fa fb97 	bl	80031a4 <HAL_GetTick>
 8008a76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a78:	e00a      	b.n	8008a90 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a7a:	f7fa fb93 	bl	80031a4 <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d901      	bls.n	8008a90 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e135      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a90:	4b62      	ldr	r3, [pc, #392]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1ee      	bne.n	8008a7a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 812a 	beq.w	8008cfa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008aa6:	4b5d      	ldr	r3, [pc, #372]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008aae:	2b18      	cmp	r3, #24
 8008ab0:	f000 80ba 	beq.w	8008c28 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	f040 8095 	bne.w	8008be8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008abe:	4b57      	ldr	r3, [pc, #348]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a56      	ldr	r2, [pc, #344]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aca:	f7fa fb6b 	bl	80031a4 <HAL_GetTick>
 8008ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ad0:	e008      	b.n	8008ae4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ad2:	f7fa fb67 	bl	80031a4 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d901      	bls.n	8008ae4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e10b      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ae4:	4b4d      	ldr	r3, [pc, #308]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1f0      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008af0:	4b4a      	ldr	r3, [pc, #296]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008af4:	4b4a      	ldr	r3, [pc, #296]	; (8008c20 <HAL_RCC_OscConfig+0x6c8>)
 8008af6:	4013      	ands	r3, r2
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008b00:	0112      	lsls	r2, r2, #4
 8008b02:	430a      	orrs	r2, r1
 8008b04:	4945      	ldr	r1, [pc, #276]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	628b      	str	r3, [r1, #40]	; 0x28
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	025b      	lsls	r3, r3, #9
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b24:	3b01      	subs	r3, #1
 8008b26:	041b      	lsls	r3, r3, #16
 8008b28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b32:	3b01      	subs	r3, #1
 8008b34:	061b      	lsls	r3, r3, #24
 8008b36:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b3a:	4938      	ldr	r1, [pc, #224]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008b40:	4b36      	ldr	r3, [pc, #216]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b44:	4a35      	ldr	r2, [pc, #212]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b46:	f023 0301 	bic.w	r3, r3, #1
 8008b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b4c:	4b33      	ldr	r3, [pc, #204]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b50:	4b34      	ldr	r3, [pc, #208]	; (8008c24 <HAL_RCC_OscConfig+0x6cc>)
 8008b52:	4013      	ands	r3, r2
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b58:	00d2      	lsls	r2, r2, #3
 8008b5a:	4930      	ldr	r1, [pc, #192]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008b60:	4b2e      	ldr	r3, [pc, #184]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	f023 020c 	bic.w	r2, r3, #12
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6c:	492b      	ldr	r1, [pc, #172]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008b72:	4b2a      	ldr	r3, [pc, #168]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	f023 0202 	bic.w	r2, r3, #2
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7e:	4927      	ldr	r1, [pc, #156]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008b84:	4b25      	ldr	r3, [pc, #148]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b88:	4a24      	ldr	r2, [pc, #144]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b90:	4b22      	ldr	r3, [pc, #136]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	4a21      	ldr	r2, [pc, #132]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b9c:	4b1f      	ldr	r3, [pc, #124]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	4a1e      	ldr	r2, [pc, #120]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008ba2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008ba8:	4b1c      	ldr	r3, [pc, #112]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	4a1b      	ldr	r2, [pc, #108]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008bae:	f043 0301 	orr.w	r3, r3, #1
 8008bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bb4:	4b19      	ldr	r3, [pc, #100]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a18      	ldr	r2, [pc, #96]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc0:	f7fa faf0 	bl	80031a4 <HAL_GetTick>
 8008bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bc6:	e008      	b.n	8008bda <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bc8:	f7fa faec 	bl	80031a4 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e090      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bda:	4b10      	ldr	r3, [pc, #64]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0f0      	beq.n	8008bc8 <HAL_RCC_OscConfig+0x670>
 8008be6:	e088      	b.n	8008cfa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008be8:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a0b      	ldr	r2, [pc, #44]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf4:	f7fa fad6 	bl	80031a4 <HAL_GetTick>
 8008bf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bfc:	f7fa fad2 	bl	80031a4 <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e076      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c0e:	4b03      	ldr	r3, [pc, #12]	; (8008c1c <HAL_RCC_OscConfig+0x6c4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1f0      	bne.n	8008bfc <HAL_RCC_OscConfig+0x6a4>
 8008c1a:	e06e      	b.n	8008cfa <HAL_RCC_OscConfig+0x7a2>
 8008c1c:	58024400 	.word	0x58024400
 8008c20:	fffffc0c 	.word	0xfffffc0c
 8008c24:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008c28:	4b36      	ldr	r3, [pc, #216]	; (8008d04 <HAL_RCC_OscConfig+0x7ac>)
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008c2e:	4b35      	ldr	r3, [pc, #212]	; (8008d04 <HAL_RCC_OscConfig+0x7ac>)
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d031      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f003 0203 	and.w	r2, r3, #3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d12a      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	091b      	lsrs	r3, r3, #4
 8008c4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d122      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c64:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d11a      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	0a5b      	lsrs	r3, r3, #9
 8008c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c76:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d111      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	0c1b      	lsrs	r3, r3, #16
 8008c80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c88:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d108      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	0e1b      	lsrs	r3, r3, #24
 8008c92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d001      	beq.n	8008ca4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e02b      	b.n	8008cfc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008ca4:	4b17      	ldr	r3, [pc, #92]	; (8008d04 <HAL_RCC_OscConfig+0x7ac>)
 8008ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca8:	08db      	lsrs	r3, r3, #3
 8008caa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d01f      	beq.n	8008cfa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008cba:	4b12      	ldr	r3, [pc, #72]	; (8008d04 <HAL_RCC_OscConfig+0x7ac>)
 8008cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbe:	4a11      	ldr	r2, [pc, #68]	; (8008d04 <HAL_RCC_OscConfig+0x7ac>)
 8008cc0:	f023 0301 	bic.w	r3, r3, #1
 8008cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008cc6:	f7fa fa6d 	bl	80031a4 <HAL_GetTick>
 8008cca:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008ccc:	bf00      	nop
 8008cce:	f7fa fa69 	bl	80031a4 <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d0f9      	beq.n	8008cce <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008cda:	4b0a      	ldr	r3, [pc, #40]	; (8008d04 <HAL_RCC_OscConfig+0x7ac>)
 8008cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cde:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <HAL_RCC_OscConfig+0x7b0>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ce6:	00d2      	lsls	r2, r2, #3
 8008ce8:	4906      	ldr	r1, [pc, #24]	; (8008d04 <HAL_RCC_OscConfig+0x7ac>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008cee:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <HAL_RCC_OscConfig+0x7ac>)
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	4a04      	ldr	r2, [pc, #16]	; (8008d04 <HAL_RCC_OscConfig+0x7ac>)
 8008cf4:	f043 0301 	orr.w	r3, r3, #1
 8008cf8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3730      	adds	r7, #48	; 0x30
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	58024400 	.word	0x58024400
 8008d08:	ffff0007 	.word	0xffff0007

08008d0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e19c      	b.n	800905a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d20:	4b8a      	ldr	r3, [pc, #552]	; (8008f4c <HAL_RCC_ClockConfig+0x240>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 030f 	and.w	r3, r3, #15
 8008d28:	683a      	ldr	r2, [r7, #0]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d910      	bls.n	8008d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d2e:	4b87      	ldr	r3, [pc, #540]	; (8008f4c <HAL_RCC_ClockConfig+0x240>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f023 020f 	bic.w	r2, r3, #15
 8008d36:	4985      	ldr	r1, [pc, #532]	; (8008f4c <HAL_RCC_ClockConfig+0x240>)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d3e:	4b83      	ldr	r3, [pc, #524]	; (8008f4c <HAL_RCC_ClockConfig+0x240>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 030f 	and.w	r3, r3, #15
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d001      	beq.n	8008d50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e184      	b.n	800905a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d010      	beq.n	8008d7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	691a      	ldr	r2, [r3, #16]
 8008d60:	4b7b      	ldr	r3, [pc, #492]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d908      	bls.n	8008d7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d6c:	4b78      	ldr	r3, [pc, #480]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	4975      	ldr	r1, [pc, #468]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0308 	and.w	r3, r3, #8
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d010      	beq.n	8008dac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	695a      	ldr	r2, [r3, #20]
 8008d8e:	4b70      	ldr	r3, [pc, #448]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d908      	bls.n	8008dac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d9a:	4b6d      	ldr	r3, [pc, #436]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	496a      	ldr	r1, [pc, #424]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0310 	and.w	r3, r3, #16
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d010      	beq.n	8008dda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699a      	ldr	r2, [r3, #24]
 8008dbc:	4b64      	ldr	r3, [pc, #400]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008dbe:	69db      	ldr	r3, [r3, #28]
 8008dc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d908      	bls.n	8008dda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008dc8:	4b61      	ldr	r3, [pc, #388]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008dca:	69db      	ldr	r3, [r3, #28]
 8008dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	495e      	ldr	r1, [pc, #376]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0320 	and.w	r3, r3, #32
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d010      	beq.n	8008e08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69da      	ldr	r2, [r3, #28]
 8008dea:	4b59      	ldr	r3, [pc, #356]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d908      	bls.n	8008e08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008df6:	4b56      	ldr	r3, [pc, #344]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	4953      	ldr	r1, [pc, #332]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0302 	and.w	r3, r3, #2
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d010      	beq.n	8008e36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68da      	ldr	r2, [r3, #12]
 8008e18:	4b4d      	ldr	r3, [pc, #308]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	f003 030f 	and.w	r3, r3, #15
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d908      	bls.n	8008e36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e24:	4b4a      	ldr	r3, [pc, #296]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	f023 020f 	bic.w	r2, r3, #15
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	4947      	ldr	r1, [pc, #284]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d055      	beq.n	8008eee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008e42:	4b43      	ldr	r3, [pc, #268]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	4940      	ldr	r1, [pc, #256]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d107      	bne.n	8008e6c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e5c:	4b3c      	ldr	r3, [pc, #240]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d121      	bne.n	8008eac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e0f6      	b.n	800905a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d107      	bne.n	8008e84 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e74:	4b36      	ldr	r3, [pc, #216]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d115      	bne.n	8008eac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e0ea      	b.n	800905a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d107      	bne.n	8008e9c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e8c:	4b30      	ldr	r3, [pc, #192]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d109      	bne.n	8008eac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e0de      	b.n	800905a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e9c:	4b2c      	ldr	r3, [pc, #176]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0304 	and.w	r3, r3, #4
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e0d6      	b.n	800905a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008eac:	4b28      	ldr	r3, [pc, #160]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	f023 0207 	bic.w	r2, r3, #7
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	4925      	ldr	r1, [pc, #148]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ebe:	f7fa f971 	bl	80031a4 <HAL_GetTick>
 8008ec2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ec4:	e00a      	b.n	8008edc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ec6:	f7fa f96d 	bl	80031a4 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d901      	bls.n	8008edc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e0be      	b.n	800905a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008edc:	4b1c      	ldr	r3, [pc, #112]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d1eb      	bne.n	8008ec6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0302 	and.w	r3, r3, #2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d010      	beq.n	8008f1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	4b14      	ldr	r3, [pc, #80]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	f003 030f 	and.w	r3, r3, #15
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d208      	bcs.n	8008f1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f0a:	4b11      	ldr	r3, [pc, #68]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	f023 020f 	bic.w	r2, r3, #15
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	490e      	ldr	r1, [pc, #56]	; (8008f50 <HAL_RCC_ClockConfig+0x244>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f1c:	4b0b      	ldr	r3, [pc, #44]	; (8008f4c <HAL_RCC_ClockConfig+0x240>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 030f 	and.w	r3, r3, #15
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d214      	bcs.n	8008f54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f2a:	4b08      	ldr	r3, [pc, #32]	; (8008f4c <HAL_RCC_ClockConfig+0x240>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f023 020f 	bic.w	r2, r3, #15
 8008f32:	4906      	ldr	r1, [pc, #24]	; (8008f4c <HAL_RCC_ClockConfig+0x240>)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f3a:	4b04      	ldr	r3, [pc, #16]	; (8008f4c <HAL_RCC_ClockConfig+0x240>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 030f 	and.w	r3, r3, #15
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d005      	beq.n	8008f54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e086      	b.n	800905a <HAL_RCC_ClockConfig+0x34e>
 8008f4c:	52002000 	.word	0x52002000
 8008f50:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0304 	and.w	r3, r3, #4
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d010      	beq.n	8008f82 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	691a      	ldr	r2, [r3, #16]
 8008f64:	4b3f      	ldr	r3, [pc, #252]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d208      	bcs.n	8008f82 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f70:	4b3c      	ldr	r3, [pc, #240]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	4939      	ldr	r1, [pc, #228]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0308 	and.w	r3, r3, #8
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d010      	beq.n	8008fb0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	695a      	ldr	r2, [r3, #20]
 8008f92:	4b34      	ldr	r3, [pc, #208]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d208      	bcs.n	8008fb0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f9e:	4b31      	ldr	r3, [pc, #196]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	492e      	ldr	r1, [pc, #184]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 8008fac:	4313      	orrs	r3, r2
 8008fae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0310 	and.w	r3, r3, #16
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d010      	beq.n	8008fde <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699a      	ldr	r2, [r3, #24]
 8008fc0:	4b28      	ldr	r3, [pc, #160]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 8008fc2:	69db      	ldr	r3, [r3, #28]
 8008fc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d208      	bcs.n	8008fde <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008fcc:	4b25      	ldr	r3, [pc, #148]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	4922      	ldr	r1, [pc, #136]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0320 	and.w	r3, r3, #32
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d010      	beq.n	800900c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	69da      	ldr	r2, [r3, #28]
 8008fee:	4b1d      	ldr	r3, [pc, #116]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d208      	bcs.n	800900c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ffa:	4b1a      	ldr	r3, [pc, #104]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	4917      	ldr	r1, [pc, #92]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 8009008:	4313      	orrs	r3, r2
 800900a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800900c:	f000 f834 	bl	8009078 <HAL_RCC_GetSysClockFreq>
 8009010:	4602      	mov	r2, r0
 8009012:	4b14      	ldr	r3, [pc, #80]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	0a1b      	lsrs	r3, r3, #8
 8009018:	f003 030f 	and.w	r3, r3, #15
 800901c:	4912      	ldr	r1, [pc, #72]	; (8009068 <HAL_RCC_ClockConfig+0x35c>)
 800901e:	5ccb      	ldrb	r3, [r1, r3]
 8009020:	f003 031f 	and.w	r3, r3, #31
 8009024:	fa22 f303 	lsr.w	r3, r2, r3
 8009028:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800902a:	4b0e      	ldr	r3, [pc, #56]	; (8009064 <HAL_RCC_ClockConfig+0x358>)
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	f003 030f 	and.w	r3, r3, #15
 8009032:	4a0d      	ldr	r2, [pc, #52]	; (8009068 <HAL_RCC_ClockConfig+0x35c>)
 8009034:	5cd3      	ldrb	r3, [r2, r3]
 8009036:	f003 031f 	and.w	r3, r3, #31
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	fa22 f303 	lsr.w	r3, r2, r3
 8009040:	4a0a      	ldr	r2, [pc, #40]	; (800906c <HAL_RCC_ClockConfig+0x360>)
 8009042:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009044:	4a0a      	ldr	r2, [pc, #40]	; (8009070 <HAL_RCC_ClockConfig+0x364>)
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800904a:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <HAL_RCC_ClockConfig+0x368>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f7fa f85e 	bl	8003110 <HAL_InitTick>
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009058:	7bfb      	ldrb	r3, [r7, #15]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3718      	adds	r7, #24
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	58024400 	.word	0x58024400
 8009068:	08011238 	.word	0x08011238
 800906c:	24000110 	.word	0x24000110
 8009070:	2400010c 	.word	0x2400010c
 8009074:	24000114 	.word	0x24000114

08009078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009078:	b480      	push	{r7}
 800907a:	b089      	sub	sp, #36	; 0x24
 800907c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800907e:	4bb3      	ldr	r3, [pc, #716]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009086:	2b18      	cmp	r3, #24
 8009088:	f200 8155 	bhi.w	8009336 <HAL_RCC_GetSysClockFreq+0x2be>
 800908c:	a201      	add	r2, pc, #4	; (adr r2, 8009094 <HAL_RCC_GetSysClockFreq+0x1c>)
 800908e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009092:	bf00      	nop
 8009094:	080090f9 	.word	0x080090f9
 8009098:	08009337 	.word	0x08009337
 800909c:	08009337 	.word	0x08009337
 80090a0:	08009337 	.word	0x08009337
 80090a4:	08009337 	.word	0x08009337
 80090a8:	08009337 	.word	0x08009337
 80090ac:	08009337 	.word	0x08009337
 80090b0:	08009337 	.word	0x08009337
 80090b4:	0800911f 	.word	0x0800911f
 80090b8:	08009337 	.word	0x08009337
 80090bc:	08009337 	.word	0x08009337
 80090c0:	08009337 	.word	0x08009337
 80090c4:	08009337 	.word	0x08009337
 80090c8:	08009337 	.word	0x08009337
 80090cc:	08009337 	.word	0x08009337
 80090d0:	08009337 	.word	0x08009337
 80090d4:	08009125 	.word	0x08009125
 80090d8:	08009337 	.word	0x08009337
 80090dc:	08009337 	.word	0x08009337
 80090e0:	08009337 	.word	0x08009337
 80090e4:	08009337 	.word	0x08009337
 80090e8:	08009337 	.word	0x08009337
 80090ec:	08009337 	.word	0x08009337
 80090f0:	08009337 	.word	0x08009337
 80090f4:	0800912b 	.word	0x0800912b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090f8:	4b94      	ldr	r3, [pc, #592]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0320 	and.w	r3, r3, #32
 8009100:	2b00      	cmp	r3, #0
 8009102:	d009      	beq.n	8009118 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009104:	4b91      	ldr	r3, [pc, #580]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	08db      	lsrs	r3, r3, #3
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	4a90      	ldr	r2, [pc, #576]	; (8009350 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009110:	fa22 f303 	lsr.w	r3, r2, r3
 8009114:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009116:	e111      	b.n	800933c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009118:	4b8d      	ldr	r3, [pc, #564]	; (8009350 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800911a:	61bb      	str	r3, [r7, #24]
      break;
 800911c:	e10e      	b.n	800933c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800911e:	4b8d      	ldr	r3, [pc, #564]	; (8009354 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009120:	61bb      	str	r3, [r7, #24]
      break;
 8009122:	e10b      	b.n	800933c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009124:	4b8c      	ldr	r3, [pc, #560]	; (8009358 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009126:	61bb      	str	r3, [r7, #24]
      break;
 8009128:	e108      	b.n	800933c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800912a:	4b88      	ldr	r3, [pc, #544]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800912c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912e:	f003 0303 	and.w	r3, r3, #3
 8009132:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009134:	4b85      	ldr	r3, [pc, #532]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009138:	091b      	lsrs	r3, r3, #4
 800913a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800913e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009140:	4b82      	ldr	r3, [pc, #520]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800914a:	4b80      	ldr	r3, [pc, #512]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800914c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800914e:	08db      	lsrs	r3, r3, #3
 8009150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	fb02 f303 	mul.w	r3, r2, r3
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009162:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 80e1 	beq.w	8009330 <HAL_RCC_GetSysClockFreq+0x2b8>
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b02      	cmp	r3, #2
 8009172:	f000 8083 	beq.w	800927c <HAL_RCC_GetSysClockFreq+0x204>
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b02      	cmp	r3, #2
 800917a:	f200 80a1 	bhi.w	80092c0 <HAL_RCC_GetSysClockFreq+0x248>
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <HAL_RCC_GetSysClockFreq+0x114>
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d056      	beq.n	8009238 <HAL_RCC_GetSysClockFreq+0x1c0>
 800918a:	e099      	b.n	80092c0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800918c:	4b6f      	ldr	r3, [pc, #444]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0320 	and.w	r3, r3, #32
 8009194:	2b00      	cmp	r3, #0
 8009196:	d02d      	beq.n	80091f4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009198:	4b6c      	ldr	r3, [pc, #432]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	08db      	lsrs	r3, r3, #3
 800919e:	f003 0303 	and.w	r3, r3, #3
 80091a2:	4a6b      	ldr	r2, [pc, #428]	; (8009350 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80091a4:	fa22 f303 	lsr.w	r3, r2, r3
 80091a8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	ee07 3a90 	vmov	s15, r3
 80091b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c2:	4b62      	ldr	r3, [pc, #392]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80091d6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800935c <HAL_RCC_GetSysClockFreq+0x2e4>
 80091da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80091f2:	e087      	b.n	8009304 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009360 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009206:	4b51      	ldr	r3, [pc, #324]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009216:	ed97 6a02 	vldr	s12, [r7, #8]
 800921a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800935c <HAL_RCC_GetSysClockFreq+0x2e4>
 800921e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800922a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800922e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009232:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009236:	e065      	b.n	8009304 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009242:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009364 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924a:	4b40      	ldr	r3, [pc, #256]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800924c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009252:	ee07 3a90 	vmov	s15, r3
 8009256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925a:	ed97 6a02 	vldr	s12, [r7, #8]
 800925e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800935c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800926a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800926e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009276:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800927a:	e043      	b.n	8009304 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	ee07 3a90 	vmov	s15, r3
 8009282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009286:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009368 <HAL_RCC_GetSysClockFreq+0x2f0>
 800928a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800928e:	4b2f      	ldr	r3, [pc, #188]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009296:	ee07 3a90 	vmov	s15, r3
 800929a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800929e:	ed97 6a02 	vldr	s12, [r7, #8]
 80092a2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800935c <HAL_RCC_GetSysClockFreq+0x2e4>
 80092a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092be:	e021      	b.n	8009304 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009364 <HAL_RCC_GetSysClockFreq+0x2ec>
 80092ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d2:	4b1e      	ldr	r3, [pc, #120]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80092e6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800935c <HAL_RCC_GetSysClockFreq+0x2e4>
 80092ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009302:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009304:	4b11      	ldr	r3, [pc, #68]	; (800934c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009308:	0a5b      	lsrs	r3, r3, #9
 800930a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800930e:	3301      	adds	r3, #1
 8009310:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	ee07 3a90 	vmov	s15, r3
 8009318:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800931c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009328:	ee17 3a90 	vmov	r3, s15
 800932c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800932e:	e005      	b.n	800933c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	61bb      	str	r3, [r7, #24]
      break;
 8009334:	e002      	b.n	800933c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009336:	4b07      	ldr	r3, [pc, #28]	; (8009354 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009338:	61bb      	str	r3, [r7, #24]
      break;
 800933a:	bf00      	nop
  }

  return sysclockfreq;
 800933c:	69bb      	ldr	r3, [r7, #24]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3724      	adds	r7, #36	; 0x24
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	58024400 	.word	0x58024400
 8009350:	03d09000 	.word	0x03d09000
 8009354:	003d0900 	.word	0x003d0900
 8009358:	02faf080 	.word	0x02faf080
 800935c:	46000000 	.word	0x46000000
 8009360:	4c742400 	.word	0x4c742400
 8009364:	4a742400 	.word	0x4a742400
 8009368:	4c3ebc20 	.word	0x4c3ebc20

0800936c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009372:	f7ff fe81 	bl	8009078 <HAL_RCC_GetSysClockFreq>
 8009376:	4602      	mov	r2, r0
 8009378:	4b10      	ldr	r3, [pc, #64]	; (80093bc <HAL_RCC_GetHCLKFreq+0x50>)
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	0a1b      	lsrs	r3, r3, #8
 800937e:	f003 030f 	and.w	r3, r3, #15
 8009382:	490f      	ldr	r1, [pc, #60]	; (80093c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009384:	5ccb      	ldrb	r3, [r1, r3]
 8009386:	f003 031f 	and.w	r3, r3, #31
 800938a:	fa22 f303 	lsr.w	r3, r2, r3
 800938e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009390:	4b0a      	ldr	r3, [pc, #40]	; (80093bc <HAL_RCC_GetHCLKFreq+0x50>)
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	f003 030f 	and.w	r3, r3, #15
 8009398:	4a09      	ldr	r2, [pc, #36]	; (80093c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800939a:	5cd3      	ldrb	r3, [r2, r3]
 800939c:	f003 031f 	and.w	r3, r3, #31
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	fa22 f303 	lsr.w	r3, r2, r3
 80093a6:	4a07      	ldr	r2, [pc, #28]	; (80093c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80093a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80093aa:	4a07      	ldr	r2, [pc, #28]	; (80093c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80093b0:	4b04      	ldr	r3, [pc, #16]	; (80093c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80093b2:	681b      	ldr	r3, [r3, #0]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	58024400 	.word	0x58024400
 80093c0:	08011238 	.word	0x08011238
 80093c4:	24000110 	.word	0x24000110
 80093c8:	2400010c 	.word	0x2400010c

080093cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80093d0:	f7ff ffcc 	bl	800936c <HAL_RCC_GetHCLKFreq>
 80093d4:	4602      	mov	r2, r0
 80093d6:	4b06      	ldr	r3, [pc, #24]	; (80093f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	091b      	lsrs	r3, r3, #4
 80093dc:	f003 0307 	and.w	r3, r3, #7
 80093e0:	4904      	ldr	r1, [pc, #16]	; (80093f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80093e2:	5ccb      	ldrb	r3, [r1, r3]
 80093e4:	f003 031f 	and.w	r3, r3, #31
 80093e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	58024400 	.word	0x58024400
 80093f4:	08011238 	.word	0x08011238

080093f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093fc:	b0c6      	sub	sp, #280	; 0x118
 80093fe:	af00      	add	r7, sp, #0
 8009400:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009404:	2300      	movs	r3, #0
 8009406:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800940a:	2300      	movs	r3, #0
 800940c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009418:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800941c:	2500      	movs	r5, #0
 800941e:	ea54 0305 	orrs.w	r3, r4, r5
 8009422:	d049      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800942a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800942e:	d02f      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009430:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009434:	d828      	bhi.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800943a:	d01a      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800943c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009440:	d822      	bhi.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009442:	2b00      	cmp	r3, #0
 8009444:	d003      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800944a:	d007      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800944c:	e01c      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800944e:	4bab      	ldr	r3, [pc, #684]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009452:	4aaa      	ldr	r2, [pc, #680]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009458:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800945a:	e01a      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800945c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009460:	3308      	adds	r3, #8
 8009462:	2102      	movs	r1, #2
 8009464:	4618      	mov	r0, r3
 8009466:	f002 fa49 	bl	800b8fc <RCCEx_PLL2_Config>
 800946a:	4603      	mov	r3, r0
 800946c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009470:	e00f      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009476:	3328      	adds	r3, #40	; 0x28
 8009478:	2102      	movs	r1, #2
 800947a:	4618      	mov	r0, r3
 800947c:	f002 faf0 	bl	800ba60 <RCCEx_PLL3_Config>
 8009480:	4603      	mov	r3, r0
 8009482:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009486:	e004      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800948e:	e000      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009492:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10a      	bne.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800949a:	4b98      	ldr	r3, [pc, #608]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800949c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800949e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80094a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094a8:	4a94      	ldr	r2, [pc, #592]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094aa:	430b      	orrs	r3, r1
 80094ac:	6513      	str	r3, [r2, #80]	; 0x50
 80094ae:	e003      	b.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80094b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80094c4:	f04f 0900 	mov.w	r9, #0
 80094c8:	ea58 0309 	orrs.w	r3, r8, r9
 80094cc:	d047      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80094ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d4:	2b04      	cmp	r3, #4
 80094d6:	d82a      	bhi.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80094d8:	a201      	add	r2, pc, #4	; (adr r2, 80094e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80094da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094de:	bf00      	nop
 80094e0:	080094f5 	.word	0x080094f5
 80094e4:	08009503 	.word	0x08009503
 80094e8:	08009519 	.word	0x08009519
 80094ec:	08009537 	.word	0x08009537
 80094f0:	08009537 	.word	0x08009537
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094f4:	4b81      	ldr	r3, [pc, #516]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	4a80      	ldr	r2, [pc, #512]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009500:	e01a      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009506:	3308      	adds	r3, #8
 8009508:	2100      	movs	r1, #0
 800950a:	4618      	mov	r0, r3
 800950c:	f002 f9f6 	bl	800b8fc <RCCEx_PLL2_Config>
 8009510:	4603      	mov	r3, r0
 8009512:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009516:	e00f      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800951c:	3328      	adds	r3, #40	; 0x28
 800951e:	2100      	movs	r1, #0
 8009520:	4618      	mov	r0, r3
 8009522:	f002 fa9d 	bl	800ba60 <RCCEx_PLL3_Config>
 8009526:	4603      	mov	r3, r0
 8009528:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800952c:	e004      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009534:	e000      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009538:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10a      	bne.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009540:	4b6e      	ldr	r3, [pc, #440]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009544:	f023 0107 	bic.w	r1, r3, #7
 8009548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800954c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800954e:	4a6b      	ldr	r2, [pc, #428]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009550:	430b      	orrs	r3, r1
 8009552:	6513      	str	r3, [r2, #80]	; 0x50
 8009554:	e003      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009556:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800955a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800955e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009566:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800956a:	f04f 0b00 	mov.w	fp, #0
 800956e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009572:	d05b      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009578:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800957c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009580:	d03b      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009582:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009586:	d834      	bhi.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009588:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800958c:	d037      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 800958e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009592:	d82e      	bhi.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009594:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009598:	d033      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800959a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800959e:	d828      	bhi.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80095a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095a4:	d01a      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80095a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095aa:	d822      	bhi.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80095b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095b4:	d007      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80095b6:	e01c      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095b8:	4b50      	ldr	r3, [pc, #320]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	4a4f      	ldr	r2, [pc, #316]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095c4:	e01e      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ca:	3308      	adds	r3, #8
 80095cc:	2100      	movs	r1, #0
 80095ce:	4618      	mov	r0, r3
 80095d0:	f002 f994 	bl	800b8fc <RCCEx_PLL2_Config>
 80095d4:	4603      	mov	r3, r0
 80095d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80095da:	e013      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e0:	3328      	adds	r3, #40	; 0x28
 80095e2:	2100      	movs	r1, #0
 80095e4:	4618      	mov	r0, r3
 80095e6:	f002 fa3b 	bl	800ba60 <RCCEx_PLL3_Config>
 80095ea:	4603      	mov	r3, r0
 80095ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095f0:	e008      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80095f8:	e004      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80095fa:	bf00      	nop
 80095fc:	e002      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80095fe:	bf00      	nop
 8009600:	e000      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009604:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10b      	bne.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800960c:	4b3b      	ldr	r3, [pc, #236]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800960e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009610:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009618:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800961c:	4a37      	ldr	r2, [pc, #220]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800961e:	430b      	orrs	r3, r1
 8009620:	6593      	str	r3, [r2, #88]	; 0x58
 8009622:	e003      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009624:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009628:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800962c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009634:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009638:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800963c:	2300      	movs	r3, #0
 800963e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009642:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009646:	460b      	mov	r3, r1
 8009648:	4313      	orrs	r3, r2
 800964a:	d05d      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800964c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009650:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009654:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009658:	d03b      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800965a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800965e:	d834      	bhi.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009664:	d037      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800966a:	d82e      	bhi.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800966c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009670:	d033      	beq.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009672:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009676:	d828      	bhi.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800967c:	d01a      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800967e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009682:	d822      	bhi.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800968c:	d007      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800968e:	e01c      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009690:	4b1a      	ldr	r3, [pc, #104]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009694:	4a19      	ldr	r2, [pc, #100]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800969a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800969c:	e01e      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800969e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a2:	3308      	adds	r3, #8
 80096a4:	2100      	movs	r1, #0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f002 f928 	bl	800b8fc <RCCEx_PLL2_Config>
 80096ac:	4603      	mov	r3, r0
 80096ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80096b2:	e013      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b8:	3328      	adds	r3, #40	; 0x28
 80096ba:	2100      	movs	r1, #0
 80096bc:	4618      	mov	r0, r3
 80096be:	f002 f9cf 	bl	800ba60 <RCCEx_PLL3_Config>
 80096c2:	4603      	mov	r3, r0
 80096c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096c8:	e008      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80096d0:	e004      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80096d2:	bf00      	nop
 80096d4:	e002      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80096d6:	bf00      	nop
 80096d8:	e000      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80096da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10d      	bne.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80096e4:	4b05      	ldr	r3, [pc, #20]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80096ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80096f4:	4a01      	ldr	r2, [pc, #4]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096f6:	430b      	orrs	r3, r1
 80096f8:	6593      	str	r3, [r2, #88]	; 0x58
 80096fa:	e005      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80096fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009700:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009704:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009710:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009714:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009718:	2300      	movs	r3, #0
 800971a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800971e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009722:	460b      	mov	r3, r1
 8009724:	4313      	orrs	r3, r2
 8009726:	d03a      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800972c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800972e:	2b30      	cmp	r3, #48	; 0x30
 8009730:	d01f      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009732:	2b30      	cmp	r3, #48	; 0x30
 8009734:	d819      	bhi.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009736:	2b20      	cmp	r3, #32
 8009738:	d00c      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800973a:	2b20      	cmp	r3, #32
 800973c:	d815      	bhi.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d019      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009742:	2b10      	cmp	r3, #16
 8009744:	d111      	bne.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009746:	4baa      	ldr	r3, [pc, #680]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974a:	4aa9      	ldr	r2, [pc, #676]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800974c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009750:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009752:	e011      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009758:	3308      	adds	r3, #8
 800975a:	2102      	movs	r1, #2
 800975c:	4618      	mov	r0, r3
 800975e:	f002 f8cd 	bl	800b8fc <RCCEx_PLL2_Config>
 8009762:	4603      	mov	r3, r0
 8009764:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009768:	e006      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009770:	e002      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009772:	bf00      	nop
 8009774:	e000      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009778:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009780:	4b9b      	ldr	r3, [pc, #620]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009784:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800978c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978e:	4a98      	ldr	r2, [pc, #608]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009790:	430b      	orrs	r3, r1
 8009792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009794:	e003      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009796:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800979a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800979e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80097aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097ae:	2300      	movs	r3, #0
 80097b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80097b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80097b8:	460b      	mov	r3, r1
 80097ba:	4313      	orrs	r3, r2
 80097bc:	d051      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80097be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097c8:	d035      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80097ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097ce:	d82e      	bhi.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80097d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097d4:	d031      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80097d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097da:	d828      	bhi.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80097dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097e0:	d01a      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80097e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097e6:	d822      	bhi.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80097ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097f0:	d007      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80097f2:	e01c      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097f4:	4b7e      	ldr	r3, [pc, #504]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f8:	4a7d      	ldr	r2, [pc, #500]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009800:	e01c      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009806:	3308      	adds	r3, #8
 8009808:	2100      	movs	r1, #0
 800980a:	4618      	mov	r0, r3
 800980c:	f002 f876 	bl	800b8fc <RCCEx_PLL2_Config>
 8009810:	4603      	mov	r3, r0
 8009812:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009816:	e011      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800981c:	3328      	adds	r3, #40	; 0x28
 800981e:	2100      	movs	r1, #0
 8009820:	4618      	mov	r0, r3
 8009822:	f002 f91d 	bl	800ba60 <RCCEx_PLL3_Config>
 8009826:	4603      	mov	r3, r0
 8009828:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800982c:	e006      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009834:	e002      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009836:	bf00      	nop
 8009838:	e000      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800983a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800983c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10a      	bne.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009844:	4b6a      	ldr	r3, [pc, #424]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009848:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800984c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009852:	4a67      	ldr	r2, [pc, #412]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009854:	430b      	orrs	r3, r1
 8009856:	6513      	str	r3, [r2, #80]	; 0x50
 8009858:	e003      	b.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800985e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800986e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009872:	2300      	movs	r3, #0
 8009874:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009878:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800987c:	460b      	mov	r3, r1
 800987e:	4313      	orrs	r3, r2
 8009880:	d053      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800988c:	d033      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800988e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009892:	d82c      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009894:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009898:	d02f      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800989a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800989e:	d826      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80098a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80098a4:	d02b      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80098a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80098aa:	d820      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80098ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098b0:	d012      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80098b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098b6:	d81a      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d022      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80098bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098c0:	d115      	bne.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098c6:	3308      	adds	r3, #8
 80098c8:	2101      	movs	r1, #1
 80098ca:	4618      	mov	r0, r3
 80098cc:	f002 f816 	bl	800b8fc <RCCEx_PLL2_Config>
 80098d0:	4603      	mov	r3, r0
 80098d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80098d6:	e015      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098dc:	3328      	adds	r3, #40	; 0x28
 80098de:	2101      	movs	r1, #1
 80098e0:	4618      	mov	r0, r3
 80098e2:	f002 f8bd 	bl	800ba60 <RCCEx_PLL3_Config>
 80098e6:	4603      	mov	r3, r0
 80098e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80098ec:	e00a      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80098f4:	e006      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80098f6:	bf00      	nop
 80098f8:	e004      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80098fa:	bf00      	nop
 80098fc:	e002      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80098fe:	bf00      	nop
 8009900:	e000      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009904:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10a      	bne.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800990c:	4b38      	ldr	r3, [pc, #224]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800990e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009910:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800991a:	4a35      	ldr	r2, [pc, #212]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800991c:	430b      	orrs	r3, r1
 800991e:	6513      	str	r3, [r2, #80]	; 0x50
 8009920:	e003      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009922:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009926:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800992a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800993a:	2300      	movs	r3, #0
 800993c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009940:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009944:	460b      	mov	r3, r1
 8009946:	4313      	orrs	r3, r2
 8009948:	d058      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800994a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800994e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009956:	d033      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009958:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800995c:	d82c      	bhi.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800995e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009962:	d02f      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009968:	d826      	bhi.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800996a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800996e:	d02b      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009970:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009974:	d820      	bhi.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800997a:	d012      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800997c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009980:	d81a      	bhi.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009982:	2b00      	cmp	r3, #0
 8009984:	d022      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800998a:	d115      	bne.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800998c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009990:	3308      	adds	r3, #8
 8009992:	2101      	movs	r1, #1
 8009994:	4618      	mov	r0, r3
 8009996:	f001 ffb1 	bl	800b8fc <RCCEx_PLL2_Config>
 800999a:	4603      	mov	r3, r0
 800999c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80099a0:	e015      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a6:	3328      	adds	r3, #40	; 0x28
 80099a8:	2101      	movs	r1, #1
 80099aa:	4618      	mov	r0, r3
 80099ac:	f002 f858 	bl	800ba60 <RCCEx_PLL3_Config>
 80099b0:	4603      	mov	r3, r0
 80099b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80099b6:	e00a      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80099be:	e006      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80099c0:	bf00      	nop
 80099c2:	e004      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80099c4:	bf00      	nop
 80099c6:	e002      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80099c8:	bf00      	nop
 80099ca:	e000      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80099cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10e      	bne.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80099d6:	4b06      	ldr	r3, [pc, #24]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80099de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099e6:	4a02      	ldr	r2, [pc, #8]	; (80099f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099e8:	430b      	orrs	r3, r1
 80099ea:	6593      	str	r3, [r2, #88]	; 0x58
 80099ec:	e006      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80099ee:	bf00      	nop
 80099f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009a08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009a12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009a16:	460b      	mov	r3, r1
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	d037      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a26:	d00e      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a2c:	d816      	bhi.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d018      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a36:	d111      	bne.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a38:	4bc4      	ldr	r3, [pc, #784]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	4ac3      	ldr	r2, [pc, #780]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a44:	e00f      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a4a:	3308      	adds	r3, #8
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 ff54 	bl	800b8fc <RCCEx_PLL2_Config>
 8009a54:	4603      	mov	r3, r0
 8009a56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a5a:	e004      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009a62:	e000      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10a      	bne.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a6e:	4bb7      	ldr	r3, [pc, #732]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a72:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a7c:	4ab3      	ldr	r2, [pc, #716]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a7e:	430b      	orrs	r3, r1
 8009a80:	6513      	str	r3, [r2, #80]	; 0x50
 8009a82:	e003      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009a98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009aa2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	d039      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d81c      	bhi.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009ab6:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abc:	08009af9 	.word	0x08009af9
 8009ac0:	08009acd 	.word	0x08009acd
 8009ac4:	08009adb 	.word	0x08009adb
 8009ac8:	08009af9 	.word	0x08009af9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009acc:	4b9f      	ldr	r3, [pc, #636]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad0:	4a9e      	ldr	r2, [pc, #632]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ad8:	e00f      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ade:	3308      	adds	r3, #8
 8009ae0:	2102      	movs	r1, #2
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f001 ff0a 	bl	800b8fc <RCCEx_PLL2_Config>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009aee:	e004      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009af6:	e000      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009afa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10a      	bne.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009b02:	4b92      	ldr	r3, [pc, #584]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b06:	f023 0103 	bic.w	r1, r3, #3
 8009b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b10:	4a8e      	ldr	r2, [pc, #568]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b12:	430b      	orrs	r3, r1
 8009b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b16:	e003      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b28:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b30:	2300      	movs	r3, #0
 8009b32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	f000 8099 	beq.w	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b42:	4b83      	ldr	r3, [pc, #524]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a82      	ldr	r2, [pc, #520]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b4e:	f7f9 fb29 	bl	80031a4 <HAL_GetTick>
 8009b52:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b56:	e00b      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b58:	f7f9 fb24 	bl	80031a4 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	2b64      	cmp	r3, #100	; 0x64
 8009b66:	d903      	bls.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009b6e:	e005      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b70:	4b77      	ldr	r3, [pc, #476]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d0ed      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d173      	bne.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b84:	4b71      	ldr	r3, [pc, #452]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b90:	4053      	eors	r3, r2
 8009b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d015      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b9a:	4b6c      	ldr	r3, [pc, #432]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ba2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ba6:	4b69      	ldr	r3, [pc, #420]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009baa:	4a68      	ldr	r2, [pc, #416]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bb0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009bb2:	4b66      	ldr	r3, [pc, #408]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb6:	4a65      	ldr	r2, [pc, #404]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bbc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009bbe:	4a63      	ldr	r2, [pc, #396]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bc4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bd2:	d118      	bne.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd4:	f7f9 fae6 	bl	80031a4 <HAL_GetTick>
 8009bd8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bdc:	e00d      	b.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bde:	f7f9 fae1 	bl	80031a4 <HAL_GetTick>
 8009be2:	4602      	mov	r2, r0
 8009be4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009be8:	1ad2      	subs	r2, r2, r3
 8009bea:	f241 3388 	movw	r3, #5000	; 0x1388
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d903      	bls.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8009bf8:	e005      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bfa:	4b54      	ldr	r3, [pc, #336]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfe:	f003 0302 	and.w	r3, r3, #2
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d0eb      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009c06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d129      	bne.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c1e:	d10e      	bne.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009c20:	4b4a      	ldr	r3, [pc, #296]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c30:	091a      	lsrs	r2, r3, #4
 8009c32:	4b48      	ldr	r3, [pc, #288]	; (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	4a45      	ldr	r2, [pc, #276]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c38:	430b      	orrs	r3, r1
 8009c3a:	6113      	str	r3, [r2, #16]
 8009c3c:	e005      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009c3e:	4b43      	ldr	r3, [pc, #268]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	4a42      	ldr	r2, [pc, #264]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c48:	6113      	str	r3, [r2, #16]
 8009c4a:	4b40      	ldr	r3, [pc, #256]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c4c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c5a:	4a3c      	ldr	r2, [pc, #240]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c5c:	430b      	orrs	r3, r1
 8009c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c60:	e008      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8009c6a:	e003      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	f002 0301 	and.w	r3, r2, #1
 8009c80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c84:	2300      	movs	r3, #0
 8009c86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009c8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4313      	orrs	r3, r2
 8009c92:	f000 808f 	beq.w	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c9c:	2b28      	cmp	r3, #40	; 0x28
 8009c9e:	d871      	bhi.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009ca0:	a201      	add	r2, pc, #4	; (adr r2, 8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca6:	bf00      	nop
 8009ca8:	08009d8d 	.word	0x08009d8d
 8009cac:	08009d85 	.word	0x08009d85
 8009cb0:	08009d85 	.word	0x08009d85
 8009cb4:	08009d85 	.word	0x08009d85
 8009cb8:	08009d85 	.word	0x08009d85
 8009cbc:	08009d85 	.word	0x08009d85
 8009cc0:	08009d85 	.word	0x08009d85
 8009cc4:	08009d85 	.word	0x08009d85
 8009cc8:	08009d59 	.word	0x08009d59
 8009ccc:	08009d85 	.word	0x08009d85
 8009cd0:	08009d85 	.word	0x08009d85
 8009cd4:	08009d85 	.word	0x08009d85
 8009cd8:	08009d85 	.word	0x08009d85
 8009cdc:	08009d85 	.word	0x08009d85
 8009ce0:	08009d85 	.word	0x08009d85
 8009ce4:	08009d85 	.word	0x08009d85
 8009ce8:	08009d6f 	.word	0x08009d6f
 8009cec:	08009d85 	.word	0x08009d85
 8009cf0:	08009d85 	.word	0x08009d85
 8009cf4:	08009d85 	.word	0x08009d85
 8009cf8:	08009d85 	.word	0x08009d85
 8009cfc:	08009d85 	.word	0x08009d85
 8009d00:	08009d85 	.word	0x08009d85
 8009d04:	08009d85 	.word	0x08009d85
 8009d08:	08009d8d 	.word	0x08009d8d
 8009d0c:	08009d85 	.word	0x08009d85
 8009d10:	08009d85 	.word	0x08009d85
 8009d14:	08009d85 	.word	0x08009d85
 8009d18:	08009d85 	.word	0x08009d85
 8009d1c:	08009d85 	.word	0x08009d85
 8009d20:	08009d85 	.word	0x08009d85
 8009d24:	08009d85 	.word	0x08009d85
 8009d28:	08009d8d 	.word	0x08009d8d
 8009d2c:	08009d85 	.word	0x08009d85
 8009d30:	08009d85 	.word	0x08009d85
 8009d34:	08009d85 	.word	0x08009d85
 8009d38:	08009d85 	.word	0x08009d85
 8009d3c:	08009d85 	.word	0x08009d85
 8009d40:	08009d85 	.word	0x08009d85
 8009d44:	08009d85 	.word	0x08009d85
 8009d48:	08009d8d 	.word	0x08009d8d
 8009d4c:	58024400 	.word	0x58024400
 8009d50:	58024800 	.word	0x58024800
 8009d54:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d5c:	3308      	adds	r3, #8
 8009d5e:	2101      	movs	r1, #1
 8009d60:	4618      	mov	r0, r3
 8009d62:	f001 fdcb 	bl	800b8fc <RCCEx_PLL2_Config>
 8009d66:	4603      	mov	r3, r0
 8009d68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d6c:	e00f      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d72:	3328      	adds	r3, #40	; 0x28
 8009d74:	2101      	movs	r1, #1
 8009d76:	4618      	mov	r0, r3
 8009d78:	f001 fe72 	bl	800ba60 <RCCEx_PLL3_Config>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d82:	e004      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d8a:	e000      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10a      	bne.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d96:	4bbf      	ldr	r3, [pc, #764]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009da4:	4abb      	ldr	r2, [pc, #748]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009da6:	430b      	orrs	r3, r1
 8009da8:	6553      	str	r3, [r2, #84]	; 0x54
 8009daa:	e003      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009db0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	f002 0302 	and.w	r3, r2, #2
 8009dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009dca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	d041      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dda:	2b05      	cmp	r3, #5
 8009ddc:	d824      	bhi.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009dde:	a201      	add	r2, pc, #4	; (adr r2, 8009de4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de4:	08009e31 	.word	0x08009e31
 8009de8:	08009dfd 	.word	0x08009dfd
 8009dec:	08009e13 	.word	0x08009e13
 8009df0:	08009e31 	.word	0x08009e31
 8009df4:	08009e31 	.word	0x08009e31
 8009df8:	08009e31 	.word	0x08009e31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e00:	3308      	adds	r3, #8
 8009e02:	2101      	movs	r1, #1
 8009e04:	4618      	mov	r0, r3
 8009e06:	f001 fd79 	bl	800b8fc <RCCEx_PLL2_Config>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009e10:	e00f      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e16:	3328      	adds	r3, #40	; 0x28
 8009e18:	2101      	movs	r1, #1
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f001 fe20 	bl	800ba60 <RCCEx_PLL3_Config>
 8009e20:	4603      	mov	r3, r0
 8009e22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009e26:	e004      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009e2e:	e000      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10a      	bne.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009e3a:	4b96      	ldr	r3, [pc, #600]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e3e:	f023 0107 	bic.w	r1, r3, #7
 8009e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e48:	4a92      	ldr	r2, [pc, #584]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e4a:	430b      	orrs	r3, r1
 8009e4c:	6553      	str	r3, [r2, #84]	; 0x54
 8009e4e:	e003      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	f002 0304 	and.w	r3, r2, #4
 8009e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e6e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e72:	460b      	mov	r3, r1
 8009e74:	4313      	orrs	r3, r2
 8009e76:	d044      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e80:	2b05      	cmp	r3, #5
 8009e82:	d825      	bhi.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009e84:	a201      	add	r2, pc, #4	; (adr r2, 8009e8c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8a:	bf00      	nop
 8009e8c:	08009ed9 	.word	0x08009ed9
 8009e90:	08009ea5 	.word	0x08009ea5
 8009e94:	08009ebb 	.word	0x08009ebb
 8009e98:	08009ed9 	.word	0x08009ed9
 8009e9c:	08009ed9 	.word	0x08009ed9
 8009ea0:	08009ed9 	.word	0x08009ed9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ea8:	3308      	adds	r3, #8
 8009eaa:	2101      	movs	r1, #1
 8009eac:	4618      	mov	r0, r3
 8009eae:	f001 fd25 	bl	800b8fc <RCCEx_PLL2_Config>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009eb8:	e00f      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ebe:	3328      	adds	r3, #40	; 0x28
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 fdcc 	bl	800ba60 <RCCEx_PLL3_Config>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009ece:	e004      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009ed6:	e000      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10b      	bne.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ee2:	4b6c      	ldr	r3, [pc, #432]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ee6:	f023 0107 	bic.w	r1, r3, #7
 8009eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ef2:	4a68      	ldr	r2, [pc, #416]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009ef4:	430b      	orrs	r3, r1
 8009ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8009ef8:	e003      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009efa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009efe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	f002 0320 	and.w	r3, r2, #32
 8009f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f12:	2300      	movs	r3, #0
 8009f14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	d055      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f2e:	d033      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f34:	d82c      	bhi.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f3a:	d02f      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f40:	d826      	bhi.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009f42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f46:	d02b      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009f48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f4c:	d820      	bhi.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f52:	d012      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f58:	d81a      	bhi.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d022      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009f5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f62:	d115      	bne.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f68:	3308      	adds	r3, #8
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 fcc5 	bl	800b8fc <RCCEx_PLL2_Config>
 8009f72:	4603      	mov	r3, r0
 8009f74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f78:	e015      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f7e:	3328      	adds	r3, #40	; 0x28
 8009f80:	2102      	movs	r1, #2
 8009f82:	4618      	mov	r0, r3
 8009f84:	f001 fd6c 	bl	800ba60 <RCCEx_PLL3_Config>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f8e:	e00a      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009f96:	e006      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009f98:	bf00      	nop
 8009f9a:	e004      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009f9c:	bf00      	nop
 8009f9e:	e002      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009fa0:	bf00      	nop
 8009fa2:	e000      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fa6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10b      	bne.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009fae:	4b39      	ldr	r3, [pc, #228]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fb2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fbe:	4a35      	ldr	r2, [pc, #212]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fc0:	430b      	orrs	r3, r1
 8009fc2:	6553      	str	r3, [r2, #84]	; 0x54
 8009fc4:	e003      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009fda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009fe4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4313      	orrs	r3, r2
 8009fec:	d058      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ff6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009ffa:	d033      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009ffc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a000:	d82c      	bhi.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a006:	d02f      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a00c:	d826      	bhi.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a00e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a012:	d02b      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a018:	d820      	bhi.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a01a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a01e:	d012      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a024:	d81a      	bhi.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a026:	2b00      	cmp	r3, #0
 800a028:	d022      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a02a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a02e:	d115      	bne.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a034:	3308      	adds	r3, #8
 800a036:	2100      	movs	r1, #0
 800a038:	4618      	mov	r0, r3
 800a03a:	f001 fc5f 	bl	800b8fc <RCCEx_PLL2_Config>
 800a03e:	4603      	mov	r3, r0
 800a040:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a044:	e015      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04a:	3328      	adds	r3, #40	; 0x28
 800a04c:	2102      	movs	r1, #2
 800a04e:	4618      	mov	r0, r3
 800a050:	f001 fd06 	bl	800ba60 <RCCEx_PLL3_Config>
 800a054:	4603      	mov	r3, r0
 800a056:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a05a:	e00a      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a062:	e006      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a064:	bf00      	nop
 800a066:	e004      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a068:	bf00      	nop
 800a06a:	e002      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a06c:	bf00      	nop
 800a06e:	e000      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a070:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a072:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10e      	bne.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a07a:	4b06      	ldr	r3, [pc, #24]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a07c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a07e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a086:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a08a:	4a02      	ldr	r2, [pc, #8]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a08c:	430b      	orrs	r3, r1
 800a08e:	6593      	str	r3, [r2, #88]	; 0x58
 800a090:	e006      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a092:	bf00      	nop
 800a094:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a098:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a09c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a0ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a0b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	d055      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a0cc:	d033      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a0ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a0d2:	d82c      	bhi.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a0d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0d8:	d02f      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a0da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0de:	d826      	bhi.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a0e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a0e4:	d02b      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a0e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a0ea:	d820      	bhi.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a0ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0f0:	d012      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a0f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0f6:	d81a      	bhi.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d022      	beq.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a0fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a100:	d115      	bne.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a106:	3308      	adds	r3, #8
 800a108:	2100      	movs	r1, #0
 800a10a:	4618      	mov	r0, r3
 800a10c:	f001 fbf6 	bl	800b8fc <RCCEx_PLL2_Config>
 800a110:	4603      	mov	r3, r0
 800a112:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a116:	e015      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a11c:	3328      	adds	r3, #40	; 0x28
 800a11e:	2102      	movs	r1, #2
 800a120:	4618      	mov	r0, r3
 800a122:	f001 fc9d 	bl	800ba60 <RCCEx_PLL3_Config>
 800a126:	4603      	mov	r3, r0
 800a128:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a12c:	e00a      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a134:	e006      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a136:	bf00      	nop
 800a138:	e004      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a13a:	bf00      	nop
 800a13c:	e002      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a13e:	bf00      	nop
 800a140:	e000      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a142:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a144:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10b      	bne.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a14c:	4ba0      	ldr	r3, [pc, #640]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a150:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a158:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a15c:	4a9c      	ldr	r2, [pc, #624]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a15e:	430b      	orrs	r3, r1
 800a160:	6593      	str	r3, [r2, #88]	; 0x58
 800a162:	e003      	b.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a164:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a168:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	f002 0308 	and.w	r3, r2, #8
 800a178:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a17c:	2300      	movs	r3, #0
 800a17e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a182:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a186:	460b      	mov	r3, r1
 800a188:	4313      	orrs	r3, r2
 800a18a:	d01e      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a198:	d10c      	bne.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a19e:	3328      	adds	r3, #40	; 0x28
 800a1a0:	2102      	movs	r1, #2
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f001 fc5c 	bl	800ba60 <RCCEx_PLL3_Config>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a1b4:	4b86      	ldr	r3, [pc, #536]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1c4:	4a82      	ldr	r2, [pc, #520]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1c6:	430b      	orrs	r3, r1
 800a1c8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d2:	f002 0310 	and.w	r3, r2, #16
 800a1d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1e0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	d01e      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1f6:	d10c      	bne.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1fc:	3328      	adds	r3, #40	; 0x28
 800a1fe:	2102      	movs	r1, #2
 800a200:	4618      	mov	r0, r3
 800a202:	f001 fc2d 	bl	800ba60 <RCCEx_PLL3_Config>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a212:	4b6f      	ldr	r3, [pc, #444]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a216:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a21e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a222:	4a6b      	ldr	r2, [pc, #428]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a224:	430b      	orrs	r3, r1
 800a226:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a234:	67bb      	str	r3, [r7, #120]	; 0x78
 800a236:	2300      	movs	r3, #0
 800a238:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a23a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a23e:	460b      	mov	r3, r1
 800a240:	4313      	orrs	r3, r2
 800a242:	d03e      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a248:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a24c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a250:	d022      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a256:	d81b      	bhi.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a25c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a260:	d00b      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a262:	e015      	b.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a268:	3308      	adds	r3, #8
 800a26a:	2100      	movs	r1, #0
 800a26c:	4618      	mov	r0, r3
 800a26e:	f001 fb45 	bl	800b8fc <RCCEx_PLL2_Config>
 800a272:	4603      	mov	r3, r0
 800a274:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a278:	e00f      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a27e:	3328      	adds	r3, #40	; 0x28
 800a280:	2102      	movs	r1, #2
 800a282:	4618      	mov	r0, r3
 800a284:	f001 fbec 	bl	800ba60 <RCCEx_PLL3_Config>
 800a288:	4603      	mov	r3, r0
 800a28a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a28e:	e004      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a296:	e000      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a29a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10b      	bne.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a2a2:	4b4b      	ldr	r3, [pc, #300]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a2b2:	4a47      	ldr	r2, [pc, #284]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	6593      	str	r3, [r2, #88]	; 0x58
 800a2b8:	e003      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a2c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a2ce:	673b      	str	r3, [r7, #112]	; 0x70
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	677b      	str	r3, [r7, #116]	; 0x74
 800a2d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	d03b      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a2de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2ea:	d01f      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a2ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2f0:	d818      	bhi.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a2f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2f6:	d003      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a2f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2fc:	d007      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a2fe:	e011      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a300:	4b33      	ldr	r3, [pc, #204]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a304:	4a32      	ldr	r2, [pc, #200]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a30a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a30c:	e00f      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a312:	3328      	adds	r3, #40	; 0x28
 800a314:	2101      	movs	r1, #1
 800a316:	4618      	mov	r0, r3
 800a318:	f001 fba2 	bl	800ba60 <RCCEx_PLL3_Config>
 800a31c:	4603      	mov	r3, r0
 800a31e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a322:	e004      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a32a:	e000      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a32c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a32e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10b      	bne.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a336:	4b26      	ldr	r3, [pc, #152]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a346:	4a22      	ldr	r2, [pc, #136]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a348:	430b      	orrs	r3, r1
 800a34a:	6553      	str	r3, [r2, #84]	; 0x54
 800a34c:	e003      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a34e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a352:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a362:	66bb      	str	r3, [r7, #104]	; 0x68
 800a364:	2300      	movs	r3, #0
 800a366:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a368:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a36c:	460b      	mov	r3, r1
 800a36e:	4313      	orrs	r3, r2
 800a370:	d034      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d003      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a37c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a380:	d007      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a382:	e011      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a384:	4b12      	ldr	r3, [pc, #72]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a388:	4a11      	ldr	r2, [pc, #68]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a38a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a38e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a390:	e00e      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a396:	3308      	adds	r3, #8
 800a398:	2102      	movs	r1, #2
 800a39a:	4618      	mov	r0, r3
 800a39c:	f001 faae 	bl	800b8fc <RCCEx_PLL2_Config>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a3a6:	e003      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a3ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10d      	bne.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a3b8:	4b05      	ldr	r3, [pc, #20]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3c6:	4a02      	ldr	r2, [pc, #8]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3c8:	430b      	orrs	r3, r1
 800a3ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3cc:	e006      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a3ce:	bf00      	nop
 800a3d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a3e8:	663b      	str	r3, [r7, #96]	; 0x60
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	667b      	str	r3, [r7, #100]	; 0x64
 800a3ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	d00c      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3fc:	3328      	adds	r3, #40	; 0x28
 800a3fe:	2102      	movs	r1, #2
 800a400:	4618      	mov	r0, r3
 800a402:	f001 fb2d 	bl	800ba60 <RCCEx_PLL3_Config>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a41e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a420:	2300      	movs	r3, #0
 800a422:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a424:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a428:	460b      	mov	r3, r1
 800a42a:	4313      	orrs	r3, r2
 800a42c:	d036      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a438:	d018      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a43a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a43e:	d811      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a444:	d014      	beq.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a44a:	d80b      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d011      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a454:	d106      	bne.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a456:	4bb7      	ldr	r3, [pc, #732]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45a:	4ab6      	ldr	r2, [pc, #728]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a45c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a460:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a462:	e008      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a46a:	e004      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a46c:	bf00      	nop
 800a46e:	e002      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a470:	bf00      	nop
 800a472:	e000      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a474:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a476:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10a      	bne.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a47e:	4bad      	ldr	r3, [pc, #692]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a482:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a48a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a48c:	4aa9      	ldr	r2, [pc, #676]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a48e:	430b      	orrs	r3, r1
 800a490:	6553      	str	r3, [r2, #84]	; 0x54
 800a492:	e003      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a494:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a498:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a4a8:	653b      	str	r3, [r7, #80]	; 0x50
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	657b      	str	r3, [r7, #84]	; 0x54
 800a4ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	d009      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a4b8:	4b9e      	ldr	r3, [pc, #632]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c6:	4a9b      	ldr	r2, [pc, #620]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4c8:	430b      	orrs	r3, r1
 800a4ca:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a4d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4da:	2300      	movs	r3, #0
 800a4dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	d009      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4e8:	4b92      	ldr	r3, [pc, #584]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ec:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4f6:	4a8f      	ldr	r2, [pc, #572]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4f8:	430b      	orrs	r3, r1
 800a4fa:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a508:	643b      	str	r3, [r7, #64]	; 0x40
 800a50a:	2300      	movs	r3, #0
 800a50c:	647b      	str	r3, [r7, #68]	; 0x44
 800a50e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a512:	460b      	mov	r3, r1
 800a514:	4313      	orrs	r3, r2
 800a516:	d00e      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a518:	4b86      	ldr	r3, [pc, #536]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	4a85      	ldr	r2, [pc, #532]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a51e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a522:	6113      	str	r3, [r2, #16]
 800a524:	4b83      	ldr	r3, [pc, #524]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a526:	6919      	ldr	r1, [r3, #16]
 800a528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a52c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a530:	4a80      	ldr	r2, [pc, #512]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a532:	430b      	orrs	r3, r1
 800a534:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a542:	63bb      	str	r3, [r7, #56]	; 0x38
 800a544:	2300      	movs	r3, #0
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a548:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a54c:	460b      	mov	r3, r1
 800a54e:	4313      	orrs	r3, r2
 800a550:	d009      	beq.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a552:	4b78      	ldr	r3, [pc, #480]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a556:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a55e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a560:	4a74      	ldr	r2, [pc, #464]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a562:	430b      	orrs	r3, r1
 800a564:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a572:	633b      	str	r3, [r7, #48]	; 0x30
 800a574:	2300      	movs	r3, #0
 800a576:	637b      	str	r3, [r7, #52]	; 0x34
 800a578:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a57c:	460b      	mov	r3, r1
 800a57e:	4313      	orrs	r3, r2
 800a580:	d00a      	beq.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a582:	4b6c      	ldr	r3, [pc, #432]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a586:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a592:	4a68      	ldr	r2, [pc, #416]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a594:	430b      	orrs	r3, r1
 800a596:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	62b9      	str	r1, [r7, #40]	; 0x28
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5aa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	d011      	beq.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f001 f99d 	bl	800b8fc <RCCEx_PLL2_Config>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a5c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d003      	beq.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	6239      	str	r1, [r7, #32]
 800a5e4:	f003 0302 	and.w	r3, r3, #2
 800a5e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	d011      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f8:	3308      	adds	r3, #8
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f001 f97d 	bl	800b8fc <RCCEx_PLL2_Config>
 800a602:	4603      	mov	r3, r0
 800a604:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a608:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d003      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a610:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a614:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a620:	2100      	movs	r1, #0
 800a622:	61b9      	str	r1, [r7, #24]
 800a624:	f003 0304 	and.w	r3, r3, #4
 800a628:	61fb      	str	r3, [r7, #28]
 800a62a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a62e:	460b      	mov	r3, r1
 800a630:	4313      	orrs	r3, r2
 800a632:	d011      	beq.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a638:	3308      	adds	r3, #8
 800a63a:	2102      	movs	r1, #2
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 f95d 	bl	800b8fc <RCCEx_PLL2_Config>
 800a642:	4603      	mov	r3, r0
 800a644:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a648:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d003      	beq.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a650:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a654:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a660:	2100      	movs	r1, #0
 800a662:	6139      	str	r1, [r7, #16]
 800a664:	f003 0308 	and.w	r3, r3, #8
 800a668:	617b      	str	r3, [r7, #20]
 800a66a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a66e:	460b      	mov	r3, r1
 800a670:	4313      	orrs	r3, r2
 800a672:	d011      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a678:	3328      	adds	r3, #40	; 0x28
 800a67a:	2100      	movs	r1, #0
 800a67c:	4618      	mov	r0, r3
 800a67e:	f001 f9ef 	bl	800ba60 <RCCEx_PLL3_Config>
 800a682:	4603      	mov	r3, r0
 800a684:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800a688:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a690:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a694:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	60b9      	str	r1, [r7, #8]
 800a6a4:	f003 0310 	and.w	r3, r3, #16
 800a6a8:	60fb      	str	r3, [r7, #12]
 800a6aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	d011      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b8:	3328      	adds	r3, #40	; 0x28
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f001 f9cf 	bl	800ba60 <RCCEx_PLL3_Config>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a6c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d003      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	6039      	str	r1, [r7, #0]
 800a6e4:	f003 0320 	and.w	r3, r3, #32
 800a6e8:	607b      	str	r3, [r7, #4]
 800a6ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	d011      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f8:	3328      	adds	r3, #40	; 0x28
 800a6fa:	2102      	movs	r1, #2
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 f9af 	bl	800ba60 <RCCEx_PLL3_Config>
 800a702:	4603      	mov	r3, r0
 800a704:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a708:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d003      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a710:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a714:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800a718:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	e000      	b.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a724:	2301      	movs	r3, #1
}
 800a726:	4618      	mov	r0, r3
 800a728:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800a72c:	46bd      	mov	sp, r7
 800a72e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a732:	bf00      	nop
 800a734:	58024400 	.word	0x58024400

0800a738 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b090      	sub	sp, #64	; 0x40
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a742:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a746:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a74a:	430b      	orrs	r3, r1
 800a74c:	f040 8094 	bne.w	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a750:	4b9b      	ldr	r3, [pc, #620]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a754:	f003 0307 	and.w	r3, r3, #7
 800a758:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	2b04      	cmp	r3, #4
 800a75e:	f200 8087 	bhi.w	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a762:	a201      	add	r2, pc, #4	; (adr r2, 800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a768:	0800a77d 	.word	0x0800a77d
 800a76c:	0800a7a5 	.word	0x0800a7a5
 800a770:	0800a7cd 	.word	0x0800a7cd
 800a774:	0800a869 	.word	0x0800a869
 800a778:	0800a7f5 	.word	0x0800a7f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a77c:	4b90      	ldr	r3, [pc, #576]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a788:	d108      	bne.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a78a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 ff62 	bl	800b658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a798:	f000 bc93 	b.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a79c:	2300      	movs	r3, #0
 800a79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a0:	f000 bc8f 	b.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7a4:	4b86      	ldr	r3, [pc, #536]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7b0:	d108      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7b2:	f107 0318 	add.w	r3, r7, #24
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 fca6 	bl	800b108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7c0:	f000 bc7f 	b.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7c8:	f000 bc7b 	b.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7cc:	4b7c      	ldr	r3, [pc, #496]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7d8:	d108      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7da:	f107 030c 	add.w	r3, r7, #12
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fde6 	bl	800b3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e8:	f000 bc6b 	b.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7f0:	f000 bc67 	b.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7f4:	4b72      	ldr	r3, [pc, #456]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7fc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7fe:	4b70      	ldr	r3, [pc, #448]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f003 0304 	and.w	r3, r3, #4
 800a806:	2b04      	cmp	r3, #4
 800a808:	d10c      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d109      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a810:	4b6b      	ldr	r3, [pc, #428]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	08db      	lsrs	r3, r3, #3
 800a816:	f003 0303 	and.w	r3, r3, #3
 800a81a:	4a6a      	ldr	r2, [pc, #424]	; (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a81c:	fa22 f303 	lsr.w	r3, r2, r3
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a822:	e01f      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a824:	4b66      	ldr	r3, [pc, #408]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a82c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a830:	d106      	bne.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a838:	d102      	bne.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a83a:	4b63      	ldr	r3, [pc, #396]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a83c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a83e:	e011      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a840:	4b5f      	ldr	r3, [pc, #380]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a84c:	d106      	bne.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a854:	d102      	bne.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a856:	4b5d      	ldr	r3, [pc, #372]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a858:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a85a:	e003      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a860:	f000 bc2f 	b.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a864:	f000 bc2d 	b.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a868:	4b59      	ldr	r3, [pc, #356]	; (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a86a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a86c:	f000 bc29 	b.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a874:	f000 bc25 	b.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a87c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a880:	430b      	orrs	r3, r1
 800a882:	f040 80a7 	bne.w	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a886:	4b4e      	ldr	r3, [pc, #312]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a88a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a88e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a892:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a896:	d054      	beq.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a89e:	f200 808b 	bhi.w	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a8a8:	f000 8083 	beq.w	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a8b2:	f200 8081 	bhi.w	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8bc:	d02f      	beq.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8c4:	d878      	bhi.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d004      	beq.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8d2:	d012      	beq.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a8d4:	e070      	b.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8d6:	4b3a      	ldr	r3, [pc, #232]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8e2:	d107      	bne.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f000 feb5 	bl	800b658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f2:	e3e6      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8f8:	e3e3      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8fa:	4b31      	ldr	r3, [pc, #196]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a906:	d107      	bne.n	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a908:	f107 0318 	add.w	r3, r7, #24
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fbfb 	bl	800b108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a916:	e3d4      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a918:	2300      	movs	r3, #0
 800a91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a91c:	e3d1      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a91e:	4b28      	ldr	r3, [pc, #160]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a92a:	d107      	bne.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a92c:	f107 030c 	add.w	r3, r7, #12
 800a930:	4618      	mov	r0, r3
 800a932:	f000 fd3d 	bl	800b3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a93a:	e3c2      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a93c:	2300      	movs	r3, #0
 800a93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a940:	e3bf      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a942:	4b1f      	ldr	r3, [pc, #124]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a946:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a94a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a94c:	4b1c      	ldr	r3, [pc, #112]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b04      	cmp	r3, #4
 800a956:	d10c      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d109      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a95e:	4b18      	ldr	r3, [pc, #96]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	08db      	lsrs	r3, r3, #3
 800a964:	f003 0303 	and.w	r3, r3, #3
 800a968:	4a16      	ldr	r2, [pc, #88]	; (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a96a:	fa22 f303 	lsr.w	r3, r2, r3
 800a96e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a970:	e01e      	b.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a972:	4b13      	ldr	r3, [pc, #76]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a97a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a97e:	d106      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a986:	d102      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a988:	4b0f      	ldr	r3, [pc, #60]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a98a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a98c:	e010      	b.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a98e:	4b0c      	ldr	r3, [pc, #48]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a996:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a99a:	d106      	bne.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a99e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9a2:	d102      	bne.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9a4:	4b09      	ldr	r3, [pc, #36]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9a8:	e002      	b.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a9ae:	e388      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a9b0:	e387      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a9b2:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9b6:	e384      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9bc:	e381      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a9be:	bf00      	nop
 800a9c0:	58024400 	.word	0x58024400
 800a9c4:	03d09000 	.word	0x03d09000
 800a9c8:	003d0900 	.word	0x003d0900
 800a9cc:	02faf080 	.word	0x02faf080
 800a9d0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a9d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9d8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a9dc:	430b      	orrs	r3, r1
 800a9de:	f040 809c 	bne.w	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a9e2:	4b9e      	ldr	r3, [pc, #632]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a9e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9e6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a9ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9f2:	d054      	beq.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9fa:	f200 808b 	bhi.w	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa04:	f000 8083 	beq.w	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800aa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa0e:	f200 8081 	bhi.w	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa18:	d02f      	beq.n	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa20:	d878      	bhi.n	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d004      	beq.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800aa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa2e:	d012      	beq.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800aa30:	e070      	b.n	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa32:	4b8a      	ldr	r3, [pc, #552]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa3e:	d107      	bne.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 fe07 	bl	800b658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa4e:	e338      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa54:	e335      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa56:	4b81      	ldr	r3, [pc, #516]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa62:	d107      	bne.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa64:	f107 0318 	add.w	r3, r7, #24
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 fb4d 	bl	800b108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa72:	e326      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa78:	e323      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa7a:	4b78      	ldr	r3, [pc, #480]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa86:	d107      	bne.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa88:	f107 030c 	add.w	r3, r7, #12
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 fc8f 	bl	800b3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa96:	e314      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa9c:	e311      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa9e:	4b6f      	ldr	r3, [pc, #444]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aaa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaa2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aaa6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aaa8:	4b6c      	ldr	r3, [pc, #432]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 0304 	and.w	r3, r3, #4
 800aab0:	2b04      	cmp	r3, #4
 800aab2:	d10c      	bne.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800aab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d109      	bne.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaba:	4b68      	ldr	r3, [pc, #416]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	08db      	lsrs	r3, r3, #3
 800aac0:	f003 0303 	and.w	r3, r3, #3
 800aac4:	4a66      	ldr	r2, [pc, #408]	; (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800aac6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aacc:	e01e      	b.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aace:	4b63      	ldr	r3, [pc, #396]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aada:	d106      	bne.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800aadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aae2:	d102      	bne.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aae4:	4b5f      	ldr	r3, [pc, #380]	; (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800aae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aae8:	e010      	b.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aaea:	4b5c      	ldr	r3, [pc, #368]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaf6:	d106      	bne.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800aaf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aafa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aafe:	d102      	bne.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab00:	4b59      	ldr	r3, [pc, #356]	; (800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab04:	e002      	b.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab06:	2300      	movs	r3, #0
 800ab08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ab0a:	e2da      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ab0c:	e2d9      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab0e:	4b57      	ldr	r3, [pc, #348]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ab10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab12:	e2d6      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab18:	e2d3      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ab1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab1e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ab22:	430b      	orrs	r3, r1
 800ab24:	f040 80a7 	bne.w	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ab28:	4b4c      	ldr	r3, [pc, #304]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab2c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ab30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ab32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab38:	d055      	beq.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab40:	f200 8096 	bhi.w	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ab44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab4a:	f000 8084 	beq.w	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ab4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab54:	f200 808c 	bhi.w	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ab58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab5e:	d030      	beq.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ab60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab66:	f200 8083 	bhi.w	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d004      	beq.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800ab70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab76:	d012      	beq.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ab78:	e07a      	b.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab7a:	4b38      	ldr	r3, [pc, #224]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab86:	d107      	bne.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 fd63 	bl	800b658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab96:	e294      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab9c:	e291      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab9e:	4b2f      	ldr	r3, [pc, #188]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abaa:	d107      	bne.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abac:	f107 0318 	add.w	r3, r7, #24
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 faa9 	bl	800b108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abba:	e282      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abbc:	2300      	movs	r3, #0
 800abbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abc0:	e27f      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abc2:	4b26      	ldr	r3, [pc, #152]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abce:	d107      	bne.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abd0:	f107 030c 	add.w	r3, r7, #12
 800abd4:	4618      	mov	r0, r3
 800abd6:	f000 fbeb 	bl	800b3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abde:	e270      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abe4:	e26d      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abe6:	4b1d      	ldr	r3, [pc, #116]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abf0:	4b1a      	ldr	r3, [pc, #104]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0304 	and.w	r3, r3, #4
 800abf8:	2b04      	cmp	r3, #4
 800abfa:	d10c      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800abfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d109      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac02:	4b16      	ldr	r3, [pc, #88]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	08db      	lsrs	r3, r3, #3
 800ac08:	f003 0303 	and.w	r3, r3, #3
 800ac0c:	4a14      	ldr	r2, [pc, #80]	; (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ac0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac14:	e01e      	b.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac16:	4b11      	ldr	r3, [pc, #68]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac22:	d106      	bne.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ac24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac2a:	d102      	bne.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac2c:	4b0d      	ldr	r3, [pc, #52]	; (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ac2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac30:	e010      	b.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac32:	4b0a      	ldr	r3, [pc, #40]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac3e:	d106      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ac40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac46:	d102      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac48:	4b07      	ldr	r3, [pc, #28]	; (800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac4c:	e002      	b.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac52:	e236      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ac54:	e235      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac56:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ac58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac5a:	e232      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ac5c:	58024400 	.word	0x58024400
 800ac60:	03d09000 	.word	0x03d09000
 800ac64:	003d0900 	.word	0x003d0900
 800ac68:	02faf080 	.word	0x02faf080
 800ac6c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac74:	e225      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ac76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac7a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ac7e:	430b      	orrs	r3, r1
 800ac80:	f040 8085 	bne.w	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ac84:	4b9c      	ldr	r3, [pc, #624]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac88:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ac8c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac94:	d06b      	beq.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ac96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac9c:	d874      	bhi.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ac9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aca4:	d056      	beq.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800aca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acac:	d86c      	bhi.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800acae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acb4:	d03b      	beq.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800acb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acbc:	d864      	bhi.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acc4:	d021      	beq.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800acc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800accc:	d85c      	bhi.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800acce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d004      	beq.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800acd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acda:	d004      	beq.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800acdc:	e054      	b.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800acde:	f7fe fb75 	bl	80093cc <HAL_RCC_GetPCLK1Freq>
 800ace2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ace4:	e1ed      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ace6:	4b84      	ldr	r3, [pc, #528]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acf2:	d107      	bne.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acf4:	f107 0318 	add.w	r3, r7, #24
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 fa05 	bl	800b108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad02:	e1de      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad04:	2300      	movs	r3, #0
 800ad06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad08:	e1db      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad0a:	4b7b      	ldr	r3, [pc, #492]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad16:	d107      	bne.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad18:	f107 030c 	add.w	r3, r7, #12
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 fb47 	bl	800b3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad26:	e1cc      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad2c:	e1c9      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad2e:	4b72      	ldr	r3, [pc, #456]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 0304 	and.w	r3, r3, #4
 800ad36:	2b04      	cmp	r3, #4
 800ad38:	d109      	bne.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad3a:	4b6f      	ldr	r3, [pc, #444]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	08db      	lsrs	r3, r3, #3
 800ad40:	f003 0303 	and.w	r3, r3, #3
 800ad44:	4a6d      	ldr	r2, [pc, #436]	; (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ad46:	fa22 f303 	lsr.w	r3, r2, r3
 800ad4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad4c:	e1b9      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad52:	e1b6      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ad54:	4b68      	ldr	r3, [pc, #416]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad60:	d102      	bne.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800ad62:	4b67      	ldr	r3, [pc, #412]	; (800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ad64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad66:	e1ac      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad6c:	e1a9      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad6e:	4b62      	ldr	r3, [pc, #392]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad7a:	d102      	bne.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ad7c:	4b61      	ldr	r3, [pc, #388]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ad7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad80:	e19f      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad82:	2300      	movs	r3, #0
 800ad84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad86:	e19c      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad8c:	e199      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ad8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad92:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ad96:	430b      	orrs	r3, r1
 800ad98:	d173      	bne.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ad9a:	4b57      	ldr	r3, [pc, #348]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ada2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ada4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adaa:	d02f      	beq.n	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800adac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adb2:	d863      	bhi.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800adb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d004      	beq.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800adba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adc0:	d012      	beq.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800adc2:	e05b      	b.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adc4:	4b4c      	ldr	r3, [pc, #304]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800add0:	d107      	bne.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800add2:	f107 0318 	add.w	r3, r7, #24
 800add6:	4618      	mov	r0, r3
 800add8:	f000 f996 	bl	800b108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade0:	e16f      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ade6:	e16c      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ade8:	4b43      	ldr	r3, [pc, #268]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adf4:	d107      	bne.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adf6:	f107 030c 	add.w	r3, r7, #12
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 fad8 	bl	800b3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae04:	e15d      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae06:	2300      	movs	r3, #0
 800ae08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae0a:	e15a      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae0c:	4b3a      	ldr	r3, [pc, #232]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae14:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae16:	4b38      	ldr	r3, [pc, #224]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 0304 	and.w	r3, r3, #4
 800ae1e:	2b04      	cmp	r3, #4
 800ae20:	d10c      	bne.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800ae22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d109      	bne.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae28:	4b33      	ldr	r3, [pc, #204]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	08db      	lsrs	r3, r3, #3
 800ae2e:	f003 0303 	and.w	r3, r3, #3
 800ae32:	4a32      	ldr	r2, [pc, #200]	; (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ae34:	fa22 f303 	lsr.w	r3, r2, r3
 800ae38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae3a:	e01e      	b.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae3c:	4b2e      	ldr	r3, [pc, #184]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae48:	d106      	bne.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800ae4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae50:	d102      	bne.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae52:	4b2b      	ldr	r3, [pc, #172]	; (800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ae54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae56:	e010      	b.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae58:	4b27      	ldr	r3, [pc, #156]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae64:	d106      	bne.n	800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800ae66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae6c:	d102      	bne.n	800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae6e:	4b25      	ldr	r3, [pc, #148]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ae70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae72:	e002      	b.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae74:	2300      	movs	r3, #0
 800ae76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ae78:	e123      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae7a:	e122      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae80:	e11f      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ae82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae86:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ae8a:	430b      	orrs	r3, r1
 800ae8c:	d13c      	bne.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ae8e:	4b1a      	ldr	r3, [pc, #104]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae96:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ae98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d004      	beq.n	800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800ae9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aea4:	d012      	beq.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800aea6:	e023      	b.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aea8:	4b13      	ldr	r3, [pc, #76]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aeb4:	d107      	bne.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aeb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeba:	4618      	mov	r0, r3
 800aebc:	f000 fbcc 	bl	800b658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aec4:	e0fd      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeca:	e0fa      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aecc:	4b0a      	ldr	r3, [pc, #40]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aed8:	d107      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeda:	f107 0318 	add.w	r3, r7, #24
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 f912 	bl	800b108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aee4:	6a3b      	ldr	r3, [r7, #32]
 800aee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aee8:	e0eb      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeee:	e0e8      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aef4:	e0e5      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aef6:	bf00      	nop
 800aef8:	58024400 	.word	0x58024400
 800aefc:	03d09000 	.word	0x03d09000
 800af00:	003d0900 	.word	0x003d0900
 800af04:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800af08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af0c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800af10:	430b      	orrs	r3, r1
 800af12:	f040 8085 	bne.w	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800af16:	4b6d      	ldr	r3, [pc, #436]	; (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af1a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800af1e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800af20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af26:	d06b      	beq.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800af28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af2e:	d874      	bhi.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800af30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af36:	d056      	beq.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800af38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af3e:	d86c      	bhi.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af46:	d03b      	beq.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800af48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af4e:	d864      	bhi.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800af50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af56:	d021      	beq.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af5e:	d85c      	bhi.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800af60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af62:	2b00      	cmp	r3, #0
 800af64:	d004      	beq.n	800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800af66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af6c:	d004      	beq.n	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800af6e:	e054      	b.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800af70:	f000 f8b4 	bl	800b0dc <HAL_RCCEx_GetD3PCLK1Freq>
 800af74:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af76:	e0a4      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af78:	4b54      	ldr	r3, [pc, #336]	; (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af84:	d107      	bne.n	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af86:	f107 0318 	add.w	r3, r7, #24
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f8bc 	bl	800b108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af94:	e095      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af96:	2300      	movs	r3, #0
 800af98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af9a:	e092      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af9c:	4b4b      	ldr	r3, [pc, #300]	; (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afa8:	d107      	bne.n	800afba <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afaa:	f107 030c 	add.w	r3, r7, #12
 800afae:	4618      	mov	r0, r3
 800afb0:	f000 f9fe 	bl	800b3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afb8:	e083      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afbe:	e080      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800afc0:	4b42      	ldr	r3, [pc, #264]	; (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 0304 	and.w	r3, r3, #4
 800afc8:	2b04      	cmp	r3, #4
 800afca:	d109      	bne.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afcc:	4b3f      	ldr	r3, [pc, #252]	; (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	08db      	lsrs	r3, r3, #3
 800afd2:	f003 0303 	and.w	r3, r3, #3
 800afd6:	4a3e      	ldr	r2, [pc, #248]	; (800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800afd8:	fa22 f303 	lsr.w	r3, r2, r3
 800afdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afde:	e070      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afe0:	2300      	movs	r3, #0
 800afe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afe4:	e06d      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800afe6:	4b39      	ldr	r3, [pc, #228]	; (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aff2:	d102      	bne.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800aff4:	4b37      	ldr	r3, [pc, #220]	; (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aff8:	e063      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800affe:	e060      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b000:	4b32      	ldr	r3, [pc, #200]	; (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b00c:	d102      	bne.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b00e:	4b32      	ldr	r3, [pc, #200]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b012:	e056      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b018:	e053      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b01e:	e050      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b020:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b024:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b028:	430b      	orrs	r3, r1
 800b02a:	d148      	bne.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b02c:	4b27      	ldr	r3, [pc, #156]	; (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b02e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b030:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b034:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b03c:	d02a      	beq.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b044:	d838      	bhi.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d004      	beq.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b052:	d00d      	beq.n	800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b054:	e030      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b056:	4b1d      	ldr	r3, [pc, #116]	; (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b05e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b062:	d102      	bne.n	800b06a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b064:	4b1c      	ldr	r3, [pc, #112]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b068:	e02b      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b06a:	2300      	movs	r3, #0
 800b06c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b06e:	e028      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b070:	4b16      	ldr	r3, [pc, #88]	; (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b07c:	d107      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b07e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b082:	4618      	mov	r0, r3
 800b084:	f000 fae8 	bl	800b658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b08c:	e019      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b08e:	2300      	movs	r3, #0
 800b090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b092:	e016      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b094:	4b0d      	ldr	r3, [pc, #52]	; (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b09c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0a0:	d107      	bne.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0a2:	f107 0318 	add.w	r3, r7, #24
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 f82e 	bl	800b108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0b0:	e007      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0b6:	e004      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0bc:	e001      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3740      	adds	r7, #64	; 0x40
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	58024400 	.word	0x58024400
 800b0d0:	03d09000 	.word	0x03d09000
 800b0d4:	003d0900 	.word	0x003d0900
 800b0d8:	02faf080 	.word	0x02faf080

0800b0dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b0e0:	f7fe f944 	bl	800936c <HAL_RCC_GetHCLKFreq>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	4b06      	ldr	r3, [pc, #24]	; (800b100 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	091b      	lsrs	r3, r3, #4
 800b0ec:	f003 0307 	and.w	r3, r3, #7
 800b0f0:	4904      	ldr	r1, [pc, #16]	; (800b104 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b0f2:	5ccb      	ldrb	r3, [r1, r3]
 800b0f4:	f003 031f 	and.w	r3, r3, #31
 800b0f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	58024400 	.word	0x58024400
 800b104:	08011238 	.word	0x08011238

0800b108 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b108:	b480      	push	{r7}
 800b10a:	b089      	sub	sp, #36	; 0x24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b110:	4ba1      	ldr	r3, [pc, #644]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b114:	f003 0303 	and.w	r3, r3, #3
 800b118:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b11a:	4b9f      	ldr	r3, [pc, #636]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11e:	0b1b      	lsrs	r3, r3, #12
 800b120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b124:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b126:	4b9c      	ldr	r3, [pc, #624]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12a:	091b      	lsrs	r3, r3, #4
 800b12c:	f003 0301 	and.w	r3, r3, #1
 800b130:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b132:	4b99      	ldr	r3, [pc, #612]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b136:	08db      	lsrs	r3, r3, #3
 800b138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	fb02 f303 	mul.w	r3, r2, r3
 800b142:	ee07 3a90 	vmov	s15, r3
 800b146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b14a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 8111 	beq.w	800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	2b02      	cmp	r3, #2
 800b15a:	f000 8083 	beq.w	800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	2b02      	cmp	r3, #2
 800b162:	f200 80a1 	bhi.w	800b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d003      	beq.n	800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d056      	beq.n	800b220 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b172:	e099      	b.n	800b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b174:	4b88      	ldr	r3, [pc, #544]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0320 	and.w	r3, r3, #32
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d02d      	beq.n	800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b180:	4b85      	ldr	r3, [pc, #532]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	08db      	lsrs	r3, r3, #3
 800b186:	f003 0303 	and.w	r3, r3, #3
 800b18a:	4a84      	ldr	r2, [pc, #528]	; (800b39c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b18c:	fa22 f303 	lsr.w	r3, r2, r3
 800b190:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	ee07 3a90 	vmov	s15, r3
 800b198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	ee07 3a90 	vmov	s15, r3
 800b1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1aa:	4b7b      	ldr	r3, [pc, #492]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b2:	ee07 3a90 	vmov	s15, r3
 800b1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1be:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b1da:	e087      	b.n	800b2ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	ee07 3a90 	vmov	s15, r3
 800b1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ee:	4b6a      	ldr	r3, [pc, #424]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f6:	ee07 3a90 	vmov	s15, r3
 800b1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b202:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b20e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b21a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b21e:	e065      	b.n	800b2ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	ee07 3a90 	vmov	s15, r3
 800b226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b22a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b232:	4b59      	ldr	r3, [pc, #356]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b23a:	ee07 3a90 	vmov	s15, r3
 800b23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b242:	ed97 6a03 	vldr	s12, [r7, #12]
 800b246:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b25e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b262:	e043      	b.n	800b2ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	ee07 3a90 	vmov	s15, r3
 800b26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b26e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b3ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b276:	4b48      	ldr	r3, [pc, #288]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b286:	ed97 6a03 	vldr	s12, [r7, #12]
 800b28a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2a6:	e021      	b.n	800b2ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	ee07 3a90 	vmov	s15, r3
 800b2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ba:	4b37      	ldr	r3, [pc, #220]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c2:	ee07 3a90 	vmov	s15, r3
 800b2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b2ec:	4b2a      	ldr	r3, [pc, #168]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f0:	0a5b      	lsrs	r3, r3, #9
 800b2f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2f6:	ee07 3a90 	vmov	s15, r3
 800b2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b302:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b306:	edd7 6a07 	vldr	s13, [r7, #28]
 800b30a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b30e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b312:	ee17 2a90 	vmov	r2, s15
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b31a:	4b1f      	ldr	r3, [pc, #124]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31e:	0c1b      	lsrs	r3, r3, #16
 800b320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b324:	ee07 3a90 	vmov	s15, r3
 800b328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b32c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b330:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b334:	edd7 6a07 	vldr	s13, [r7, #28]
 800b338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b33c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b340:	ee17 2a90 	vmov	r2, s15
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b348:	4b13      	ldr	r3, [pc, #76]	; (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34c:	0e1b      	lsrs	r3, r3, #24
 800b34e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b352:	ee07 3a90 	vmov	s15, r3
 800b356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b35e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b362:	edd7 6a07 	vldr	s13, [r7, #28]
 800b366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b36a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b36e:	ee17 2a90 	vmov	r2, s15
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b376:	e008      	b.n	800b38a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	609a      	str	r2, [r3, #8]
}
 800b38a:	bf00      	nop
 800b38c:	3724      	adds	r7, #36	; 0x24
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	58024400 	.word	0x58024400
 800b39c:	03d09000 	.word	0x03d09000
 800b3a0:	46000000 	.word	0x46000000
 800b3a4:	4c742400 	.word	0x4c742400
 800b3a8:	4a742400 	.word	0x4a742400
 800b3ac:	4c3ebc20 	.word	0x4c3ebc20

0800b3b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b089      	sub	sp, #36	; 0x24
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3b8:	4ba1      	ldr	r3, [pc, #644]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3bc:	f003 0303 	and.w	r3, r3, #3
 800b3c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b3c2:	4b9f      	ldr	r3, [pc, #636]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c6:	0d1b      	lsrs	r3, r3, #20
 800b3c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b3ce:	4b9c      	ldr	r3, [pc, #624]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d2:	0a1b      	lsrs	r3, r3, #8
 800b3d4:	f003 0301 	and.w	r3, r3, #1
 800b3d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b3da:	4b99      	ldr	r3, [pc, #612]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3de:	08db      	lsrs	r3, r3, #3
 800b3e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	fb02 f303 	mul.w	r3, r2, r3
 800b3ea:	ee07 3a90 	vmov	s15, r3
 800b3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 8111 	beq.w	800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	2b02      	cmp	r3, #2
 800b402:	f000 8083 	beq.w	800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	2b02      	cmp	r3, #2
 800b40a:	f200 80a1 	bhi.w	800b550 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d003      	beq.n	800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d056      	beq.n	800b4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b41a:	e099      	b.n	800b550 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b41c:	4b88      	ldr	r3, [pc, #544]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0320 	and.w	r3, r3, #32
 800b424:	2b00      	cmp	r3, #0
 800b426:	d02d      	beq.n	800b484 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b428:	4b85      	ldr	r3, [pc, #532]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	08db      	lsrs	r3, r3, #3
 800b42e:	f003 0303 	and.w	r3, r3, #3
 800b432:	4a84      	ldr	r2, [pc, #528]	; (800b644 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b434:	fa22 f303 	lsr.w	r3, r2, r3
 800b438:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	ee07 3a90 	vmov	s15, r3
 800b440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	ee07 3a90 	vmov	s15, r3
 800b44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b452:	4b7b      	ldr	r3, [pc, #492]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b45a:	ee07 3a90 	vmov	s15, r3
 800b45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b462:	ed97 6a03 	vldr	s12, [r7, #12]
 800b466:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b46a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b46e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b47e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b482:	e087      	b.n	800b594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	ee07 3a90 	vmov	s15, r3
 800b48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b64c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b496:	4b6a      	ldr	r3, [pc, #424]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b49e:	ee07 3a90 	vmov	s15, r3
 800b4a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4c6:	e065      	b.n	800b594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	ee07 3a90 	vmov	s15, r3
 800b4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4da:	4b59      	ldr	r3, [pc, #356]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e2:	ee07 3a90 	vmov	s15, r3
 800b4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b50a:	e043      	b.n	800b594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	ee07 3a90 	vmov	s15, r3
 800b512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b516:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b654 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b51e:	4b48      	ldr	r3, [pc, #288]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b532:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b53e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b54e:	e021      	b.n	800b594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	ee07 3a90 	vmov	s15, r3
 800b556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b562:	4b37      	ldr	r3, [pc, #220]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56a:	ee07 3a90 	vmov	s15, r3
 800b56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b572:	ed97 6a03 	vldr	s12, [r7, #12]
 800b576:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b58e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b592:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b594:	4b2a      	ldr	r3, [pc, #168]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b598:	0a5b      	lsrs	r3, r3, #9
 800b59a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b59e:	ee07 3a90 	vmov	s15, r3
 800b5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ba:	ee17 2a90 	vmov	r2, s15
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b5c2:	4b1f      	ldr	r3, [pc, #124]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c6:	0c1b      	lsrs	r3, r3, #16
 800b5c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5cc:	ee07 3a90 	vmov	s15, r3
 800b5d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5e8:	ee17 2a90 	vmov	r2, s15
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b5f0:	4b13      	ldr	r3, [pc, #76]	; (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f4:	0e1b      	lsrs	r3, r3, #24
 800b5f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5fa:	ee07 3a90 	vmov	s15, r3
 800b5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b60a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b60e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b616:	ee17 2a90 	vmov	r2, s15
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b61e:	e008      	b.n	800b632 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	609a      	str	r2, [r3, #8]
}
 800b632:	bf00      	nop
 800b634:	3724      	adds	r7, #36	; 0x24
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	58024400 	.word	0x58024400
 800b644:	03d09000 	.word	0x03d09000
 800b648:	46000000 	.word	0x46000000
 800b64c:	4c742400 	.word	0x4c742400
 800b650:	4a742400 	.word	0x4a742400
 800b654:	4c3ebc20 	.word	0x4c3ebc20

0800b658 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b658:	b480      	push	{r7}
 800b65a:	b089      	sub	sp, #36	; 0x24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b660:	4ba0      	ldr	r3, [pc, #640]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b664:	f003 0303 	and.w	r3, r3, #3
 800b668:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b66a:	4b9e      	ldr	r3, [pc, #632]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b66e:	091b      	lsrs	r3, r3, #4
 800b670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b674:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b676:	4b9b      	ldr	r3, [pc, #620]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67a:	f003 0301 	and.w	r3, r3, #1
 800b67e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b680:	4b98      	ldr	r3, [pc, #608]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b684:	08db      	lsrs	r3, r3, #3
 800b686:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b68a:	693a      	ldr	r2, [r7, #16]
 800b68c:	fb02 f303 	mul.w	r3, r2, r3
 800b690:	ee07 3a90 	vmov	s15, r3
 800b694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b698:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	f000 8111 	beq.w	800b8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	f000 8083 	beq.w	800b7b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	f200 80a1 	bhi.w	800b7f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d003      	beq.n	800b6c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d056      	beq.n	800b76e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b6c0:	e099      	b.n	800b7f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6c2:	4b88      	ldr	r3, [pc, #544]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 0320 	and.w	r3, r3, #32
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d02d      	beq.n	800b72a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6ce:	4b85      	ldr	r3, [pc, #532]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	08db      	lsrs	r3, r3, #3
 800b6d4:	f003 0303 	and.w	r3, r3, #3
 800b6d8:	4a83      	ldr	r2, [pc, #524]	; (800b8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b6da:	fa22 f303 	lsr.w	r3, r2, r3
 800b6de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	ee07 3a90 	vmov	s15, r3
 800b6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	ee07 3a90 	vmov	s15, r3
 800b6f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6f8:	4b7a      	ldr	r3, [pc, #488]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b700:	ee07 3a90 	vmov	s15, r3
 800b704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b708:	ed97 6a03 	vldr	s12, [r7, #12]
 800b70c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b8ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b71c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b720:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b724:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b728:	e087      	b.n	800b83a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	ee07 3a90 	vmov	s15, r3
 800b730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b734:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b8f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b73c:	4b69      	ldr	r3, [pc, #420]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b744:	ee07 3a90 	vmov	s15, r3
 800b748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b74c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b750:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b8ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b75c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b764:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b768:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b76c:	e065      	b.n	800b83a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	ee07 3a90 	vmov	s15, r3
 800b774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b778:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b77c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b780:	4b58      	ldr	r3, [pc, #352]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b788:	ee07 3a90 	vmov	s15, r3
 800b78c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b790:	ed97 6a03 	vldr	s12, [r7, #12]
 800b794:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b8ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b79c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7b0:	e043      	b.n	800b83a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	ee07 3a90 	vmov	s15, r3
 800b7b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b8f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b7c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7c4:	4b47      	ldr	r3, [pc, #284]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7cc:	ee07 3a90 	vmov	s15, r3
 800b7d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b8ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7f4:	e021      	b.n	800b83a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	ee07 3a90 	vmov	s15, r3
 800b7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b800:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b8f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b808:	4b36      	ldr	r3, [pc, #216]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b810:	ee07 3a90 	vmov	s15, r3
 800b814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b818:	ed97 6a03 	vldr	s12, [r7, #12]
 800b81c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b8ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b82c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b830:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b834:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b838:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b83a:	4b2a      	ldr	r3, [pc, #168]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b83e:	0a5b      	lsrs	r3, r3, #9
 800b840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b844:	ee07 3a90 	vmov	s15, r3
 800b848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b850:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b854:	edd7 6a07 	vldr	s13, [r7, #28]
 800b858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b85c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b860:	ee17 2a90 	vmov	r2, s15
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b868:	4b1e      	ldr	r3, [pc, #120]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b86c:	0c1b      	lsrs	r3, r3, #16
 800b86e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b872:	ee07 3a90 	vmov	s15, r3
 800b876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b87a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b87e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b882:	edd7 6a07 	vldr	s13, [r7, #28]
 800b886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b88a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b88e:	ee17 2a90 	vmov	r2, s15
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b896:	4b13      	ldr	r3, [pc, #76]	; (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b89a:	0e1b      	lsrs	r3, r3, #24
 800b89c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8a0:	ee07 3a90 	vmov	s15, r3
 800b8a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8bc:	ee17 2a90 	vmov	r2, s15
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b8c4:	e008      	b.n	800b8d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	609a      	str	r2, [r3, #8]
}
 800b8d8:	bf00      	nop
 800b8da:	3724      	adds	r7, #36	; 0x24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	58024400 	.word	0x58024400
 800b8e8:	03d09000 	.word	0x03d09000
 800b8ec:	46000000 	.word	0x46000000
 800b8f0:	4c742400 	.word	0x4c742400
 800b8f4:	4a742400 	.word	0x4a742400
 800b8f8:	4c3ebc20 	.word	0x4c3ebc20

0800b8fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b90a:	4b53      	ldr	r3, [pc, #332]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90e:	f003 0303 	and.w	r3, r3, #3
 800b912:	2b03      	cmp	r3, #3
 800b914:	d101      	bne.n	800b91a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e099      	b.n	800ba4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b91a:	4b4f      	ldr	r3, [pc, #316]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a4e      	ldr	r2, [pc, #312]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b920:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b926:	f7f7 fc3d 	bl	80031a4 <HAL_GetTick>
 800b92a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b92c:	e008      	b.n	800b940 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b92e:	f7f7 fc39 	bl	80031a4 <HAL_GetTick>
 800b932:	4602      	mov	r2, r0
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	1ad3      	subs	r3, r2, r3
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d901      	bls.n	800b940 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b93c:	2303      	movs	r3, #3
 800b93e:	e086      	b.n	800ba4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b940:	4b45      	ldr	r3, [pc, #276]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1f0      	bne.n	800b92e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b94c:	4b42      	ldr	r3, [pc, #264]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b950:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	031b      	lsls	r3, r3, #12
 800b95a:	493f      	ldr	r1, [pc, #252]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b95c:	4313      	orrs	r3, r2
 800b95e:	628b      	str	r3, [r1, #40]	; 0x28
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	3b01      	subs	r3, #1
 800b966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	3b01      	subs	r3, #1
 800b970:	025b      	lsls	r3, r3, #9
 800b972:	b29b      	uxth	r3, r3
 800b974:	431a      	orrs	r2, r3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	3b01      	subs	r3, #1
 800b97c:	041b      	lsls	r3, r3, #16
 800b97e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b982:	431a      	orrs	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	3b01      	subs	r3, #1
 800b98a:	061b      	lsls	r3, r3, #24
 800b98c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b990:	4931      	ldr	r1, [pc, #196]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b992:	4313      	orrs	r3, r2
 800b994:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b996:	4b30      	ldr	r3, [pc, #192]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	492d      	ldr	r1, [pc, #180]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b9a8:	4b2b      	ldr	r3, [pc, #172]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ac:	f023 0220 	bic.w	r2, r3, #32
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	4928      	ldr	r1, [pc, #160]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b9ba:	4b27      	ldr	r3, [pc, #156]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9be:	4a26      	ldr	r2, [pc, #152]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b9c0:	f023 0310 	bic.w	r3, r3, #16
 800b9c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b9c6:	4b24      	ldr	r3, [pc, #144]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b9c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9ca:	4b24      	ldr	r3, [pc, #144]	; (800ba5c <RCCEx_PLL2_Config+0x160>)
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	69d2      	ldr	r2, [r2, #28]
 800b9d2:	00d2      	lsls	r2, r2, #3
 800b9d4:	4920      	ldr	r1, [pc, #128]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b9da:	4b1f      	ldr	r3, [pc, #124]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9de:	4a1e      	ldr	r2, [pc, #120]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b9e0:	f043 0310 	orr.w	r3, r3, #16
 800b9e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d106      	bne.n	800b9fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b9ec:	4b1a      	ldr	r3, [pc, #104]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f0:	4a19      	ldr	r2, [pc, #100]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800b9f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9f8:	e00f      	b.n	800ba1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d106      	bne.n	800ba0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ba00:	4b15      	ldr	r3, [pc, #84]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800ba02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba04:	4a14      	ldr	r2, [pc, #80]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800ba06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba0c:	e005      	b.n	800ba1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ba0e:	4b12      	ldr	r3, [pc, #72]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800ba10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba12:	4a11      	ldr	r2, [pc, #68]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800ba14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ba1a:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a0e      	ldr	r2, [pc, #56]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800ba20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ba24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba26:	f7f7 fbbd 	bl	80031a4 <HAL_GetTick>
 800ba2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba2c:	e008      	b.n	800ba40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba2e:	f7f7 fbb9 	bl	80031a4 <HAL_GetTick>
 800ba32:	4602      	mov	r2, r0
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	2b02      	cmp	r3, #2
 800ba3a:	d901      	bls.n	800ba40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	e006      	b.n	800ba4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba40:	4b05      	ldr	r3, [pc, #20]	; (800ba58 <RCCEx_PLL2_Config+0x15c>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d0f0      	beq.n	800ba2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ba4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	58024400 	.word	0x58024400
 800ba5c:	ffff0007 	.word	0xffff0007

0800ba60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba6e:	4b53      	ldr	r3, [pc, #332]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800ba70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba72:	f003 0303 	and.w	r3, r3, #3
 800ba76:	2b03      	cmp	r3, #3
 800ba78:	d101      	bne.n	800ba7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e099      	b.n	800bbb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ba7e:	4b4f      	ldr	r3, [pc, #316]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a4e      	ldr	r2, [pc, #312]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800ba84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba8a:	f7f7 fb8b 	bl	80031a4 <HAL_GetTick>
 800ba8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba90:	e008      	b.n	800baa4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba92:	f7f7 fb87 	bl	80031a4 <HAL_GetTick>
 800ba96:	4602      	mov	r2, r0
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d901      	bls.n	800baa4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800baa0:	2303      	movs	r3, #3
 800baa2:	e086      	b.n	800bbb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800baa4:	4b45      	ldr	r3, [pc, #276]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1f0      	bne.n	800ba92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bab0:	4b42      	ldr	r3, [pc, #264]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	051b      	lsls	r3, r3, #20
 800babe:	493f      	ldr	r1, [pc, #252]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bac0:	4313      	orrs	r3, r2
 800bac2:	628b      	str	r3, [r1, #40]	; 0x28
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	3b01      	subs	r3, #1
 800baca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	3b01      	subs	r3, #1
 800bad4:	025b      	lsls	r3, r3, #9
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	431a      	orrs	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	3b01      	subs	r3, #1
 800bae0:	041b      	lsls	r3, r3, #16
 800bae2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bae6:	431a      	orrs	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	691b      	ldr	r3, [r3, #16]
 800baec:	3b01      	subs	r3, #1
 800baee:	061b      	lsls	r3, r3, #24
 800baf0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800baf4:	4931      	ldr	r1, [pc, #196]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800baf6:	4313      	orrs	r3, r2
 800baf8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bafa:	4b30      	ldr	r3, [pc, #192]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	492d      	ldr	r1, [pc, #180]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bb0c:	4b2b      	ldr	r3, [pc, #172]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	4928      	ldr	r1, [pc, #160]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bb1e:	4b27      	ldr	r3, [pc, #156]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb22:	4a26      	ldr	r2, [pc, #152]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bb2a:	4b24      	ldr	r3, [pc, #144]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb2e:	4b24      	ldr	r3, [pc, #144]	; (800bbc0 <RCCEx_PLL3_Config+0x160>)
 800bb30:	4013      	ands	r3, r2
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	69d2      	ldr	r2, [r2, #28]
 800bb36:	00d2      	lsls	r2, r2, #3
 800bb38:	4920      	ldr	r1, [pc, #128]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bb3e:	4b1f      	ldr	r3, [pc, #124]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb42:	4a1e      	ldr	r2, [pc, #120]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d106      	bne.n	800bb5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bb50:	4b1a      	ldr	r3, [pc, #104]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	4a19      	ldr	r2, [pc, #100]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bb5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bb5c:	e00f      	b.n	800bb7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d106      	bne.n	800bb72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bb64:	4b15      	ldr	r3, [pc, #84]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb68:	4a14      	ldr	r2, [pc, #80]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bb6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bb70:	e005      	b.n	800bb7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bb72:	4b12      	ldr	r3, [pc, #72]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb76:	4a11      	ldr	r2, [pc, #68]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bb7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bb7e:	4b0f      	ldr	r3, [pc, #60]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a0e      	ldr	r2, [pc, #56]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bb84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb8a:	f7f7 fb0b 	bl	80031a4 <HAL_GetTick>
 800bb8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb90:	e008      	b.n	800bba4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb92:	f7f7 fb07 	bl	80031a4 <HAL_GetTick>
 800bb96:	4602      	mov	r2, r0
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	1ad3      	subs	r3, r2, r3
 800bb9c:	2b02      	cmp	r3, #2
 800bb9e:	d901      	bls.n	800bba4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bba0:	2303      	movs	r3, #3
 800bba2:	e006      	b.n	800bbb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bba4:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <RCCEx_PLL3_Config+0x15c>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d0f0      	beq.n	800bb92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	58024400 	.word	0x58024400
 800bbc0:	ffff0007 	.word	0xffff0007

0800bbc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bbc4:	b084      	sub	sp, #16
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b084      	sub	sp, #16
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	f107 001c 	add.w	r0, r7, #28
 800bbd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d120      	bne.n	800bc1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	68da      	ldr	r2, [r3, #12]
 800bbec:	4b2a      	ldr	r3, [pc, #168]	; (800bc98 <USB_CoreInit+0xd4>)
 800bbee:	4013      	ands	r3, r2
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bc00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d105      	bne.n	800bc12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f001 faf8 	bl	800d208 <USB_CoreReset>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	73fb      	strb	r3, [r7, #15]
 800bc1c:	e01a      	b.n	800bc54 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f001 faec 	bl	800d208 <USB_CoreReset>
 800bc30:	4603      	mov	r3, r0
 800bc32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bc34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d106      	bne.n	800bc48 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	639a      	str	r2, [r3, #56]	; 0x38
 800bc46:	e005      	b.n	800bc54 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d116      	bne.n	800bc88 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bc68:	4b0c      	ldr	r3, [pc, #48]	; (800bc9c <USB_CoreInit+0xd8>)
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	f043 0206 	orr.w	r2, r3, #6
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f043 0220 	orr.w	r2, r3, #32
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc94:	b004      	add	sp, #16
 800bc96:	4770      	bx	lr
 800bc98:	ffbdffbf 	.word	0xffbdffbf
 800bc9c:	03ee0000 	.word	0x03ee0000

0800bca0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b087      	sub	sp, #28
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bcae:	79fb      	ldrb	r3, [r7, #7]
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d165      	bne.n	800bd80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	4a41      	ldr	r2, [pc, #260]	; (800bdbc <USB_SetTurnaroundTime+0x11c>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d906      	bls.n	800bcca <USB_SetTurnaroundTime+0x2a>
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	4a40      	ldr	r2, [pc, #256]	; (800bdc0 <USB_SetTurnaroundTime+0x120>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d202      	bcs.n	800bcca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bcc4:	230f      	movs	r3, #15
 800bcc6:	617b      	str	r3, [r7, #20]
 800bcc8:	e062      	b.n	800bd90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	4a3c      	ldr	r2, [pc, #240]	; (800bdc0 <USB_SetTurnaroundTime+0x120>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d306      	bcc.n	800bce0 <USB_SetTurnaroundTime+0x40>
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	4a3b      	ldr	r2, [pc, #236]	; (800bdc4 <USB_SetTurnaroundTime+0x124>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d202      	bcs.n	800bce0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bcda:	230e      	movs	r3, #14
 800bcdc:	617b      	str	r3, [r7, #20]
 800bcde:	e057      	b.n	800bd90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	4a38      	ldr	r2, [pc, #224]	; (800bdc4 <USB_SetTurnaroundTime+0x124>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d306      	bcc.n	800bcf6 <USB_SetTurnaroundTime+0x56>
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	4a37      	ldr	r2, [pc, #220]	; (800bdc8 <USB_SetTurnaroundTime+0x128>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d202      	bcs.n	800bcf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bcf0:	230d      	movs	r3, #13
 800bcf2:	617b      	str	r3, [r7, #20]
 800bcf4:	e04c      	b.n	800bd90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	4a33      	ldr	r2, [pc, #204]	; (800bdc8 <USB_SetTurnaroundTime+0x128>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d306      	bcc.n	800bd0c <USB_SetTurnaroundTime+0x6c>
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	4a32      	ldr	r2, [pc, #200]	; (800bdcc <USB_SetTurnaroundTime+0x12c>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d802      	bhi.n	800bd0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bd06:	230c      	movs	r3, #12
 800bd08:	617b      	str	r3, [r7, #20]
 800bd0a:	e041      	b.n	800bd90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	4a2f      	ldr	r2, [pc, #188]	; (800bdcc <USB_SetTurnaroundTime+0x12c>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d906      	bls.n	800bd22 <USB_SetTurnaroundTime+0x82>
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	4a2e      	ldr	r2, [pc, #184]	; (800bdd0 <USB_SetTurnaroundTime+0x130>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d802      	bhi.n	800bd22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bd1c:	230b      	movs	r3, #11
 800bd1e:	617b      	str	r3, [r7, #20]
 800bd20:	e036      	b.n	800bd90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	4a2a      	ldr	r2, [pc, #168]	; (800bdd0 <USB_SetTurnaroundTime+0x130>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d906      	bls.n	800bd38 <USB_SetTurnaroundTime+0x98>
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	4a29      	ldr	r2, [pc, #164]	; (800bdd4 <USB_SetTurnaroundTime+0x134>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d802      	bhi.n	800bd38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bd32:	230a      	movs	r3, #10
 800bd34:	617b      	str	r3, [r7, #20]
 800bd36:	e02b      	b.n	800bd90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	4a26      	ldr	r2, [pc, #152]	; (800bdd4 <USB_SetTurnaroundTime+0x134>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d906      	bls.n	800bd4e <USB_SetTurnaroundTime+0xae>
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	4a25      	ldr	r2, [pc, #148]	; (800bdd8 <USB_SetTurnaroundTime+0x138>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d202      	bcs.n	800bd4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bd48:	2309      	movs	r3, #9
 800bd4a:	617b      	str	r3, [r7, #20]
 800bd4c:	e020      	b.n	800bd90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	4a21      	ldr	r2, [pc, #132]	; (800bdd8 <USB_SetTurnaroundTime+0x138>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d306      	bcc.n	800bd64 <USB_SetTurnaroundTime+0xc4>
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	4a20      	ldr	r2, [pc, #128]	; (800bddc <USB_SetTurnaroundTime+0x13c>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d802      	bhi.n	800bd64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bd5e:	2308      	movs	r3, #8
 800bd60:	617b      	str	r3, [r7, #20]
 800bd62:	e015      	b.n	800bd90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	4a1d      	ldr	r2, [pc, #116]	; (800bddc <USB_SetTurnaroundTime+0x13c>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d906      	bls.n	800bd7a <USB_SetTurnaroundTime+0xda>
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	4a1c      	ldr	r2, [pc, #112]	; (800bde0 <USB_SetTurnaroundTime+0x140>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d202      	bcs.n	800bd7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bd74:	2307      	movs	r3, #7
 800bd76:	617b      	str	r3, [r7, #20]
 800bd78:	e00a      	b.n	800bd90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bd7a:	2306      	movs	r3, #6
 800bd7c:	617b      	str	r3, [r7, #20]
 800bd7e:	e007      	b.n	800bd90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bd80:	79fb      	ldrb	r3, [r7, #7]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d102      	bne.n	800bd8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bd86:	2309      	movs	r3, #9
 800bd88:	617b      	str	r3, [r7, #20]
 800bd8a:	e001      	b.n	800bd90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bd8c:	2309      	movs	r3, #9
 800bd8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	68da      	ldr	r2, [r3, #12]
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	029b      	lsls	r3, r3, #10
 800bda4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	371c      	adds	r7, #28
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	00d8acbf 	.word	0x00d8acbf
 800bdc0:	00e4e1c0 	.word	0x00e4e1c0
 800bdc4:	00f42400 	.word	0x00f42400
 800bdc8:	01067380 	.word	0x01067380
 800bdcc:	011a499f 	.word	0x011a499f
 800bdd0:	01312cff 	.word	0x01312cff
 800bdd4:	014ca43f 	.word	0x014ca43f
 800bdd8:	016e3600 	.word	0x016e3600
 800bddc:	01a6ab1f 	.word	0x01a6ab1f
 800bde0:	01e84800 	.word	0x01e84800

0800bde4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	f043 0201 	orr.w	r2, r3, #1
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	370c      	adds	r7, #12
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be06:	b480      	push	{r7}
 800be08:	b083      	sub	sp, #12
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	f023 0201 	bic.w	r2, r3, #1
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	460b      	mov	r3, r1
 800be32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800be34:	2300      	movs	r3, #0
 800be36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	2b01      	cmp	r3, #1
 800be48:	d115      	bne.n	800be76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800be56:	2001      	movs	r0, #1
 800be58:	f7f7 f9b0 	bl	80031bc <HAL_Delay>
      ms++;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	3301      	adds	r3, #1
 800be60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f001 f93f 	bl	800d0e6 <USB_GetMode>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d01e      	beq.n	800beac <USB_SetCurrentMode+0x84>
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2b31      	cmp	r3, #49	; 0x31
 800be72:	d9f0      	bls.n	800be56 <USB_SetCurrentMode+0x2e>
 800be74:	e01a      	b.n	800beac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800be76:	78fb      	ldrb	r3, [r7, #3]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d115      	bne.n	800bea8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800be88:	2001      	movs	r0, #1
 800be8a:	f7f7 f997 	bl	80031bc <HAL_Delay>
      ms++;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	3301      	adds	r3, #1
 800be92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f001 f926 	bl	800d0e6 <USB_GetMode>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d005      	beq.n	800beac <USB_SetCurrentMode+0x84>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2b31      	cmp	r3, #49	; 0x31
 800bea4:	d9f0      	bls.n	800be88 <USB_SetCurrentMode+0x60>
 800bea6:	e001      	b.n	800beac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e005      	b.n	800beb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2b32      	cmp	r3, #50	; 0x32
 800beb0:	d101      	bne.n	800beb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800beb2:	2301      	movs	r3, #1
 800beb4:	e000      	b.n	800beb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bec0:	b084      	sub	sp, #16
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b086      	sub	sp, #24
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
 800beca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800beda:	2300      	movs	r3, #0
 800bedc:	613b      	str	r3, [r7, #16]
 800bede:	e009      	b.n	800bef4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	3340      	adds	r3, #64	; 0x40
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4413      	add	r3, r2
 800beea:	2200      	movs	r2, #0
 800beec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	3301      	adds	r3, #1
 800bef2:	613b      	str	r3, [r7, #16]
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	2b0e      	cmp	r3, #14
 800bef8:	d9f2      	bls.n	800bee0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800befa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800befc:	2b00      	cmp	r3, #0
 800befe:	d11c      	bne.n	800bf3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf0e:	f043 0302 	orr.w	r3, r3, #2
 800bf12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	601a      	str	r2, [r3, #0]
 800bf38:	e005      	b.n	800bf46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	2300      	movs	r3, #0
 800bf50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf58:	4619      	mov	r1, r3
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf60:	461a      	mov	r2, r3
 800bf62:	680b      	ldr	r3, [r1, #0]
 800bf64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bf66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d10c      	bne.n	800bf86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d104      	bne.n	800bf7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bf72:	2100      	movs	r1, #0
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 f965 	bl	800c244 <USB_SetDevSpeed>
 800bf7a:	e008      	b.n	800bf8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bf7c:	2101      	movs	r1, #1
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f960 	bl	800c244 <USB_SetDevSpeed>
 800bf84:	e003      	b.n	800bf8e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bf86:	2103      	movs	r1, #3
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f95b 	bl	800c244 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bf8e:	2110      	movs	r1, #16
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 f8f3 	bl	800c17c <USB_FlushTxFifo>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d001      	beq.n	800bfa0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 f91f 	bl	800c1e4 <USB_FlushRxFifo>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d001      	beq.n	800bfb0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	2300      	movs	r3, #0
 800bfba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfce:	461a      	mov	r2, r3
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	613b      	str	r3, [r7, #16]
 800bfd8:	e043      	b.n	800c062 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	015a      	lsls	r2, r3, #5
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bff0:	d118      	bne.n	800c024 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10a      	bne.n	800c00e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	015a      	lsls	r2, r3, #5
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	4413      	add	r3, r2
 800c000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c004:	461a      	mov	r2, r3
 800c006:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c00a:	6013      	str	r3, [r2, #0]
 800c00c:	e013      	b.n	800c036 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	015a      	lsls	r2, r3, #5
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	4413      	add	r3, r2
 800c016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c01a:	461a      	mov	r2, r3
 800c01c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c020:	6013      	str	r3, [r2, #0]
 800c022:	e008      	b.n	800c036 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	015a      	lsls	r2, r3, #5
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	4413      	add	r3, r2
 800c02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c030:	461a      	mov	r2, r3
 800c032:	2300      	movs	r3, #0
 800c034:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	015a      	lsls	r2, r3, #5
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	4413      	add	r3, r2
 800c03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c042:	461a      	mov	r2, r3
 800c044:	2300      	movs	r3, #0
 800c046:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	015a      	lsls	r2, r3, #5
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4413      	add	r3, r2
 800c050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c054:	461a      	mov	r2, r3
 800c056:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c05a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	3301      	adds	r3, #1
 800c060:	613b      	str	r3, [r7, #16]
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c064:	693a      	ldr	r2, [r7, #16]
 800c066:	429a      	cmp	r2, r3
 800c068:	d3b7      	bcc.n	800bfda <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c06a:	2300      	movs	r3, #0
 800c06c:	613b      	str	r3, [r7, #16]
 800c06e:	e043      	b.n	800c0f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	015a      	lsls	r2, r3, #5
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	4413      	add	r3, r2
 800c078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c086:	d118      	bne.n	800c0ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10a      	bne.n	800c0a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	015a      	lsls	r2, r3, #5
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	4413      	add	r3, r2
 800c096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c09a:	461a      	mov	r2, r3
 800c09c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c0a0:	6013      	str	r3, [r2, #0]
 800c0a2:	e013      	b.n	800c0cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	015a      	lsls	r2, r3, #5
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c0b6:	6013      	str	r3, [r2, #0]
 800c0b8:	e008      	b.n	800c0cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	015a      	lsls	r2, r3, #5
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	015a      	lsls	r2, r3, #5
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0d8:	461a      	mov	r2, r3
 800c0da:	2300      	movs	r3, #0
 800c0dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	015a      	lsls	r2, r3, #5
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c0f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	613b      	str	r3, [r7, #16]
 800c0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fa:	693a      	ldr	r2, [r7, #16]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d3b7      	bcc.n	800c070 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c10e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c112:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c120:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c124:	2b00      	cmp	r3, #0
 800c126:	d105      	bne.n	800c134 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	699b      	ldr	r3, [r3, #24]
 800c12c:	f043 0210 	orr.w	r2, r3, #16
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	699a      	ldr	r2, [r3, #24]
 800c138:	4b0e      	ldr	r3, [pc, #56]	; (800c174 <USB_DevInit+0x2b4>)
 800c13a:	4313      	orrs	r3, r2
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c142:	2b00      	cmp	r3, #0
 800c144:	d005      	beq.n	800c152 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	699b      	ldr	r3, [r3, #24]
 800c14a:	f043 0208 	orr.w	r2, r3, #8
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c154:	2b01      	cmp	r3, #1
 800c156:	d105      	bne.n	800c164 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	699a      	ldr	r2, [r3, #24]
 800c15c:	4b06      	ldr	r3, [pc, #24]	; (800c178 <USB_DevInit+0x2b8>)
 800c15e:	4313      	orrs	r3, r2
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c164:	7dfb      	ldrb	r3, [r7, #23]
}
 800c166:	4618      	mov	r0, r3
 800c168:	3718      	adds	r7, #24
 800c16a:	46bd      	mov	sp, r7
 800c16c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c170:	b004      	add	sp, #16
 800c172:	4770      	bx	lr
 800c174:	803c3800 	.word	0x803c3800
 800c178:	40000004 	.word	0x40000004

0800c17c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c186:	2300      	movs	r3, #0
 800c188:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	3301      	adds	r3, #1
 800c18e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	4a13      	ldr	r2, [pc, #76]	; (800c1e0 <USB_FlushTxFifo+0x64>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d901      	bls.n	800c19c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c198:	2303      	movs	r3, #3
 800c19a:	e01b      	b.n	800c1d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	daf2      	bge.n	800c18a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	019b      	lsls	r3, r3, #6
 800c1ac:	f043 0220 	orr.w	r2, r3, #32
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	4a08      	ldr	r2, [pc, #32]	; (800c1e0 <USB_FlushTxFifo+0x64>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d901      	bls.n	800c1c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c1c2:	2303      	movs	r3, #3
 800c1c4:	e006      	b.n	800c1d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	f003 0320 	and.w	r3, r3, #32
 800c1ce:	2b20      	cmp	r3, #32
 800c1d0:	d0f0      	beq.n	800c1b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c1d2:	2300      	movs	r3, #0
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3714      	adds	r7, #20
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr
 800c1e0:	00030d40 	.word	0x00030d40

0800c1e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	4a11      	ldr	r2, [pc, #68]	; (800c240 <USB_FlushRxFifo+0x5c>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d901      	bls.n	800c202 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c1fe:	2303      	movs	r3, #3
 800c200:	e018      	b.n	800c234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	691b      	ldr	r3, [r3, #16]
 800c206:	2b00      	cmp	r3, #0
 800c208:	daf2      	bge.n	800c1f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c20a:	2300      	movs	r3, #0
 800c20c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2210      	movs	r2, #16
 800c212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	3301      	adds	r3, #1
 800c218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	4a08      	ldr	r2, [pc, #32]	; (800c240 <USB_FlushRxFifo+0x5c>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d901      	bls.n	800c226 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c222:	2303      	movs	r3, #3
 800c224:	e006      	b.n	800c234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	f003 0310 	and.w	r3, r3, #16
 800c22e:	2b10      	cmp	r3, #16
 800c230:	d0f0      	beq.n	800c214 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3714      	adds	r7, #20
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr
 800c240:	00030d40 	.word	0x00030d40

0800c244 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	460b      	mov	r3, r1
 800c24e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	78fb      	ldrb	r3, [r7, #3]
 800c25e:	68f9      	ldr	r1, [r7, #12]
 800c260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c264:	4313      	orrs	r3, r2
 800c266:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr

0800c276 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c276:	b480      	push	{r7}
 800c278:	b087      	sub	sp, #28
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	f003 0306 	and.w	r3, r3, #6
 800c28e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d102      	bne.n	800c29c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c296:	2300      	movs	r3, #0
 800c298:	75fb      	strb	r3, [r7, #23]
 800c29a:	e00a      	b.n	800c2b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d002      	beq.n	800c2a8 <USB_GetDevSpeed+0x32>
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2b06      	cmp	r3, #6
 800c2a6:	d102      	bne.n	800c2ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	75fb      	strb	r3, [r7, #23]
 800c2ac:	e001      	b.n	800c2b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c2ae:	230f      	movs	r3, #15
 800c2b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	371c      	adds	r7, #28
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	785b      	ldrb	r3, [r3, #1]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d139      	bne.n	800c350 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2e2:	69da      	ldr	r2, [r3, #28]
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	f003 030f 	and.w	r3, r3, #15
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	fa01 f303 	lsl.w	r3, r1, r3
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	68f9      	ldr	r1, [r7, #12]
 800c2f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	015a      	lsls	r2, r3, #5
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	4413      	add	r3, r2
 800c306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c310:	2b00      	cmp	r3, #0
 800c312:	d153      	bne.n	800c3bc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	015a      	lsls	r2, r3, #5
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	4413      	add	r3, r2
 800c31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	791b      	ldrb	r3, [r3, #4]
 800c32e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c330:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	059b      	lsls	r3, r3, #22
 800c336:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c338:	431a      	orrs	r2, r3
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	0159      	lsls	r1, r3, #5
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	440b      	add	r3, r1
 800c342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c346:	4619      	mov	r1, r3
 800c348:	4b20      	ldr	r3, [pc, #128]	; (800c3cc <USB_ActivateEndpoint+0x10c>)
 800c34a:	4313      	orrs	r3, r2
 800c34c:	600b      	str	r3, [r1, #0]
 800c34e:	e035      	b.n	800c3bc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c356:	69da      	ldr	r2, [r3, #28]
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	f003 030f 	and.w	r3, r3, #15
 800c360:	2101      	movs	r1, #1
 800c362:	fa01 f303 	lsl.w	r3, r1, r3
 800c366:	041b      	lsls	r3, r3, #16
 800c368:	68f9      	ldr	r1, [r7, #12]
 800c36a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c36e:	4313      	orrs	r3, r2
 800c370:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	015a      	lsls	r2, r3, #5
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	4413      	add	r3, r2
 800c37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c384:	2b00      	cmp	r3, #0
 800c386:	d119      	bne.n	800c3bc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	015a      	lsls	r2, r3, #5
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	4413      	add	r3, r2
 800c390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	791b      	ldrb	r3, [r3, #4]
 800c3a2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c3a4:	430b      	orrs	r3, r1
 800c3a6:	431a      	orrs	r2, r3
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	0159      	lsls	r1, r3, #5
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	440b      	add	r3, r1
 800c3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4b05      	ldr	r3, [pc, #20]	; (800c3cc <USB_ActivateEndpoint+0x10c>)
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	10008000 	.word	0x10008000

0800c3d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	785b      	ldrb	r3, [r3, #1]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d161      	bne.n	800c4b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	015a      	lsls	r2, r3, #5
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c402:	d11f      	bne.n	800c444 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	015a      	lsls	r2, r3, #5
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	4413      	add	r3, r2
 800c40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	0151      	lsls	r1, r2, #5
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	440a      	add	r2, r1
 800c41a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c41e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c422:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	015a      	lsls	r2, r3, #5
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	68ba      	ldr	r2, [r7, #8]
 800c434:	0151      	lsls	r1, r2, #5
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	440a      	add	r2, r1
 800c43a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c43e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c442:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c44a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	f003 030f 	and.w	r3, r3, #15
 800c454:	2101      	movs	r1, #1
 800c456:	fa01 f303 	lsl.w	r3, r1, r3
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	43db      	mvns	r3, r3
 800c45e:	68f9      	ldr	r1, [r7, #12]
 800c460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c464:	4013      	ands	r3, r2
 800c466:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c46e:	69da      	ldr	r2, [r3, #28]
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	f003 030f 	and.w	r3, r3, #15
 800c478:	2101      	movs	r1, #1
 800c47a:	fa01 f303 	lsl.w	r3, r1, r3
 800c47e:	b29b      	uxth	r3, r3
 800c480:	43db      	mvns	r3, r3
 800c482:	68f9      	ldr	r1, [r7, #12]
 800c484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c488:	4013      	ands	r3, r2
 800c48a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	015a      	lsls	r2, r3, #5
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	4413      	add	r3, r2
 800c494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	0159      	lsls	r1, r3, #5
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	440b      	add	r3, r1
 800c4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	4b35      	ldr	r3, [pc, #212]	; (800c580 <USB_DeactivateEndpoint+0x1b0>)
 800c4aa:	4013      	ands	r3, r2
 800c4ac:	600b      	str	r3, [r1, #0]
 800c4ae:	e060      	b.n	800c572 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	015a      	lsls	r2, r3, #5
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c4c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4c6:	d11f      	bne.n	800c508 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	015a      	lsls	r2, r3, #5
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	68ba      	ldr	r2, [r7, #8]
 800c4d8:	0151      	lsls	r1, r2, #5
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	440a      	add	r2, r1
 800c4de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c4e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	015a      	lsls	r2, r3, #5
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	0151      	lsls	r1, r2, #5
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	440a      	add	r2, r1
 800c4fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c502:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c506:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c50e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	f003 030f 	and.w	r3, r3, #15
 800c518:	2101      	movs	r1, #1
 800c51a:	fa01 f303 	lsl.w	r3, r1, r3
 800c51e:	041b      	lsls	r3, r3, #16
 800c520:	43db      	mvns	r3, r3
 800c522:	68f9      	ldr	r1, [r7, #12]
 800c524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c528:	4013      	ands	r3, r2
 800c52a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c532:	69da      	ldr	r2, [r3, #28]
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	f003 030f 	and.w	r3, r3, #15
 800c53c:	2101      	movs	r1, #1
 800c53e:	fa01 f303 	lsl.w	r3, r1, r3
 800c542:	041b      	lsls	r3, r3, #16
 800c544:	43db      	mvns	r3, r3
 800c546:	68f9      	ldr	r1, [r7, #12]
 800c548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c54c:	4013      	ands	r3, r2
 800c54e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	015a      	lsls	r2, r3, #5
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	4413      	add	r3, r2
 800c558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	0159      	lsls	r1, r3, #5
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	440b      	add	r3, r1
 800c566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c56a:	4619      	mov	r1, r3
 800c56c:	4b05      	ldr	r3, [pc, #20]	; (800c584 <USB_DeactivateEndpoint+0x1b4>)
 800c56e:	4013      	ands	r3, r2
 800c570:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3714      	adds	r7, #20
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr
 800c580:	ec337800 	.word	0xec337800
 800c584:	eff37800 	.word	0xeff37800

0800c588 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b08a      	sub	sp, #40	; 0x28
 800c58c:	af02      	add	r7, sp, #8
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	4613      	mov	r3, r2
 800c594:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	785b      	ldrb	r3, [r3, #1]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	f040 8181 	bne.w	800c8ac <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	691b      	ldr	r3, [r3, #16]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d132      	bne.n	800c618 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	015a      	lsls	r2, r3, #5
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5be:	691a      	ldr	r2, [r3, #16]
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	0159      	lsls	r1, r3, #5
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	440b      	add	r3, r1
 800c5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	4ba5      	ldr	r3, [pc, #660]	; (800c864 <USB_EPStartXfer+0x2dc>)
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	015a      	lsls	r2, r3, #5
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	4413      	add	r3, r2
 800c5dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e0:	691b      	ldr	r3, [r3, #16]
 800c5e2:	69ba      	ldr	r2, [r7, #24]
 800c5e4:	0151      	lsls	r1, r2, #5
 800c5e6:	69fa      	ldr	r2, [r7, #28]
 800c5e8:	440a      	add	r2, r1
 800c5ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	015a      	lsls	r2, r3, #5
 800c5f8:	69fb      	ldr	r3, [r7, #28]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c600:	691a      	ldr	r2, [r3, #16]
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	0159      	lsls	r1, r3, #5
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	440b      	add	r3, r1
 800c60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c60e:	4619      	mov	r1, r3
 800c610:	4b95      	ldr	r3, [pc, #596]	; (800c868 <USB_EPStartXfer+0x2e0>)
 800c612:	4013      	ands	r3, r2
 800c614:	610b      	str	r3, [r1, #16]
 800c616:	e092      	b.n	800c73e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	015a      	lsls	r2, r3, #5
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	4413      	add	r3, r2
 800c620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c624:	691a      	ldr	r2, [r3, #16]
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	0159      	lsls	r1, r3, #5
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	440b      	add	r3, r1
 800c62e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c632:	4619      	mov	r1, r3
 800c634:	4b8c      	ldr	r3, [pc, #560]	; (800c868 <USB_EPStartXfer+0x2e0>)
 800c636:	4013      	ands	r3, r2
 800c638:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	015a      	lsls	r2, r3, #5
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	4413      	add	r3, r2
 800c642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c646:	691a      	ldr	r2, [r3, #16]
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	0159      	lsls	r1, r3, #5
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	440b      	add	r3, r1
 800c650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c654:	4619      	mov	r1, r3
 800c656:	4b83      	ldr	r3, [pc, #524]	; (800c864 <USB_EPStartXfer+0x2dc>)
 800c658:	4013      	ands	r3, r2
 800c65a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d11a      	bne.n	800c698 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	691a      	ldr	r2, [r3, #16]
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d903      	bls.n	800c676 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	689a      	ldr	r2, [r3, #8]
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	015a      	lsls	r2, r3, #5
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	4413      	add	r3, r2
 800c67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c682:	691b      	ldr	r3, [r3, #16]
 800c684:	69ba      	ldr	r2, [r7, #24]
 800c686:	0151      	lsls	r1, r2, #5
 800c688:	69fa      	ldr	r2, [r7, #28]
 800c68a:	440a      	add	r2, r1
 800c68c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c694:	6113      	str	r3, [r2, #16]
 800c696:	e01b      	b.n	800c6d0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	015a      	lsls	r2, r3, #5
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	4413      	add	r3, r2
 800c6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6a4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	6919      	ldr	r1, [r3, #16]
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	440b      	add	r3, r1
 800c6b0:	1e59      	subs	r1, r3, #1
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	fbb1 f3f3 	udiv	r3, r1, r3
 800c6ba:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c6bc:	4b6b      	ldr	r3, [pc, #428]	; (800c86c <USB_EPStartXfer+0x2e4>)
 800c6be:	400b      	ands	r3, r1
 800c6c0:	69b9      	ldr	r1, [r7, #24]
 800c6c2:	0148      	lsls	r0, r1, #5
 800c6c4:	69f9      	ldr	r1, [r7, #28]
 800c6c6:	4401      	add	r1, r0
 800c6c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	015a      	lsls	r2, r3, #5
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6dc:	691a      	ldr	r2, [r3, #16]
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6e6:	69b9      	ldr	r1, [r7, #24]
 800c6e8:	0148      	lsls	r0, r1, #5
 800c6ea:	69f9      	ldr	r1, [r7, #28]
 800c6ec:	4401      	add	r1, r0
 800c6ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	791b      	ldrb	r3, [r3, #4]
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d11f      	bne.n	800c73e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	015a      	lsls	r2, r3, #5
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	4413      	add	r3, r2
 800c706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c70a:	691b      	ldr	r3, [r3, #16]
 800c70c:	69ba      	ldr	r2, [r7, #24]
 800c70e:	0151      	lsls	r1, r2, #5
 800c710:	69fa      	ldr	r2, [r7, #28]
 800c712:	440a      	add	r2, r1
 800c714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c718:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c71c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	015a      	lsls	r2, r3, #5
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	4413      	add	r3, r2
 800c726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	69ba      	ldr	r2, [r7, #24]
 800c72e:	0151      	lsls	r1, r2, #5
 800c730:	69fa      	ldr	r2, [r7, #28]
 800c732:	440a      	add	r2, r1
 800c734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c738:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c73c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c73e:	79fb      	ldrb	r3, [r7, #7]
 800c740:	2b01      	cmp	r3, #1
 800c742:	d14b      	bne.n	800c7dc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	69db      	ldr	r3, [r3, #28]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d009      	beq.n	800c760 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	015a      	lsls	r2, r3, #5
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	4413      	add	r3, r2
 800c754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c758:	461a      	mov	r2, r3
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	69db      	ldr	r3, [r3, #28]
 800c75e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	791b      	ldrb	r3, [r3, #4]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d128      	bne.n	800c7ba <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c774:	2b00      	cmp	r3, #0
 800c776:	d110      	bne.n	800c79a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	015a      	lsls	r2, r3, #5
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	4413      	add	r3, r2
 800c780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	69ba      	ldr	r2, [r7, #24]
 800c788:	0151      	lsls	r1, r2, #5
 800c78a:	69fa      	ldr	r2, [r7, #28]
 800c78c:	440a      	add	r2, r1
 800c78e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c796:	6013      	str	r3, [r2, #0]
 800c798:	e00f      	b.n	800c7ba <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	015a      	lsls	r2, r3, #5
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	69ba      	ldr	r2, [r7, #24]
 800c7aa:	0151      	lsls	r1, r2, #5
 800c7ac:	69fa      	ldr	r2, [r7, #28]
 800c7ae:	440a      	add	r2, r1
 800c7b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	015a      	lsls	r2, r3, #5
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	69ba      	ldr	r2, [r7, #24]
 800c7ca:	0151      	lsls	r1, r2, #5
 800c7cc:	69fa      	ldr	r2, [r7, #28]
 800c7ce:	440a      	add	r2, r1
 800c7d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c7d8:	6013      	str	r3, [r2, #0]
 800c7da:	e16a      	b.n	800cab2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	015a      	lsls	r2, r3, #5
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	69ba      	ldr	r2, [r7, #24]
 800c7ec:	0151      	lsls	r1, r2, #5
 800c7ee:	69fa      	ldr	r2, [r7, #28]
 800c7f0:	440a      	add	r2, r1
 800c7f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c7fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	791b      	ldrb	r3, [r3, #4]
 800c800:	2b01      	cmp	r3, #1
 800c802:	d015      	beq.n	800c830 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 8152 	beq.w	800cab2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	f003 030f 	and.w	r3, r3, #15
 800c81e:	2101      	movs	r1, #1
 800c820:	fa01 f303 	lsl.w	r3, r1, r3
 800c824:	69f9      	ldr	r1, [r7, #28]
 800c826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c82a:	4313      	orrs	r3, r2
 800c82c:	634b      	str	r3, [r1, #52]	; 0x34
 800c82e:	e140      	b.n	800cab2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d117      	bne.n	800c870 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	015a      	lsls	r2, r3, #5
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	4413      	add	r3, r2
 800c848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	69ba      	ldr	r2, [r7, #24]
 800c850:	0151      	lsls	r1, r2, #5
 800c852:	69fa      	ldr	r2, [r7, #28]
 800c854:	440a      	add	r2, r1
 800c856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c85a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c85e:	6013      	str	r3, [r2, #0]
 800c860:	e016      	b.n	800c890 <USB_EPStartXfer+0x308>
 800c862:	bf00      	nop
 800c864:	e007ffff 	.word	0xe007ffff
 800c868:	fff80000 	.word	0xfff80000
 800c86c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	015a      	lsls	r2, r3, #5
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	4413      	add	r3, r2
 800c878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	69ba      	ldr	r2, [r7, #24]
 800c880:	0151      	lsls	r1, r2, #5
 800c882:	69fa      	ldr	r2, [r7, #28]
 800c884:	440a      	add	r2, r1
 800c886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c88a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c88e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	68d9      	ldr	r1, [r3, #12]
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	781a      	ldrb	r2, [r3, #0]
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	b298      	uxth	r0, r3
 800c89e:	79fb      	ldrb	r3, [r7, #7]
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	f000 f9b9 	bl	800cc1c <USB_WritePacket>
 800c8aa:	e102      	b.n	800cab2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	015a      	lsls	r2, r3, #5
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8b8:	691a      	ldr	r2, [r3, #16]
 800c8ba:	69bb      	ldr	r3, [r7, #24]
 800c8bc:	0159      	lsls	r1, r3, #5
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	440b      	add	r3, r1
 800c8c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	4b7c      	ldr	r3, [pc, #496]	; (800cabc <USB_EPStartXfer+0x534>)
 800c8ca:	4013      	ands	r3, r2
 800c8cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	015a      	lsls	r2, r3, #5
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8da:	691a      	ldr	r2, [r3, #16]
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	0159      	lsls	r1, r3, #5
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	440b      	add	r3, r1
 800c8e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	4b75      	ldr	r3, [pc, #468]	; (800cac0 <USB_EPStartXfer+0x538>)
 800c8ec:	4013      	ands	r3, r2
 800c8ee:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d12f      	bne.n	800c956 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d003      	beq.n	800c906 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	689a      	ldr	r2, [r3, #8]
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	689a      	ldr	r2, [r3, #8]
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	015a      	lsls	r2, r3, #5
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	4413      	add	r3, r2
 800c916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c91a:	691a      	ldr	r2, [r3, #16]
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	6a1b      	ldr	r3, [r3, #32]
 800c920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c924:	69b9      	ldr	r1, [r7, #24]
 800c926:	0148      	lsls	r0, r1, #5
 800c928:	69f9      	ldr	r1, [r7, #28]
 800c92a:	4401      	add	r1, r0
 800c92c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c930:	4313      	orrs	r3, r2
 800c932:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	015a      	lsls	r2, r3, #5
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	4413      	add	r3, r2
 800c93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	69ba      	ldr	r2, [r7, #24]
 800c944:	0151      	lsls	r1, r2, #5
 800c946:	69fa      	ldr	r2, [r7, #28]
 800c948:	440a      	add	r2, r1
 800c94a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c94e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c952:	6113      	str	r3, [r2, #16]
 800c954:	e05f      	b.n	800ca16 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	691b      	ldr	r3, [r3, #16]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d123      	bne.n	800c9a6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	015a      	lsls	r2, r3, #5
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	4413      	add	r3, r2
 800c966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c96a:	691a      	ldr	r2, [r3, #16]
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c974:	69b9      	ldr	r1, [r7, #24]
 800c976:	0148      	lsls	r0, r1, #5
 800c978:	69f9      	ldr	r1, [r7, #28]
 800c97a:	4401      	add	r1, r0
 800c97c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c980:	4313      	orrs	r3, r2
 800c982:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	015a      	lsls	r2, r3, #5
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	4413      	add	r3, r2
 800c98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c990:	691b      	ldr	r3, [r3, #16]
 800c992:	69ba      	ldr	r2, [r7, #24]
 800c994:	0151      	lsls	r1, r2, #5
 800c996:	69fa      	ldr	r2, [r7, #28]
 800c998:	440a      	add	r2, r1
 800c99a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c99e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9a2:	6113      	str	r3, [r2, #16]
 800c9a4:	e037      	b.n	800ca16 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	691a      	ldr	r2, [r3, #16]
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	1e5a      	subs	r2, r3, #1
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9ba:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	8afa      	ldrh	r2, [r7, #22]
 800c9c2:	fb03 f202 	mul.w	r2, r3, r2
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	015a      	lsls	r2, r3, #5
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9d6:	691a      	ldr	r2, [r3, #16]
 800c9d8:	8afb      	ldrh	r3, [r7, #22]
 800c9da:	04d9      	lsls	r1, r3, #19
 800c9dc:	4b39      	ldr	r3, [pc, #228]	; (800cac4 <USB_EPStartXfer+0x53c>)
 800c9de:	400b      	ands	r3, r1
 800c9e0:	69b9      	ldr	r1, [r7, #24]
 800c9e2:	0148      	lsls	r0, r1, #5
 800c9e4:	69f9      	ldr	r1, [r7, #28]
 800c9e6:	4401      	add	r1, r0
 800c9e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	015a      	lsls	r2, r3, #5
 800c9f4:	69fb      	ldr	r3, [r7, #28]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9fc:	691a      	ldr	r2, [r3, #16]
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	6a1b      	ldr	r3, [r3, #32]
 800ca02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca06:	69b9      	ldr	r1, [r7, #24]
 800ca08:	0148      	lsls	r0, r1, #5
 800ca0a:	69f9      	ldr	r1, [r7, #28]
 800ca0c:	4401      	add	r1, r0
 800ca0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca12:	4313      	orrs	r3, r2
 800ca14:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ca16:	79fb      	ldrb	r3, [r7, #7]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d10d      	bne.n	800ca38 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d009      	beq.n	800ca38 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	68d9      	ldr	r1, [r3, #12]
 800ca28:	69bb      	ldr	r3, [r7, #24]
 800ca2a:	015a      	lsls	r2, r3, #5
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	4413      	add	r3, r2
 800ca30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca34:	460a      	mov	r2, r1
 800ca36:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	791b      	ldrb	r3, [r3, #4]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d128      	bne.n	800ca92 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d110      	bne.n	800ca72 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	015a      	lsls	r2, r3, #5
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	4413      	add	r3, r2
 800ca58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	69ba      	ldr	r2, [r7, #24]
 800ca60:	0151      	lsls	r1, r2, #5
 800ca62:	69fa      	ldr	r2, [r7, #28]
 800ca64:	440a      	add	r2, r1
 800ca66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca6e:	6013      	str	r3, [r2, #0]
 800ca70:	e00f      	b.n	800ca92 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	015a      	lsls	r2, r3, #5
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	4413      	add	r3, r2
 800ca7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	69ba      	ldr	r2, [r7, #24]
 800ca82:	0151      	lsls	r1, r2, #5
 800ca84:	69fa      	ldr	r2, [r7, #28]
 800ca86:	440a      	add	r2, r1
 800ca88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca90:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	015a      	lsls	r2, r3, #5
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	4413      	add	r3, r2
 800ca9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	69ba      	ldr	r2, [r7, #24]
 800caa2:	0151      	lsls	r1, r2, #5
 800caa4:	69fa      	ldr	r2, [r7, #28]
 800caa6:	440a      	add	r2, r1
 800caa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cab0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3720      	adds	r7, #32
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	fff80000 	.word	0xfff80000
 800cac0:	e007ffff 	.word	0xe007ffff
 800cac4:	1ff80000 	.word	0x1ff80000

0800cac8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cac8:	b480      	push	{r7}
 800caca:	b087      	sub	sp, #28
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cad2:	2300      	movs	r3, #0
 800cad4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	785b      	ldrb	r3, [r3, #1]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d14a      	bne.n	800cb7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	015a      	lsls	r2, r3, #5
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	4413      	add	r3, r2
 800caf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cafa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cafe:	f040 8086 	bne.w	800cc0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	015a      	lsls	r2, r3, #5
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	7812      	ldrb	r2, [r2, #0]
 800cb16:	0151      	lsls	r1, r2, #5
 800cb18:	693a      	ldr	r2, [r7, #16]
 800cb1a:	440a      	add	r2, r1
 800cb1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	015a      	lsls	r2, r3, #5
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	4413      	add	r3, r2
 800cb30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	683a      	ldr	r2, [r7, #0]
 800cb38:	7812      	ldrb	r2, [r2, #0]
 800cb3a:	0151      	lsls	r1, r2, #5
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	440a      	add	r2, r1
 800cb40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d902      	bls.n	800cb60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	75fb      	strb	r3, [r7, #23]
          break;
 800cb5e:	e056      	b.n	800cc0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	015a      	lsls	r2, r3, #5
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	4413      	add	r3, r2
 800cb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb78:	d0e7      	beq.n	800cb4a <USB_EPStopXfer+0x82>
 800cb7a:	e048      	b.n	800cc0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	015a      	lsls	r2, r3, #5
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	4413      	add	r3, r2
 800cb86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb94:	d13b      	bne.n	800cc0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	015a      	lsls	r2, r3, #5
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	4413      	add	r3, r2
 800cba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	7812      	ldrb	r2, [r2, #0]
 800cbaa:	0151      	lsls	r1, r2, #5
 800cbac:	693a      	ldr	r2, [r7, #16]
 800cbae:	440a      	add	r2, r1
 800cbb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cbb8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	015a      	lsls	r2, r3, #5
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	683a      	ldr	r2, [r7, #0]
 800cbcc:	7812      	ldrb	r2, [r2, #0]
 800cbce:	0151      	lsls	r1, r2, #5
 800cbd0:	693a      	ldr	r2, [r7, #16]
 800cbd2:	440a      	add	r2, r1
 800cbd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f242 7210 	movw	r2, #10000	; 0x2710
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d902      	bls.n	800cbf4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	75fb      	strb	r3, [r7, #23]
          break;
 800cbf2:	e00c      	b.n	800cc0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	015a      	lsls	r2, r3, #5
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc0c:	d0e7      	beq.n	800cbde <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	371c      	adds	r7, #28
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b089      	sub	sp, #36	; 0x24
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	4611      	mov	r1, r2
 800cc28:	461a      	mov	r2, r3
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	71fb      	strb	r3, [r7, #7]
 800cc2e:	4613      	mov	r3, r2
 800cc30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cc3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d123      	bne.n	800cc8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cc42:	88bb      	ldrh	r3, [r7, #4]
 800cc44:	3303      	adds	r3, #3
 800cc46:	089b      	lsrs	r3, r3, #2
 800cc48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	61bb      	str	r3, [r7, #24]
 800cc4e:	e018      	b.n	800cc82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cc50:	79fb      	ldrb	r3, [r7, #7]
 800cc52:	031a      	lsls	r2, r3, #12
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	4413      	add	r3, r2
 800cc58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	3301      	adds	r3, #1
 800cc68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	3301      	adds	r3, #1
 800cc74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	61bb      	str	r3, [r7, #24]
 800cc82:	69ba      	ldr	r2, [r7, #24]
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d3e2      	bcc.n	800cc50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3724      	adds	r7, #36	; 0x24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b08b      	sub	sp, #44	; 0x2c
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	4613      	mov	r3, r2
 800cca4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ccae:	88fb      	ldrh	r3, [r7, #6]
 800ccb0:	089b      	lsrs	r3, r3, #2
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ccb6:	88fb      	ldrh	r3, [r7, #6]
 800ccb8:	f003 0303 	and.w	r3, r3, #3
 800ccbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	623b      	str	r3, [r7, #32]
 800ccc2:	e014      	b.n	800ccee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccce:	601a      	str	r2, [r3, #0]
    pDest++;
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd8:	3301      	adds	r3, #1
 800ccda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	3301      	adds	r3, #1
 800cce0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce4:	3301      	adds	r3, #1
 800cce6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cce8:	6a3b      	ldr	r3, [r7, #32]
 800ccea:	3301      	adds	r3, #1
 800ccec:	623b      	str	r3, [r7, #32]
 800ccee:	6a3a      	ldr	r2, [r7, #32]
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d3e6      	bcc.n	800ccc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ccf6:	8bfb      	ldrh	r3, [r7, #30]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d01e      	beq.n	800cd3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd06:	461a      	mov	r2, r3
 800cd08:	f107 0310 	add.w	r3, r7, #16
 800cd0c:	6812      	ldr	r2, [r2, #0]
 800cd0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cd10:	693a      	ldr	r2, [r7, #16]
 800cd12:	6a3b      	ldr	r3, [r7, #32]
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	00db      	lsls	r3, r3, #3
 800cd18:	fa22 f303 	lsr.w	r3, r2, r3
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd20:	701a      	strb	r2, [r3, #0]
      i++;
 800cd22:	6a3b      	ldr	r3, [r7, #32]
 800cd24:	3301      	adds	r3, #1
 800cd26:	623b      	str	r3, [r7, #32]
      pDest++;
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cd2e:	8bfb      	ldrh	r3, [r7, #30]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cd34:	8bfb      	ldrh	r3, [r7, #30]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d1ea      	bne.n	800cd10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	372c      	adds	r7, #44	; 0x2c
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	785b      	ldrb	r3, [r3, #1]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d12c      	bne.n	800cdbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	015a      	lsls	r2, r3, #5
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	db12      	blt.n	800cd9c <USB_EPSetStall+0x54>
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d00f      	beq.n	800cd9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	015a      	lsls	r2, r3, #5
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	4413      	add	r3, r2
 800cd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	0151      	lsls	r1, r2, #5
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	440a      	add	r2, r1
 800cd92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cd9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	015a      	lsls	r2, r3, #5
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	4413      	add	r3, r2
 800cda4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	68ba      	ldr	r2, [r7, #8]
 800cdac:	0151      	lsls	r1, r2, #5
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	440a      	add	r2, r1
 800cdb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cdba:	6013      	str	r3, [r2, #0]
 800cdbc:	e02b      	b.n	800ce16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	015a      	lsls	r2, r3, #5
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	db12      	blt.n	800cdf6 <USB_EPSetStall+0xae>
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00f      	beq.n	800cdf6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	015a      	lsls	r2, r3, #5
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	4413      	add	r3, r2
 800cdde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	0151      	lsls	r1, r2, #5
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	440a      	add	r2, r1
 800cdec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cdf4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	015a      	lsls	r2, r3, #5
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	68ba      	ldr	r2, [r7, #8]
 800ce06:	0151      	lsls	r1, r2, #5
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	440a      	add	r2, r1
 800ce0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce16:	2300      	movs	r3, #0
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	785b      	ldrb	r3, [r3, #1]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d128      	bne.n	800ce92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	015a      	lsls	r2, r3, #5
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	4413      	add	r3, r2
 800ce48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	68ba      	ldr	r2, [r7, #8]
 800ce50:	0151      	lsls	r1, r2, #5
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	440a      	add	r2, r1
 800ce56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	791b      	ldrb	r3, [r3, #4]
 800ce64:	2b03      	cmp	r3, #3
 800ce66:	d003      	beq.n	800ce70 <USB_EPClearStall+0x4c>
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	791b      	ldrb	r3, [r3, #4]
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	d138      	bne.n	800cee2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	015a      	lsls	r2, r3, #5
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	4413      	add	r3, r2
 800ce78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	68ba      	ldr	r2, [r7, #8]
 800ce80:	0151      	lsls	r1, r2, #5
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	440a      	add	r2, r1
 800ce86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce8e:	6013      	str	r3, [r2, #0]
 800ce90:	e027      	b.n	800cee2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	015a      	lsls	r2, r3, #5
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	4413      	add	r3, r2
 800ce9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68ba      	ldr	r2, [r7, #8]
 800cea2:	0151      	lsls	r1, r2, #5
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	440a      	add	r2, r1
 800cea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ceb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	791b      	ldrb	r3, [r3, #4]
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	d003      	beq.n	800cec2 <USB_EPClearStall+0x9e>
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	791b      	ldrb	r3, [r3, #4]
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	d10f      	bne.n	800cee2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	015a      	lsls	r2, r3, #5
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	4413      	add	r3, r2
 800ceca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	68ba      	ldr	r2, [r7, #8]
 800ced2:	0151      	lsls	r1, r2, #5
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	440a      	add	r2, r1
 800ced8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cedc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cee0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3714      	adds	r7, #20
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cf12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	78fb      	ldrb	r3, [r7, #3]
 800cf1e:	011b      	lsls	r3, r3, #4
 800cf20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cf24:	68f9      	ldr	r1, [r7, #12]
 800cf26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cf2e:	2300      	movs	r3, #0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3714      	adds	r7, #20
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf56:	f023 0303 	bic.w	r3, r3, #3
 800cf5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf6a:	f023 0302 	bic.w	r3, r3, #2
 800cf6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3714      	adds	r7, #20
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr

0800cf7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf7e:	b480      	push	{r7}
 800cf80:	b085      	sub	sp, #20
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf98:	f023 0303 	bic.w	r3, r3, #3
 800cf9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfac:	f043 0302 	orr.w	r3, r3, #2
 800cfb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3714      	adds	r7, #20
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	695b      	ldr	r3, [r3, #20]
 800cfcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	699b      	ldr	r3, [r3, #24]
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3714      	adds	r7, #20
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr

0800cfe6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfe6:	b480      	push	{r7}
 800cfe8:	b085      	sub	sp, #20
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cff8:	699b      	ldr	r3, [r3, #24]
 800cffa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d002:	69db      	ldr	r3, [r3, #28]
 800d004:	68ba      	ldr	r2, [r7, #8]
 800d006:	4013      	ands	r3, r2
 800d008:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	0c1b      	lsrs	r3, r3, #16
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3714      	adds	r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d01a:	b480      	push	{r7}
 800d01c:	b085      	sub	sp, #20
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d02c:	699b      	ldr	r3, [r3, #24]
 800d02e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d036:	69db      	ldr	r3, [r3, #28]
 800d038:	68ba      	ldr	r2, [r7, #8]
 800d03a:	4013      	ands	r3, r2
 800d03c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	b29b      	uxth	r3, r3
}
 800d042:	4618      	mov	r0, r3
 800d044:	3714      	adds	r7, #20
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d04e:	b480      	push	{r7}
 800d050:	b085      	sub	sp, #20
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
 800d056:	460b      	mov	r3, r1
 800d058:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d05e:	78fb      	ldrb	r3, [r7, #3]
 800d060:	015a      	lsls	r2, r3, #5
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	4413      	add	r3, r2
 800d066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d074:	695b      	ldr	r3, [r3, #20]
 800d076:	68ba      	ldr	r2, [r7, #8]
 800d078:	4013      	ands	r3, r2
 800d07a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d07c:	68bb      	ldr	r3, [r7, #8]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3714      	adds	r7, #20
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr

0800d08a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d08a:	b480      	push	{r7}
 800d08c:	b087      	sub	sp, #28
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
 800d092:	460b      	mov	r3, r1
 800d094:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0a0:	691b      	ldr	r3, [r3, #16]
 800d0a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d0ae:	78fb      	ldrb	r3, [r7, #3]
 800d0b0:	f003 030f 	and.w	r3, r3, #15
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ba:	01db      	lsls	r3, r3, #7
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	693a      	ldr	r2, [r7, #16]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d0c4:	78fb      	ldrb	r3, [r7, #3]
 800d0c6:	015a      	lsls	r2, r3, #5
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	693a      	ldr	r2, [r7, #16]
 800d0d4:	4013      	ands	r3, r2
 800d0d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d0d8:	68bb      	ldr	r3, [r7, #8]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	371c      	adds	r7, #28
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr

0800d0e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d0e6:	b480      	push	{r7}
 800d0e8:	b083      	sub	sp, #12
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	695b      	ldr	r3, [r3, #20]
 800d0f2:	f003 0301 	and.w	r3, r3, #1
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	370c      	adds	r7, #12
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
	...

0800d104 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d104:	b480      	push	{r7}
 800d106:	b085      	sub	sp, #20
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d11e:	4619      	mov	r1, r3
 800d120:	4b09      	ldr	r3, [pc, #36]	; (800d148 <USB_ActivateSetup+0x44>)
 800d122:	4013      	ands	r3, r2
 800d124:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	68fa      	ldr	r2, [r7, #12]
 800d130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d138:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d13a:	2300      	movs	r3, #0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3714      	adds	r7, #20
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr
 800d148:	fffff800 	.word	0xfffff800

0800d14c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b087      	sub	sp, #28
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	460b      	mov	r3, r1
 800d156:	607a      	str	r2, [r7, #4]
 800d158:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	333c      	adds	r3, #60	; 0x3c
 800d162:	3304      	adds	r3, #4
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	4a26      	ldr	r2, [pc, #152]	; (800d204 <USB_EP0_OutStart+0xb8>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d90a      	bls.n	800d186 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d17c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d180:	d101      	bne.n	800d186 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d182:	2300      	movs	r3, #0
 800d184:	e037      	b.n	800d1f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d18c:	461a      	mov	r2, r3
 800d18e:	2300      	movs	r3, #0
 800d190:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d198:	691b      	ldr	r3, [r3, #16]
 800d19a:	697a      	ldr	r2, [r7, #20]
 800d19c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ac:	691b      	ldr	r3, [r3, #16]
 800d1ae:	697a      	ldr	r2, [r7, #20]
 800d1b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1b4:	f043 0318 	orr.w	r3, r3, #24
 800d1b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	697a      	ldr	r2, [r7, #20]
 800d1c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d1cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d1ce:	7afb      	ldrb	r3, [r7, #11]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d10f      	bne.n	800d1f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1da:	461a      	mov	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	697a      	ldr	r2, [r7, #20]
 800d1ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d1f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d1f4:	2300      	movs	r3, #0
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	371c      	adds	r7, #28
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	4f54300a 	.word	0x4f54300a

0800d208 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d210:	2300      	movs	r3, #0
 800d212:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	3301      	adds	r3, #1
 800d218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	4a13      	ldr	r2, [pc, #76]	; (800d26c <USB_CoreReset+0x64>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d901      	bls.n	800d226 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d222:	2303      	movs	r3, #3
 800d224:	e01b      	b.n	800d25e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	691b      	ldr	r3, [r3, #16]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	daf2      	bge.n	800d214 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d22e:	2300      	movs	r3, #0
 800d230:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	f043 0201 	orr.w	r2, r3, #1
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3301      	adds	r3, #1
 800d242:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	4a09      	ldr	r2, [pc, #36]	; (800d26c <USB_CoreReset+0x64>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d901      	bls.n	800d250 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d24c:	2303      	movs	r3, #3
 800d24e:	e006      	b.n	800d25e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	f003 0301 	and.w	r3, r3, #1
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d0f0      	beq.n	800d23e <USB_CoreReset+0x36>

  return HAL_OK;
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3714      	adds	r7, #20
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	00030d40 	.word	0x00030d40

0800d270 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	460b      	mov	r3, r1
 800d27a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d27c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d280:	f002 fca4 	bl	800fbcc <USBD_static_malloc>
 800d284:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d109      	bne.n	800d2a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	32b0      	adds	r2, #176	; 0xb0
 800d296:	2100      	movs	r1, #0
 800d298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d29c:	2302      	movs	r3, #2
 800d29e:	e0d4      	b.n	800d44a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d2a0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f002 fd1c 	bl	800fce4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	32b0      	adds	r2, #176	; 0xb0
 800d2b6:	68f9      	ldr	r1, [r7, #12]
 800d2b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	32b0      	adds	r2, #176	; 0xb0
 800d2c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	7c1b      	ldrb	r3, [r3, #16]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d138      	bne.n	800d34a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d2d8:	4b5e      	ldr	r3, [pc, #376]	; (800d454 <USBD_CDC_Init+0x1e4>)
 800d2da:	7819      	ldrb	r1, [r3, #0]
 800d2dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2e0:	2202      	movs	r2, #2
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f002 fb4f 	bl	800f986 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d2e8:	4b5a      	ldr	r3, [pc, #360]	; (800d454 <USBD_CDC_Init+0x1e4>)
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	f003 020f 	and.w	r2, r3, #15
 800d2f0:	6879      	ldr	r1, [r7, #4]
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	4413      	add	r3, r2
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	440b      	add	r3, r1
 800d2fc:	3324      	adds	r3, #36	; 0x24
 800d2fe:	2201      	movs	r2, #1
 800d300:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d302:	4b55      	ldr	r3, [pc, #340]	; (800d458 <USBD_CDC_Init+0x1e8>)
 800d304:	7819      	ldrb	r1, [r3, #0]
 800d306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d30a:	2202      	movs	r2, #2
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f002 fb3a 	bl	800f986 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d312:	4b51      	ldr	r3, [pc, #324]	; (800d458 <USBD_CDC_Init+0x1e8>)
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	f003 020f 	and.w	r2, r3, #15
 800d31a:	6879      	ldr	r1, [r7, #4]
 800d31c:	4613      	mov	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4413      	add	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	440b      	add	r3, r1
 800d326:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d32a:	2201      	movs	r2, #1
 800d32c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d32e:	4b4b      	ldr	r3, [pc, #300]	; (800d45c <USBD_CDC_Init+0x1ec>)
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	f003 020f 	and.w	r2, r3, #15
 800d336:	6879      	ldr	r1, [r7, #4]
 800d338:	4613      	mov	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4413      	add	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	440b      	add	r3, r1
 800d342:	3326      	adds	r3, #38	; 0x26
 800d344:	2210      	movs	r2, #16
 800d346:	801a      	strh	r2, [r3, #0]
 800d348:	e035      	b.n	800d3b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d34a:	4b42      	ldr	r3, [pc, #264]	; (800d454 <USBD_CDC_Init+0x1e4>)
 800d34c:	7819      	ldrb	r1, [r3, #0]
 800d34e:	2340      	movs	r3, #64	; 0x40
 800d350:	2202      	movs	r2, #2
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f002 fb17 	bl	800f986 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d358:	4b3e      	ldr	r3, [pc, #248]	; (800d454 <USBD_CDC_Init+0x1e4>)
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	f003 020f 	and.w	r2, r3, #15
 800d360:	6879      	ldr	r1, [r7, #4]
 800d362:	4613      	mov	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	440b      	add	r3, r1
 800d36c:	3324      	adds	r3, #36	; 0x24
 800d36e:	2201      	movs	r2, #1
 800d370:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d372:	4b39      	ldr	r3, [pc, #228]	; (800d458 <USBD_CDC_Init+0x1e8>)
 800d374:	7819      	ldrb	r1, [r3, #0]
 800d376:	2340      	movs	r3, #64	; 0x40
 800d378:	2202      	movs	r2, #2
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f002 fb03 	bl	800f986 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d380:	4b35      	ldr	r3, [pc, #212]	; (800d458 <USBD_CDC_Init+0x1e8>)
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	f003 020f 	and.w	r2, r3, #15
 800d388:	6879      	ldr	r1, [r7, #4]
 800d38a:	4613      	mov	r3, r2
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	4413      	add	r3, r2
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	440b      	add	r3, r1
 800d394:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d398:	2201      	movs	r2, #1
 800d39a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d39c:	4b2f      	ldr	r3, [pc, #188]	; (800d45c <USBD_CDC_Init+0x1ec>)
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	f003 020f 	and.w	r2, r3, #15
 800d3a4:	6879      	ldr	r1, [r7, #4]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	4413      	add	r3, r2
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	440b      	add	r3, r1
 800d3b0:	3326      	adds	r3, #38	; 0x26
 800d3b2:	2210      	movs	r2, #16
 800d3b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d3b6:	4b29      	ldr	r3, [pc, #164]	; (800d45c <USBD_CDC_Init+0x1ec>)
 800d3b8:	7819      	ldrb	r1, [r3, #0]
 800d3ba:	2308      	movs	r3, #8
 800d3bc:	2203      	movs	r2, #3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f002 fae1 	bl	800f986 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d3c4:	4b25      	ldr	r3, [pc, #148]	; (800d45c <USBD_CDC_Init+0x1ec>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	f003 020f 	and.w	r2, r3, #15
 800d3cc:	6879      	ldr	r1, [r7, #4]
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	4413      	add	r3, r2
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	440b      	add	r3, r1
 800d3d8:	3324      	adds	r3, #36	; 0x24
 800d3da:	2201      	movs	r2, #1
 800d3dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	33b0      	adds	r3, #176	; 0xb0
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	4413      	add	r3, r2
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2200      	movs	r2, #0
 800d406:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d410:	2b00      	cmp	r3, #0
 800d412:	d101      	bne.n	800d418 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d414:	2302      	movs	r3, #2
 800d416:	e018      	b.n	800d44a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7c1b      	ldrb	r3, [r3, #16]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d10a      	bne.n	800d436 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d420:	4b0d      	ldr	r3, [pc, #52]	; (800d458 <USBD_CDC_Init+0x1e8>)
 800d422:	7819      	ldrb	r1, [r3, #0]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d42a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f002 fb98 	bl	800fb64 <USBD_LL_PrepareReceive>
 800d434:	e008      	b.n	800d448 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d436:	4b08      	ldr	r3, [pc, #32]	; (800d458 <USBD_CDC_Init+0x1e8>)
 800d438:	7819      	ldrb	r1, [r3, #0]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d440:	2340      	movs	r3, #64	; 0x40
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f002 fb8e 	bl	800fb64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	240001a3 	.word	0x240001a3
 800d458:	240001a4 	.word	0x240001a4
 800d45c:	240001a5 	.word	0x240001a5

0800d460 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	460b      	mov	r3, r1
 800d46a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d46c:	4b3a      	ldr	r3, [pc, #232]	; (800d558 <USBD_CDC_DeInit+0xf8>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	4619      	mov	r1, r3
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f002 faad 	bl	800f9d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d478:	4b37      	ldr	r3, [pc, #220]	; (800d558 <USBD_CDC_DeInit+0xf8>)
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	f003 020f 	and.w	r2, r3, #15
 800d480:	6879      	ldr	r1, [r7, #4]
 800d482:	4613      	mov	r3, r2
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	4413      	add	r3, r2
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	440b      	add	r3, r1
 800d48c:	3324      	adds	r3, #36	; 0x24
 800d48e:	2200      	movs	r2, #0
 800d490:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d492:	4b32      	ldr	r3, [pc, #200]	; (800d55c <USBD_CDC_DeInit+0xfc>)
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	4619      	mov	r1, r3
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f002 fa9a 	bl	800f9d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d49e:	4b2f      	ldr	r3, [pc, #188]	; (800d55c <USBD_CDC_DeInit+0xfc>)
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	f003 020f 	and.w	r2, r3, #15
 800d4a6:	6879      	ldr	r1, [r7, #4]
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	4413      	add	r3, r2
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	440b      	add	r3, r1
 800d4b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d4ba:	4b29      	ldr	r3, [pc, #164]	; (800d560 <USBD_CDC_DeInit+0x100>)
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	4619      	mov	r1, r3
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f002 fa86 	bl	800f9d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d4c6:	4b26      	ldr	r3, [pc, #152]	; (800d560 <USBD_CDC_DeInit+0x100>)
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	f003 020f 	and.w	r2, r3, #15
 800d4ce:	6879      	ldr	r1, [r7, #4]
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	4413      	add	r3, r2
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	440b      	add	r3, r1
 800d4da:	3324      	adds	r3, #36	; 0x24
 800d4dc:	2200      	movs	r2, #0
 800d4de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d4e0:	4b1f      	ldr	r3, [pc, #124]	; (800d560 <USBD_CDC_DeInit+0x100>)
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	f003 020f 	and.w	r2, r3, #15
 800d4e8:	6879      	ldr	r1, [r7, #4]
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	4413      	add	r3, r2
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	440b      	add	r3, r1
 800d4f4:	3326      	adds	r3, #38	; 0x26
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	32b0      	adds	r2, #176	; 0xb0
 800d504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d01f      	beq.n	800d54c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	33b0      	adds	r3, #176	; 0xb0
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	4413      	add	r3, r2
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	32b0      	adds	r2, #176	; 0xb0
 800d52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d52e:	4618      	mov	r0, r3
 800d530:	f002 fb5a 	bl	800fbe8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	32b0      	adds	r2, #176	; 0xb0
 800d53e:	2100      	movs	r1, #0
 800d540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d54c:	2300      	movs	r3, #0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3708      	adds	r7, #8
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	240001a3 	.word	0x240001a3
 800d55c:	240001a4 	.word	0x240001a4
 800d560:	240001a5 	.word	0x240001a5

0800d564 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b086      	sub	sp, #24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	32b0      	adds	r2, #176	; 0xb0
 800d578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d57c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d57e:	2300      	movs	r3, #0
 800d580:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d582:	2300      	movs	r3, #0
 800d584:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d586:	2300      	movs	r3, #0
 800d588:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d101      	bne.n	800d594 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d590:	2303      	movs	r3, #3
 800d592:	e0bf      	b.n	800d714 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d050      	beq.n	800d642 <USBD_CDC_Setup+0xde>
 800d5a0:	2b20      	cmp	r3, #32
 800d5a2:	f040 80af 	bne.w	800d704 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	88db      	ldrh	r3, [r3, #6]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d03a      	beq.n	800d624 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	b25b      	sxtb	r3, r3
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	da1b      	bge.n	800d5f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	33b0      	adds	r3, #176	; 0xb0
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	4413      	add	r3, r2
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	689b      	ldr	r3, [r3, #8]
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d5ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d5d0:	683a      	ldr	r2, [r7, #0]
 800d5d2:	88d2      	ldrh	r2, [r2, #6]
 800d5d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	88db      	ldrh	r3, [r3, #6]
 800d5da:	2b07      	cmp	r3, #7
 800d5dc:	bf28      	it	cs
 800d5de:	2307      	movcs	r3, #7
 800d5e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	89fa      	ldrh	r2, [r7, #14]
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f001 fd89 	bl	800f100 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d5ee:	e090      	b.n	800d712 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	785a      	ldrb	r2, [r3, #1]
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	88db      	ldrh	r3, [r3, #6]
 800d5fe:	2b3f      	cmp	r3, #63	; 0x3f
 800d600:	d803      	bhi.n	800d60a <USBD_CDC_Setup+0xa6>
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	88db      	ldrh	r3, [r3, #6]
 800d606:	b2da      	uxtb	r2, r3
 800d608:	e000      	b.n	800d60c <USBD_CDC_Setup+0xa8>
 800d60a:	2240      	movs	r2, #64	; 0x40
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d612:	6939      	ldr	r1, [r7, #16]
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d61a:	461a      	mov	r2, r3
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f001 fd9b 	bl	800f158 <USBD_CtlPrepareRx>
      break;
 800d622:	e076      	b.n	800d712 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	33b0      	adds	r3, #176	; 0xb0
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4413      	add	r3, r2
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	683a      	ldr	r2, [r7, #0]
 800d638:	7850      	ldrb	r0, [r2, #1]
 800d63a:	2200      	movs	r2, #0
 800d63c:	6839      	ldr	r1, [r7, #0]
 800d63e:	4798      	blx	r3
      break;
 800d640:	e067      	b.n	800d712 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	785b      	ldrb	r3, [r3, #1]
 800d646:	2b0b      	cmp	r3, #11
 800d648:	d851      	bhi.n	800d6ee <USBD_CDC_Setup+0x18a>
 800d64a:	a201      	add	r2, pc, #4	; (adr r2, 800d650 <USBD_CDC_Setup+0xec>)
 800d64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d650:	0800d681 	.word	0x0800d681
 800d654:	0800d6fd 	.word	0x0800d6fd
 800d658:	0800d6ef 	.word	0x0800d6ef
 800d65c:	0800d6ef 	.word	0x0800d6ef
 800d660:	0800d6ef 	.word	0x0800d6ef
 800d664:	0800d6ef 	.word	0x0800d6ef
 800d668:	0800d6ef 	.word	0x0800d6ef
 800d66c:	0800d6ef 	.word	0x0800d6ef
 800d670:	0800d6ef 	.word	0x0800d6ef
 800d674:	0800d6ef 	.word	0x0800d6ef
 800d678:	0800d6ab 	.word	0x0800d6ab
 800d67c:	0800d6d5 	.word	0x0800d6d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d686:	b2db      	uxtb	r3, r3
 800d688:	2b03      	cmp	r3, #3
 800d68a:	d107      	bne.n	800d69c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d68c:	f107 030a 	add.w	r3, r7, #10
 800d690:	2202      	movs	r2, #2
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f001 fd33 	bl	800f100 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d69a:	e032      	b.n	800d702 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f001 fcbd 	bl	800f01e <USBD_CtlError>
            ret = USBD_FAIL;
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	75fb      	strb	r3, [r7, #23]
          break;
 800d6a8:	e02b      	b.n	800d702 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	2b03      	cmp	r3, #3
 800d6b4:	d107      	bne.n	800d6c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d6b6:	f107 030d 	add.w	r3, r7, #13
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	4619      	mov	r1, r3
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f001 fd1e 	bl	800f100 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d6c4:	e01d      	b.n	800d702 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d6c6:	6839      	ldr	r1, [r7, #0]
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f001 fca8 	bl	800f01e <USBD_CtlError>
            ret = USBD_FAIL;
 800d6ce:	2303      	movs	r3, #3
 800d6d0:	75fb      	strb	r3, [r7, #23]
          break;
 800d6d2:	e016      	b.n	800d702 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	2b03      	cmp	r3, #3
 800d6de:	d00f      	beq.n	800d700 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f001 fc9b 	bl	800f01e <USBD_CtlError>
            ret = USBD_FAIL;
 800d6e8:	2303      	movs	r3, #3
 800d6ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d6ec:	e008      	b.n	800d700 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d6ee:	6839      	ldr	r1, [r7, #0]
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f001 fc94 	bl	800f01e <USBD_CtlError>
          ret = USBD_FAIL;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	75fb      	strb	r3, [r7, #23]
          break;
 800d6fa:	e002      	b.n	800d702 <USBD_CDC_Setup+0x19e>
          break;
 800d6fc:	bf00      	nop
 800d6fe:	e008      	b.n	800d712 <USBD_CDC_Setup+0x1ae>
          break;
 800d700:	bf00      	nop
      }
      break;
 800d702:	e006      	b.n	800d712 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f001 fc89 	bl	800f01e <USBD_CtlError>
      ret = USBD_FAIL;
 800d70c:	2303      	movs	r3, #3
 800d70e:	75fb      	strb	r3, [r7, #23]
      break;
 800d710:	bf00      	nop
  }

  return (uint8_t)ret;
 800d712:	7dfb      	ldrb	r3, [r7, #23]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3718      	adds	r7, #24
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	460b      	mov	r3, r1
 800d726:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d72e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	32b0      	adds	r2, #176	; 0xb0
 800d73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d101      	bne.n	800d746 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d742:	2303      	movs	r3, #3
 800d744:	e065      	b.n	800d812 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	32b0      	adds	r2, #176	; 0xb0
 800d750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d754:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d756:	78fb      	ldrb	r3, [r7, #3]
 800d758:	f003 020f 	and.w	r2, r3, #15
 800d75c:	6879      	ldr	r1, [r7, #4]
 800d75e:	4613      	mov	r3, r2
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	4413      	add	r3, r2
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	440b      	add	r3, r1
 800d768:	3318      	adds	r3, #24
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d02f      	beq.n	800d7d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d770:	78fb      	ldrb	r3, [r7, #3]
 800d772:	f003 020f 	and.w	r2, r3, #15
 800d776:	6879      	ldr	r1, [r7, #4]
 800d778:	4613      	mov	r3, r2
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4413      	add	r3, r2
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	440b      	add	r3, r1
 800d782:	3318      	adds	r3, #24
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	78fb      	ldrb	r3, [r7, #3]
 800d788:	f003 010f 	and.w	r1, r3, #15
 800d78c:	68f8      	ldr	r0, [r7, #12]
 800d78e:	460b      	mov	r3, r1
 800d790:	00db      	lsls	r3, r3, #3
 800d792:	440b      	add	r3, r1
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	4403      	add	r3, r0
 800d798:	3344      	adds	r3, #68	; 0x44
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d7a0:	fb01 f303 	mul.w	r3, r1, r3
 800d7a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d112      	bne.n	800d7d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d7aa:	78fb      	ldrb	r3, [r7, #3]
 800d7ac:	f003 020f 	and.w	r2, r3, #15
 800d7b0:	6879      	ldr	r1, [r7, #4]
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	4413      	add	r3, r2
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	440b      	add	r3, r1
 800d7bc:	3318      	adds	r3, #24
 800d7be:	2200      	movs	r2, #0
 800d7c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d7c2:	78f9      	ldrb	r1, [r7, #3]
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f002 f9aa 	bl	800fb22 <USBD_LL_Transmit>
 800d7ce:	e01f      	b.n	800d810 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	33b0      	adds	r3, #176	; 0xb0
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4413      	add	r3, r2
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	691b      	ldr	r3, [r3, #16]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d010      	beq.n	800d810 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	33b0      	adds	r3, #176	; 0xb0
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	4413      	add	r3, r2
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d806:	68ba      	ldr	r2, [r7, #8]
 800d808:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d80c:	78fa      	ldrb	r2, [r7, #3]
 800d80e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	460b      	mov	r3, r1
 800d824:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	32b0      	adds	r2, #176	; 0xb0
 800d830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d834:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	32b0      	adds	r2, #176	; 0xb0
 800d840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d101      	bne.n	800d84c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d848:	2303      	movs	r3, #3
 800d84a:	e01a      	b.n	800d882 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d84c:	78fb      	ldrb	r3, [r7, #3]
 800d84e:	4619      	mov	r1, r3
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f002 f9a8 	bl	800fba6 <USBD_LL_GetRxDataSize>
 800d856:	4602      	mov	r2, r0
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	33b0      	adds	r3, #176	; 0xb0
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	4413      	add	r3, r2
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d876:	68fa      	ldr	r2, [r7, #12]
 800d878:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d87c:	4611      	mov	r1, r2
 800d87e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d880:	2300      	movs	r3, #0
}
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b084      	sub	sp, #16
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	32b0      	adds	r2, #176	; 0xb0
 800d89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d101      	bne.n	800d8ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	e025      	b.n	800d8f8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	33b0      	adds	r3, #176	; 0xb0
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	4413      	add	r3, r2
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d01a      	beq.n	800d8f6 <USBD_CDC_EP0_RxReady+0x6c>
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d8c6:	2bff      	cmp	r3, #255	; 0xff
 800d8c8:	d015      	beq.n	800d8f6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	33b0      	adds	r3, #176	; 0xb0
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	4413      	add	r3, r2
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	68fa      	ldr	r2, [r7, #12]
 800d8de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d8e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d8ea:	b292      	uxth	r2, r2
 800d8ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	22ff      	movs	r2, #255	; 0xff
 800d8f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d8f6:	2300      	movs	r3, #0
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3710      	adds	r7, #16
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d908:	2182      	movs	r1, #130	; 0x82
 800d90a:	4818      	ldr	r0, [pc, #96]	; (800d96c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d90c:	f000 fd4f 	bl	800e3ae <USBD_GetEpDesc>
 800d910:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d912:	2101      	movs	r1, #1
 800d914:	4815      	ldr	r0, [pc, #84]	; (800d96c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d916:	f000 fd4a 	bl	800e3ae <USBD_GetEpDesc>
 800d91a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d91c:	2181      	movs	r1, #129	; 0x81
 800d91e:	4813      	ldr	r0, [pc, #76]	; (800d96c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d920:	f000 fd45 	bl	800e3ae <USBD_GetEpDesc>
 800d924:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d002      	beq.n	800d932 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	2210      	movs	r2, #16
 800d930:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d006      	beq.n	800d946 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	2200      	movs	r2, #0
 800d93c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d940:	711a      	strb	r2, [r3, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d006      	beq.n	800d95a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2200      	movs	r2, #0
 800d950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d954:	711a      	strb	r2, [r3, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2243      	movs	r2, #67	; 0x43
 800d95e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d960:	4b02      	ldr	r3, [pc, #8]	; (800d96c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d962:	4618      	mov	r0, r3
 800d964:	3718      	adds	r7, #24
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	24000160 	.word	0x24000160

0800d970 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d978:	2182      	movs	r1, #130	; 0x82
 800d97a:	4818      	ldr	r0, [pc, #96]	; (800d9dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d97c:	f000 fd17 	bl	800e3ae <USBD_GetEpDesc>
 800d980:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d982:	2101      	movs	r1, #1
 800d984:	4815      	ldr	r0, [pc, #84]	; (800d9dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d986:	f000 fd12 	bl	800e3ae <USBD_GetEpDesc>
 800d98a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d98c:	2181      	movs	r1, #129	; 0x81
 800d98e:	4813      	ldr	r0, [pc, #76]	; (800d9dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d990:	f000 fd0d 	bl	800e3ae <USBD_GetEpDesc>
 800d994:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d002      	beq.n	800d9a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	2210      	movs	r2, #16
 800d9a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d006      	beq.n	800d9b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	711a      	strb	r2, [r3, #4]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f042 0202 	orr.w	r2, r2, #2
 800d9b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d006      	beq.n	800d9ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	711a      	strb	r2, [r3, #4]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f042 0202 	orr.w	r2, r2, #2
 800d9c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2243      	movs	r2, #67	; 0x43
 800d9ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d9d0:	4b02      	ldr	r3, [pc, #8]	; (800d9dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3718      	adds	r7, #24
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	24000160 	.word	0x24000160

0800d9e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d9e8:	2182      	movs	r1, #130	; 0x82
 800d9ea:	4818      	ldr	r0, [pc, #96]	; (800da4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d9ec:	f000 fcdf 	bl	800e3ae <USBD_GetEpDesc>
 800d9f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d9f2:	2101      	movs	r1, #1
 800d9f4:	4815      	ldr	r0, [pc, #84]	; (800da4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d9f6:	f000 fcda 	bl	800e3ae <USBD_GetEpDesc>
 800d9fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d9fc:	2181      	movs	r1, #129	; 0x81
 800d9fe:	4813      	ldr	r0, [pc, #76]	; (800da4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800da00:	f000 fcd5 	bl	800e3ae <USBD_GetEpDesc>
 800da04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d002      	beq.n	800da12 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	2210      	movs	r2, #16
 800da10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d006      	beq.n	800da26 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	2200      	movs	r2, #0
 800da1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da20:	711a      	strb	r2, [r3, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d006      	beq.n	800da3a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2200      	movs	r2, #0
 800da30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da34:	711a      	strb	r2, [r3, #4]
 800da36:	2200      	movs	r2, #0
 800da38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2243      	movs	r2, #67	; 0x43
 800da3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800da40:	4b02      	ldr	r3, [pc, #8]	; (800da4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800da42:	4618      	mov	r0, r3
 800da44:	3718      	adds	r7, #24
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	24000160 	.word	0x24000160

0800da50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	220a      	movs	r2, #10
 800da5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800da5e:	4b03      	ldr	r3, [pc, #12]	; (800da6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800da60:	4618      	mov	r0, r3
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr
 800da6c:	2400011c 	.word	0x2400011c

0800da70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d101      	bne.n	800da84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800da80:	2303      	movs	r3, #3
 800da82:	e009      	b.n	800da98 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	33b0      	adds	r3, #176	; 0xb0
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	4413      	add	r3, r2
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800da96:	2300      	movs	r3, #0
}
 800da98:	4618      	mov	r0, r3
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b087      	sub	sp, #28
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	32b0      	adds	r2, #176	; 0xb0
 800daba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dabe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d101      	bne.n	800daca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dac6:	2303      	movs	r3, #3
 800dac8:	e008      	b.n	800dadc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	68ba      	ldr	r2, [r7, #8]
 800dace:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	371c      	adds	r7, #28
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dae8:	b480      	push	{r7}
 800daea:	b085      	sub	sp, #20
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	32b0      	adds	r2, #176	; 0xb0
 800dafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d101      	bne.n	800db0c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800db08:	2303      	movs	r3, #3
 800db0a:	e004      	b.n	800db16 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800db14:	2300      	movs	r3, #0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3714      	adds	r7, #20
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
	...

0800db24 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	32b0      	adds	r2, #176	; 0xb0
 800db36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db3a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800db3c:	2301      	movs	r3, #1
 800db3e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d101      	bne.n	800db4a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800db46:	2303      	movs	r3, #3
 800db48:	e025      	b.n	800db96 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800db50:	2b00      	cmp	r3, #0
 800db52:	d11f      	bne.n	800db94 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	2201      	movs	r2, #1
 800db58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800db5c:	4b10      	ldr	r3, [pc, #64]	; (800dba0 <USBD_CDC_TransmitPacket+0x7c>)
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	f003 020f 	and.w	r2, r3, #15
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	4613      	mov	r3, r2
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	4413      	add	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4403      	add	r3, r0
 800db76:	3318      	adds	r3, #24
 800db78:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800db7a:	4b09      	ldr	r3, [pc, #36]	; (800dba0 <USBD_CDC_TransmitPacket+0x7c>)
 800db7c:	7819      	ldrb	r1, [r3, #0]
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f001 ffc9 	bl	800fb22 <USBD_LL_Transmit>

    ret = USBD_OK;
 800db90:	2300      	movs	r3, #0
 800db92:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800db94:	7bfb      	ldrb	r3, [r7, #15]
}
 800db96:	4618      	mov	r0, r3
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	240001a3 	.word	0x240001a3

0800dba4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	32b0      	adds	r2, #176	; 0xb0
 800dbb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	32b0      	adds	r2, #176	; 0xb0
 800dbc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d101      	bne.n	800dbd2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dbce:	2303      	movs	r3, #3
 800dbd0:	e018      	b.n	800dc04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	7c1b      	ldrb	r3, [r3, #16]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d10a      	bne.n	800dbf0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dbda:	4b0c      	ldr	r3, [pc, #48]	; (800dc0c <USBD_CDC_ReceivePacket+0x68>)
 800dbdc:	7819      	ldrb	r1, [r3, #0]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dbe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f001 ffbb 	bl	800fb64 <USBD_LL_PrepareReceive>
 800dbee:	e008      	b.n	800dc02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dbf0:	4b06      	ldr	r3, [pc, #24]	; (800dc0c <USBD_CDC_ReceivePacket+0x68>)
 800dbf2:	7819      	ldrb	r1, [r3, #0]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dbfa:	2340      	movs	r3, #64	; 0x40
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f001 ffb1 	bl	800fb64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dc02:	2300      	movs	r3, #0
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	240001a4 	.word	0x240001a4

0800dc10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b086      	sub	sp, #24
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dc24:	2303      	movs	r3, #3
 800dc26:	e01f      	b.n	800dc68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2200      	movs	r2, #0
 800dc34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d003      	beq.n	800dc4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	68ba      	ldr	r2, [r7, #8]
 800dc4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2201      	movs	r2, #1
 800dc52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	79fa      	ldrb	r2, [r7, #7]
 800dc5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f001 fe25 	bl	800f8ac <USBD_LL_Init>
 800dc62:	4603      	mov	r3, r0
 800dc64:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dc66:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3718      	adds	r7, #24
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d101      	bne.n	800dc88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dc84:	2303      	movs	r3, #3
 800dc86:	e025      	b.n	800dcd4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	683a      	ldr	r2, [r7, #0]
 800dc8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	32ae      	adds	r2, #174	; 0xae
 800dc9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00f      	beq.n	800dcc4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	32ae      	adds	r2, #174	; 0xae
 800dcae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb4:	f107 020e 	add.w	r2, r7, #14
 800dcb8:	4610      	mov	r0, r2
 800dcba:	4798      	blx	r3
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dcca:	1c5a      	adds	r2, r3, #1
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f001 fe33 	bl	800f950 <USBD_LL_Start>
 800dcea:	4603      	mov	r3, r0
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dcfc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	370c      	adds	r7, #12
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr

0800dd0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b084      	sub	sp, #16
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	460b      	mov	r3, r1
 800dd14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd16:	2300      	movs	r3, #0
 800dd18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d009      	beq.n	800dd38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	78fa      	ldrb	r2, [r7, #3]
 800dd2e:	4611      	mov	r1, r2
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	4798      	blx	r3
 800dd34:	4603      	mov	r3, r0
 800dd36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dd38:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b084      	sub	sp, #16
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	78fa      	ldrb	r2, [r7, #3]
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	4798      	blx	r3
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d001      	beq.n	800dd6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dd68:	2303      	movs	r3, #3
 800dd6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dd76:	b580      	push	{r7, lr}
 800dd78:	b084      	sub	sp, #16
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
 800dd7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dd86:	6839      	ldr	r1, [r7, #0]
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f001 f90e 	bl	800efaa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ddaa:	f003 031f 	and.w	r3, r3, #31
 800ddae:	2b02      	cmp	r3, #2
 800ddb0:	d01a      	beq.n	800dde8 <USBD_LL_SetupStage+0x72>
 800ddb2:	2b02      	cmp	r3, #2
 800ddb4:	d822      	bhi.n	800ddfc <USBD_LL_SetupStage+0x86>
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d002      	beq.n	800ddc0 <USBD_LL_SetupStage+0x4a>
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d00a      	beq.n	800ddd4 <USBD_LL_SetupStage+0x5e>
 800ddbe:	e01d      	b.n	800ddfc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 fb65 	bl	800e498 <USBD_StdDevReq>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	73fb      	strb	r3, [r7, #15]
      break;
 800ddd2:	e020      	b.n	800de16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ddda:	4619      	mov	r1, r3
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 fbcd 	bl	800e57c <USBD_StdItfReq>
 800dde2:	4603      	mov	r3, r0
 800dde4:	73fb      	strb	r3, [r7, #15]
      break;
 800dde6:	e016      	b.n	800de16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 fc2f 	bl	800e654 <USBD_StdEPReq>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	73fb      	strb	r3, [r7, #15]
      break;
 800ddfa:	e00c      	b.n	800de16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800de02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800de06:	b2db      	uxtb	r3, r3
 800de08:	4619      	mov	r1, r3
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f001 fe00 	bl	800fa10 <USBD_LL_StallEP>
 800de10:	4603      	mov	r3, r0
 800de12:	73fb      	strb	r3, [r7, #15]
      break;
 800de14:	bf00      	nop
  }

  return ret;
 800de16:	7bfb      	ldrb	r3, [r7, #15]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b086      	sub	sp, #24
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	460b      	mov	r3, r1
 800de2a:	607a      	str	r2, [r7, #4]
 800de2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800de2e:	2300      	movs	r3, #0
 800de30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800de32:	7afb      	ldrb	r3, [r7, #11]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d16e      	bne.n	800df16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800de3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800de46:	2b03      	cmp	r3, #3
 800de48:	f040 8098 	bne.w	800df7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	689a      	ldr	r2, [r3, #8]
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	429a      	cmp	r2, r3
 800de56:	d913      	bls.n	800de80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	689a      	ldr	r2, [r3, #8]
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	1ad2      	subs	r2, r2, r3
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	68da      	ldr	r2, [r3, #12]
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	689b      	ldr	r3, [r3, #8]
 800de6e:	4293      	cmp	r3, r2
 800de70:	bf28      	it	cs
 800de72:	4613      	movcs	r3, r2
 800de74:	461a      	mov	r2, r3
 800de76:	6879      	ldr	r1, [r7, #4]
 800de78:	68f8      	ldr	r0, [r7, #12]
 800de7a:	f001 f98a 	bl	800f192 <USBD_CtlContinueRx>
 800de7e:	e07d      	b.n	800df7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800de86:	f003 031f 	and.w	r3, r3, #31
 800de8a:	2b02      	cmp	r3, #2
 800de8c:	d014      	beq.n	800deb8 <USBD_LL_DataOutStage+0x98>
 800de8e:	2b02      	cmp	r3, #2
 800de90:	d81d      	bhi.n	800dece <USBD_LL_DataOutStage+0xae>
 800de92:	2b00      	cmp	r3, #0
 800de94:	d002      	beq.n	800de9c <USBD_LL_DataOutStage+0x7c>
 800de96:	2b01      	cmp	r3, #1
 800de98:	d003      	beq.n	800dea2 <USBD_LL_DataOutStage+0x82>
 800de9a:	e018      	b.n	800dece <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800de9c:	2300      	movs	r3, #0
 800de9e:	75bb      	strb	r3, [r7, #22]
            break;
 800dea0:	e018      	b.n	800ded4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	4619      	mov	r1, r3
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f000 fa64 	bl	800e37a <USBD_CoreFindIF>
 800deb2:	4603      	mov	r3, r0
 800deb4:	75bb      	strb	r3, [r7, #22]
            break;
 800deb6:	e00d      	b.n	800ded4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	4619      	mov	r1, r3
 800dec2:	68f8      	ldr	r0, [r7, #12]
 800dec4:	f000 fa66 	bl	800e394 <USBD_CoreFindEP>
 800dec8:	4603      	mov	r3, r0
 800deca:	75bb      	strb	r3, [r7, #22]
            break;
 800decc:	e002      	b.n	800ded4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dece:	2300      	movs	r3, #0
 800ded0:	75bb      	strb	r3, [r7, #22]
            break;
 800ded2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ded4:	7dbb      	ldrb	r3, [r7, #22]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d119      	bne.n	800df0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	2b03      	cmp	r3, #3
 800dee4:	d113      	bne.n	800df0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dee6:	7dba      	ldrb	r2, [r7, #22]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	32ae      	adds	r2, #174	; 0xae
 800deec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00b      	beq.n	800df0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800def6:	7dba      	ldrb	r2, [r7, #22]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800defe:	7dba      	ldrb	r2, [r7, #22]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	32ae      	adds	r2, #174	; 0xae
 800df04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df08:	691b      	ldr	r3, [r3, #16]
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f001 f950 	bl	800f1b4 <USBD_CtlSendStatus>
 800df14:	e032      	b.n	800df7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800df16:	7afb      	ldrb	r3, [r7, #11]
 800df18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	4619      	mov	r1, r3
 800df20:	68f8      	ldr	r0, [r7, #12]
 800df22:	f000 fa37 	bl	800e394 <USBD_CoreFindEP>
 800df26:	4603      	mov	r3, r0
 800df28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df2a:	7dbb      	ldrb	r3, [r7, #22]
 800df2c:	2bff      	cmp	r3, #255	; 0xff
 800df2e:	d025      	beq.n	800df7c <USBD_LL_DataOutStage+0x15c>
 800df30:	7dbb      	ldrb	r3, [r7, #22]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d122      	bne.n	800df7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	2b03      	cmp	r3, #3
 800df40:	d117      	bne.n	800df72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800df42:	7dba      	ldrb	r2, [r7, #22]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	32ae      	adds	r2, #174	; 0xae
 800df48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df4c:	699b      	ldr	r3, [r3, #24]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00f      	beq.n	800df72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800df52:	7dba      	ldrb	r2, [r7, #22]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800df5a:	7dba      	ldrb	r2, [r7, #22]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	32ae      	adds	r2, #174	; 0xae
 800df60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df64:	699b      	ldr	r3, [r3, #24]
 800df66:	7afa      	ldrb	r2, [r7, #11]
 800df68:	4611      	mov	r1, r2
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	4798      	blx	r3
 800df6e:	4603      	mov	r3, r0
 800df70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800df72:	7dfb      	ldrb	r3, [r7, #23]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d001      	beq.n	800df7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800df78:	7dfb      	ldrb	r3, [r7, #23]
 800df7a:	e000      	b.n	800df7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800df7c:	2300      	movs	r3, #0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3718      	adds	r7, #24
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b086      	sub	sp, #24
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	60f8      	str	r0, [r7, #12]
 800df8e:	460b      	mov	r3, r1
 800df90:	607a      	str	r2, [r7, #4]
 800df92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800df94:	7afb      	ldrb	r3, [r7, #11]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d16f      	bne.n	800e07a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	3314      	adds	r3, #20
 800df9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dfa6:	2b02      	cmp	r3, #2
 800dfa8:	d15a      	bne.n	800e060 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	689a      	ldr	r2, [r3, #8]
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d914      	bls.n	800dfe0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	689a      	ldr	r2, [r3, #8]
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	1ad2      	subs	r2, r2, r3
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	461a      	mov	r2, r3
 800dfca:	6879      	ldr	r1, [r7, #4]
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f001 f8b2 	bl	800f136 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f001 fdc3 	bl	800fb64 <USBD_LL_PrepareReceive>
 800dfde:	e03f      	b.n	800e060 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	68da      	ldr	r2, [r3, #12]
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d11c      	bne.n	800e026 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	685a      	ldr	r2, [r3, #4]
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d316      	bcc.n	800e026 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	685a      	ldr	r2, [r3, #4]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e002:	429a      	cmp	r2, r3
 800e004:	d20f      	bcs.n	800e026 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e006:	2200      	movs	r2, #0
 800e008:	2100      	movs	r1, #0
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f001 f893 	bl	800f136 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2200      	movs	r2, #0
 800e014:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e018:	2300      	movs	r3, #0
 800e01a:	2200      	movs	r2, #0
 800e01c:	2100      	movs	r1, #0
 800e01e:	68f8      	ldr	r0, [r7, #12]
 800e020:	f001 fda0 	bl	800fb64 <USBD_LL_PrepareReceive>
 800e024:	e01c      	b.n	800e060 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	2b03      	cmp	r3, #3
 800e030:	d10f      	bne.n	800e052 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d009      	beq.n	800e052 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2200      	movs	r2, #0
 800e042:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	68f8      	ldr	r0, [r7, #12]
 800e050:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e052:	2180      	movs	r1, #128	; 0x80
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f001 fcdb 	bl	800fa10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e05a:	68f8      	ldr	r0, [r7, #12]
 800e05c:	f001 f8bd 	bl	800f1da <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e066:	2b00      	cmp	r3, #0
 800e068:	d03a      	beq.n	800e0e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f7ff fe42 	bl	800dcf4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2200      	movs	r2, #0
 800e074:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e078:	e032      	b.n	800e0e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e07a:	7afb      	ldrb	r3, [r7, #11]
 800e07c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e080:	b2db      	uxtb	r3, r3
 800e082:	4619      	mov	r1, r3
 800e084:	68f8      	ldr	r0, [r7, #12]
 800e086:	f000 f985 	bl	800e394 <USBD_CoreFindEP>
 800e08a:	4603      	mov	r3, r0
 800e08c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e08e:	7dfb      	ldrb	r3, [r7, #23]
 800e090:	2bff      	cmp	r3, #255	; 0xff
 800e092:	d025      	beq.n	800e0e0 <USBD_LL_DataInStage+0x15a>
 800e094:	7dfb      	ldrb	r3, [r7, #23]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d122      	bne.n	800e0e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	2b03      	cmp	r3, #3
 800e0a4:	d11c      	bne.n	800e0e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e0a6:	7dfa      	ldrb	r2, [r7, #23]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	32ae      	adds	r2, #174	; 0xae
 800e0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0b0:	695b      	ldr	r3, [r3, #20]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d014      	beq.n	800e0e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e0b6:	7dfa      	ldrb	r2, [r7, #23]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e0be:	7dfa      	ldrb	r2, [r7, #23]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	32ae      	adds	r2, #174	; 0xae
 800e0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0c8:	695b      	ldr	r3, [r3, #20]
 800e0ca:	7afa      	ldrb	r2, [r7, #11]
 800e0cc:	4611      	mov	r1, r2
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	4798      	blx	r3
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e0d6:	7dbb      	ldrb	r3, [r7, #22]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d001      	beq.n	800e0e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e0dc:	7dbb      	ldrb	r3, [r7, #22]
 800e0de:	e000      	b.n	800e0e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e0e0:	2300      	movs	r3, #0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3718      	adds	r7, #24
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b084      	sub	sp, #16
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2200      	movs	r2, #0
 800e102:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2200      	movs	r2, #0
 800e10a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2200      	movs	r2, #0
 800e110:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e122:	2b00      	cmp	r3, #0
 800e124:	d014      	beq.n	800e150 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00e      	beq.n	800e150 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	6852      	ldr	r2, [r2, #4]
 800e13e:	b2d2      	uxtb	r2, r2
 800e140:	4611      	mov	r1, r2
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	4798      	blx	r3
 800e146:	4603      	mov	r3, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d001      	beq.n	800e150 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e14c:	2303      	movs	r3, #3
 800e14e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e150:	2340      	movs	r3, #64	; 0x40
 800e152:	2200      	movs	r2, #0
 800e154:	2100      	movs	r1, #0
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f001 fc15 	bl	800f986 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2201      	movs	r2, #1
 800e160:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2240      	movs	r2, #64	; 0x40
 800e168:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e16c:	2340      	movs	r3, #64	; 0x40
 800e16e:	2200      	movs	r2, #0
 800e170:	2180      	movs	r1, #128	; 0x80
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f001 fc07 	bl	800f986 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2240      	movs	r2, #64	; 0x40
 800e182:	621a      	str	r2, [r3, #32]

  return ret;
 800e184:	7bfb      	ldrb	r3, [r7, #15]
}
 800e186:	4618      	mov	r0, r3
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}

0800e18e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e18e:	b480      	push	{r7}
 800e190:	b083      	sub	sp, #12
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
 800e196:	460b      	mov	r3, r1
 800e198:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	78fa      	ldrb	r2, [r7, #3]
 800e19e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	370c      	adds	r7, #12
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr

0800e1ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e1ae:	b480      	push	{r7}
 800e1b0:	b083      	sub	sp, #12
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b04      	cmp	r3, #4
 800e1c0:	d006      	beq.n	800e1d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1c8:	b2da      	uxtb	r2, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2204      	movs	r2, #4
 800e1d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	370c      	adds	r7, #12
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr

0800e1e6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e1e6:	b480      	push	{r7}
 800e1e8:	b083      	sub	sp, #12
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	2b04      	cmp	r3, #4
 800e1f8:	d106      	bne.n	800e208 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e200:	b2da      	uxtb	r2, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	370c      	adds	r7, #12
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr

0800e216 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b082      	sub	sp, #8
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e224:	b2db      	uxtb	r3, r3
 800e226:	2b03      	cmp	r3, #3
 800e228:	d110      	bne.n	800e24c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e230:	2b00      	cmp	r3, #0
 800e232:	d00b      	beq.n	800e24c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e23a:	69db      	ldr	r3, [r3, #28]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d005      	beq.n	800e24c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e246:	69db      	ldr	r3, [r3, #28]
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b082      	sub	sp, #8
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
 800e25e:	460b      	mov	r3, r1
 800e260:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	32ae      	adds	r2, #174	; 0xae
 800e26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d101      	bne.n	800e278 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e274:	2303      	movs	r3, #3
 800e276:	e01c      	b.n	800e2b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	2b03      	cmp	r3, #3
 800e282:	d115      	bne.n	800e2b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	32ae      	adds	r2, #174	; 0xae
 800e28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e292:	6a1b      	ldr	r3, [r3, #32]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d00b      	beq.n	800e2b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	32ae      	adds	r2, #174	; 0xae
 800e2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2a6:	6a1b      	ldr	r3, [r3, #32]
 800e2a8:	78fa      	ldrb	r2, [r7, #3]
 800e2aa:	4611      	mov	r1, r2
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3708      	adds	r7, #8
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b082      	sub	sp, #8
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	32ae      	adds	r2, #174	; 0xae
 800e2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d101      	bne.n	800e2dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e2d8:	2303      	movs	r3, #3
 800e2da:	e01c      	b.n	800e316 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	2b03      	cmp	r3, #3
 800e2e6:	d115      	bne.n	800e314 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	32ae      	adds	r2, #174	; 0xae
 800e2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d00b      	beq.n	800e314 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	32ae      	adds	r2, #174	; 0xae
 800e306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e30c:	78fa      	ldrb	r2, [r7, #3]
 800e30e:	4611      	mov	r1, r2
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3708      	adds	r7, #8
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}

0800e31e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e31e:	b480      	push	{r7}
 800e320:	b083      	sub	sp, #12
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e326:	2300      	movs	r3, #0
}
 800e328:	4618      	mov	r0, r3
 800e32a:	370c      	adds	r7, #12
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr

0800e334 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e33c:	2300      	movs	r3, #0
 800e33e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2201      	movs	r2, #1
 800e344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d00e      	beq.n	800e370 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	6852      	ldr	r2, [r2, #4]
 800e35e:	b2d2      	uxtb	r2, r2
 800e360:	4611      	mov	r1, r2
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	4798      	blx	r3
 800e366:	4603      	mov	r3, r0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d001      	beq.n	800e370 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e36c:	2303      	movs	r3, #3
 800e36e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e370:	7bfb      	ldrb	r3, [r7, #15]
}
 800e372:	4618      	mov	r0, r3
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e37a:	b480      	push	{r7}
 800e37c:	b083      	sub	sp, #12
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
 800e382:	460b      	mov	r3, r1
 800e384:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e386:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e388:	4618      	mov	r0, r3
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	460b      	mov	r3, r1
 800e39e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e3a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	370c      	adds	r7, #12
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr

0800e3ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b086      	sub	sp, #24
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
 800e3b6:	460b      	mov	r3, r1
 800e3b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	885b      	ldrh	r3, [r3, #2]
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d920      	bls.n	800e418 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e3de:	e013      	b.n	800e408 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e3e0:	f107 030a 	add.w	r3, r7, #10
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	6978      	ldr	r0, [r7, #20]
 800e3e8:	f000 f81b 	bl	800e422 <USBD_GetNextDesc>
 800e3ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	785b      	ldrb	r3, [r3, #1]
 800e3f2:	2b05      	cmp	r3, #5
 800e3f4:	d108      	bne.n	800e408 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	789b      	ldrb	r3, [r3, #2]
 800e3fe:	78fa      	ldrb	r2, [r7, #3]
 800e400:	429a      	cmp	r2, r3
 800e402:	d008      	beq.n	800e416 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e404:	2300      	movs	r3, #0
 800e406:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	885b      	ldrh	r3, [r3, #2]
 800e40c:	b29a      	uxth	r2, r3
 800e40e:	897b      	ldrh	r3, [r7, #10]
 800e410:	429a      	cmp	r2, r3
 800e412:	d8e5      	bhi.n	800e3e0 <USBD_GetEpDesc+0x32>
 800e414:	e000      	b.n	800e418 <USBD_GetEpDesc+0x6a>
          break;
 800e416:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e418:	693b      	ldr	r3, [r7, #16]
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3718      	adds	r7, #24
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e422:	b480      	push	{r7}
 800e424:	b085      	sub	sp, #20
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	881a      	ldrh	r2, [r3, #0]
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	b29b      	uxth	r3, r3
 800e43a:	4413      	add	r3, r2
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	461a      	mov	r2, r3
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	4413      	add	r3, r2
 800e44c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e44e:	68fb      	ldr	r3, [r7, #12]
}
 800e450:	4618      	mov	r0, r3
 800e452:	3714      	adds	r7, #20
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr

0800e45c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b087      	sub	sp, #28
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	3301      	adds	r3, #1
 800e472:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e47a:	8a3b      	ldrh	r3, [r7, #16]
 800e47c:	021b      	lsls	r3, r3, #8
 800e47e:	b21a      	sxth	r2, r3
 800e480:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e484:	4313      	orrs	r3, r2
 800e486:	b21b      	sxth	r3, r3
 800e488:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e48a:	89fb      	ldrh	r3, [r7, #14]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	371c      	adds	r7, #28
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e4ae:	2b40      	cmp	r3, #64	; 0x40
 800e4b0:	d005      	beq.n	800e4be <USBD_StdDevReq+0x26>
 800e4b2:	2b40      	cmp	r3, #64	; 0x40
 800e4b4:	d857      	bhi.n	800e566 <USBD_StdDevReq+0xce>
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00f      	beq.n	800e4da <USBD_StdDevReq+0x42>
 800e4ba:	2b20      	cmp	r3, #32
 800e4bc:	d153      	bne.n	800e566 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	32ae      	adds	r2, #174	; 0xae
 800e4c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4cc:	689b      	ldr	r3, [r3, #8]
 800e4ce:	6839      	ldr	r1, [r7, #0]
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	4798      	blx	r3
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	73fb      	strb	r3, [r7, #15]
      break;
 800e4d8:	e04a      	b.n	800e570 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	785b      	ldrb	r3, [r3, #1]
 800e4de:	2b09      	cmp	r3, #9
 800e4e0:	d83b      	bhi.n	800e55a <USBD_StdDevReq+0xc2>
 800e4e2:	a201      	add	r2, pc, #4	; (adr r2, 800e4e8 <USBD_StdDevReq+0x50>)
 800e4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e8:	0800e53d 	.word	0x0800e53d
 800e4ec:	0800e551 	.word	0x0800e551
 800e4f0:	0800e55b 	.word	0x0800e55b
 800e4f4:	0800e547 	.word	0x0800e547
 800e4f8:	0800e55b 	.word	0x0800e55b
 800e4fc:	0800e51b 	.word	0x0800e51b
 800e500:	0800e511 	.word	0x0800e511
 800e504:	0800e55b 	.word	0x0800e55b
 800e508:	0800e533 	.word	0x0800e533
 800e50c:	0800e525 	.word	0x0800e525
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e510:	6839      	ldr	r1, [r7, #0]
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 fa3c 	bl	800e990 <USBD_GetDescriptor>
          break;
 800e518:	e024      	b.n	800e564 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e51a:	6839      	ldr	r1, [r7, #0]
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 fba1 	bl	800ec64 <USBD_SetAddress>
          break;
 800e522:	e01f      	b.n	800e564 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e524:	6839      	ldr	r1, [r7, #0]
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 fbe0 	bl	800ecec <USBD_SetConfig>
 800e52c:	4603      	mov	r3, r0
 800e52e:	73fb      	strb	r3, [r7, #15]
          break;
 800e530:	e018      	b.n	800e564 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e532:	6839      	ldr	r1, [r7, #0]
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f000 fc83 	bl	800ee40 <USBD_GetConfig>
          break;
 800e53a:	e013      	b.n	800e564 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e53c:	6839      	ldr	r1, [r7, #0]
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f000 fcb4 	bl	800eeac <USBD_GetStatus>
          break;
 800e544:	e00e      	b.n	800e564 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e546:	6839      	ldr	r1, [r7, #0]
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 fce3 	bl	800ef14 <USBD_SetFeature>
          break;
 800e54e:	e009      	b.n	800e564 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e550:	6839      	ldr	r1, [r7, #0]
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 fd07 	bl	800ef66 <USBD_ClrFeature>
          break;
 800e558:	e004      	b.n	800e564 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e55a:	6839      	ldr	r1, [r7, #0]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 fd5e 	bl	800f01e <USBD_CtlError>
          break;
 800e562:	bf00      	nop
      }
      break;
 800e564:	e004      	b.n	800e570 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e566:	6839      	ldr	r1, [r7, #0]
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 fd58 	bl	800f01e <USBD_CtlError>
      break;
 800e56e:	bf00      	nop
  }

  return ret;
 800e570:	7bfb      	ldrb	r3, [r7, #15]
}
 800e572:	4618      	mov	r0, r3
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop

0800e57c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e592:	2b40      	cmp	r3, #64	; 0x40
 800e594:	d005      	beq.n	800e5a2 <USBD_StdItfReq+0x26>
 800e596:	2b40      	cmp	r3, #64	; 0x40
 800e598:	d852      	bhi.n	800e640 <USBD_StdItfReq+0xc4>
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d001      	beq.n	800e5a2 <USBD_StdItfReq+0x26>
 800e59e:	2b20      	cmp	r3, #32
 800e5a0:	d14e      	bne.n	800e640 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	3b01      	subs	r3, #1
 800e5ac:	2b02      	cmp	r3, #2
 800e5ae:	d840      	bhi.n	800e632 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	889b      	ldrh	r3, [r3, #4]
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d836      	bhi.n	800e628 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	889b      	ldrh	r3, [r3, #4]
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f7ff fed9 	bl	800e37a <USBD_CoreFindIF>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e5cc:	7bbb      	ldrb	r3, [r7, #14]
 800e5ce:	2bff      	cmp	r3, #255	; 0xff
 800e5d0:	d01d      	beq.n	800e60e <USBD_StdItfReq+0x92>
 800e5d2:	7bbb      	ldrb	r3, [r7, #14]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d11a      	bne.n	800e60e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e5d8:	7bba      	ldrb	r2, [r7, #14]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	32ae      	adds	r2, #174	; 0xae
 800e5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5e2:	689b      	ldr	r3, [r3, #8]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d00f      	beq.n	800e608 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e5e8:	7bba      	ldrb	r2, [r7, #14]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e5f0:	7bba      	ldrb	r2, [r7, #14]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	32ae      	adds	r2, #174	; 0xae
 800e5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5fa:	689b      	ldr	r3, [r3, #8]
 800e5fc:	6839      	ldr	r1, [r7, #0]
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	4798      	blx	r3
 800e602:	4603      	mov	r3, r0
 800e604:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e606:	e004      	b.n	800e612 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e608:	2303      	movs	r3, #3
 800e60a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e60c:	e001      	b.n	800e612 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e60e:	2303      	movs	r3, #3
 800e610:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	88db      	ldrh	r3, [r3, #6]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d110      	bne.n	800e63c <USBD_StdItfReq+0xc0>
 800e61a:	7bfb      	ldrb	r3, [r7, #15]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d10d      	bne.n	800e63c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 fdc7 	bl	800f1b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e626:	e009      	b.n	800e63c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e628:	6839      	ldr	r1, [r7, #0]
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 fcf7 	bl	800f01e <USBD_CtlError>
          break;
 800e630:	e004      	b.n	800e63c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e632:	6839      	ldr	r1, [r7, #0]
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f000 fcf2 	bl	800f01e <USBD_CtlError>
          break;
 800e63a:	e000      	b.n	800e63e <USBD_StdItfReq+0xc2>
          break;
 800e63c:	bf00      	nop
      }
      break;
 800e63e:	e004      	b.n	800e64a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e640:	6839      	ldr	r1, [r7, #0]
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 fceb 	bl	800f01e <USBD_CtlError>
      break;
 800e648:	bf00      	nop
  }

  return ret;
 800e64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e65e:	2300      	movs	r3, #0
 800e660:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	889b      	ldrh	r3, [r3, #4]
 800e666:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e670:	2b40      	cmp	r3, #64	; 0x40
 800e672:	d007      	beq.n	800e684 <USBD_StdEPReq+0x30>
 800e674:	2b40      	cmp	r3, #64	; 0x40
 800e676:	f200 817f 	bhi.w	800e978 <USBD_StdEPReq+0x324>
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d02a      	beq.n	800e6d4 <USBD_StdEPReq+0x80>
 800e67e:	2b20      	cmp	r3, #32
 800e680:	f040 817a 	bne.w	800e978 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e684:	7bbb      	ldrb	r3, [r7, #14]
 800e686:	4619      	mov	r1, r3
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f7ff fe83 	bl	800e394 <USBD_CoreFindEP>
 800e68e:	4603      	mov	r3, r0
 800e690:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e692:	7b7b      	ldrb	r3, [r7, #13]
 800e694:	2bff      	cmp	r3, #255	; 0xff
 800e696:	f000 8174 	beq.w	800e982 <USBD_StdEPReq+0x32e>
 800e69a:	7b7b      	ldrb	r3, [r7, #13]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	f040 8170 	bne.w	800e982 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e6a2:	7b7a      	ldrb	r2, [r7, #13]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e6aa:	7b7a      	ldrb	r2, [r7, #13]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	32ae      	adds	r2, #174	; 0xae
 800e6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f000 8163 	beq.w	800e982 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e6bc:	7b7a      	ldrb	r2, [r7, #13]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	32ae      	adds	r2, #174	; 0xae
 800e6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6c6:	689b      	ldr	r3, [r3, #8]
 800e6c8:	6839      	ldr	r1, [r7, #0]
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	4798      	blx	r3
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e6d2:	e156      	b.n	800e982 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	785b      	ldrb	r3, [r3, #1]
 800e6d8:	2b03      	cmp	r3, #3
 800e6da:	d008      	beq.n	800e6ee <USBD_StdEPReq+0x9a>
 800e6dc:	2b03      	cmp	r3, #3
 800e6de:	f300 8145 	bgt.w	800e96c <USBD_StdEPReq+0x318>
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	f000 809b 	beq.w	800e81e <USBD_StdEPReq+0x1ca>
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d03c      	beq.n	800e766 <USBD_StdEPReq+0x112>
 800e6ec:	e13e      	b.n	800e96c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	2b02      	cmp	r3, #2
 800e6f8:	d002      	beq.n	800e700 <USBD_StdEPReq+0xac>
 800e6fa:	2b03      	cmp	r3, #3
 800e6fc:	d016      	beq.n	800e72c <USBD_StdEPReq+0xd8>
 800e6fe:	e02c      	b.n	800e75a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e700:	7bbb      	ldrb	r3, [r7, #14]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00d      	beq.n	800e722 <USBD_StdEPReq+0xce>
 800e706:	7bbb      	ldrb	r3, [r7, #14]
 800e708:	2b80      	cmp	r3, #128	; 0x80
 800e70a:	d00a      	beq.n	800e722 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e70c:	7bbb      	ldrb	r3, [r7, #14]
 800e70e:	4619      	mov	r1, r3
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f001 f97d 	bl	800fa10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e716:	2180      	movs	r1, #128	; 0x80
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f001 f979 	bl	800fa10 <USBD_LL_StallEP>
 800e71e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e720:	e020      	b.n	800e764 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e722:	6839      	ldr	r1, [r7, #0]
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 fc7a 	bl	800f01e <USBD_CtlError>
              break;
 800e72a:	e01b      	b.n	800e764 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	885b      	ldrh	r3, [r3, #2]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d10e      	bne.n	800e752 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e734:	7bbb      	ldrb	r3, [r7, #14]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00b      	beq.n	800e752 <USBD_StdEPReq+0xfe>
 800e73a:	7bbb      	ldrb	r3, [r7, #14]
 800e73c:	2b80      	cmp	r3, #128	; 0x80
 800e73e:	d008      	beq.n	800e752 <USBD_StdEPReq+0xfe>
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	88db      	ldrh	r3, [r3, #6]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d104      	bne.n	800e752 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e748:	7bbb      	ldrb	r3, [r7, #14]
 800e74a:	4619      	mov	r1, r3
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f001 f95f 	bl	800fa10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 fd2e 	bl	800f1b4 <USBD_CtlSendStatus>

              break;
 800e758:	e004      	b.n	800e764 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e75a:	6839      	ldr	r1, [r7, #0]
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f000 fc5e 	bl	800f01e <USBD_CtlError>
              break;
 800e762:	bf00      	nop
          }
          break;
 800e764:	e107      	b.n	800e976 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e76c:	b2db      	uxtb	r3, r3
 800e76e:	2b02      	cmp	r3, #2
 800e770:	d002      	beq.n	800e778 <USBD_StdEPReq+0x124>
 800e772:	2b03      	cmp	r3, #3
 800e774:	d016      	beq.n	800e7a4 <USBD_StdEPReq+0x150>
 800e776:	e04b      	b.n	800e810 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e778:	7bbb      	ldrb	r3, [r7, #14]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00d      	beq.n	800e79a <USBD_StdEPReq+0x146>
 800e77e:	7bbb      	ldrb	r3, [r7, #14]
 800e780:	2b80      	cmp	r3, #128	; 0x80
 800e782:	d00a      	beq.n	800e79a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e784:	7bbb      	ldrb	r3, [r7, #14]
 800e786:	4619      	mov	r1, r3
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f001 f941 	bl	800fa10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e78e:	2180      	movs	r1, #128	; 0x80
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f001 f93d 	bl	800fa10 <USBD_LL_StallEP>
 800e796:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e798:	e040      	b.n	800e81c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e79a:	6839      	ldr	r1, [r7, #0]
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 fc3e 	bl	800f01e <USBD_CtlError>
              break;
 800e7a2:	e03b      	b.n	800e81c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	885b      	ldrh	r3, [r3, #2]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d136      	bne.n	800e81a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e7ac:	7bbb      	ldrb	r3, [r7, #14]
 800e7ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d004      	beq.n	800e7c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e7b6:	7bbb      	ldrb	r3, [r7, #14]
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f001 f947 	bl	800fa4e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f000 fcf7 	bl	800f1b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e7c6:	7bbb      	ldrb	r3, [r7, #14]
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7ff fde2 	bl	800e394 <USBD_CoreFindEP>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e7d4:	7b7b      	ldrb	r3, [r7, #13]
 800e7d6:	2bff      	cmp	r3, #255	; 0xff
 800e7d8:	d01f      	beq.n	800e81a <USBD_StdEPReq+0x1c6>
 800e7da:	7b7b      	ldrb	r3, [r7, #13]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d11c      	bne.n	800e81a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e7e0:	7b7a      	ldrb	r2, [r7, #13]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e7e8:	7b7a      	ldrb	r2, [r7, #13]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	32ae      	adds	r2, #174	; 0xae
 800e7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7f2:	689b      	ldr	r3, [r3, #8]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d010      	beq.n	800e81a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e7f8:	7b7a      	ldrb	r2, [r7, #13]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	32ae      	adds	r2, #174	; 0xae
 800e7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	6839      	ldr	r1, [r7, #0]
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	4798      	blx	r3
 800e80a:	4603      	mov	r3, r0
 800e80c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e80e:	e004      	b.n	800e81a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e810:	6839      	ldr	r1, [r7, #0]
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 fc03 	bl	800f01e <USBD_CtlError>
              break;
 800e818:	e000      	b.n	800e81c <USBD_StdEPReq+0x1c8>
              break;
 800e81a:	bf00      	nop
          }
          break;
 800e81c:	e0ab      	b.n	800e976 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e824:	b2db      	uxtb	r3, r3
 800e826:	2b02      	cmp	r3, #2
 800e828:	d002      	beq.n	800e830 <USBD_StdEPReq+0x1dc>
 800e82a:	2b03      	cmp	r3, #3
 800e82c:	d032      	beq.n	800e894 <USBD_StdEPReq+0x240>
 800e82e:	e097      	b.n	800e960 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e830:	7bbb      	ldrb	r3, [r7, #14]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d007      	beq.n	800e846 <USBD_StdEPReq+0x1f2>
 800e836:	7bbb      	ldrb	r3, [r7, #14]
 800e838:	2b80      	cmp	r3, #128	; 0x80
 800e83a:	d004      	beq.n	800e846 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e83c:	6839      	ldr	r1, [r7, #0]
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f000 fbed 	bl	800f01e <USBD_CtlError>
                break;
 800e844:	e091      	b.n	800e96a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e846:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	da0b      	bge.n	800e866 <USBD_StdEPReq+0x212>
 800e84e:	7bbb      	ldrb	r3, [r7, #14]
 800e850:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e854:	4613      	mov	r3, r2
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	4413      	add	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	3310      	adds	r3, #16
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	4413      	add	r3, r2
 800e862:	3304      	adds	r3, #4
 800e864:	e00b      	b.n	800e87e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e866:	7bbb      	ldrb	r3, [r7, #14]
 800e868:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e86c:	4613      	mov	r3, r2
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	4413      	add	r3, r2
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	4413      	add	r3, r2
 800e87c:	3304      	adds	r3, #4
 800e87e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	2200      	movs	r2, #0
 800e884:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	2202      	movs	r2, #2
 800e88a:	4619      	mov	r1, r3
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 fc37 	bl	800f100 <USBD_CtlSendData>
              break;
 800e892:	e06a      	b.n	800e96a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	da11      	bge.n	800e8c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e89c:	7bbb      	ldrb	r3, [r7, #14]
 800e89e:	f003 020f 	and.w	r2, r3, #15
 800e8a2:	6879      	ldr	r1, [r7, #4]
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	009b      	lsls	r3, r3, #2
 800e8a8:	4413      	add	r3, r2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	440b      	add	r3, r1
 800e8ae:	3324      	adds	r3, #36	; 0x24
 800e8b0:	881b      	ldrh	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d117      	bne.n	800e8e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e8b6:	6839      	ldr	r1, [r7, #0]
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f000 fbb0 	bl	800f01e <USBD_CtlError>
                  break;
 800e8be:	e054      	b.n	800e96a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e8c0:	7bbb      	ldrb	r3, [r7, #14]
 800e8c2:	f003 020f 	and.w	r2, r3, #15
 800e8c6:	6879      	ldr	r1, [r7, #4]
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	4413      	add	r3, r2
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	440b      	add	r3, r1
 800e8d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e8d6:	881b      	ldrh	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d104      	bne.n	800e8e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e8dc:	6839      	ldr	r1, [r7, #0]
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 fb9d 	bl	800f01e <USBD_CtlError>
                  break;
 800e8e4:	e041      	b.n	800e96a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	da0b      	bge.n	800e906 <USBD_StdEPReq+0x2b2>
 800e8ee:	7bbb      	ldrb	r3, [r7, #14]
 800e8f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8f4:	4613      	mov	r3, r2
 800e8f6:	009b      	lsls	r3, r3, #2
 800e8f8:	4413      	add	r3, r2
 800e8fa:	009b      	lsls	r3, r3, #2
 800e8fc:	3310      	adds	r3, #16
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	4413      	add	r3, r2
 800e902:	3304      	adds	r3, #4
 800e904:	e00b      	b.n	800e91e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e906:	7bbb      	ldrb	r3, [r7, #14]
 800e908:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e90c:	4613      	mov	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4413      	add	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	4413      	add	r3, r2
 800e91c:	3304      	adds	r3, #4
 800e91e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e920:	7bbb      	ldrb	r3, [r7, #14]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d002      	beq.n	800e92c <USBD_StdEPReq+0x2d8>
 800e926:	7bbb      	ldrb	r3, [r7, #14]
 800e928:	2b80      	cmp	r3, #128	; 0x80
 800e92a:	d103      	bne.n	800e934 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	2200      	movs	r2, #0
 800e930:	601a      	str	r2, [r3, #0]
 800e932:	e00e      	b.n	800e952 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e934:	7bbb      	ldrb	r3, [r7, #14]
 800e936:	4619      	mov	r1, r3
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f001 f8a7 	bl	800fa8c <USBD_LL_IsStallEP>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d003      	beq.n	800e94c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	2201      	movs	r2, #1
 800e948:	601a      	str	r2, [r3, #0]
 800e94a:	e002      	b.n	800e952 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	2200      	movs	r2, #0
 800e950:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	2202      	movs	r2, #2
 800e956:	4619      	mov	r1, r3
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f000 fbd1 	bl	800f100 <USBD_CtlSendData>
              break;
 800e95e:	e004      	b.n	800e96a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e960:	6839      	ldr	r1, [r7, #0]
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f000 fb5b 	bl	800f01e <USBD_CtlError>
              break;
 800e968:	bf00      	nop
          }
          break;
 800e96a:	e004      	b.n	800e976 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e96c:	6839      	ldr	r1, [r7, #0]
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 fb55 	bl	800f01e <USBD_CtlError>
          break;
 800e974:	bf00      	nop
      }
      break;
 800e976:	e005      	b.n	800e984 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e978:	6839      	ldr	r1, [r7, #0]
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f000 fb4f 	bl	800f01e <USBD_CtlError>
      break;
 800e980:	e000      	b.n	800e984 <USBD_StdEPReq+0x330>
      break;
 800e982:	bf00      	nop
  }

  return ret;
 800e984:	7bfb      	ldrb	r3, [r7, #15]
}
 800e986:	4618      	mov	r0, r3
 800e988:	3710      	adds	r7, #16
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
	...

0800e990 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e99a:	2300      	movs	r3, #0
 800e99c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	885b      	ldrh	r3, [r3, #2]
 800e9aa:	0a1b      	lsrs	r3, r3, #8
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	3b01      	subs	r3, #1
 800e9b0:	2b06      	cmp	r3, #6
 800e9b2:	f200 8128 	bhi.w	800ec06 <USBD_GetDescriptor+0x276>
 800e9b6:	a201      	add	r2, pc, #4	; (adr r2, 800e9bc <USBD_GetDescriptor+0x2c>)
 800e9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9bc:	0800e9d9 	.word	0x0800e9d9
 800e9c0:	0800e9f1 	.word	0x0800e9f1
 800e9c4:	0800ea31 	.word	0x0800ea31
 800e9c8:	0800ec07 	.word	0x0800ec07
 800e9cc:	0800ec07 	.word	0x0800ec07
 800e9d0:	0800eba7 	.word	0x0800eba7
 800e9d4:	0800ebd3 	.word	0x0800ebd3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	7c12      	ldrb	r2, [r2, #16]
 800e9e4:	f107 0108 	add.w	r1, r7, #8
 800e9e8:	4610      	mov	r0, r2
 800e9ea:	4798      	blx	r3
 800e9ec:	60f8      	str	r0, [r7, #12]
      break;
 800e9ee:	e112      	b.n	800ec16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	7c1b      	ldrb	r3, [r3, #16]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d10d      	bne.n	800ea14 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea00:	f107 0208 	add.w	r2, r7, #8
 800ea04:	4610      	mov	r0, r2
 800ea06:	4798      	blx	r3
 800ea08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	2202      	movs	r2, #2
 800ea10:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ea12:	e100      	b.n	800ec16 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea1c:	f107 0208 	add.w	r2, r7, #8
 800ea20:	4610      	mov	r0, r2
 800ea22:	4798      	blx	r3
 800ea24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	2202      	movs	r2, #2
 800ea2c:	701a      	strb	r2, [r3, #0]
      break;
 800ea2e:	e0f2      	b.n	800ec16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	885b      	ldrh	r3, [r3, #2]
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	2b05      	cmp	r3, #5
 800ea38:	f200 80ac 	bhi.w	800eb94 <USBD_GetDescriptor+0x204>
 800ea3c:	a201      	add	r2, pc, #4	; (adr r2, 800ea44 <USBD_GetDescriptor+0xb4>)
 800ea3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea42:	bf00      	nop
 800ea44:	0800ea5d 	.word	0x0800ea5d
 800ea48:	0800ea91 	.word	0x0800ea91
 800ea4c:	0800eac5 	.word	0x0800eac5
 800ea50:	0800eaf9 	.word	0x0800eaf9
 800ea54:	0800eb2d 	.word	0x0800eb2d
 800ea58:	0800eb61 	.word	0x0800eb61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d00b      	beq.n	800ea80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	7c12      	ldrb	r2, [r2, #16]
 800ea74:	f107 0108 	add.w	r1, r7, #8
 800ea78:	4610      	mov	r0, r2
 800ea7a:	4798      	blx	r3
 800ea7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea7e:	e091      	b.n	800eba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ea80:	6839      	ldr	r1, [r7, #0]
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 facb 	bl	800f01e <USBD_CtlError>
            err++;
 800ea88:	7afb      	ldrb	r3, [r7, #11]
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ea8e:	e089      	b.n	800eba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea96:	689b      	ldr	r3, [r3, #8]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00b      	beq.n	800eab4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaa2:	689b      	ldr	r3, [r3, #8]
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	7c12      	ldrb	r2, [r2, #16]
 800eaa8:	f107 0108 	add.w	r1, r7, #8
 800eaac:	4610      	mov	r0, r2
 800eaae:	4798      	blx	r3
 800eab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eab2:	e077      	b.n	800eba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eab4:	6839      	ldr	r1, [r7, #0]
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 fab1 	bl	800f01e <USBD_CtlError>
            err++;
 800eabc:	7afb      	ldrb	r3, [r7, #11]
 800eabe:	3301      	adds	r3, #1
 800eac0:	72fb      	strb	r3, [r7, #11]
          break;
 800eac2:	e06f      	b.n	800eba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00b      	beq.n	800eae8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	7c12      	ldrb	r2, [r2, #16]
 800eadc:	f107 0108 	add.w	r1, r7, #8
 800eae0:	4610      	mov	r0, r2
 800eae2:	4798      	blx	r3
 800eae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eae6:	e05d      	b.n	800eba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eae8:	6839      	ldr	r1, [r7, #0]
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 fa97 	bl	800f01e <USBD_CtlError>
            err++;
 800eaf0:	7afb      	ldrb	r3, [r7, #11]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	72fb      	strb	r3, [r7, #11]
          break;
 800eaf6:	e055      	b.n	800eba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eafe:	691b      	ldr	r3, [r3, #16]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d00b      	beq.n	800eb1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb0a:	691b      	ldr	r3, [r3, #16]
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	7c12      	ldrb	r2, [r2, #16]
 800eb10:	f107 0108 	add.w	r1, r7, #8
 800eb14:	4610      	mov	r0, r2
 800eb16:	4798      	blx	r3
 800eb18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb1a:	e043      	b.n	800eba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb1c:	6839      	ldr	r1, [r7, #0]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 fa7d 	bl	800f01e <USBD_CtlError>
            err++;
 800eb24:	7afb      	ldrb	r3, [r7, #11]
 800eb26:	3301      	adds	r3, #1
 800eb28:	72fb      	strb	r3, [r7, #11]
          break;
 800eb2a:	e03b      	b.n	800eba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb32:	695b      	ldr	r3, [r3, #20]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00b      	beq.n	800eb50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb3e:	695b      	ldr	r3, [r3, #20]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	7c12      	ldrb	r2, [r2, #16]
 800eb44:	f107 0108 	add.w	r1, r7, #8
 800eb48:	4610      	mov	r0, r2
 800eb4a:	4798      	blx	r3
 800eb4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb4e:	e029      	b.n	800eba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb50:	6839      	ldr	r1, [r7, #0]
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fa63 	bl	800f01e <USBD_CtlError>
            err++;
 800eb58:	7afb      	ldrb	r3, [r7, #11]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	72fb      	strb	r3, [r7, #11]
          break;
 800eb5e:	e021      	b.n	800eba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb66:	699b      	ldr	r3, [r3, #24]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00b      	beq.n	800eb84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb72:	699b      	ldr	r3, [r3, #24]
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	7c12      	ldrb	r2, [r2, #16]
 800eb78:	f107 0108 	add.w	r1, r7, #8
 800eb7c:	4610      	mov	r0, r2
 800eb7e:	4798      	blx	r3
 800eb80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb82:	e00f      	b.n	800eba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb84:	6839      	ldr	r1, [r7, #0]
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 fa49 	bl	800f01e <USBD_CtlError>
            err++;
 800eb8c:	7afb      	ldrb	r3, [r7, #11]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	72fb      	strb	r3, [r7, #11]
          break;
 800eb92:	e007      	b.n	800eba4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800eb94:	6839      	ldr	r1, [r7, #0]
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f000 fa41 	bl	800f01e <USBD_CtlError>
          err++;
 800eb9c:	7afb      	ldrb	r3, [r7, #11]
 800eb9e:	3301      	adds	r3, #1
 800eba0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800eba2:	bf00      	nop
      }
      break;
 800eba4:	e037      	b.n	800ec16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	7c1b      	ldrb	r3, [r3, #16]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d109      	bne.n	800ebc2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebb6:	f107 0208 	add.w	r2, r7, #8
 800ebba:	4610      	mov	r0, r2
 800ebbc:	4798      	blx	r3
 800ebbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ebc0:	e029      	b.n	800ec16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ebc2:	6839      	ldr	r1, [r7, #0]
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 fa2a 	bl	800f01e <USBD_CtlError>
        err++;
 800ebca:	7afb      	ldrb	r3, [r7, #11]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	72fb      	strb	r3, [r7, #11]
      break;
 800ebd0:	e021      	b.n	800ec16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	7c1b      	ldrb	r3, [r3, #16]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d10d      	bne.n	800ebf6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebe2:	f107 0208 	add.w	r2, r7, #8
 800ebe6:	4610      	mov	r0, r2
 800ebe8:	4798      	blx	r3
 800ebea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	2207      	movs	r2, #7
 800ebf2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ebf4:	e00f      	b.n	800ec16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ebf6:	6839      	ldr	r1, [r7, #0]
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 fa10 	bl	800f01e <USBD_CtlError>
        err++;
 800ebfe:	7afb      	ldrb	r3, [r7, #11]
 800ec00:	3301      	adds	r3, #1
 800ec02:	72fb      	strb	r3, [r7, #11]
      break;
 800ec04:	e007      	b.n	800ec16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ec06:	6839      	ldr	r1, [r7, #0]
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 fa08 	bl	800f01e <USBD_CtlError>
      err++;
 800ec0e:	7afb      	ldrb	r3, [r7, #11]
 800ec10:	3301      	adds	r3, #1
 800ec12:	72fb      	strb	r3, [r7, #11]
      break;
 800ec14:	bf00      	nop
  }

  if (err != 0U)
 800ec16:	7afb      	ldrb	r3, [r7, #11]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d11e      	bne.n	800ec5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	88db      	ldrh	r3, [r3, #6]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d016      	beq.n	800ec52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ec24:	893b      	ldrh	r3, [r7, #8]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d00e      	beq.n	800ec48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	88da      	ldrh	r2, [r3, #6]
 800ec2e:	893b      	ldrh	r3, [r7, #8]
 800ec30:	4293      	cmp	r3, r2
 800ec32:	bf28      	it	cs
 800ec34:	4613      	movcs	r3, r2
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ec3a:	893b      	ldrh	r3, [r7, #8]
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	68f9      	ldr	r1, [r7, #12]
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f000 fa5d 	bl	800f100 <USBD_CtlSendData>
 800ec46:	e009      	b.n	800ec5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ec48:	6839      	ldr	r1, [r7, #0]
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f000 f9e7 	bl	800f01e <USBD_CtlError>
 800ec50:	e004      	b.n	800ec5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 faae 	bl	800f1b4 <USBD_CtlSendStatus>
 800ec58:	e000      	b.n	800ec5c <USBD_GetDescriptor+0x2cc>
    return;
 800ec5a:	bf00      	nop
  }
}
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop

0800ec64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	889b      	ldrh	r3, [r3, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d131      	bne.n	800ecda <USBD_SetAddress+0x76>
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	88db      	ldrh	r3, [r3, #6]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d12d      	bne.n	800ecda <USBD_SetAddress+0x76>
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	885b      	ldrh	r3, [r3, #2]
 800ec82:	2b7f      	cmp	r3, #127	; 0x7f
 800ec84:	d829      	bhi.n	800ecda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	885b      	ldrh	r3, [r3, #2]
 800ec8a:	b2db      	uxtb	r3, r3
 800ec8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	2b03      	cmp	r3, #3
 800ec9c:	d104      	bne.n	800eca8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ec9e:	6839      	ldr	r1, [r7, #0]
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f9bc 	bl	800f01e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eca6:	e01d      	b.n	800ece4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	7bfa      	ldrb	r2, [r7, #15]
 800ecac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ecb0:	7bfb      	ldrb	r3, [r7, #15]
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 ff15 	bl	800fae4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 fa7a 	bl	800f1b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ecc0:	7bfb      	ldrb	r3, [r7, #15]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d004      	beq.n	800ecd0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2202      	movs	r2, #2
 800ecca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecce:	e009      	b.n	800ece4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecd8:	e004      	b.n	800ece4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ecda:	6839      	ldr	r1, [r7, #0]
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 f99e 	bl	800f01e <USBD_CtlError>
  }
}
 800ece2:	bf00      	nop
 800ece4:	bf00      	nop
 800ece6:	3710      	adds	r7, #16
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	885b      	ldrh	r3, [r3, #2]
 800ecfe:	b2da      	uxtb	r2, r3
 800ed00:	4b4e      	ldr	r3, [pc, #312]	; (800ee3c <USBD_SetConfig+0x150>)
 800ed02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ed04:	4b4d      	ldr	r3, [pc, #308]	; (800ee3c <USBD_SetConfig+0x150>)
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d905      	bls.n	800ed18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ed0c:	6839      	ldr	r1, [r7, #0]
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f000 f985 	bl	800f01e <USBD_CtlError>
    return USBD_FAIL;
 800ed14:	2303      	movs	r3, #3
 800ed16:	e08c      	b.n	800ee32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	2b02      	cmp	r3, #2
 800ed22:	d002      	beq.n	800ed2a <USBD_SetConfig+0x3e>
 800ed24:	2b03      	cmp	r3, #3
 800ed26:	d029      	beq.n	800ed7c <USBD_SetConfig+0x90>
 800ed28:	e075      	b.n	800ee16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ed2a:	4b44      	ldr	r3, [pc, #272]	; (800ee3c <USBD_SetConfig+0x150>)
 800ed2c:	781b      	ldrb	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d020      	beq.n	800ed74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ed32:	4b42      	ldr	r3, [pc, #264]	; (800ee3c <USBD_SetConfig+0x150>)
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	461a      	mov	r2, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ed3c:	4b3f      	ldr	r3, [pc, #252]	; (800ee3c <USBD_SetConfig+0x150>)
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	4619      	mov	r1, r3
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f7fe ffe1 	bl	800dd0a <USBD_SetClassConfig>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ed4c:	7bfb      	ldrb	r3, [r7, #15]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d008      	beq.n	800ed64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ed52:	6839      	ldr	r1, [r7, #0]
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f000 f962 	bl	800f01e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2202      	movs	r2, #2
 800ed5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ed62:	e065      	b.n	800ee30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f000 fa25 	bl	800f1b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2203      	movs	r2, #3
 800ed6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ed72:	e05d      	b.n	800ee30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f000 fa1d 	bl	800f1b4 <USBD_CtlSendStatus>
      break;
 800ed7a:	e059      	b.n	800ee30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ed7c:	4b2f      	ldr	r3, [pc, #188]	; (800ee3c <USBD_SetConfig+0x150>)
 800ed7e:	781b      	ldrb	r3, [r3, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d112      	bne.n	800edaa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2202      	movs	r2, #2
 800ed88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ed8c:	4b2b      	ldr	r3, [pc, #172]	; (800ee3c <USBD_SetConfig+0x150>)
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	461a      	mov	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ed96:	4b29      	ldr	r3, [pc, #164]	; (800ee3c <USBD_SetConfig+0x150>)
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f7fe ffd0 	bl	800dd42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 fa06 	bl	800f1b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eda8:	e042      	b.n	800ee30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800edaa:	4b24      	ldr	r3, [pc, #144]	; (800ee3c <USBD_SetConfig+0x150>)
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	461a      	mov	r2, r3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d02a      	beq.n	800ee0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	4619      	mov	r1, r3
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f7fe ffbe 	bl	800dd42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800edc6:	4b1d      	ldr	r3, [pc, #116]	; (800ee3c <USBD_SetConfig+0x150>)
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	461a      	mov	r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800edd0:	4b1a      	ldr	r3, [pc, #104]	; (800ee3c <USBD_SetConfig+0x150>)
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	4619      	mov	r1, r3
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f7fe ff97 	bl	800dd0a <USBD_SetClassConfig>
 800eddc:	4603      	mov	r3, r0
 800edde:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ede0:	7bfb      	ldrb	r3, [r7, #15]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00f      	beq.n	800ee06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ede6:	6839      	ldr	r1, [r7, #0]
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f000 f918 	bl	800f01e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	4619      	mov	r1, r3
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7fe ffa3 	bl	800dd42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2202      	movs	r2, #2
 800ee00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ee04:	e014      	b.n	800ee30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f000 f9d4 	bl	800f1b4 <USBD_CtlSendStatus>
      break;
 800ee0c:	e010      	b.n	800ee30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f000 f9d0 	bl	800f1b4 <USBD_CtlSendStatus>
      break;
 800ee14:	e00c      	b.n	800ee30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ee16:	6839      	ldr	r1, [r7, #0]
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f000 f900 	bl	800f01e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee1e:	4b07      	ldr	r3, [pc, #28]	; (800ee3c <USBD_SetConfig+0x150>)
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	4619      	mov	r1, r3
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7fe ff8c 	bl	800dd42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ee2a:	2303      	movs	r3, #3
 800ee2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ee2e:	bf00      	nop
  }

  return ret;
 800ee30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3710      	adds	r7, #16
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	24000de8 	.word	0x24000de8

0800ee40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	88db      	ldrh	r3, [r3, #6]
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d004      	beq.n	800ee5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ee52:	6839      	ldr	r1, [r7, #0]
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 f8e2 	bl	800f01e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ee5a:	e023      	b.n	800eea4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	2b02      	cmp	r3, #2
 800ee66:	dc02      	bgt.n	800ee6e <USBD_GetConfig+0x2e>
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	dc03      	bgt.n	800ee74 <USBD_GetConfig+0x34>
 800ee6c:	e015      	b.n	800ee9a <USBD_GetConfig+0x5a>
 800ee6e:	2b03      	cmp	r3, #3
 800ee70:	d00b      	beq.n	800ee8a <USBD_GetConfig+0x4a>
 800ee72:	e012      	b.n	800ee9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2200      	movs	r2, #0
 800ee78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	3308      	adds	r3, #8
 800ee7e:	2201      	movs	r2, #1
 800ee80:	4619      	mov	r1, r3
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f000 f93c 	bl	800f100 <USBD_CtlSendData>
        break;
 800ee88:	e00c      	b.n	800eea4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	3304      	adds	r3, #4
 800ee8e:	2201      	movs	r2, #1
 800ee90:	4619      	mov	r1, r3
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 f934 	bl	800f100 <USBD_CtlSendData>
        break;
 800ee98:	e004      	b.n	800eea4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ee9a:	6839      	ldr	r1, [r7, #0]
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 f8be 	bl	800f01e <USBD_CtlError>
        break;
 800eea2:	bf00      	nop
}
 800eea4:	bf00      	nop
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eebc:	b2db      	uxtb	r3, r3
 800eebe:	3b01      	subs	r3, #1
 800eec0:	2b02      	cmp	r3, #2
 800eec2:	d81e      	bhi.n	800ef02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	88db      	ldrh	r3, [r3, #6]
 800eec8:	2b02      	cmp	r3, #2
 800eeca:	d004      	beq.n	800eed6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800eecc:	6839      	ldr	r1, [r7, #0]
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f000 f8a5 	bl	800f01e <USBD_CtlError>
        break;
 800eed4:	e01a      	b.n	800ef0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2201      	movs	r2, #1
 800eeda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d005      	beq.n	800eef2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	68db      	ldr	r3, [r3, #12]
 800eeea:	f043 0202 	orr.w	r2, r3, #2
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	330c      	adds	r3, #12
 800eef6:	2202      	movs	r2, #2
 800eef8:	4619      	mov	r1, r3
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 f900 	bl	800f100 <USBD_CtlSendData>
      break;
 800ef00:	e004      	b.n	800ef0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ef02:	6839      	ldr	r1, [r7, #0]
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f000 f88a 	bl	800f01e <USBD_CtlError>
      break;
 800ef0a:	bf00      	nop
  }
}
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	885b      	ldrh	r3, [r3, #2]
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d107      	bne.n	800ef36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2201      	movs	r2, #1
 800ef2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f000 f940 	bl	800f1b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ef34:	e013      	b.n	800ef5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	885b      	ldrh	r3, [r3, #2]
 800ef3a:	2b02      	cmp	r3, #2
 800ef3c:	d10b      	bne.n	800ef56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	889b      	ldrh	r3, [r3, #4]
 800ef42:	0a1b      	lsrs	r3, r3, #8
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	b2da      	uxtb	r2, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 f930 	bl	800f1b4 <USBD_CtlSendStatus>
}
 800ef54:	e003      	b.n	800ef5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ef56:	6839      	ldr	r1, [r7, #0]
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f000 f860 	bl	800f01e <USBD_CtlError>
}
 800ef5e:	bf00      	nop
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}

0800ef66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef66:	b580      	push	{r7, lr}
 800ef68:	b082      	sub	sp, #8
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
 800ef6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	2b02      	cmp	r3, #2
 800ef7c:	d80b      	bhi.n	800ef96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	885b      	ldrh	r3, [r3, #2]
 800ef82:	2b01      	cmp	r3, #1
 800ef84:	d10c      	bne.n	800efa0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 f910 	bl	800f1b4 <USBD_CtlSendStatus>
      }
      break;
 800ef94:	e004      	b.n	800efa0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ef96:	6839      	ldr	r1, [r7, #0]
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 f840 	bl	800f01e <USBD_CtlError>
      break;
 800ef9e:	e000      	b.n	800efa2 <USBD_ClrFeature+0x3c>
      break;
 800efa0:	bf00      	nop
  }
}
 800efa2:	bf00      	nop
 800efa4:	3708      	adds	r7, #8
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800efaa:	b580      	push	{r7, lr}
 800efac:	b084      	sub	sp, #16
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
 800efb2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	781a      	ldrb	r2, [r3, #0]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	3301      	adds	r3, #1
 800efc4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	781a      	ldrb	r2, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	3301      	adds	r3, #1
 800efd2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f7ff fa41 	bl	800e45c <SWAPBYTE>
 800efda:	4603      	mov	r3, r0
 800efdc:	461a      	mov	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	3301      	adds	r3, #1
 800efe6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	3301      	adds	r3, #1
 800efec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f7ff fa34 	bl	800e45c <SWAPBYTE>
 800eff4:	4603      	mov	r3, r0
 800eff6:	461a      	mov	r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	3301      	adds	r3, #1
 800f000:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	3301      	adds	r3, #1
 800f006:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f008:	68f8      	ldr	r0, [r7, #12]
 800f00a:	f7ff fa27 	bl	800e45c <SWAPBYTE>
 800f00e:	4603      	mov	r3, r0
 800f010:	461a      	mov	r2, r3
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	80da      	strh	r2, [r3, #6]
}
 800f016:	bf00      	nop
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f01e:	b580      	push	{r7, lr}
 800f020:	b082      	sub	sp, #8
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
 800f026:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f028:	2180      	movs	r1, #128	; 0x80
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f000 fcf0 	bl	800fa10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f030:	2100      	movs	r1, #0
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f000 fcec 	bl	800fa10 <USBD_LL_StallEP>
}
 800f038:	bf00      	nop
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b086      	sub	sp, #24
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f04c:	2300      	movs	r3, #0
 800f04e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d036      	beq.n	800f0c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f05a:	6938      	ldr	r0, [r7, #16]
 800f05c:	f000 f836 	bl	800f0cc <USBD_GetLen>
 800f060:	4603      	mov	r3, r0
 800f062:	3301      	adds	r3, #1
 800f064:	b29b      	uxth	r3, r3
 800f066:	005b      	lsls	r3, r3, #1
 800f068:	b29a      	uxth	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f06e:	7dfb      	ldrb	r3, [r7, #23]
 800f070:	68ba      	ldr	r2, [r7, #8]
 800f072:	4413      	add	r3, r2
 800f074:	687a      	ldr	r2, [r7, #4]
 800f076:	7812      	ldrb	r2, [r2, #0]
 800f078:	701a      	strb	r2, [r3, #0]
  idx++;
 800f07a:	7dfb      	ldrb	r3, [r7, #23]
 800f07c:	3301      	adds	r3, #1
 800f07e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f080:	7dfb      	ldrb	r3, [r7, #23]
 800f082:	68ba      	ldr	r2, [r7, #8]
 800f084:	4413      	add	r3, r2
 800f086:	2203      	movs	r2, #3
 800f088:	701a      	strb	r2, [r3, #0]
  idx++;
 800f08a:	7dfb      	ldrb	r3, [r7, #23]
 800f08c:	3301      	adds	r3, #1
 800f08e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f090:	e013      	b.n	800f0ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f092:	7dfb      	ldrb	r3, [r7, #23]
 800f094:	68ba      	ldr	r2, [r7, #8]
 800f096:	4413      	add	r3, r2
 800f098:	693a      	ldr	r2, [r7, #16]
 800f09a:	7812      	ldrb	r2, [r2, #0]
 800f09c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	613b      	str	r3, [r7, #16]
    idx++;
 800f0a4:	7dfb      	ldrb	r3, [r7, #23]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f0aa:	7dfb      	ldrb	r3, [r7, #23]
 800f0ac:	68ba      	ldr	r2, [r7, #8]
 800f0ae:	4413      	add	r3, r2
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	701a      	strb	r2, [r3, #0]
    idx++;
 800f0b4:	7dfb      	ldrb	r3, [r7, #23]
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d1e7      	bne.n	800f092 <USBD_GetString+0x52>
 800f0c2:	e000      	b.n	800f0c6 <USBD_GetString+0x86>
    return;
 800f0c4:	bf00      	nop
  }
}
 800f0c6:	3718      	adds	r7, #24
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b085      	sub	sp, #20
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f0dc:	e005      	b.n	800f0ea <USBD_GetLen+0x1e>
  {
    len++;
 800f0de:	7bfb      	ldrb	r3, [r7, #15]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d1f5      	bne.n	800f0de <USBD_GetLen+0x12>
  }

  return len;
 800f0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3714      	adds	r7, #20
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b084      	sub	sp, #16
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2202      	movs	r2, #2
 800f110:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	68ba      	ldr	r2, [r7, #8]
 800f124:	2100      	movs	r1, #0
 800f126:	68f8      	ldr	r0, [r7, #12]
 800f128:	f000 fcfb 	bl	800fb22 <USBD_LL_Transmit>

  return USBD_OK;
 800f12c:	2300      	movs	r3, #0
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}

0800f136 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f136:	b580      	push	{r7, lr}
 800f138:	b084      	sub	sp, #16
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	60f8      	str	r0, [r7, #12]
 800f13e:	60b9      	str	r1, [r7, #8]
 800f140:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	68ba      	ldr	r2, [r7, #8]
 800f146:	2100      	movs	r1, #0
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f000 fcea 	bl	800fb22 <USBD_LL_Transmit>

  return USBD_OK;
 800f14e:	2300      	movs	r3, #0
}
 800f150:	4618      	mov	r0, r3
 800f152:	3710      	adds	r7, #16
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	2203      	movs	r2, #3
 800f168:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	687a      	ldr	r2, [r7, #4]
 800f178:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	68ba      	ldr	r2, [r7, #8]
 800f180:	2100      	movs	r1, #0
 800f182:	68f8      	ldr	r0, [r7, #12]
 800f184:	f000 fcee 	bl	800fb64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f188:	2300      	movs	r3, #0
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3710      	adds	r7, #16
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}

0800f192 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f192:	b580      	push	{r7, lr}
 800f194:	b084      	sub	sp, #16
 800f196:	af00      	add	r7, sp, #0
 800f198:	60f8      	str	r0, [r7, #12]
 800f19a:	60b9      	str	r1, [r7, #8]
 800f19c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	68ba      	ldr	r2, [r7, #8]
 800f1a2:	2100      	movs	r1, #0
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f000 fcdd 	bl	800fb64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1aa:	2300      	movs	r3, #0
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3710      	adds	r7, #16
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2204      	movs	r2, #4
 800f1c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f000 fca9 	bl	800fb22 <USBD_LL_Transmit>

  return USBD_OK;
 800f1d0:	2300      	movs	r3, #0
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3708      	adds	r7, #8
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b082      	sub	sp, #8
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2205      	movs	r2, #5
 800f1e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 fcb7 	bl	800fb64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1f6:	2300      	movs	r3, #0
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3708      	adds	r7, #8
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800f204:	2201      	movs	r2, #1
 800f206:	4913      	ldr	r1, [pc, #76]	; (800f254 <MX_USB_DEVICE_Init+0x54>)
 800f208:	4813      	ldr	r0, [pc, #76]	; (800f258 <MX_USB_DEVICE_Init+0x58>)
 800f20a:	f7fe fd01 	bl	800dc10 <USBD_Init>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d001      	beq.n	800f218 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f214:	f7f3 f91a 	bl	800244c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800f218:	4910      	ldr	r1, [pc, #64]	; (800f25c <MX_USB_DEVICE_Init+0x5c>)
 800f21a:	480f      	ldr	r0, [pc, #60]	; (800f258 <MX_USB_DEVICE_Init+0x58>)
 800f21c:	f7fe fd28 	bl	800dc70 <USBD_RegisterClass>
 800f220:	4603      	mov	r3, r0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d001      	beq.n	800f22a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f226:	f7f3 f911 	bl	800244c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800f22a:	490d      	ldr	r1, [pc, #52]	; (800f260 <MX_USB_DEVICE_Init+0x60>)
 800f22c:	480a      	ldr	r0, [pc, #40]	; (800f258 <MX_USB_DEVICE_Init+0x58>)
 800f22e:	f7fe fc1f 	bl	800da70 <USBD_CDC_RegisterInterface>
 800f232:	4603      	mov	r3, r0
 800f234:	2b00      	cmp	r3, #0
 800f236:	d001      	beq.n	800f23c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f238:	f7f3 f908 	bl	800244c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800f23c:	4806      	ldr	r0, [pc, #24]	; (800f258 <MX_USB_DEVICE_Init+0x58>)
 800f23e:	f7fe fd4d 	bl	800dcdc <USBD_Start>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d001      	beq.n	800f24c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f248:	f7f3 f900 	bl	800244c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f24c:	f7f9 f974 	bl	8008538 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f250:	bf00      	nop
 800f252:	bd80      	pop	{r7, pc}
 800f254:	240001bc 	.word	0x240001bc
 800f258:	24000dec 	.word	0x24000dec
 800f25c:	24000128 	.word	0x24000128
 800f260:	240001a8 	.word	0x240001a8

0800f264 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800f268:	2200      	movs	r2, #0
 800f26a:	4905      	ldr	r1, [pc, #20]	; (800f280 <CDC_Init_HS+0x1c>)
 800f26c:	4805      	ldr	r0, [pc, #20]	; (800f284 <CDC_Init_HS+0x20>)
 800f26e:	f7fe fc19 	bl	800daa4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800f272:	4905      	ldr	r1, [pc, #20]	; (800f288 <CDC_Init_HS+0x24>)
 800f274:	4803      	ldr	r0, [pc, #12]	; (800f284 <CDC_Init_HS+0x20>)
 800f276:	f7fe fc37 	bl	800dae8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f27a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	240018c8 	.word	0x240018c8
 800f284:	24000dec 	.word	0x24000dec
 800f288:	240010c8 	.word	0x240010c8

0800f28c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800f28c:	b480      	push	{r7}
 800f28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800f290:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800f292:	4618      	mov	r0, r3
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	6039      	str	r1, [r7, #0]
 800f2a6:	71fb      	strb	r3, [r7, #7]
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800f2ac:	79fb      	ldrb	r3, [r7, #7]
 800f2ae:	2b23      	cmp	r3, #35	; 0x23
 800f2b0:	d84a      	bhi.n	800f348 <CDC_Control_HS+0xac>
 800f2b2:	a201      	add	r2, pc, #4	; (adr r2, 800f2b8 <CDC_Control_HS+0x1c>)
 800f2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b8:	0800f349 	.word	0x0800f349
 800f2bc:	0800f349 	.word	0x0800f349
 800f2c0:	0800f349 	.word	0x0800f349
 800f2c4:	0800f349 	.word	0x0800f349
 800f2c8:	0800f349 	.word	0x0800f349
 800f2cc:	0800f349 	.word	0x0800f349
 800f2d0:	0800f349 	.word	0x0800f349
 800f2d4:	0800f349 	.word	0x0800f349
 800f2d8:	0800f349 	.word	0x0800f349
 800f2dc:	0800f349 	.word	0x0800f349
 800f2e0:	0800f349 	.word	0x0800f349
 800f2e4:	0800f349 	.word	0x0800f349
 800f2e8:	0800f349 	.word	0x0800f349
 800f2ec:	0800f349 	.word	0x0800f349
 800f2f0:	0800f349 	.word	0x0800f349
 800f2f4:	0800f349 	.word	0x0800f349
 800f2f8:	0800f349 	.word	0x0800f349
 800f2fc:	0800f349 	.word	0x0800f349
 800f300:	0800f349 	.word	0x0800f349
 800f304:	0800f349 	.word	0x0800f349
 800f308:	0800f349 	.word	0x0800f349
 800f30c:	0800f349 	.word	0x0800f349
 800f310:	0800f349 	.word	0x0800f349
 800f314:	0800f349 	.word	0x0800f349
 800f318:	0800f349 	.word	0x0800f349
 800f31c:	0800f349 	.word	0x0800f349
 800f320:	0800f349 	.word	0x0800f349
 800f324:	0800f349 	.word	0x0800f349
 800f328:	0800f349 	.word	0x0800f349
 800f32c:	0800f349 	.word	0x0800f349
 800f330:	0800f349 	.word	0x0800f349
 800f334:	0800f349 	.word	0x0800f349
 800f338:	0800f349 	.word	0x0800f349
 800f33c:	0800f349 	.word	0x0800f349
 800f340:	0800f349 	.word	0x0800f349
 800f344:	0800f349 	.word	0x0800f349
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f348:	bf00      	nop
  }

  return (USBD_OK);
 800f34a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	370c      	adds	r7, #12
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800f362:	6879      	ldr	r1, [r7, #4]
 800f364:	480e      	ldr	r0, [pc, #56]	; (800f3a0 <CDC_Receive_HS+0x48>)
 800f366:	f7fe fbbf 	bl	800dae8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800f36a:	480d      	ldr	r0, [pc, #52]	; (800f3a0 <CDC_Receive_HS+0x48>)
 800f36c:	f7fe fc1a 	bl	800dba4 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	60fb      	str	r3, [r7, #12]
  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 800f376:	4b0b      	ldr	r3, [pc, #44]	; (800f3a4 <CDC_Receive_HS+0x4c>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4a0b      	ldr	r2, [pc, #44]	; (800f3a8 <CDC_Receive_HS+0x50>)
 800f37c:	4413      	add	r3, r2
 800f37e:	68fa      	ldr	r2, [r7, #12]
 800f380:	6879      	ldr	r1, [r7, #4]
 800f382:	4618      	mov	r0, r3
 800f384:	f000 fca0 	bl	800fcc8 <memcpy>
  usbBytesReady += cpyLen;
 800f388:	4b06      	ldr	r3, [pc, #24]	; (800f3a4 <CDC_Receive_HS+0x4c>)
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	4413      	add	r3, r2
 800f390:	4a04      	ldr	r2, [pc, #16]	; (800f3a4 <CDC_Receive_HS+0x4c>)
 800f392:	6013      	str	r3, [r2, #0]

  return (USBD_OK);
 800f394:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800f396:	4618      	mov	r0, r3
 800f398:	3710      	adds	r7, #16
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	24000dec 	.word	0x24000dec
 800f3a4:	240009d0 	.word	0x240009d0
 800f3a8:	240008d0 	.word	0x240008d0

0800f3ac <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800f3bc:	4b0d      	ldr	r3, [pc, #52]	; (800f3f4 <CDC_Transmit_HS+0x48>)
 800f3be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d001      	beq.n	800f3d2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	e00b      	b.n	800f3ea <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800f3d2:	887b      	ldrh	r3, [r7, #2]
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	6879      	ldr	r1, [r7, #4]
 800f3d8:	4806      	ldr	r0, [pc, #24]	; (800f3f4 <CDC_Transmit_HS+0x48>)
 800f3da:	f7fe fb63 	bl	800daa4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800f3de:	4805      	ldr	r0, [pc, #20]	; (800f3f4 <CDC_Transmit_HS+0x48>)
 800f3e0:	f7fe fba0 	bl	800db24 <USBD_CDC_TransmitPacket>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800f3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3710      	adds	r7, #16
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	24000dec 	.word	0x24000dec

0800f3f8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b087      	sub	sp, #28
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	4613      	mov	r3, r2
 800f404:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f406:	2300      	movs	r3, #0
 800f408:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800f40a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f40e:	4618      	mov	r0, r3
 800f410:	371c      	adds	r7, #28
 800f412:	46bd      	mov	sp, r7
 800f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f418:	4770      	bx	lr
	...

0800f41c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	4603      	mov	r3, r0
 800f424:	6039      	str	r1, [r7, #0]
 800f426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	2212      	movs	r2, #18
 800f42c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800f42e:	4b03      	ldr	r3, [pc, #12]	; (800f43c <USBD_HS_DeviceDescriptor+0x20>)
}
 800f430:	4618      	mov	r0, r3
 800f432:	370c      	adds	r7, #12
 800f434:	46bd      	mov	sp, r7
 800f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43a:	4770      	bx	lr
 800f43c:	240001d8 	.word	0x240001d8

0800f440 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f440:	b480      	push	{r7}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
 800f446:	4603      	mov	r3, r0
 800f448:	6039      	str	r1, [r7, #0]
 800f44a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	2204      	movs	r2, #4
 800f450:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f452:	4b03      	ldr	r3, [pc, #12]	; (800f460 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800f454:	4618      	mov	r0, r3
 800f456:	370c      	adds	r7, #12
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr
 800f460:	240001ec 	.word	0x240001ec

0800f464 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
 800f46a:	4603      	mov	r3, r0
 800f46c:	6039      	str	r1, [r7, #0]
 800f46e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f470:	79fb      	ldrb	r3, [r7, #7]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d105      	bne.n	800f482 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f476:	683a      	ldr	r2, [r7, #0]
 800f478:	4907      	ldr	r1, [pc, #28]	; (800f498 <USBD_HS_ProductStrDescriptor+0x34>)
 800f47a:	4808      	ldr	r0, [pc, #32]	; (800f49c <USBD_HS_ProductStrDescriptor+0x38>)
 800f47c:	f7ff fde0 	bl	800f040 <USBD_GetString>
 800f480:	e004      	b.n	800f48c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f482:	683a      	ldr	r2, [r7, #0]
 800f484:	4904      	ldr	r1, [pc, #16]	; (800f498 <USBD_HS_ProductStrDescriptor+0x34>)
 800f486:	4805      	ldr	r0, [pc, #20]	; (800f49c <USBD_HS_ProductStrDescriptor+0x38>)
 800f488:	f7ff fdda 	bl	800f040 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f48c:	4b02      	ldr	r3, [pc, #8]	; (800f498 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3708      	adds	r7, #8
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	240020c8 	.word	0x240020c8
 800f49c:	08010494 	.word	0x08010494

0800f4a0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	6039      	str	r1, [r7, #0]
 800f4aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f4ac:	683a      	ldr	r2, [r7, #0]
 800f4ae:	4904      	ldr	r1, [pc, #16]	; (800f4c0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800f4b0:	4804      	ldr	r0, [pc, #16]	; (800f4c4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800f4b2:	f7ff fdc5 	bl	800f040 <USBD_GetString>
  return USBD_StrDesc;
 800f4b6:	4b02      	ldr	r3, [pc, #8]	; (800f4c0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3708      	adds	r7, #8
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	240020c8 	.word	0x240020c8
 800f4c4:	080104ac 	.word	0x080104ac

0800f4c8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	6039      	str	r1, [r7, #0]
 800f4d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	221a      	movs	r2, #26
 800f4d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f4da:	f000 f843 	bl	800f564 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f4de:	4b02      	ldr	r3, [pc, #8]	; (800f4e8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	240001f0 	.word	0x240001f0

0800f4ec <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	6039      	str	r1, [r7, #0]
 800f4f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f4f8:	79fb      	ldrb	r3, [r7, #7]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d105      	bne.n	800f50a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f4fe:	683a      	ldr	r2, [r7, #0]
 800f500:	4907      	ldr	r1, [pc, #28]	; (800f520 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f502:	4808      	ldr	r0, [pc, #32]	; (800f524 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f504:	f7ff fd9c 	bl	800f040 <USBD_GetString>
 800f508:	e004      	b.n	800f514 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f50a:	683a      	ldr	r2, [r7, #0]
 800f50c:	4904      	ldr	r1, [pc, #16]	; (800f520 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f50e:	4805      	ldr	r0, [pc, #20]	; (800f524 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f510:	f7ff fd96 	bl	800f040 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f514:	4b02      	ldr	r3, [pc, #8]	; (800f520 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800f516:	4618      	mov	r0, r3
 800f518:	3708      	adds	r7, #8
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	240020c8 	.word	0x240020c8
 800f524:	080104c0 	.word	0x080104c0

0800f528 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	4603      	mov	r3, r0
 800f530:	6039      	str	r1, [r7, #0]
 800f532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f534:	79fb      	ldrb	r3, [r7, #7]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d105      	bne.n	800f546 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f53a:	683a      	ldr	r2, [r7, #0]
 800f53c:	4907      	ldr	r1, [pc, #28]	; (800f55c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f53e:	4808      	ldr	r0, [pc, #32]	; (800f560 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f540:	f7ff fd7e 	bl	800f040 <USBD_GetString>
 800f544:	e004      	b.n	800f550 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f546:	683a      	ldr	r2, [r7, #0]
 800f548:	4904      	ldr	r1, [pc, #16]	; (800f55c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f54a:	4805      	ldr	r0, [pc, #20]	; (800f560 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f54c:	f7ff fd78 	bl	800f040 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f550:	4b02      	ldr	r3, [pc, #8]	; (800f55c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800f552:	4618      	mov	r0, r3
 800f554:	3708      	adds	r7, #8
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	240020c8 	.word	0x240020c8
 800f560:	080104cc 	.word	0x080104cc

0800f564 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b084      	sub	sp, #16
 800f568:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f56a:	4b0f      	ldr	r3, [pc, #60]	; (800f5a8 <Get_SerialNum+0x44>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f570:	4b0e      	ldr	r3, [pc, #56]	; (800f5ac <Get_SerialNum+0x48>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f576:	4b0e      	ldr	r3, [pc, #56]	; (800f5b0 <Get_SerialNum+0x4c>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	4413      	add	r3, r2
 800f582:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d009      	beq.n	800f59e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f58a:	2208      	movs	r2, #8
 800f58c:	4909      	ldr	r1, [pc, #36]	; (800f5b4 <Get_SerialNum+0x50>)
 800f58e:	68f8      	ldr	r0, [r7, #12]
 800f590:	f000 f814 	bl	800f5bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f594:	2204      	movs	r2, #4
 800f596:	4908      	ldr	r1, [pc, #32]	; (800f5b8 <Get_SerialNum+0x54>)
 800f598:	68b8      	ldr	r0, [r7, #8]
 800f59a:	f000 f80f 	bl	800f5bc <IntToUnicode>
  }
}
 800f59e:	bf00      	nop
 800f5a0:	3710      	adds	r7, #16
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	1ff1e800 	.word	0x1ff1e800
 800f5ac:	1ff1e804 	.word	0x1ff1e804
 800f5b0:	1ff1e808 	.word	0x1ff1e808
 800f5b4:	240001f2 	.word	0x240001f2
 800f5b8:	24000202 	.word	0x24000202

0800f5bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b087      	sub	sp, #28
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	60f8      	str	r0, [r7, #12]
 800f5c4:	60b9      	str	r1, [r7, #8]
 800f5c6:	4613      	mov	r3, r2
 800f5c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	75fb      	strb	r3, [r7, #23]
 800f5d2:	e027      	b.n	800f624 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	0f1b      	lsrs	r3, r3, #28
 800f5d8:	2b09      	cmp	r3, #9
 800f5da:	d80b      	bhi.n	800f5f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	0f1b      	lsrs	r3, r3, #28
 800f5e0:	b2da      	uxtb	r2, r3
 800f5e2:	7dfb      	ldrb	r3, [r7, #23]
 800f5e4:	005b      	lsls	r3, r3, #1
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	440b      	add	r3, r1
 800f5ec:	3230      	adds	r2, #48	; 0x30
 800f5ee:	b2d2      	uxtb	r2, r2
 800f5f0:	701a      	strb	r2, [r3, #0]
 800f5f2:	e00a      	b.n	800f60a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	0f1b      	lsrs	r3, r3, #28
 800f5f8:	b2da      	uxtb	r2, r3
 800f5fa:	7dfb      	ldrb	r3, [r7, #23]
 800f5fc:	005b      	lsls	r3, r3, #1
 800f5fe:	4619      	mov	r1, r3
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	440b      	add	r3, r1
 800f604:	3237      	adds	r2, #55	; 0x37
 800f606:	b2d2      	uxtb	r2, r2
 800f608:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	011b      	lsls	r3, r3, #4
 800f60e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f610:	7dfb      	ldrb	r3, [r7, #23]
 800f612:	005b      	lsls	r3, r3, #1
 800f614:	3301      	adds	r3, #1
 800f616:	68ba      	ldr	r2, [r7, #8]
 800f618:	4413      	add	r3, r2
 800f61a:	2200      	movs	r2, #0
 800f61c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f61e:	7dfb      	ldrb	r3, [r7, #23]
 800f620:	3301      	adds	r3, #1
 800f622:	75fb      	strb	r3, [r7, #23]
 800f624:	7dfa      	ldrb	r2, [r7, #23]
 800f626:	79fb      	ldrb	r3, [r7, #7]
 800f628:	429a      	cmp	r2, r3
 800f62a:	d3d3      	bcc.n	800f5d4 <IntToUnicode+0x18>
  }
}
 800f62c:	bf00      	nop
 800f62e:	bf00      	nop
 800f630:	371c      	adds	r7, #28
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr
	...

0800f63c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b0b2      	sub	sp, #200	; 0xc8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f644:	f107 0310 	add.w	r3, r7, #16
 800f648:	22b8      	movs	r2, #184	; 0xb8
 800f64a:	2100      	movs	r1, #0
 800f64c:	4618      	mov	r0, r3
 800f64e:	f000 fb49 	bl	800fce4 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4a1a      	ldr	r2, [pc, #104]	; (800f6c0 <HAL_PCD_MspInit+0x84>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d12c      	bne.n	800f6b6 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f65c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f660:	f04f 0300 	mov.w	r3, #0
 800f664:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f668:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800f66c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f670:	f107 0310 	add.w	r3, r7, #16
 800f674:	4618      	mov	r0, r3
 800f676:	f7f9 febf 	bl	80093f8 <HAL_RCCEx_PeriphCLKConfig>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d001      	beq.n	800f684 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 800f680:	f7f2 fee4 	bl	800244c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f684:	f7f8 ff58 	bl	8008538 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800f688:	4b0e      	ldr	r3, [pc, #56]	; (800f6c4 <HAL_PCD_MspInit+0x88>)
 800f68a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f68e:	4a0d      	ldr	r2, [pc, #52]	; (800f6c4 <HAL_PCD_MspInit+0x88>)
 800f690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f694:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f698:	4b0a      	ldr	r3, [pc, #40]	; (800f6c4 <HAL_PCD_MspInit+0x88>)
 800f69a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f69e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f6a2:	60fb      	str	r3, [r7, #12]
 800f6a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	2100      	movs	r1, #0
 800f6aa:	204d      	movs	r0, #77	; 0x4d
 800f6ac:	f7f3 fe85 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800f6b0:	204d      	movs	r0, #77	; 0x4d
 800f6b2:	f7f3 fe9c 	bl	80033ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800f6b6:	bf00      	nop
 800f6b8:	37c8      	adds	r7, #200	; 0xc8
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	40040000 	.word	0x40040000
 800f6c4:	58024400 	.word	0x58024400

0800f6c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f6dc:	4619      	mov	r1, r3
 800f6de:	4610      	mov	r0, r2
 800f6e0:	f7fe fb49 	bl	800dd76 <USBD_LL_SetupStage>
}
 800f6e4:	bf00      	nop
 800f6e6:	3708      	adds	r7, #8
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	460b      	mov	r3, r1
 800f6f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f6fe:	78fa      	ldrb	r2, [r7, #3]
 800f700:	6879      	ldr	r1, [r7, #4]
 800f702:	4613      	mov	r3, r2
 800f704:	00db      	lsls	r3, r3, #3
 800f706:	4413      	add	r3, r2
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	440b      	add	r3, r1
 800f70c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f710:	681a      	ldr	r2, [r3, #0]
 800f712:	78fb      	ldrb	r3, [r7, #3]
 800f714:	4619      	mov	r1, r3
 800f716:	f7fe fb83 	bl	800de20 <USBD_LL_DataOutStage>
}
 800f71a:	bf00      	nop
 800f71c:	3708      	adds	r7, #8
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}

0800f722 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f722:	b580      	push	{r7, lr}
 800f724:	b082      	sub	sp, #8
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
 800f72a:	460b      	mov	r3, r1
 800f72c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f734:	78fa      	ldrb	r2, [r7, #3]
 800f736:	6879      	ldr	r1, [r7, #4]
 800f738:	4613      	mov	r3, r2
 800f73a:	00db      	lsls	r3, r3, #3
 800f73c:	4413      	add	r3, r2
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	440b      	add	r3, r1
 800f742:	3348      	adds	r3, #72	; 0x48
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	78fb      	ldrb	r3, [r7, #3]
 800f748:	4619      	mov	r1, r3
 800f74a:	f7fe fc1c 	bl	800df86 <USBD_LL_DataInStage>
}
 800f74e:	bf00      	nop
 800f750:	3708      	adds	r7, #8
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}

0800f756 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f756:	b580      	push	{r7, lr}
 800f758:	b082      	sub	sp, #8
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f764:	4618      	mov	r0, r3
 800f766:	f7fe fd56 	bl	800e216 <USBD_LL_SOF>
}
 800f76a:	bf00      	nop
 800f76c:	3708      	adds	r7, #8
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}

0800f772 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f772:	b580      	push	{r7, lr}
 800f774:	b084      	sub	sp, #16
 800f776:	af00      	add	r7, sp, #0
 800f778:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f77a:	2301      	movs	r3, #1
 800f77c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	691b      	ldr	r3, [r3, #16]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d102      	bne.n	800f78c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f786:	2300      	movs	r3, #0
 800f788:	73fb      	strb	r3, [r7, #15]
 800f78a:	e008      	b.n	800f79e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	691b      	ldr	r3, [r3, #16]
 800f790:	2b02      	cmp	r3, #2
 800f792:	d102      	bne.n	800f79a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f794:	2301      	movs	r3, #1
 800f796:	73fb      	strb	r3, [r7, #15]
 800f798:	e001      	b.n	800f79e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f79a:	f7f2 fe57 	bl	800244c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7a4:	7bfa      	ldrb	r2, [r7, #15]
 800f7a6:	4611      	mov	r1, r2
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7fe fcf0 	bl	800e18e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7fe fc98 	bl	800e0ea <USBD_LL_Reset>
}
 800f7ba:	bf00      	nop
 800f7bc:	3710      	adds	r7, #16
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}
	...

0800f7c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7fe fceb 	bl	800e1ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	687a      	ldr	r2, [r7, #4]
 800f7e4:	6812      	ldr	r2, [r2, #0]
 800f7e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f7ea:	f043 0301 	orr.w	r3, r3, #1
 800f7ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6a1b      	ldr	r3, [r3, #32]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d005      	beq.n	800f804 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f7f8:	4b04      	ldr	r3, [pc, #16]	; (800f80c <HAL_PCD_SuspendCallback+0x48>)
 800f7fa:	691b      	ldr	r3, [r3, #16]
 800f7fc:	4a03      	ldr	r2, [pc, #12]	; (800f80c <HAL_PCD_SuspendCallback+0x48>)
 800f7fe:	f043 0306 	orr.w	r3, r3, #6
 800f802:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f804:	bf00      	nop
 800f806:	3708      	adds	r7, #8
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	e000ed00 	.word	0xe000ed00

0800f810 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fe fce1 	bl	800e1e6 <USBD_LL_Resume>
}
 800f824:	bf00      	nop
 800f826:	3708      	adds	r7, #8
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	460b      	mov	r3, r1
 800f836:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f83e:	78fa      	ldrb	r2, [r7, #3]
 800f840:	4611      	mov	r1, r2
 800f842:	4618      	mov	r0, r3
 800f844:	f7fe fd39 	bl	800e2ba <USBD_LL_IsoOUTIncomplete>
}
 800f848:	bf00      	nop
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	460b      	mov	r3, r1
 800f85a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f862:	78fa      	ldrb	r2, [r7, #3]
 800f864:	4611      	mov	r1, r2
 800f866:	4618      	mov	r0, r3
 800f868:	f7fe fcf5 	bl	800e256 <USBD_LL_IsoINIncomplete>
}
 800f86c:	bf00      	nop
 800f86e:	3708      	adds	r7, #8
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f882:	4618      	mov	r0, r3
 800f884:	f7fe fd4b 	bl	800e31e <USBD_LL_DevConnected>
}
 800f888:	bf00      	nop
 800f88a:	3708      	adds	r7, #8
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fe fd48 	bl	800e334 <USBD_LL_DevDisconnected>
}
 800f8a4:	bf00      	nop
 800f8a6:	3708      	adds	r7, #8
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d140      	bne.n	800f93e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800f8bc:	4a22      	ldr	r2, [pc, #136]	; (800f948 <USBD_LL_Init+0x9c>)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4a20      	ldr	r2, [pc, #128]	; (800f948 <USBD_LL_Init+0x9c>)
 800f8c8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f8cc:	4b1e      	ldr	r3, [pc, #120]	; (800f948 <USBD_LL_Init+0x9c>)
 800f8ce:	4a1f      	ldr	r2, [pc, #124]	; (800f94c <USBD_LL_Init+0xa0>)
 800f8d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800f8d2:	4b1d      	ldr	r3, [pc, #116]	; (800f948 <USBD_LL_Init+0x9c>)
 800f8d4:	2209      	movs	r2, #9
 800f8d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800f8d8:	4b1b      	ldr	r3, [pc, #108]	; (800f948 <USBD_LL_Init+0x9c>)
 800f8da:	2202      	movs	r2, #2
 800f8dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f8de:	4b1a      	ldr	r3, [pc, #104]	; (800f948 <USBD_LL_Init+0x9c>)
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800f8e4:	4b18      	ldr	r3, [pc, #96]	; (800f948 <USBD_LL_Init+0x9c>)
 800f8e6:	2202      	movs	r2, #2
 800f8e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f8ea:	4b17      	ldr	r3, [pc, #92]	; (800f948 <USBD_LL_Init+0x9c>)
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f8f0:	4b15      	ldr	r3, [pc, #84]	; (800f948 <USBD_LL_Init+0x9c>)
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800f8f6:	4b14      	ldr	r3, [pc, #80]	; (800f948 <USBD_LL_Init+0x9c>)
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800f8fc:	4b12      	ldr	r3, [pc, #72]	; (800f948 <USBD_LL_Init+0x9c>)
 800f8fe:	2200      	movs	r2, #0
 800f900:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800f902:	4b11      	ldr	r3, [pc, #68]	; (800f948 <USBD_LL_Init+0x9c>)
 800f904:	2200      	movs	r2, #0
 800f906:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f908:	4b0f      	ldr	r3, [pc, #60]	; (800f948 <USBD_LL_Init+0x9c>)
 800f90a:	2200      	movs	r2, #0
 800f90c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800f90e:	480e      	ldr	r0, [pc, #56]	; (800f948 <USBD_LL_Init+0x9c>)
 800f910:	f7f7 fb1e 	bl	8006f50 <HAL_PCD_Init>
 800f914:	4603      	mov	r3, r0
 800f916:	2b00      	cmp	r3, #0
 800f918:	d001      	beq.n	800f91e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f91a:	f7f2 fd97 	bl	800244c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f91e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f922:	4809      	ldr	r0, [pc, #36]	; (800f948 <USBD_LL_Init+0x9c>)
 800f924:	f7f8 fd8d 	bl	8008442 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800f928:	2280      	movs	r2, #128	; 0x80
 800f92a:	2100      	movs	r1, #0
 800f92c:	4806      	ldr	r0, [pc, #24]	; (800f948 <USBD_LL_Init+0x9c>)
 800f92e:	f7f8 fd41 	bl	80083b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800f932:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800f936:	2101      	movs	r1, #1
 800f938:	4803      	ldr	r0, [pc, #12]	; (800f948 <USBD_LL_Init+0x9c>)
 800f93a:	f7f8 fd3b 	bl	80083b4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800f93e:	2300      	movs	r3, #0
}
 800f940:	4618      	mov	r0, r3
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}
 800f948:	240022c8 	.word	0x240022c8
 800f94c:	40040000 	.word	0x40040000

0800f950 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f958:	2300      	movs	r3, #0
 800f95a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f95c:	2300      	movs	r3, #0
 800f95e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f966:	4618      	mov	r0, r3
 800f968:	f7f7 fc16 	bl	8007198 <HAL_PCD_Start>
 800f96c:	4603      	mov	r3, r0
 800f96e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f970:	7bfb      	ldrb	r3, [r7, #15]
 800f972:	4618      	mov	r0, r3
 800f974:	f000 f942 	bl	800fbfc <USBD_Get_USB_Status>
 800f978:	4603      	mov	r3, r0
 800f97a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f97c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3710      	adds	r7, #16
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f986:	b580      	push	{r7, lr}
 800f988:	b084      	sub	sp, #16
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
 800f98e:	4608      	mov	r0, r1
 800f990:	4611      	mov	r1, r2
 800f992:	461a      	mov	r2, r3
 800f994:	4603      	mov	r3, r0
 800f996:	70fb      	strb	r3, [r7, #3]
 800f998:	460b      	mov	r3, r1
 800f99a:	70bb      	strb	r3, [r7, #2]
 800f99c:	4613      	mov	r3, r2
 800f99e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f9ae:	78bb      	ldrb	r3, [r7, #2]
 800f9b0:	883a      	ldrh	r2, [r7, #0]
 800f9b2:	78f9      	ldrb	r1, [r7, #3]
 800f9b4:	f7f8 f916 	bl	8007be4 <HAL_PCD_EP_Open>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9bc:	7bfb      	ldrb	r3, [r7, #15]
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f000 f91c 	bl	800fbfc <USBD_Get_USB_Status>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3710      	adds	r7, #16
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b084      	sub	sp, #16
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	460b      	mov	r3, r1
 800f9dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9ec:	78fa      	ldrb	r2, [r7, #3]
 800f9ee:	4611      	mov	r1, r2
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7f8 f95f 	bl	8007cb4 <HAL_PCD_EP_Close>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9fa:	7bfb      	ldrb	r3, [r7, #15]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f000 f8fd 	bl	800fbfc <USBD_Get_USB_Status>
 800fa02:	4603      	mov	r3, r0
 800fa04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa06:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3710      	adds	r7, #16
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	460b      	mov	r3, r1
 800fa1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa20:	2300      	movs	r3, #0
 800fa22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa2a:	78fa      	ldrb	r2, [r7, #3]
 800fa2c:	4611      	mov	r1, r2
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7f8 fa19 	bl	8007e66 <HAL_PCD_EP_SetStall>
 800fa34:	4603      	mov	r3, r0
 800fa36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa38:	7bfb      	ldrb	r3, [r7, #15]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f000 f8de 	bl	800fbfc <USBD_Get_USB_Status>
 800fa40:	4603      	mov	r3, r0
 800fa42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa44:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3710      	adds	r7, #16
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}

0800fa4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa4e:	b580      	push	{r7, lr}
 800fa50:	b084      	sub	sp, #16
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6078      	str	r0, [r7, #4]
 800fa56:	460b      	mov	r3, r1
 800fa58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa68:	78fa      	ldrb	r2, [r7, #3]
 800fa6a:	4611      	mov	r1, r2
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7f8 fa5e 	bl	8007f2e <HAL_PCD_EP_ClrStall>
 800fa72:	4603      	mov	r3, r0
 800fa74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa76:	7bfb      	ldrb	r3, [r7, #15]
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f000 f8bf 	bl	800fbfc <USBD_Get_USB_Status>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa82:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3710      	adds	r7, #16
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b085      	sub	sp, #20
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	460b      	mov	r3, r1
 800fa96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800faa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	da0b      	bge.n	800fac0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800faa8:	78fb      	ldrb	r3, [r7, #3]
 800faaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800faae:	68f9      	ldr	r1, [r7, #12]
 800fab0:	4613      	mov	r3, r2
 800fab2:	00db      	lsls	r3, r3, #3
 800fab4:	4413      	add	r3, r2
 800fab6:	009b      	lsls	r3, r3, #2
 800fab8:	440b      	add	r3, r1
 800faba:	333e      	adds	r3, #62	; 0x3e
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	e00b      	b.n	800fad8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fac0:	78fb      	ldrb	r3, [r7, #3]
 800fac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fac6:	68f9      	ldr	r1, [r7, #12]
 800fac8:	4613      	mov	r3, r2
 800faca:	00db      	lsls	r3, r3, #3
 800facc:	4413      	add	r3, r2
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	440b      	add	r3, r1
 800fad2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fad6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3714      	adds	r7, #20
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b084      	sub	sp, #16
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	460b      	mov	r3, r1
 800faee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faf0:	2300      	movs	r3, #0
 800faf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800faf4:	2300      	movs	r3, #0
 800faf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fafe:	78fa      	ldrb	r2, [r7, #3]
 800fb00:	4611      	mov	r1, r2
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7f8 f849 	bl	8007b9a <HAL_PCD_SetAddress>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb0c:	7bfb      	ldrb	r3, [r7, #15]
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f000 f874 	bl	800fbfc <USBD_Get_USB_Status>
 800fb14:	4603      	mov	r3, r0
 800fb16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb18:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3710      	adds	r7, #16
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}

0800fb22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb22:	b580      	push	{r7, lr}
 800fb24:	b086      	sub	sp, #24
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	60f8      	str	r0, [r7, #12]
 800fb2a:	607a      	str	r2, [r7, #4]
 800fb2c:	603b      	str	r3, [r7, #0]
 800fb2e:	460b      	mov	r3, r1
 800fb30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb32:	2300      	movs	r3, #0
 800fb34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb36:	2300      	movs	r3, #0
 800fb38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb40:	7af9      	ldrb	r1, [r7, #11]
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	687a      	ldr	r2, [r7, #4]
 800fb46:	f7f8 f953 	bl	8007df0 <HAL_PCD_EP_Transmit>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb4e:	7dfb      	ldrb	r3, [r7, #23]
 800fb50:	4618      	mov	r0, r3
 800fb52:	f000 f853 	bl	800fbfc <USBD_Get_USB_Status>
 800fb56:	4603      	mov	r3, r0
 800fb58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb5a:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3718      	adds	r7, #24
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b086      	sub	sp, #24
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	607a      	str	r2, [r7, #4]
 800fb6e:	603b      	str	r3, [r7, #0]
 800fb70:	460b      	mov	r3, r1
 800fb72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb74:	2300      	movs	r3, #0
 800fb76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb82:	7af9      	ldrb	r1, [r7, #11]
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	687a      	ldr	r2, [r7, #4]
 800fb88:	f7f8 f8de 	bl	8007d48 <HAL_PCD_EP_Receive>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb90:	7dfb      	ldrb	r3, [r7, #23]
 800fb92:	4618      	mov	r0, r3
 800fb94:	f000 f832 	bl	800fbfc <USBD_Get_USB_Status>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb9c:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3718      	adds	r7, #24
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fba6:	b580      	push	{r7, lr}
 800fba8:	b082      	sub	sp, #8
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
 800fbae:	460b      	mov	r3, r1
 800fbb0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbb8:	78fa      	ldrb	r2, [r7, #3]
 800fbba:	4611      	mov	r1, r2
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7f8 f8ff 	bl	8007dc0 <HAL_PCD_EP_GetRxCount>
 800fbc2:	4603      	mov	r3, r0
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b083      	sub	sp, #12
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fbd4:	4b03      	ldr	r3, [pc, #12]	; (800fbe4 <USBD_static_malloc+0x18>)
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	370c      	adds	r7, #12
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	240027d4 	.word	0x240027d4

0800fbe8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800fbf0:	bf00      	nop
 800fbf2:	370c      	adds	r7, #12
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfa:	4770      	bx	lr

0800fbfc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b085      	sub	sp, #20
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	4603      	mov	r3, r0
 800fc04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc06:	2300      	movs	r3, #0
 800fc08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fc0a:	79fb      	ldrb	r3, [r7, #7]
 800fc0c:	2b03      	cmp	r3, #3
 800fc0e:	d817      	bhi.n	800fc40 <USBD_Get_USB_Status+0x44>
 800fc10:	a201      	add	r2, pc, #4	; (adr r2, 800fc18 <USBD_Get_USB_Status+0x1c>)
 800fc12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc16:	bf00      	nop
 800fc18:	0800fc29 	.word	0x0800fc29
 800fc1c:	0800fc2f 	.word	0x0800fc2f
 800fc20:	0800fc35 	.word	0x0800fc35
 800fc24:	0800fc3b 	.word	0x0800fc3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	73fb      	strb	r3, [r7, #15]
    break;
 800fc2c:	e00b      	b.n	800fc46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fc2e:	2303      	movs	r3, #3
 800fc30:	73fb      	strb	r3, [r7, #15]
    break;
 800fc32:	e008      	b.n	800fc46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fc34:	2301      	movs	r3, #1
 800fc36:	73fb      	strb	r3, [r7, #15]
    break;
 800fc38:	e005      	b.n	800fc46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fc3a:	2303      	movs	r3, #3
 800fc3c:	73fb      	strb	r3, [r7, #15]
    break;
 800fc3e:	e002      	b.n	800fc46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fc40:	2303      	movs	r3, #3
 800fc42:	73fb      	strb	r3, [r7, #15]
    break;
 800fc44:	bf00      	nop
  }
  return usb_status;
 800fc46:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3714      	adds	r7, #20
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr

0800fc54 <calloc>:
 800fc54:	4b02      	ldr	r3, [pc, #8]	; (800fc60 <calloc+0xc>)
 800fc56:	460a      	mov	r2, r1
 800fc58:	4601      	mov	r1, r0
 800fc5a:	6818      	ldr	r0, [r3, #0]
 800fc5c:	f000 b84a 	b.w	800fcf4 <_calloc_r>
 800fc60:	2400020c 	.word	0x2400020c

0800fc64 <__errno>:
 800fc64:	4b01      	ldr	r3, [pc, #4]	; (800fc6c <__errno+0x8>)
 800fc66:	6818      	ldr	r0, [r3, #0]
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	2400020c 	.word	0x2400020c

0800fc70 <__libc_init_array>:
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	4d0d      	ldr	r5, [pc, #52]	; (800fca8 <__libc_init_array+0x38>)
 800fc74:	4c0d      	ldr	r4, [pc, #52]	; (800fcac <__libc_init_array+0x3c>)
 800fc76:	1b64      	subs	r4, r4, r5
 800fc78:	10a4      	asrs	r4, r4, #2
 800fc7a:	2600      	movs	r6, #0
 800fc7c:	42a6      	cmp	r6, r4
 800fc7e:	d109      	bne.n	800fc94 <__libc_init_array+0x24>
 800fc80:	4d0b      	ldr	r5, [pc, #44]	; (800fcb0 <__libc_init_array+0x40>)
 800fc82:	4c0c      	ldr	r4, [pc, #48]	; (800fcb4 <__libc_init_array+0x44>)
 800fc84:	f000 fbf2 	bl	801046c <_init>
 800fc88:	1b64      	subs	r4, r4, r5
 800fc8a:	10a4      	asrs	r4, r4, #2
 800fc8c:	2600      	movs	r6, #0
 800fc8e:	42a6      	cmp	r6, r4
 800fc90:	d105      	bne.n	800fc9e <__libc_init_array+0x2e>
 800fc92:	bd70      	pop	{r4, r5, r6, pc}
 800fc94:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc98:	4798      	blx	r3
 800fc9a:	3601      	adds	r6, #1
 800fc9c:	e7ee      	b.n	800fc7c <__libc_init_array+0xc>
 800fc9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fca2:	4798      	blx	r3
 800fca4:	3601      	adds	r6, #1
 800fca6:	e7f2      	b.n	800fc8e <__libc_init_array+0x1e>
 800fca8:	080113b0 	.word	0x080113b0
 800fcac:	080113b0 	.word	0x080113b0
 800fcb0:	080113b0 	.word	0x080113b0
 800fcb4:	080113b4 	.word	0x080113b4

0800fcb8 <free>:
 800fcb8:	4b02      	ldr	r3, [pc, #8]	; (800fcc4 <free+0xc>)
 800fcba:	4601      	mov	r1, r0
 800fcbc:	6818      	ldr	r0, [r3, #0]
 800fcbe:	f000 b82f 	b.w	800fd20 <_free_r>
 800fcc2:	bf00      	nop
 800fcc4:	2400020c 	.word	0x2400020c

0800fcc8 <memcpy>:
 800fcc8:	440a      	add	r2, r1
 800fcca:	4291      	cmp	r1, r2
 800fccc:	f100 33ff 	add.w	r3, r0, #4294967295
 800fcd0:	d100      	bne.n	800fcd4 <memcpy+0xc>
 800fcd2:	4770      	bx	lr
 800fcd4:	b510      	push	{r4, lr}
 800fcd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fcde:	4291      	cmp	r1, r2
 800fce0:	d1f9      	bne.n	800fcd6 <memcpy+0xe>
 800fce2:	bd10      	pop	{r4, pc}

0800fce4 <memset>:
 800fce4:	4402      	add	r2, r0
 800fce6:	4603      	mov	r3, r0
 800fce8:	4293      	cmp	r3, r2
 800fcea:	d100      	bne.n	800fcee <memset+0xa>
 800fcec:	4770      	bx	lr
 800fcee:	f803 1b01 	strb.w	r1, [r3], #1
 800fcf2:	e7f9      	b.n	800fce8 <memset+0x4>

0800fcf4 <_calloc_r>:
 800fcf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fcf6:	fba1 2402 	umull	r2, r4, r1, r2
 800fcfa:	b94c      	cbnz	r4, 800fd10 <_calloc_r+0x1c>
 800fcfc:	4611      	mov	r1, r2
 800fcfe:	9201      	str	r2, [sp, #4]
 800fd00:	f000 f87a 	bl	800fdf8 <_malloc_r>
 800fd04:	9a01      	ldr	r2, [sp, #4]
 800fd06:	4605      	mov	r5, r0
 800fd08:	b930      	cbnz	r0, 800fd18 <_calloc_r+0x24>
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	b003      	add	sp, #12
 800fd0e:	bd30      	pop	{r4, r5, pc}
 800fd10:	220c      	movs	r2, #12
 800fd12:	6002      	str	r2, [r0, #0]
 800fd14:	2500      	movs	r5, #0
 800fd16:	e7f8      	b.n	800fd0a <_calloc_r+0x16>
 800fd18:	4621      	mov	r1, r4
 800fd1a:	f7ff ffe3 	bl	800fce4 <memset>
 800fd1e:	e7f4      	b.n	800fd0a <_calloc_r+0x16>

0800fd20 <_free_r>:
 800fd20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd22:	2900      	cmp	r1, #0
 800fd24:	d044      	beq.n	800fdb0 <_free_r+0x90>
 800fd26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd2a:	9001      	str	r0, [sp, #4]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f1a1 0404 	sub.w	r4, r1, #4
 800fd32:	bfb8      	it	lt
 800fd34:	18e4      	addlt	r4, r4, r3
 800fd36:	f000 f8e3 	bl	800ff00 <__malloc_lock>
 800fd3a:	4a1e      	ldr	r2, [pc, #120]	; (800fdb4 <_free_r+0x94>)
 800fd3c:	9801      	ldr	r0, [sp, #4]
 800fd3e:	6813      	ldr	r3, [r2, #0]
 800fd40:	b933      	cbnz	r3, 800fd50 <_free_r+0x30>
 800fd42:	6063      	str	r3, [r4, #4]
 800fd44:	6014      	str	r4, [r2, #0]
 800fd46:	b003      	add	sp, #12
 800fd48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd4c:	f000 b8de 	b.w	800ff0c <__malloc_unlock>
 800fd50:	42a3      	cmp	r3, r4
 800fd52:	d908      	bls.n	800fd66 <_free_r+0x46>
 800fd54:	6825      	ldr	r5, [r4, #0]
 800fd56:	1961      	adds	r1, r4, r5
 800fd58:	428b      	cmp	r3, r1
 800fd5a:	bf01      	itttt	eq
 800fd5c:	6819      	ldreq	r1, [r3, #0]
 800fd5e:	685b      	ldreq	r3, [r3, #4]
 800fd60:	1949      	addeq	r1, r1, r5
 800fd62:	6021      	streq	r1, [r4, #0]
 800fd64:	e7ed      	b.n	800fd42 <_free_r+0x22>
 800fd66:	461a      	mov	r2, r3
 800fd68:	685b      	ldr	r3, [r3, #4]
 800fd6a:	b10b      	cbz	r3, 800fd70 <_free_r+0x50>
 800fd6c:	42a3      	cmp	r3, r4
 800fd6e:	d9fa      	bls.n	800fd66 <_free_r+0x46>
 800fd70:	6811      	ldr	r1, [r2, #0]
 800fd72:	1855      	adds	r5, r2, r1
 800fd74:	42a5      	cmp	r5, r4
 800fd76:	d10b      	bne.n	800fd90 <_free_r+0x70>
 800fd78:	6824      	ldr	r4, [r4, #0]
 800fd7a:	4421      	add	r1, r4
 800fd7c:	1854      	adds	r4, r2, r1
 800fd7e:	42a3      	cmp	r3, r4
 800fd80:	6011      	str	r1, [r2, #0]
 800fd82:	d1e0      	bne.n	800fd46 <_free_r+0x26>
 800fd84:	681c      	ldr	r4, [r3, #0]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	6053      	str	r3, [r2, #4]
 800fd8a:	4421      	add	r1, r4
 800fd8c:	6011      	str	r1, [r2, #0]
 800fd8e:	e7da      	b.n	800fd46 <_free_r+0x26>
 800fd90:	d902      	bls.n	800fd98 <_free_r+0x78>
 800fd92:	230c      	movs	r3, #12
 800fd94:	6003      	str	r3, [r0, #0]
 800fd96:	e7d6      	b.n	800fd46 <_free_r+0x26>
 800fd98:	6825      	ldr	r5, [r4, #0]
 800fd9a:	1961      	adds	r1, r4, r5
 800fd9c:	428b      	cmp	r3, r1
 800fd9e:	bf04      	itt	eq
 800fda0:	6819      	ldreq	r1, [r3, #0]
 800fda2:	685b      	ldreq	r3, [r3, #4]
 800fda4:	6063      	str	r3, [r4, #4]
 800fda6:	bf04      	itt	eq
 800fda8:	1949      	addeq	r1, r1, r5
 800fdaa:	6021      	streq	r1, [r4, #0]
 800fdac:	6054      	str	r4, [r2, #4]
 800fdae:	e7ca      	b.n	800fd46 <_free_r+0x26>
 800fdb0:	b003      	add	sp, #12
 800fdb2:	bd30      	pop	{r4, r5, pc}
 800fdb4:	240029f4 	.word	0x240029f4

0800fdb8 <sbrk_aligned>:
 800fdb8:	b570      	push	{r4, r5, r6, lr}
 800fdba:	4e0e      	ldr	r6, [pc, #56]	; (800fdf4 <sbrk_aligned+0x3c>)
 800fdbc:	460c      	mov	r4, r1
 800fdbe:	6831      	ldr	r1, [r6, #0]
 800fdc0:	4605      	mov	r5, r0
 800fdc2:	b911      	cbnz	r1, 800fdca <sbrk_aligned+0x12>
 800fdc4:	f000 f88c 	bl	800fee0 <_sbrk_r>
 800fdc8:	6030      	str	r0, [r6, #0]
 800fdca:	4621      	mov	r1, r4
 800fdcc:	4628      	mov	r0, r5
 800fdce:	f000 f887 	bl	800fee0 <_sbrk_r>
 800fdd2:	1c43      	adds	r3, r0, #1
 800fdd4:	d00a      	beq.n	800fdec <sbrk_aligned+0x34>
 800fdd6:	1cc4      	adds	r4, r0, #3
 800fdd8:	f024 0403 	bic.w	r4, r4, #3
 800fddc:	42a0      	cmp	r0, r4
 800fdde:	d007      	beq.n	800fdf0 <sbrk_aligned+0x38>
 800fde0:	1a21      	subs	r1, r4, r0
 800fde2:	4628      	mov	r0, r5
 800fde4:	f000 f87c 	bl	800fee0 <_sbrk_r>
 800fde8:	3001      	adds	r0, #1
 800fdea:	d101      	bne.n	800fdf0 <sbrk_aligned+0x38>
 800fdec:	f04f 34ff 	mov.w	r4, #4294967295
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	bd70      	pop	{r4, r5, r6, pc}
 800fdf4:	240029f8 	.word	0x240029f8

0800fdf8 <_malloc_r>:
 800fdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdfc:	1ccd      	adds	r5, r1, #3
 800fdfe:	f025 0503 	bic.w	r5, r5, #3
 800fe02:	3508      	adds	r5, #8
 800fe04:	2d0c      	cmp	r5, #12
 800fe06:	bf38      	it	cc
 800fe08:	250c      	movcc	r5, #12
 800fe0a:	2d00      	cmp	r5, #0
 800fe0c:	4607      	mov	r7, r0
 800fe0e:	db01      	blt.n	800fe14 <_malloc_r+0x1c>
 800fe10:	42a9      	cmp	r1, r5
 800fe12:	d905      	bls.n	800fe20 <_malloc_r+0x28>
 800fe14:	230c      	movs	r3, #12
 800fe16:	603b      	str	r3, [r7, #0]
 800fe18:	2600      	movs	r6, #0
 800fe1a:	4630      	mov	r0, r6
 800fe1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe20:	4e2e      	ldr	r6, [pc, #184]	; (800fedc <_malloc_r+0xe4>)
 800fe22:	f000 f86d 	bl	800ff00 <__malloc_lock>
 800fe26:	6833      	ldr	r3, [r6, #0]
 800fe28:	461c      	mov	r4, r3
 800fe2a:	bb34      	cbnz	r4, 800fe7a <_malloc_r+0x82>
 800fe2c:	4629      	mov	r1, r5
 800fe2e:	4638      	mov	r0, r7
 800fe30:	f7ff ffc2 	bl	800fdb8 <sbrk_aligned>
 800fe34:	1c43      	adds	r3, r0, #1
 800fe36:	4604      	mov	r4, r0
 800fe38:	d14d      	bne.n	800fed6 <_malloc_r+0xde>
 800fe3a:	6834      	ldr	r4, [r6, #0]
 800fe3c:	4626      	mov	r6, r4
 800fe3e:	2e00      	cmp	r6, #0
 800fe40:	d140      	bne.n	800fec4 <_malloc_r+0xcc>
 800fe42:	6823      	ldr	r3, [r4, #0]
 800fe44:	4631      	mov	r1, r6
 800fe46:	4638      	mov	r0, r7
 800fe48:	eb04 0803 	add.w	r8, r4, r3
 800fe4c:	f000 f848 	bl	800fee0 <_sbrk_r>
 800fe50:	4580      	cmp	r8, r0
 800fe52:	d13a      	bne.n	800feca <_malloc_r+0xd2>
 800fe54:	6821      	ldr	r1, [r4, #0]
 800fe56:	3503      	adds	r5, #3
 800fe58:	1a6d      	subs	r5, r5, r1
 800fe5a:	f025 0503 	bic.w	r5, r5, #3
 800fe5e:	3508      	adds	r5, #8
 800fe60:	2d0c      	cmp	r5, #12
 800fe62:	bf38      	it	cc
 800fe64:	250c      	movcc	r5, #12
 800fe66:	4629      	mov	r1, r5
 800fe68:	4638      	mov	r0, r7
 800fe6a:	f7ff ffa5 	bl	800fdb8 <sbrk_aligned>
 800fe6e:	3001      	adds	r0, #1
 800fe70:	d02b      	beq.n	800feca <_malloc_r+0xd2>
 800fe72:	6823      	ldr	r3, [r4, #0]
 800fe74:	442b      	add	r3, r5
 800fe76:	6023      	str	r3, [r4, #0]
 800fe78:	e00e      	b.n	800fe98 <_malloc_r+0xa0>
 800fe7a:	6822      	ldr	r2, [r4, #0]
 800fe7c:	1b52      	subs	r2, r2, r5
 800fe7e:	d41e      	bmi.n	800febe <_malloc_r+0xc6>
 800fe80:	2a0b      	cmp	r2, #11
 800fe82:	d916      	bls.n	800feb2 <_malloc_r+0xba>
 800fe84:	1961      	adds	r1, r4, r5
 800fe86:	42a3      	cmp	r3, r4
 800fe88:	6025      	str	r5, [r4, #0]
 800fe8a:	bf18      	it	ne
 800fe8c:	6059      	strne	r1, [r3, #4]
 800fe8e:	6863      	ldr	r3, [r4, #4]
 800fe90:	bf08      	it	eq
 800fe92:	6031      	streq	r1, [r6, #0]
 800fe94:	5162      	str	r2, [r4, r5]
 800fe96:	604b      	str	r3, [r1, #4]
 800fe98:	4638      	mov	r0, r7
 800fe9a:	f104 060b 	add.w	r6, r4, #11
 800fe9e:	f000 f835 	bl	800ff0c <__malloc_unlock>
 800fea2:	f026 0607 	bic.w	r6, r6, #7
 800fea6:	1d23      	adds	r3, r4, #4
 800fea8:	1af2      	subs	r2, r6, r3
 800feaa:	d0b6      	beq.n	800fe1a <_malloc_r+0x22>
 800feac:	1b9b      	subs	r3, r3, r6
 800feae:	50a3      	str	r3, [r4, r2]
 800feb0:	e7b3      	b.n	800fe1a <_malloc_r+0x22>
 800feb2:	6862      	ldr	r2, [r4, #4]
 800feb4:	42a3      	cmp	r3, r4
 800feb6:	bf0c      	ite	eq
 800feb8:	6032      	streq	r2, [r6, #0]
 800feba:	605a      	strne	r2, [r3, #4]
 800febc:	e7ec      	b.n	800fe98 <_malloc_r+0xa0>
 800febe:	4623      	mov	r3, r4
 800fec0:	6864      	ldr	r4, [r4, #4]
 800fec2:	e7b2      	b.n	800fe2a <_malloc_r+0x32>
 800fec4:	4634      	mov	r4, r6
 800fec6:	6876      	ldr	r6, [r6, #4]
 800fec8:	e7b9      	b.n	800fe3e <_malloc_r+0x46>
 800feca:	230c      	movs	r3, #12
 800fecc:	603b      	str	r3, [r7, #0]
 800fece:	4638      	mov	r0, r7
 800fed0:	f000 f81c 	bl	800ff0c <__malloc_unlock>
 800fed4:	e7a1      	b.n	800fe1a <_malloc_r+0x22>
 800fed6:	6025      	str	r5, [r4, #0]
 800fed8:	e7de      	b.n	800fe98 <_malloc_r+0xa0>
 800feda:	bf00      	nop
 800fedc:	240029f4 	.word	0x240029f4

0800fee0 <_sbrk_r>:
 800fee0:	b538      	push	{r3, r4, r5, lr}
 800fee2:	4d06      	ldr	r5, [pc, #24]	; (800fefc <_sbrk_r+0x1c>)
 800fee4:	2300      	movs	r3, #0
 800fee6:	4604      	mov	r4, r0
 800fee8:	4608      	mov	r0, r1
 800feea:	602b      	str	r3, [r5, #0]
 800feec:	f7f2 fffc 	bl	8002ee8 <_sbrk>
 800fef0:	1c43      	adds	r3, r0, #1
 800fef2:	d102      	bne.n	800fefa <_sbrk_r+0x1a>
 800fef4:	682b      	ldr	r3, [r5, #0]
 800fef6:	b103      	cbz	r3, 800fefa <_sbrk_r+0x1a>
 800fef8:	6023      	str	r3, [r4, #0]
 800fefa:	bd38      	pop	{r3, r4, r5, pc}
 800fefc:	240029fc 	.word	0x240029fc

0800ff00 <__malloc_lock>:
 800ff00:	4801      	ldr	r0, [pc, #4]	; (800ff08 <__malloc_lock+0x8>)
 800ff02:	f000 b809 	b.w	800ff18 <__retarget_lock_acquire_recursive>
 800ff06:	bf00      	nop
 800ff08:	24002a00 	.word	0x24002a00

0800ff0c <__malloc_unlock>:
 800ff0c:	4801      	ldr	r0, [pc, #4]	; (800ff14 <__malloc_unlock+0x8>)
 800ff0e:	f000 b804 	b.w	800ff1a <__retarget_lock_release_recursive>
 800ff12:	bf00      	nop
 800ff14:	24002a00 	.word	0x24002a00

0800ff18 <__retarget_lock_acquire_recursive>:
 800ff18:	4770      	bx	lr

0800ff1a <__retarget_lock_release_recursive>:
 800ff1a:	4770      	bx	lr
 800ff1c:	0000      	movs	r0, r0
	...

0800ff20 <ceil>:
 800ff20:	ee10 1a90 	vmov	r1, s1
 800ff24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ff28:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800ff2c:	2b13      	cmp	r3, #19
 800ff2e:	b530      	push	{r4, r5, lr}
 800ff30:	ee10 0a10 	vmov	r0, s0
 800ff34:	ee10 5a10 	vmov	r5, s0
 800ff38:	dc2f      	bgt.n	800ff9a <ceil+0x7a>
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	da13      	bge.n	800ff66 <ceil+0x46>
 800ff3e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8010000 <ceil+0xe0>
 800ff42:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ff46:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ff4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff4e:	dd05      	ble.n	800ff5c <ceil+0x3c>
 800ff50:	2900      	cmp	r1, #0
 800ff52:	db4c      	blt.n	800ffee <ceil+0xce>
 800ff54:	4301      	orrs	r1, r0
 800ff56:	d04e      	beq.n	800fff6 <ceil+0xd6>
 800ff58:	492b      	ldr	r1, [pc, #172]	; (8010008 <ceil+0xe8>)
 800ff5a:	2000      	movs	r0, #0
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	4602      	mov	r2, r0
 800ff60:	ec43 2b10 	vmov	d0, r2, r3
 800ff64:	e020      	b.n	800ffa8 <ceil+0x88>
 800ff66:	4a29      	ldr	r2, [pc, #164]	; (801000c <ceil+0xec>)
 800ff68:	411a      	asrs	r2, r3
 800ff6a:	ea01 0402 	and.w	r4, r1, r2
 800ff6e:	4304      	orrs	r4, r0
 800ff70:	d01a      	beq.n	800ffa8 <ceil+0x88>
 800ff72:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8010000 <ceil+0xe0>
 800ff76:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ff7a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ff7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff82:	ddeb      	ble.n	800ff5c <ceil+0x3c>
 800ff84:	2900      	cmp	r1, #0
 800ff86:	bfc2      	ittt	gt
 800ff88:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 800ff8c:	fa40 f303 	asrgt.w	r3, r0, r3
 800ff90:	18c9      	addgt	r1, r1, r3
 800ff92:	ea21 0102 	bic.w	r1, r1, r2
 800ff96:	2000      	movs	r0, #0
 800ff98:	e7e0      	b.n	800ff5c <ceil+0x3c>
 800ff9a:	2b33      	cmp	r3, #51	; 0x33
 800ff9c:	dd05      	ble.n	800ffaa <ceil+0x8a>
 800ff9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ffa2:	d101      	bne.n	800ffa8 <ceil+0x88>
 800ffa4:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ffa8:	bd30      	pop	{r4, r5, pc}
 800ffaa:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800ffae:	f04f 32ff 	mov.w	r2, #4294967295
 800ffb2:	40e2      	lsrs	r2, r4
 800ffb4:	4202      	tst	r2, r0
 800ffb6:	d0f7      	beq.n	800ffa8 <ceil+0x88>
 800ffb8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8010000 <ceil+0xe0>
 800ffbc:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ffc0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ffc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffc8:	ddc8      	ble.n	800ff5c <ceil+0x3c>
 800ffca:	2900      	cmp	r1, #0
 800ffcc:	dd02      	ble.n	800ffd4 <ceil+0xb4>
 800ffce:	2b14      	cmp	r3, #20
 800ffd0:	d103      	bne.n	800ffda <ceil+0xba>
 800ffd2:	3101      	adds	r1, #1
 800ffd4:	ea20 0002 	bic.w	r0, r0, r2
 800ffd8:	e7c0      	b.n	800ff5c <ceil+0x3c>
 800ffda:	2401      	movs	r4, #1
 800ffdc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ffe0:	fa04 f303 	lsl.w	r3, r4, r3
 800ffe4:	4418      	add	r0, r3
 800ffe6:	42a8      	cmp	r0, r5
 800ffe8:	bf38      	it	cc
 800ffea:	1909      	addcc	r1, r1, r4
 800ffec:	e7f2      	b.n	800ffd4 <ceil+0xb4>
 800ffee:	2000      	movs	r0, #0
 800fff0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fff4:	e7b2      	b.n	800ff5c <ceil+0x3c>
 800fff6:	4608      	mov	r0, r1
 800fff8:	e7b0      	b.n	800ff5c <ceil+0x3c>
 800fffa:	bf00      	nop
 800fffc:	f3af 8000 	nop.w
 8010000:	8800759c 	.word	0x8800759c
 8010004:	7e37e43c 	.word	0x7e37e43c
 8010008:	3ff00000 	.word	0x3ff00000
 801000c:	000fffff 	.word	0x000fffff

08010010 <floor>:
 8010010:	ee10 1a90 	vmov	r1, s1
 8010014:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010018:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801001c:	2b13      	cmp	r3, #19
 801001e:	b530      	push	{r4, r5, lr}
 8010020:	ee10 0a10 	vmov	r0, s0
 8010024:	ee10 5a10 	vmov	r5, s0
 8010028:	dc31      	bgt.n	801008e <floor+0x7e>
 801002a:	2b00      	cmp	r3, #0
 801002c:	da15      	bge.n	801005a <floor+0x4a>
 801002e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80100e8 <floor+0xd8>
 8010032:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010036:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801003a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801003e:	dd07      	ble.n	8010050 <floor+0x40>
 8010040:	2900      	cmp	r1, #0
 8010042:	da4e      	bge.n	80100e2 <floor+0xd2>
 8010044:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010048:	4318      	orrs	r0, r3
 801004a:	d001      	beq.n	8010050 <floor+0x40>
 801004c:	4928      	ldr	r1, [pc, #160]	; (80100f0 <floor+0xe0>)
 801004e:	2000      	movs	r0, #0
 8010050:	460b      	mov	r3, r1
 8010052:	4602      	mov	r2, r0
 8010054:	ec43 2b10 	vmov	d0, r2, r3
 8010058:	e020      	b.n	801009c <floor+0x8c>
 801005a:	4a26      	ldr	r2, [pc, #152]	; (80100f4 <floor+0xe4>)
 801005c:	411a      	asrs	r2, r3
 801005e:	ea01 0402 	and.w	r4, r1, r2
 8010062:	4304      	orrs	r4, r0
 8010064:	d01a      	beq.n	801009c <floor+0x8c>
 8010066:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80100e8 <floor+0xd8>
 801006a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801006e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010076:	ddeb      	ble.n	8010050 <floor+0x40>
 8010078:	2900      	cmp	r1, #0
 801007a:	bfbe      	ittt	lt
 801007c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8010080:	fa40 f303 	asrlt.w	r3, r0, r3
 8010084:	18c9      	addlt	r1, r1, r3
 8010086:	ea21 0102 	bic.w	r1, r1, r2
 801008a:	2000      	movs	r0, #0
 801008c:	e7e0      	b.n	8010050 <floor+0x40>
 801008e:	2b33      	cmp	r3, #51	; 0x33
 8010090:	dd05      	ble.n	801009e <floor+0x8e>
 8010092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010096:	d101      	bne.n	801009c <floor+0x8c>
 8010098:	ee30 0b00 	vadd.f64	d0, d0, d0
 801009c:	bd30      	pop	{r4, r5, pc}
 801009e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80100a2:	f04f 32ff 	mov.w	r2, #4294967295
 80100a6:	40e2      	lsrs	r2, r4
 80100a8:	4202      	tst	r2, r0
 80100aa:	d0f7      	beq.n	801009c <floor+0x8c>
 80100ac:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80100e8 <floor+0xd8>
 80100b0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80100b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80100b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100bc:	ddc8      	ble.n	8010050 <floor+0x40>
 80100be:	2900      	cmp	r1, #0
 80100c0:	da02      	bge.n	80100c8 <floor+0xb8>
 80100c2:	2b14      	cmp	r3, #20
 80100c4:	d103      	bne.n	80100ce <floor+0xbe>
 80100c6:	3101      	adds	r1, #1
 80100c8:	ea20 0002 	bic.w	r0, r0, r2
 80100cc:	e7c0      	b.n	8010050 <floor+0x40>
 80100ce:	2401      	movs	r4, #1
 80100d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80100d4:	fa04 f303 	lsl.w	r3, r4, r3
 80100d8:	4418      	add	r0, r3
 80100da:	42a8      	cmp	r0, r5
 80100dc:	bf38      	it	cc
 80100de:	1909      	addcc	r1, r1, r4
 80100e0:	e7f2      	b.n	80100c8 <floor+0xb8>
 80100e2:	2000      	movs	r0, #0
 80100e4:	4601      	mov	r1, r0
 80100e6:	e7b3      	b.n	8010050 <floor+0x40>
 80100e8:	8800759c 	.word	0x8800759c
 80100ec:	7e37e43c 	.word	0x7e37e43c
 80100f0:	bff00000 	.word	0xbff00000
 80100f4:	000fffff 	.word	0x000fffff

080100f8 <atanf>:
 80100f8:	b538      	push	{r3, r4, r5, lr}
 80100fa:	ee10 5a10 	vmov	r5, s0
 80100fe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010102:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8010106:	eef0 7a40 	vmov.f32	s15, s0
 801010a:	db0f      	blt.n	801012c <atanf+0x34>
 801010c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010110:	dd04      	ble.n	801011c <atanf+0x24>
 8010112:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010116:	eeb0 0a67 	vmov.f32	s0, s15
 801011a:	bd38      	pop	{r3, r4, r5, pc}
 801011c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8010254 <atanf+0x15c>
 8010120:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8010258 <atanf+0x160>
 8010124:	2d00      	cmp	r5, #0
 8010126:	fe77 7a80 	vselgt.f32	s15, s15, s0
 801012a:	e7f4      	b.n	8010116 <atanf+0x1e>
 801012c:	4b4b      	ldr	r3, [pc, #300]	; (801025c <atanf+0x164>)
 801012e:	429c      	cmp	r4, r3
 8010130:	dc10      	bgt.n	8010154 <atanf+0x5c>
 8010132:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8010136:	da0a      	bge.n	801014e <atanf+0x56>
 8010138:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010260 <atanf+0x168>
 801013c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010140:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010144:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801014c:	dce3      	bgt.n	8010116 <atanf+0x1e>
 801014e:	f04f 33ff 	mov.w	r3, #4294967295
 8010152:	e013      	b.n	801017c <atanf+0x84>
 8010154:	f000 f8a4 	bl	80102a0 <fabsf>
 8010158:	4b42      	ldr	r3, [pc, #264]	; (8010264 <atanf+0x16c>)
 801015a:	429c      	cmp	r4, r3
 801015c:	dc4f      	bgt.n	80101fe <atanf+0x106>
 801015e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8010162:	429c      	cmp	r4, r3
 8010164:	dc41      	bgt.n	80101ea <atanf+0xf2>
 8010166:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801016a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801016e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010172:	2300      	movs	r3, #0
 8010174:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010178:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801017c:	1c5a      	adds	r2, r3, #1
 801017e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010182:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8010268 <atanf+0x170>
 8010186:	eddf 5a39 	vldr	s11, [pc, #228]	; 801026c <atanf+0x174>
 801018a:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8010270 <atanf+0x178>
 801018e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010192:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010196:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8010274 <atanf+0x17c>
 801019a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801019e:	eddf 5a36 	vldr	s11, [pc, #216]	; 8010278 <atanf+0x180>
 80101a2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80101a6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 801027c <atanf+0x184>
 80101aa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80101ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010280 <atanf+0x188>
 80101b2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80101b6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010284 <atanf+0x18c>
 80101ba:	eea6 5a87 	vfma.f32	s10, s13, s14
 80101be:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8010288 <atanf+0x190>
 80101c2:	eea5 7a26 	vfma.f32	s14, s10, s13
 80101c6:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801028c <atanf+0x194>
 80101ca:	eea7 5a26 	vfma.f32	s10, s14, s13
 80101ce:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8010290 <atanf+0x198>
 80101d2:	eea5 7a26 	vfma.f32	s14, s10, s13
 80101d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80101da:	eea5 7a86 	vfma.f32	s14, s11, s12
 80101de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80101e2:	d121      	bne.n	8010228 <atanf+0x130>
 80101e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80101e8:	e795      	b.n	8010116 <atanf+0x1e>
 80101ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80101ee:	ee30 7a67 	vsub.f32	s14, s0, s15
 80101f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80101f6:	2301      	movs	r3, #1
 80101f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80101fc:	e7be      	b.n	801017c <atanf+0x84>
 80101fe:	4b25      	ldr	r3, [pc, #148]	; (8010294 <atanf+0x19c>)
 8010200:	429c      	cmp	r4, r3
 8010202:	dc0b      	bgt.n	801021c <atanf+0x124>
 8010204:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801020c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010210:	2302      	movs	r3, #2
 8010212:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801021a:	e7af      	b.n	801017c <atanf+0x84>
 801021c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010220:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010224:	2303      	movs	r3, #3
 8010226:	e7a9      	b.n	801017c <atanf+0x84>
 8010228:	4a1b      	ldr	r2, [pc, #108]	; (8010298 <atanf+0x1a0>)
 801022a:	491c      	ldr	r1, [pc, #112]	; (801029c <atanf+0x1a4>)
 801022c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010230:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010234:	ed93 0a00 	vldr	s0, [r3]
 8010238:	ee37 7a40 	vsub.f32	s14, s14, s0
 801023c:	ed92 0a00 	vldr	s0, [r2]
 8010240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010244:	2d00      	cmp	r5, #0
 8010246:	ee70 7a67 	vsub.f32	s15, s0, s15
 801024a:	bfb8      	it	lt
 801024c:	eef1 7a67 	vneglt.f32	s15, s15
 8010250:	e761      	b.n	8010116 <atanf+0x1e>
 8010252:	bf00      	nop
 8010254:	3fc90fdb 	.word	0x3fc90fdb
 8010258:	bfc90fdb 	.word	0xbfc90fdb
 801025c:	3edfffff 	.word	0x3edfffff
 8010260:	7149f2ca 	.word	0x7149f2ca
 8010264:	3f97ffff 	.word	0x3f97ffff
 8010268:	3c8569d7 	.word	0x3c8569d7
 801026c:	3d4bda59 	.word	0x3d4bda59
 8010270:	bd6ef16b 	.word	0xbd6ef16b
 8010274:	3d886b35 	.word	0x3d886b35
 8010278:	3dba2e6e 	.word	0x3dba2e6e
 801027c:	3e124925 	.word	0x3e124925
 8010280:	3eaaaaab 	.word	0x3eaaaaab
 8010284:	bd15a221 	.word	0xbd15a221
 8010288:	bd9d8795 	.word	0xbd9d8795
 801028c:	bde38e38 	.word	0xbde38e38
 8010290:	be4ccccd 	.word	0xbe4ccccd
 8010294:	401bffff 	.word	0x401bffff
 8010298:	08011250 	.word	0x08011250
 801029c:	08011260 	.word	0x08011260

080102a0 <fabsf>:
 80102a0:	ee10 3a10 	vmov	r3, s0
 80102a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80102a8:	ee00 3a10 	vmov	s0, r3
 80102ac:	4770      	bx	lr

080102ae <sinf_poly>:
 80102ae:	07cb      	lsls	r3, r1, #31
 80102b0:	d412      	bmi.n	80102d8 <sinf_poly+0x2a>
 80102b2:	ee21 5b00 	vmul.f64	d5, d1, d0
 80102b6:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 80102ba:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 80102be:	eea6 7b01 	vfma.f64	d7, d6, d1
 80102c2:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 80102c6:	ee21 1b05 	vmul.f64	d1, d1, d5
 80102ca:	eea6 0b05 	vfma.f64	d0, d6, d5
 80102ce:	eea7 0b01 	vfma.f64	d0, d7, d1
 80102d2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80102d6:	4770      	bx	lr
 80102d8:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 80102dc:	ee21 5b01 	vmul.f64	d5, d1, d1
 80102e0:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 80102e4:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 80102e8:	eea1 7b06 	vfma.f64	d7, d1, d6
 80102ec:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 80102f0:	eea1 0b06 	vfma.f64	d0, d1, d6
 80102f4:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 80102f8:	ee21 1b05 	vmul.f64	d1, d1, d5
 80102fc:	eea5 0b06 	vfma.f64	d0, d5, d6
 8010300:	e7e5      	b.n	80102ce <sinf_poly+0x20>
 8010302:	0000      	movs	r0, r0
 8010304:	0000      	movs	r0, r0
	...

08010308 <sinf>:
 8010308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801030a:	ee10 4a10 	vmov	r4, s0
 801030e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8010312:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8010316:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801031a:	eef0 7a40 	vmov.f32	s15, s0
 801031e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8010322:	d218      	bcs.n	8010356 <sinf+0x4e>
 8010324:	ee26 1b06 	vmul.f64	d1, d6, d6
 8010328:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801032c:	d20a      	bcs.n	8010344 <sinf+0x3c>
 801032e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8010332:	d103      	bne.n	801033c <sinf+0x34>
 8010334:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8010338:	ed8d 1a01 	vstr	s2, [sp, #4]
 801033c:	eeb0 0a67 	vmov.f32	s0, s15
 8010340:	b003      	add	sp, #12
 8010342:	bd30      	pop	{r4, r5, pc}
 8010344:	483a      	ldr	r0, [pc, #232]	; (8010430 <sinf+0x128>)
 8010346:	eeb0 0b46 	vmov.f64	d0, d6
 801034a:	2100      	movs	r1, #0
 801034c:	b003      	add	sp, #12
 801034e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010352:	f7ff bfac 	b.w	80102ae <sinf_poly>
 8010356:	f240 422e 	movw	r2, #1070	; 0x42e
 801035a:	4293      	cmp	r3, r2
 801035c:	d824      	bhi.n	80103a8 <sinf+0xa0>
 801035e:	4b34      	ldr	r3, [pc, #208]	; (8010430 <sinf+0x128>)
 8010360:	ed93 7b08 	vldr	d7, [r3, #32]
 8010364:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010368:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801036c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8010370:	ee17 1a90 	vmov	r1, s15
 8010374:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8010378:	1609      	asrs	r1, r1, #24
 801037a:	ee07 1a90 	vmov	s15, r1
 801037e:	f001 0203 	and.w	r2, r1, #3
 8010382:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010386:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801038a:	ed92 0b00 	vldr	d0, [r2]
 801038e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8010392:	f011 0f02 	tst.w	r1, #2
 8010396:	eea5 6b47 	vfms.f64	d6, d5, d7
 801039a:	bf08      	it	eq
 801039c:	4618      	moveq	r0, r3
 801039e:	ee26 1b06 	vmul.f64	d1, d6, d6
 80103a2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80103a6:	e7d1      	b.n	801034c <sinf+0x44>
 80103a8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80103ac:	d237      	bcs.n	801041e <sinf+0x116>
 80103ae:	4a21      	ldr	r2, [pc, #132]	; (8010434 <sinf+0x12c>)
 80103b0:	f3c4 6183 	ubfx	r1, r4, #26, #4
 80103b4:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80103b8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80103bc:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 80103c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80103c4:	4083      	lsls	r3, r0
 80103c6:	6a28      	ldr	r0, [r5, #32]
 80103c8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80103cc:	fba3 1000 	umull	r1, r0, r3, r0
 80103d0:	6929      	ldr	r1, [r5, #16]
 80103d2:	435a      	muls	r2, r3
 80103d4:	fbe3 0201 	umlal	r0, r2, r3, r1
 80103d8:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 80103dc:	0f8d      	lsrs	r5, r1, #30
 80103de:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80103e2:	1a51      	subs	r1, r2, r1
 80103e4:	f7f0 f922 	bl	800062c <__aeabi_l2d>
 80103e8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80103ec:	4b10      	ldr	r3, [pc, #64]	; (8010430 <sinf+0x128>)
 80103ee:	f004 0203 	and.w	r2, r4, #3
 80103f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80103f6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8010428 <sinf+0x120>
 80103fa:	ed92 0b00 	vldr	d0, [r2]
 80103fe:	ec41 0b16 	vmov	d6, r0, r1
 8010402:	f014 0f02 	tst.w	r4, #2
 8010406:	ee26 7b07 	vmul.f64	d7, d6, d7
 801040a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801040e:	4629      	mov	r1, r5
 8010410:	bf08      	it	eq
 8010412:	4618      	moveq	r0, r3
 8010414:	ee27 1b07 	vmul.f64	d1, d7, d7
 8010418:	ee20 0b07 	vmul.f64	d0, d0, d7
 801041c:	e796      	b.n	801034c <sinf+0x44>
 801041e:	b003      	add	sp, #12
 8010420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010424:	f000 b813 	b.w	801044e <__math_invalidf>
 8010428:	54442d18 	.word	0x54442d18
 801042c:	3c1921fb 	.word	0x3c1921fb
 8010430:	080112d0 	.word	0x080112d0
 8010434:	08011270 	.word	0x08011270

08010438 <with_errnof>:
 8010438:	b513      	push	{r0, r1, r4, lr}
 801043a:	4604      	mov	r4, r0
 801043c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010440:	f7ff fc10 	bl	800fc64 <__errno>
 8010444:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010448:	6004      	str	r4, [r0, #0]
 801044a:	b002      	add	sp, #8
 801044c:	bd10      	pop	{r4, pc}

0801044e <__math_invalidf>:
 801044e:	eef0 7a40 	vmov.f32	s15, s0
 8010452:	ee30 7a40 	vsub.f32	s14, s0, s0
 8010456:	eef4 7a67 	vcmp.f32	s15, s15
 801045a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801045e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8010462:	d602      	bvs.n	801046a <__math_invalidf+0x1c>
 8010464:	2021      	movs	r0, #33	; 0x21
 8010466:	f7ff bfe7 	b.w	8010438 <with_errnof>
 801046a:	4770      	bx	lr

0801046c <_init>:
 801046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046e:	bf00      	nop
 8010470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010472:	bc08      	pop	{r3}
 8010474:	469e      	mov	lr, r3
 8010476:	4770      	bx	lr

08010478 <_fini>:
 8010478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801047a:	bf00      	nop
 801047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801047e:	bc08      	pop	{r3}
 8010480:	469e      	mov	lr, r3
 8010482:	4770      	bx	lr
